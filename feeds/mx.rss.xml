<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>mx's blog - mx</title><link>http://x-wei.github.io/</link><description></description><lastBuildDate>Thu, 30 Nov 2017 00:00:00 +0100</lastBuildDate><item><title>[Convolutional Neural Networks] week4. Special applications: Face recognition &amp; Neural style transfer</title><link>http://x-wei.github.io/Ng_DLMooc_c4wk4.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;p&gt;This week: two special application of ConvNet.  &lt;/p&gt;
&lt;h2 id="i-face-recognition"&gt;I-Face Recognition&lt;/h2&gt;
&lt;h3 id="what-is-face-recognition"&gt;What is face recognition&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Face verification &amp;amp; face recognition&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;verification: input = image and ID → output whether the image and ID are the same.  &lt;/li&gt;
&lt;li&gt;recognition: database = K persons, input = image → output = ID of the image among the K person or "not recognized …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 30 Nov 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-11-30:/Ng_DLMooc_c4wk4.html</guid><category>deep learning</category></item><item><title>[Convolutional Neural Networks] week3. Object detection</title><link>http://x-wei.github.io/Ng_DLMooc_c4wk3.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h3 id="object-localization"&gt;Object Localization&lt;/h3&gt;
&lt;p&gt;Classification VS. Localization VS. Detection&lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;classification with localization&lt;/strong&gt;&lt;br&gt;
Apart from softmax output (for classification), &lt;em&gt;add 4 more outputs of bounding box&lt;/em&gt;: &lt;code&gt;b_x, b_y, b_h, b_w&lt;/code&gt;.&lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image002.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Defining target label y in localization&lt;/strong&gt;&lt;br&gt;
label format:&lt;br&gt;
&lt;code&gt;P_c&lt;/code&gt; indicating if there's any object&lt;br&gt;
bounding box: &lt;code&gt;b_x, b_y, b_h, b_w&lt;/code&gt;&lt;br&gt;
class proba …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 27 Nov 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-11-27:/Ng_DLMooc_c4wk3.html</guid><category>deep learning</category></item><item><title>[Convolutional Neural Networks] week2. Deep convolutional models: case studies</title><link>http://x-wei.github.io/Ng_DLMooc_c4wk2.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h2 id="i-case-studies"&gt;I-Case studies&lt;/h2&gt;
&lt;h3 id="why-look-at-case-studies"&gt;Why look at case studies?&lt;/h3&gt;
&lt;p&gt;Good way to get intuition of different component of CNN: case study &amp;amp; reading paper.&lt;br&gt;
&lt;strong&gt;Outline&lt;/strong&gt; &lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;classic networks:  &lt;ul&gt;
&lt;li&gt;LeNet-5  &lt;/li&gt;
&lt;li&gt;AlexNet  &lt;/li&gt;
&lt;li&gt;VGG  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ResNet (152-layer NN)  &lt;/li&gt;
&lt;li&gt;Inception  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="classic-networks"&gt;Classic Networks&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;LeNet-5&lt;/strong&gt;(1998)&lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image002.png"&gt;&lt;br&gt;
Goal: recognize hand-written digits.&lt;br&gt;
image → 2 CONV-MEANPOOL layers, all CONV are valid (without padding …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 22 Nov 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-11-22:/Ng_DLMooc_c4wk2.html</guid><category>deep learning</category></item><item><title>[Convolutional Neural Networks] week1. Foundations of Convolutional Neural Networks</title><link>http://x-wei.github.io/Ng_DLMooc_c4wk1.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h3 id="computer-vision"&gt;Computer Vision&lt;/h3&gt;
&lt;p&gt;CV with DL: rapid progress in past two years.  &lt;/p&gt;
&lt;p&gt;CV problems:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;image classification  &lt;/li&gt;
&lt;li&gt;object detection: bounding box of objects  &lt;/li&gt;
&lt;li&gt;neural style transfer  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;input features could be very high dimension: e.g. 1000x1000 image → 3 million dim input ⇒ if 1st layer has 1000 hidden units → &lt;em&gt;3 billion params …&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-11-19:/Ng_DLMooc_c4wk1.html</guid><category>deep learning</category></item><item><title>[Structuring Machine Learning Projects] week2. ML Strategy (2)</title><link>http://x-wei.github.io/Ng_DLMooc_c3wk2.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h2 id="i-error-analysis"&gt;I-Error Analysis&lt;/h2&gt;
&lt;h3 id="carrying-out-error-analysis"&gt;Carrying out error analysis&lt;/h3&gt;
&lt;p&gt;"&lt;strong&gt;Error analysis&lt;/strong&gt;": manually examine the mistakes → get insight of what's next.  &lt;/p&gt;
&lt;p&gt;"&lt;em&gt;ceiling on performance&lt;/em&gt;"  &lt;/p&gt;
&lt;p&gt;example:&lt;br&gt;
cat classification, found some false-positives of dog pictures. → should you try to make ML system better on dog or not ?&lt;br&gt;
→ error analysis:  &lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get ~100 false positive examples  &lt;/li&gt;
&lt;li&gt;count …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 17 Nov 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-11-17:/Ng_DLMooc_c3wk2.html</guid><category>deep learning</category></item><item><title>[Structuring Machine Learning Projects] week1. ML Strategy (1)</title><link>http://x-wei.github.io/Ng_DLMooc_c3wk1.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h2 id="i-introduction-to-ml-strategy"&gt;I-Introduction to ML Strategy&lt;/h2&gt;
&lt;h3 id="why-ml-strategy"&gt;Why ML Strategy&lt;/h3&gt;
&lt;p&gt;A lot of ideas of improving ML performance: &lt;em&gt;strategy on how to choose&lt;/em&gt;.&lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;→ how to figure out which ones to pursue and which ones to discard ?  &lt;/p&gt;
&lt;h3 id="orthogonalization"&gt;Orthogonalization&lt;/h3&gt;
&lt;p&gt;How to tune hyperparams &amp;amp; what to expect.  &lt;/p&gt;
&lt;p&gt;TV tuning example: each knob does only one …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 15 Nov 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-11-15:/Ng_DLMooc_c3wk1.html</guid><category>deep learning</category></item><item><title>[Improving Deep Neural Networks] week2. Optimization algorithms</title><link>http://x-wei.github.io/Ng_DLMooc_c2wk2.html</link><description>&lt;p&gt;[TOC]    &lt;/p&gt;
&lt;p&gt;This week: optimization algos to faster train NN, on large dataset.  &lt;/p&gt;
&lt;h2 id="mini-batch-gradient-descent"&gt;Mini-batch gradient descent&lt;/h2&gt;
&lt;h3 id="batch-vs-mini-batch-gd"&gt;batch v.s. mini-batch GD&lt;/h3&gt;
&lt;p&gt;Compute J on &lt;code&gt;m&lt;/code&gt; examples: vectorization, i.e. stacking x(i) y(i) horizontally.&lt;br&gt;
&lt;code&gt;X = [x(1), ..., x(m)]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Y = [y(1), ..., y(m)]&lt;/code&gt;&lt;br&gt;
→ still slow or impossible with large …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 23 Oct 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-10-23:/Ng_DLMooc_c2wk2.html</guid><category>deep learning</category></item><item><title>[Improving Deep Neural Networks] week3. Hyperparameter tuning, Batch Normalization and Programming Frameworks</title><link>http://x-wei.github.io/Ng_DLMooc_c2wk3.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h2 id="hyperparameter-parameters"&gt;Hyperparameter parameters&lt;/h2&gt;
&lt;p&gt;Tips for hyperparam-tuning.  &lt;/p&gt;
&lt;h3 id="tuning-process"&gt;Tuning process&lt;/h3&gt;
&lt;p&gt;Many hyperparams to tune, mark importance by colors (red &amp;gt; yellow &amp;gt; purple):&lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;How to select set of values to explore ?  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do &lt;strong&gt;NOT&lt;/strong&gt; use grid search (grid of n * n)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;— this was OK in pre-DL era.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;try random values.&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;reason: difficule to know which …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 23 Oct 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-10-23:/Ng_DLMooc_c2wk3.html</guid><category>deep learning</category></item><item><title>[Improving Deep Neural Networks] week1. Practical aspects of Deep Learning</title><link>http://x-wei.github.io/Ng_DLMooc_c2wk1.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h1 id="setting-up-your-maching-learning-application"&gt;Setting up your Maching Learning Application&lt;/h1&gt;
&lt;h2 id="train-dev-test-sets"&gt;Train / Dev / Test sets&lt;/h2&gt;
&lt;p&gt;Applied ML: highly iterative process. &lt;em&gt;idea-code-exp loop&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;splitting data&lt;/strong&gt;&lt;br&gt;
splitting data in order to speed up the idea-code-exp loop:  &lt;br&gt;
*training set / dev(hold-out/cross-validataion) set / test set *  &lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;split ratio&lt;/strong&gt;:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;with 100~10000 examples: 70/30 or 60/20/20 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 21 Oct 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-10-21:/Ng_DLMooc_c2wk1.html</guid><category>deep learning</category></item><item><title>[Neural Networks and Deep Learning] week4. Deep Neural Network</title><link>http://x-wei.github.io/Ng_DLMooc_c1wk4.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id="deep-l-layer-neural-network"&gt;Deep L-layer neural network&lt;/h2&gt;
&lt;p&gt;Layer counting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input layer is not counted as a layer, "layer 0"&lt;/li&gt;
&lt;li&gt;last layer (layer L, output layer) is counted.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;notation:
layer 0 = input layer
&lt;code&gt;L&lt;/code&gt; = number of layers
&lt;code&gt;n^[l]&lt;/code&gt; = size of layer l
&lt;code&gt;a^[l]&lt;/code&gt; = activation of layer l = &lt;code&gt;g[l]( z[l …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 28 Sep 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-09-28:/Ng_DLMooc_c1wk4.html</guid><category>deep learning</category></item><item><title>[Neural Networks and Deep Learning] week3. Shallow Neural Network</title><link>http://x-wei.github.io/Ng_DLMooc_c1wk3.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id="neural-networks-overview"&gt;Neural Networks Overview&lt;/h2&gt;
&lt;p&gt;new notation: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;superscript &lt;code&gt;[i]&lt;/code&gt; for quantities in layer i. (compared to superscript &lt;code&gt;(i)&lt;/code&gt; for ith training example).&lt;/li&gt;
&lt;li&gt;subscript &lt;code&gt;i&lt;/code&gt; for ith unit in a layer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="neural-network-representation"&gt;Neural Network Representation&lt;/h2&gt;
&lt;p&gt;notation: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a^[i]&lt;/code&gt;: activation at layer i.&lt;/li&gt;
&lt;li&gt;input layer: x, layer 0.&lt;/li&gt;
&lt;li&gt;hidden layer&lt;/li&gt;
&lt;li&gt;output layer: prediction (yhat …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 19 Sep 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-09-19:/Ng_DLMooc_c1wk3.html</guid><category>deep learning</category></item><item><title>[Neural Networks and Deep Learning] week2. Neural Networks Basics</title><link>http://x-wei.github.io/Ng_DLMooc_c1wk2.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;This week: &lt;strong&gt;logistic regression&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="binary-classification-notation"&gt;Binary Classification &amp;amp; notation&lt;/h2&gt;
&lt;p&gt;ex. cat classifier from image
image pixels: 64x64x3 
⇒ unroll(flatten) to a feature vector &lt;code&gt;x&lt;/code&gt; dim=64x64x3=12288:=&lt;code&gt;n&lt;/code&gt; (input dimension)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;notation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;superscript &lt;code&gt;(i)&lt;/code&gt; for ith example, e.g. &lt;code&gt;x^(i)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;superscript &lt;code&gt;[l]&lt;/code&gt; for lth layer, e.g. &lt;code&gt;w^[l]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt;: number …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 13 Sep 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-09-13:/Ng_DLMooc_c1wk2.html</guid><category>deep learning</category></item><item><title>[Neural Networks and Deep Learning] week1. Introduction to deep learning</title><link>http://x-wei.github.io/Ng_DLMooc_c1wk1.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id="what-is-a-neural-network"&gt;What is a neural network?&lt;/h2&gt;
&lt;p&gt;Example: housing price prediciton. &lt;/p&gt;
&lt;p&gt;Each neuron: ReLU function&lt;/p&gt;
&lt;p&gt;Stacking multiple layers of neurons: hidden layers are concepts more general than input layer — found automatically by NN.&lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk1/pasted_image.png"/&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h2 id="supervised-learning-with-neural-networks"&gt;Supervised Learning with Neural Networks&lt;/h2&gt;
&lt;p&gt;supervised learning: during training, always have output corresponding to input.&lt;/p&gt;
&lt;p&gt;Different NN types …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-09-11:/Ng_DLMooc_c1wk1.html</guid><category>deep learning</category></item><item><title>[Android Dev] 2.2 Preference</title><link>http://x-wei.github.io/andev_p2e2_pref.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;Save settings and configurations. &lt;/p&gt;
&lt;h2 id="data-persistance"&gt;Data Persistance&lt;/h2&gt;
&lt;p&gt;5 different ways of data persistance: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onSavedInstanceState()&lt;/code&gt;: store state of views in k-v pairs (Bundles), used when screen rotates / app killed by system, &lt;strong&gt;temperary.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SharedPreferences&lt;/code&gt;: save k-v pairs to a file, can save &lt;strong&gt;primitive types&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;SQLite database: complicated data types&lt;/li&gt;
&lt;li&gt;Internal / External Storage …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 12 Feb 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-02-12:/andev_p2e2_pref.html</guid><category>android</category></item><item><title>[Android Dev] 2.1 Lifecycles</title><link>http://x-wei.github.io/andev_p2e1_lifecycle.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;Android kills background apps !! &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p2e1_lifecycle/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;→ &lt;code&gt;onCreate()&lt;/code&gt; → &lt;strong&gt;Created&lt;/strong&gt; →&lt;code&gt;onStart()&lt;/code&gt; →  &lt;strong&gt;Visible(&lt;/strong&gt;can be seen on screen) → &lt;code&gt;onResume()&lt;/code&gt; → &lt;strong&gt;Active&lt;/strong&gt;(get focus, can interact with)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Active&lt;/strong&gt; → &lt;code&gt;onPause()&lt;/code&gt; → &lt;strong&gt;Paused&lt;/strong&gt;(lose focus — same thing as Visible?) → &lt;code&gt;onStop()&lt;/code&gt; → &lt;strong&gt;Stopped&lt;/strong&gt;(disappeared) → &lt;code&gt;onDestroy()&lt;/code&gt; → &lt;strong&gt;Destroyed&lt;/strong&gt;(lifecycle ends)&lt;/p&gt;
&lt;p&gt;when rotate screen, the function calling is: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;onPause --&amp;gt; onStop --&amp;gt; onDestroy --&amp;gt; onCreate --&amp;gt; onStart --&amp;gt; onResume …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 11 Feb 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-02-11:/andev_p2e1_lifecycle.html</guid><category>android</category></item><item><title>[Android Dev] 1.2 Connect to the Internet</title><link>http://x-wei.github.io/andev_p1e2_internet.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id="logging"&gt;logging&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://developer.android.com/reference/android/util/Log.html"&gt;https://developer.android.com/reference/android/util/Log.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 log levels: &lt;code&gt;error/warning/info/debug/verbose&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;error/warning/info are preserved in the release of app&lt;/li&gt;
&lt;li&gt;use class name as tag: &lt;code&gt;MyClass.class.getSimpleName()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e2_internet//pasted_image.png"/&gt;&lt;/p&gt;
&lt;h2 id="the-resources-folder"&gt;the Resources folder&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://developer.android.com/guide/topics/resources/providing-resources.html"&gt;https://developer.android.com/guide/topics/resources/providing-resources.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e2_internet//pasted_image001.png"/&gt;&lt;/p&gt;
&lt;h3 id="working-with-resvaluesstringsxml"&gt;working …&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 07 Feb 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-02-07:/andev_p1e2_internet.html</guid><category>android</category></item><item><title>[Android Dev] 1.3 RecyclerView</title><link>http://x-wei.github.io/andev_p1e3_recyclerview.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id="recycler-view-adaper-viewholder"&gt;Recycler View, Adaper, ViewHolder&lt;/h2&gt;
&lt;p&gt;rather than creating list items as we scroll, keep them in a queue (recycling bin)
→ when scrolling, the list items are &lt;em&gt;recycled and re-bind&lt;/em&gt; to new content. RecyclerView is better version of ListView. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adaper&lt;/strong&gt;: bind data from data source, and provide the RecyclerView with new …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 07 Feb 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-02-07:/andev_p1e3_recyclerview.html</guid><category>android</category></item><item><title>[Android Dev] 1.4 Intents</title><link>http://x-wei.github.io/andev_p1e4_intents.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;So far: single screen with a single activity. &lt;/p&gt;
&lt;p&gt;start activity from another activity: use &lt;code&gt;Intent&lt;/code&gt;s. &lt;/p&gt;
&lt;h2 id="explicit-intent-start-a-new-activity"&gt;Explicit intent: start a new activity&lt;/h2&gt;
&lt;p&gt;toy app: type some text, press button, and a new activity will appear with the typed words.&lt;/p&gt;
&lt;p&gt;create activity in android studio: new → activity&lt;/p&gt;
&lt;p&gt;call &lt;code&gt;startActivity&lt;/code&gt; with …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 07 Feb 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-02-07:/andev_p1e4_intents.html</guid><category>android</category></item><item><title>[Android Dev] 1.1 Create Project Sunshine</title><link>http://x-wei.github.io/andev_p1e1_basics.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="1-create-project-sunshine"&gt;1 create project sunshine&lt;/h1&gt;
&lt;p&gt;Created 星期一 06 二月 2017&lt;/p&gt;
&lt;h2 id="minsdk-vs-targetsdk"&gt;minSDK vs targetSDK&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;minSDK&lt;/code&gt; is the lowest SDK level that your app can run on. You can choose what level of devices to support. &lt;/p&gt;
&lt;p&gt;By comparison, the &lt;code&gt;targetSDK&lt;/code&gt; is NOT a high pass filter -- it’s used only to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 06 Feb 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2017-02-06:/andev_p1e1_basics.html</guid><category>android</category></item><item><title>Scala/OCaml初体验</title><link>http://x-wei.github.io/scala-ocaml-impression.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;p&gt;2016年的最后几小时, 随便写写关于Scala和OCaml的一些入门体验好了.   &lt;/p&gt;
&lt;p&gt;今年对FP语言特别感兴趣, 上了两门Scala的公开课(&lt;a href="https://www.coursera.org/learn/progfun1/home/welcome"&gt;here&lt;/a&gt; and &lt;a href="https://www.coursera.org/learn/progfun2/home/welcome"&gt;here&lt;/a&gt;)和一门OCaml的公开课(&lt;a href="https://www.fun-mooc.fr/courses/parisdiderot/56002S02/session02/info"&gt;here&lt;/a&gt;), 在博客中写了一系列的笔记, 课后作业也都认真做完了. 斗胆说这两门语言都算入门了吧... 这里就随便写一下使用这两门语言的感受, 想到哪里写到哪里...   &lt;/p&gt;
&lt;p&gt;FP语言和之前接触的语言确实不大一样, 比如之前我都有种错觉, 学什么语言只要知道循环/条件/基本类型运算怎么写, 就差不多可以上手了...... 然后遇到了FP, 发现循环语句其实是不必要的... 记得看到过一篇文章, 类比学FP就好像开了很多种车的老司机突然开始学开宇宙飞船, 肯定各种WTF不适应了~   &lt;/p&gt;
&lt;p&gt;以前谈到FP我只能联想到一些Python里的FP特性: lambda表达式, 高阶函数之类的, 顶多还想到个闭包... 不过Python里面的FP特性和Scala/OCaml里的比起来还是差了不少: i.e. 现在非常希望Python里可以支持pattern matching...   &lt;/p&gt;
&lt;h1 id="scala"&gt;Scala&lt;/h1&gt;
&lt;p&gt;Scala算是比较亲民的FP语言了(和Java有点像...), 也是我最早接触的FP语言. EPFL的那两门公开课质量很棒, 毕竟是Scala的作者亲自来上的...   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;immutable types&lt;/em&gt;: 习惯了就好, 就像java里所有东西都是final的, 要修改什么东西的时候改成新建一个, immutable数据的优点就是并行方便啊...   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;一切皆为表达式&lt;/em&gt;, specifically …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 31 Dec 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-12-31:/scala-ocaml-impression.html</guid><category>scala</category><category>OCaml</category></item><item><title>使用requests和lxml编写python爬虫小记</title><link>http://x-wei.github.io/python_crawler_requests_lxml.html</link><description>&lt;p&gt;[TOC]   &lt;/p&gt;
&lt;p&gt;前一段时间写了不少Python的爬虫程序, 为此还看了极客学院上的一些&lt;a href="http://ke.jikexueyuan.com/xilie/116"&gt;教程&lt;/a&gt;, 现在来简单总结一下. 主要介绍用&lt;code&gt;requests&lt;/code&gt; + &lt;code&gt;lxml&lt;/code&gt;的方式, &lt;code&gt;scrapy&lt;/code&gt;的话之前写过一篇介绍性的&lt;a href="http://x-wei.github.io/Scrapy%20%E4%B8%8A%E6%89%8B%E7%AC%94%E8%AE%B0.html"&gt;文章&lt;/a&gt;, 这里就不重复了. 而且感觉一般简单的爬虫项目, 一个Python文件就基本可以搞定, 没必要用scrapy建立一个工程文件夹搞那么正式...   &lt;/p&gt;
&lt;p&gt;安装需要的库(python2):   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install requests, lxml&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;然后在Python程序最开始导入:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="requestsji-chu-yong-fa"&gt;requests基础用法&lt;/h1&gt;
&lt;h3 id="zhua-qu-htmlnei-rong"&gt;抓取html内容&lt;/h3&gt;
&lt;p&gt;用requests获取目标网址的html代码非常简单, 只需要用&lt;code&gt;requests.get&lt;/code&gt;方法, 传入网址URL即可.   &lt;/p&gt;
&lt;p&gt;举个例子, 想要抓取&lt;a href="https://zh.wikiquote.org/wiki/Wikiquote:%E9%A6%96%E9%A1%B5"&gt;维基语录&lt;/a&gt;的HTML内容, 代码很简单:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;url = 'https://zh.wikiquote.org/zh-cn/阿爾伯特·愛因斯坦' …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 29 Dec 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-12-29:/python_crawler_requests_lxml.html</guid><category>python</category></item><item><title>[OCaml MOOC] week6: MODULES AND DATA ABSTRACTION</title><link>http://x-wei.github.io/ocamlMOOC_wk6_modules.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;p&gt;this week: programming-in-the-large using the module system of OCaml.  &lt;/p&gt;
&lt;h1 id="1-structuring-software-with-modules"&gt;1. STRUCTURING SOFTWARE WITH MODULES&lt;/h1&gt;
&lt;p&gt;in large project: mangage high number of definitions → abstractions built on top of other abstractions.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;layers of abstractions: hide information  &lt;/li&gt;
&lt;li&gt;divide program into components  &lt;/li&gt;
&lt;li&gt;identifiers organised to avoid naming conflicts  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="module-as-namespace"&gt;module as namespace&lt;/h3&gt;
&lt;p&gt;dot-notation: access …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 26 Nov 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-11-26:/ocamlMOOC_wk6_modules.html</guid><category>OCaml</category></item><item><title>[OCaml MOOC] week5: EXCEPTIONS, INPUT OUTPUT AND IMPERATIVE CONSTRUCTS</title><link>http://x-wei.github.io/ocamlMOOC_wk5_imperative.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h1 id="1-imperative-features-in-ocaml"&gt;1. IMPERATIVE FEATURES IN OCAML&lt;/h1&gt;
&lt;p&gt;functional language:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;immutable data structure  &lt;/li&gt;
&lt;li&gt;identifiers instead of variables  &lt;/li&gt;
&lt;li&gt;pure functions  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;but imperative features are useful:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exceptions to alter control flow  &lt;/li&gt;
&lt;li&gt;ops to consume input and output  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;mutable&lt;/em&gt; data structures  &lt;/li&gt;
&lt;li&gt;for and while loop for iterations  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="2-getting-and-handling-your-exceptions"&gt;2. GETTING AND HANDLING YOUR EXCEPTIONS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;exceptions in …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 23 Nov 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-11-23:/ocamlMOOC_wk5_imperative.html</guid><category>OCaml</category></item><item><title>[OCaml MOOC] week4: HIGHER ORDER FUNCTIONS</title><link>http://x-wei.github.io/ocamlMOOC_wk4_higher_order_fun.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h1 id="1-functional-expressions"&gt;1. FUNCTIONAL EXPRESSIONS&lt;/h1&gt;
&lt;p&gt;syntax for functional expr: &lt;code&gt;function some_identifier -&amp;gt; some_expr&lt;/code&gt;&lt;br&gt;
the type of the functional expr is &lt;code&gt;t1 -&amp;gt; t2&lt;/code&gt; where t1 is the type of some_identifier, t2 is type of some_expr  &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;ex.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;span class="c"&gt;(*annonymous function*)&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the previous way of defining function …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 22 Nov 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-11-22:/ocamlMOOC_wk4_higher_order_fun.html</guid><category>OCaml</category></item><item><title>[OCaml MOOC] week3: MORE ADVANCED DATA STRUCTURES</title><link>http://x-wei.github.io/ocamlMOOC_wk3_advanced_ds.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;p&gt;Last week, we only defined &lt;em&gt;flat data structures&lt;/em&gt; which are nice to aggregate values but quite limited when you try to structure values.   &lt;/p&gt;
&lt;p&gt;This week: &lt;strong&gt;algebraic datatypes&lt;/strong&gt;.  &lt;/p&gt;
&lt;h1 id="1-tagged-values"&gt;1. TAGGED VALUES&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk3_advanced_ds/pasted_image.png"&gt; &lt;/img&gt;&lt;/p&gt;
&lt;p&gt;⇒ change the return type to a type &lt;code&gt;query_result&lt;/code&gt;, which can be either of these:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an error  &lt;/li&gt;
&lt;li&gt;a new database …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 21 Nov 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-11-21:/ocamlMOOC_wk3_advanced_ds.html</guid><category>OCaml</category></item><item><title>[OCaml MOOC] week2: BASIC DATA STRUCTURES</title><link>http://x-wei.github.io/ocamlMOOC_wk2_basics_ds.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;p&gt;this week: structure code with types: tuples, records, arrays.   &lt;/p&gt;
&lt;h1 id="1-user-defined-types"&gt;1. USER-DEFINED TYPES&lt;/h1&gt;
&lt;h3 id="primary-use-of-types-document-your-code"&gt;primary use of types:  document your code&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk2_basics_ds/pasted_image.png"&gt; &lt;/img&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;type type_identifier = some_type&lt;/code&gt; to define a new type (&lt;code&gt;type_identifier&lt;/code&gt; is synonym/abbrevation of &lt;code&gt;some_type&lt;/code&gt;)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;type_identifier&lt;/code&gt; &lt;em&gt;must start with lowercase letter&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;already known types: &lt;code&gt;int, bool, string, char&lt;/code&gt; ...  &lt;/li&gt;
&lt;li&gt;use &lt;code&gt;:&lt;/code&gt; to …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 12 Nov 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-11-12:/ocamlMOOC_wk2_basics_ds.html</guid><category>OCaml</category></item><item><title>[Scala MOOC II] Lec4 - Timely Effects</title><link>http://x-wei.github.io/progfun2_lec4_var.html</link><description>&lt;p&gt;[TOC]    &lt;/p&gt;
&lt;p&gt;this week: discuss how to handle events in user-interface — MVC, functional reactive programming.  &lt;/p&gt;
&lt;h1 id="lecture-41-imperative-event-handling-the-observer-pattern"&gt;Lecture 4.1 - Imperative Event Handling: The Observer Pattern&lt;/h1&gt;
&lt;p&gt;Traditional way of handling events: &lt;em&gt;observer Pattern (MVC)&lt;/em&gt;. Used when views need to react to change in a model.  &lt;/p&gt;
&lt;p&gt;MVC: model-view-controller for user interface &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Views can announce …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 09 Nov 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-11-09:/progfun2_lec4_var.html</guid><category>scala</category></item><item><title>[Scala MOOC II] Lec 3: Functions and State</title><link>http://x-wei.github.io/progfun2_lec3_var.html</link><description>&lt;p&gt;[TOC]   &lt;/p&gt;
&lt;p&gt;This week: scala for imperative programming.   &lt;/p&gt;
&lt;h1 id="lecture-31-functions-and-state"&gt;Lecture 3.1 - Functions and State&lt;/h1&gt;
&lt;p&gt;So far: pure functional programming&lt;br&gt;
→ side-effect free: therefore &lt;em&gt;time doesn't matter&lt;/em&gt;. &lt;br&gt;
Any rewriting that terminates lead to the same solution. (Churcher-Rosser Th)&lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun2_lec3_var/pasted_image.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;Now: &lt;strong&gt;mutable states&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Stateful objects&lt;/em&gt;: objects can have state that change over time. (state is …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 31 Oct 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-10-31:/progfun2_lec3_var.html</guid><category>scala</category></item><item><title>[OCaml MOOC] week1: BASIC TYPES, DEFINITIONS AND FUNCTIONS</title><link>http://x-wei.github.io/ocamlMOOC_wk1_basics.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="1-basic-data-types-int-bool"&gt;1. BASIC DATA TYPES: int, bool&lt;/h1&gt;
&lt;p&gt;Rich type system and polymorphism in ocaml. Types are &lt;em&gt;infered&lt;/em&gt; not declared.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Basic types&lt;/strong&gt;: int, bool, float, string, char, ... &lt;/p&gt;
&lt;h3 id="int"&gt;int&lt;/h3&gt;
&lt;p&gt;value: $-2^{62}$ ~ $2^{62}-1$ on 64-bit machines.&lt;br&gt;
ops: &lt;code&gt;+, -, *, /, mod&lt;/code&gt; (reminder: &lt;code&gt;/&lt;/code&gt; is integer division) &lt;/br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2 …&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 23 Oct 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-10-23:/ocamlMOOC_wk1_basics.html</guid><category>OCaml</category></item><item><title>[Scala MOOC II] Lec2: Lazy Evaluation</title><link>http://x-wei.github.io/progfun2_lec2_lazyeval.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;h1 id="lecture-21-structural-induction-on-trees-optional"&gt;Lecture 2.1 - Structural Induction on Trees (optional)&lt;/h1&gt;
&lt;p&gt;Generalize the structural induction on list to general structures like trees.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To prove a property &lt;code&gt;P(t)&lt;/code&gt; for all trees &lt;code&gt;t&lt;/code&gt;: &lt;br&gt;
    * show for any leave l, &lt;code&gt;P(l)&lt;/code&gt; holds&lt;br&gt;
    * for each internal node &lt;code&gt;t&lt;/code&gt; with subtrees &lt;code&gt;s1...sn&lt;/code&gt;, show &lt;code&gt;P(s1 …&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 22 Oct 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-10-22:/progfun2_lec2_lazyeval.html</guid><category>scala</category></item><item><title>pelican3建立github博客&amp;主题配置</title><link>http://x-wei.github.io/pelican3_blog_and_theme.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;上次捣鼓pelican博客系统还是在2012年, 那时&lt;a href="https://farseerfc.me/"&gt;farseerfc&lt;/a&gt;学长就提供了无私的帮助, 当时非常兴奋写了这么一篇简单的&lt;a href="http://x-wei.github.io/pelican_github_blog.html"&gt;教程&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;这两天捣鼓了好久 终于把博客升级到了pelican3... &lt;/p&gt;
&lt;p&gt;新的pelican貌似希望使用者把写作的内容和生成的网页分成两个repo管理, 我嫌麻烦还是把它们都放在了一个repo下面: &lt;a href="https://github.com/X-Wei/x-wei.github.com"&gt;https://github.com/X-Wei/x-wei.github.com&lt;/a&gt; 这个repo包含了生成的网页以及我写作的内容(在pelican_dir目录下面).  &lt;/p&gt;
&lt;p&gt;换了超赞的新皮肤, 这个是&lt;a href="https://farseerfc.me/"&gt;farseerfc&lt;/a&gt;学长定制的bootstrap3&lt;a href="https://github.com/farseerfc/pelican-bootstrap3"&gt;主题&lt;/a&gt;, 非常精美. 学长的版本包含了繁简英日翻译以及导出pdf/png什么的按钮, 功能非常全, 不过直接拿来用不太合适, 比如我就不需要博客的日语版... 我实际是用的&lt;a href="http://silverchard.me/"&gt;silverchard&lt;/a&gt;对farseerfc学长主题的&lt;a href="https://github.com/SilverChard/material-bootstrap-pelican"&gt;修改版&lt;/a&gt;. 再稍微修改了一下配色什么的...  &lt;/p&gt;
&lt;p&gt;如果想要做一个类似的博客, 下面是一些步骤:  &lt;/p&gt;
&lt;h3 id="1-an-zhuang-ruan-jian"&gt;1. 安装软件&lt;/h3&gt;
&lt;p&gt;首先安装pelican3以及其他一些python module (另外个人建议新建一个virtualenv在里面搞):  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install pelican jinja2 py3babel babel beautifulsoup4 …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 12 Oct 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-10-12:/pelican3_blog_and_theme.html</guid><category>pelican</category></item><item><title>[learning torch] 6. optim (optimization tools)</title><link>http://x-wei.github.io/learn-torch-6-optim.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;ref: &lt;a href="http://rnduja.github.io/2015/10/26/deep_learning_with_torch_step_7_optim/"&gt;http://rnduja.github.io/2015/10/26/deep_learning_with_torch_step_7_optim/&lt;/a&gt; &lt;br&gt;
doc: &lt;a href="https://github.com/torch/optim/blob/master/doc/intro.md"&gt;https://github.com/torch/optim/blob/master/doc/intro.md&lt;/a&gt; &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;Before we implement the gd update step by defining a &lt;code&gt;gradientUpdate&lt;/code&gt; function and calling it in a loop.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;gradientUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;criterion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;learningRate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nx"&gt;local&lt;/span&gt; &lt;span class="nx"&gt;pred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;:&lt;span class="kt"&gt;forward …&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 10 Oct 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-10-10:/learn-torch-6-optim.html</guid><category>torch</category></item><item><title>[learning torch] 5. nngraph (another way to construct nn)</title><link>http://x-wei.github.io/learn-torch-5-nngraph.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;ref: &lt;a href="http://rnduja.github.io/2015/10/07/deep_learning_with_torch_step_4_nngraph/"&gt;http://rnduja.github.io/2015/10/07/deep_learning_with_torch_step_4_nngraph/&lt;/a&gt; &lt;br&gt;
doc: &lt;a href="https://github.com/torch/nngraph/"&gt;https://github.com/torch/nngraph/&lt;/a&gt; &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;The aim of this library is to provide users of nn package with tools to easily create complicated architectures.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;luarocks install nngraph&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;optionally can install &lt;code&gt;graphvis&lt;/code&gt; for graph visualization.  &lt;/p&gt;
&lt;p&gt;From previous posts, to build …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 08 Oct 2016 15:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-10-08:/learn-torch-5-nngraph.html</guid><category>torch</category></item><item><title>[learning torch] 4. Criterion (loss function)</title><link>http://x-wei.github.io/learn-torch-4-criterion.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;ref: &lt;a href="http://rnduja.github.io/2015/10/05/deep_learning_with_torch_step_3_nn_criterions/"&gt;http://rnduja.github.io/2015/10/05/deep_learning_with_torch_step_3_nn_criterions/&lt;/a&gt; &lt;br&gt;
doc: &lt;a href="https://github.com/torch/nn/blob/master/doc/criterion.md"&gt;https://github.com/torch/nn/blob/master/doc/criterion.md&lt;/a&gt; &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Criterion&lt;/code&gt;: abstract class, given input and target(true label), a &lt;code&gt;Criterion&lt;/code&gt; can compute the gradient according to a certain loss function.   &lt;/p&gt;
&lt;h2 id="criterion-class"&gt;Criterion class&lt;/h2&gt;
&lt;p&gt;important methods:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;forward(input, target)&lt;/code&gt;: compute …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 08 Oct 2016 14:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-10-08:/learn-torch-4-criterion.html</guid><category>torch</category></item><item><title>[learning torch] 3. Container (models)</title><link>http://x-wei.github.io/learn-torch-3-container.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;doc: &lt;a href="https://github.com/torch/nn/blob/master/doc/containers.md"&gt;https://github.com/torch/nn/blob/master/doc/containers.md&lt;/a&gt; &lt;br&gt;
ref: &lt;a href="http://rnduja.github.io/2015/10/04/deep_learning_with_torch_step_2_nn_containers/"&gt;http://rnduja.github.io/2015/10/04/deep_learning_with_torch_step_2_nn_containers/&lt;/a&gt; &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;Container, similarly to Module, is the abstract class defining the base methods inherited from concrete containers. &lt;em&gt;Container contains modules (layers)&lt;/em&gt;.  &lt;/p&gt;
&lt;h2 id="container-class"&gt;Container class&lt;/h2&gt;
&lt;p&gt;important methods:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add(module)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;get(index)&lt;/code&gt;: get …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 07 Oct 2016 20:20:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-10-07:/learn-torch-3-container.html</guid><category>torch</category></item><item><title>[learning torch] 2. Module (layers)</title><link>http://x-wei.github.io/learn-torch-2-module.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Module&lt;/code&gt; is an abstract class which defines fundamental methods necessary for a &lt;em&gt;Layer&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;doc: &lt;a href="https://github.com/torch/nn/blob/master/doc/module.md"&gt;https://github.com/torch/nn/blob/master/doc/module.md&lt;/a&gt; &lt;/p&gt;
&lt;h2 id="module-class"&gt;Module class&lt;/h2&gt;
&lt;p&gt;variables in &lt;code&gt;Module&lt;/code&gt;:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;output&lt;/code&gt;: Tensor, the ouput computed from last call of &lt;code&gt;forward(input)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;gradInput&lt;/code&gt;: Tensor, gradient wrt input of module, computed from …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 07 Oct 2016 19:40:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-10-07:/learn-torch-2-module.html</guid><category>torch</category></item><item><title>[learning torch] 1. Tensor</title><link>http://x-wei.github.io/learn-torch-1-tensor.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;Tensor&lt;/code&gt; is the fondamental data type in torch, (similar to numpy for tensorflow), it's a potentially multi-dimensional matrix. &lt;/p&gt;
&lt;p&gt;See doc: &lt;a href="https://github.com/torch/torch7/blob/master/doc/tensor.md"&gt;https://github.com/torch/torch7/blob/master/doc/tensor.md&lt;/a&gt; &lt;/p&gt;
&lt;h2 id="basic-ops"&gt;basic ops&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Indicate shape in constructor: &lt;/p&gt;
&lt;p&gt;th&amp;gt; x = torch.Tensor(3,4) 
                                                                      [0.0000s] 
th&amp;gt; x 
 3.7366e …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 07 Oct 2016 15:30:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-10-07:/learn-torch-1-tensor.html</guid><category>torch</category></item><item><title>[OCaml MOOC] week0: intro and overview</title><link>http://x-wei.github.io/ocamlMOOC_wk0_intro.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="intro"&gt;Intro&lt;/h1&gt;
&lt;h3 id="ml-lang-family"&gt;ML lang family&lt;/h3&gt;
&lt;p&gt;statically strongly typed languages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fisrt-class functions&lt;/li&gt;
&lt;li&gt;type inference &lt;/li&gt;
&lt;li&gt;pattern matching&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="highlights-of-ocaml"&gt;highlights of ocaml&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;safty: static typing, pattern matching&lt;/li&gt;
&lt;li&gt;efficiency: high performance&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;expressiveness: functional+type inference+polymorphism&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;package manager: opam&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;debugger&lt;/li&gt;
&lt;li&gt;profiler&lt;/li&gt;
&lt;li&gt;REPL: "toplevel"&lt;/li&gt;
&lt;li&gt;bytecode compiler: ccamlc&lt;/li&gt;
&lt;li&gt;native compiler: ocamlopt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;programming environment &lt;strong&gt;fully online:&lt;/strong&gt;
&lt;a href="https://try.ocamlpro.com/fun-demo/tryocaml_index.html"&gt;https://try …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 04 Oct 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-10-04:/ocamlMOOC_wk0_intro.html</guid><category>OCaml</category></item><item><title>[Scala MOOC II] Lec1: For Expressions and Monads</title><link>http://x-wei.github.io/progfun2_lec1_forexpr.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;h1 id="recap-functions-and-pattern-matching"&gt;Recap: Functions and Pattern Matching&lt;/h1&gt;
&lt;h3 id="case-classes"&gt;case classes&lt;/h3&gt;
&lt;p&gt;ex: json
json objects can be seq, num, str, bool,...&lt;/p&gt;
&lt;p&gt;⇒ represented as abstract class and case classes. &lt;/p&gt;
&lt;h3 id="pattern-matching"&gt;pattern matching&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec1_forexpr/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;→ question: what is the type of the &lt;code&gt;{case(key, value)=&amp;gt;"..."}&lt;/code&gt; clause? &lt;/p&gt;
&lt;p&gt;it is &lt;code&gt;(JBinding =&amp;gt; String)&lt;/code&gt; type, which is a shorthand for &lt;code&gt;Function1[JBinding …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 12 Aug 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-08-12:/progfun2_lec1_forexpr.html</guid><category>scala</category></item><item><title>[Scala MOOC I] Lec6: Collections</title><link>http://x-wei.github.io/progfun1_lec6_collections.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="61-other-collections"&gt;6.1 - Other Collections&lt;/h1&gt;
&lt;p&gt;so far: only seen List. → more (&lt;strong&gt;immutable&lt;/strong&gt;) collections. &lt;/p&gt;
&lt;h3 id="vector"&gt;vector&lt;/h3&gt;
&lt;p&gt;List:  is linear -- access to head is faster than middle or end element. 
Vector: better rand access performance. &lt;/p&gt;
&lt;p&gt;represented as very shallow trees(32-split at each node)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec6_collections/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Vector&lt;/code&gt; support similar operations as List (head, tail,map …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 30 Jul 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-07-30:/progfun1_lec6_collections.html</guid><category>scala</category></item><item><title>[Scala MOOC I] Lec5: Lists</title><link>http://x-wei.github.io/progfun1_lec5_lists.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="51-more-functions-on-lists"&gt;5.1 - More Functions on Lists&lt;/h1&gt;
&lt;p&gt;already known methods: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;xs.head&lt;/span&gt;
&lt;span class="code-line"&gt;xs.tail&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sublist and ele access: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xs.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs.last&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs.init&lt;/code&gt;: all elementh except last element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs.take(n)&lt;/code&gt;: sublist of first n elements&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs.drop(n)&lt;/code&gt;: the rest of list after taking first n elements&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 29 Jul 2016 21:30:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-07-29:/progfun1_lec5_lists.html</guid><category>scala</category></item><item><title>R语言从入门到放弃 (4). 统计回归</title><link>http://x-wei.github.io/Rnotes-4-regression.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;R里面的统计函数有很多, 这里只用线性模型&lt;code&gt;lm&lt;/code&gt;以及(一维)非参估计最常用的三个smoother: Nadaraya-Watson kernel(&lt;strong&gt;NW, &lt;/strong&gt;&lt;code&gt;ksmooth&lt;/code&gt;), Local Polynomial(&lt;strong&gt;LP, &lt;/strong&gt;&lt;code&gt;loess&lt;/code&gt;), Smoothing Spline(&lt;strong&gt;SS, &lt;/strong&gt;&lt;code&gt;smooth.spline&lt;/code&gt;). 用这三个smoother作为例子, 介绍R里面统计回归的一些用法. &lt;/p&gt;
&lt;p&gt;数据的形式是:　&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-4-regression/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;目标是估计函数m(). 例子使用R自带的&lt;code&gt;cars&lt;/code&gt;数据集, 它包含两列: 汽车速度speed和刹车距离dist. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; data(cars)&lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt; summary(cars)&lt;/span&gt;
&lt;span class="code-line"&gt;     speed           dist       &lt;/span&gt;
&lt;span class="code-line"&gt; Min.   : 4.0   Min.   :  2.00  &lt;/span&gt;
&lt;span class="code-line"&gt; 1st Qu.:12.0   1st Qu.: 26.00  &lt;/span&gt;
&lt;span class="code-line"&gt; Median …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 29 Jul 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-07-29:/Rnotes-4-regression.html</guid><category>R</category></item><item><title>R语言从入门到放弃 (3). 绘图</title><link>http://x-wei.github.io/Rnotes-3-plot.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;R关于绘图应该可以写很多, 不过这里只列举在compstat这门课里最经常用的几个函数. 关于R的绘图, 详细了解可以运行 &lt;code&gt;demo(graphics)&lt;/code&gt;或者 &lt;code&gt;example("plot")&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;R里面的绘图命令分为两类: 一类是"high-level"的"创建新图片"命令, 运行以后会新画一个图; 另一类则是"low-level"的命令, 不会创建新图片, 而只会在当前图片中修改添加(例如添加线条, 添加点等). 下面分别简单介绍, 最后再介绍其他一些绘图配置的命令. &lt;/p&gt;
&lt;h1 id="configurationsparameters"&gt;configurations/parameters&lt;/h1&gt;
&lt;p&gt;介绍一下常用的参数意义, 以及画图的配置. 详细文档见&lt;code&gt;?par&lt;/code&gt;. 这些参数可以放在绘图命令中. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;par(mfrow=c(1,2))&lt;/code&gt;: 这个命令是设定画图的布局, 把放置图片的区域分为一行两列, 第一个plot的图片在左边, 第二个在右边. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;col&lt;/code&gt;: 设定画图(线段/点)的颜色, 可以用数字(col=1 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 28 Jul 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-07-28:/Rnotes-3-plot.html</guid><category>R</category></item><item><title>R语言从入门到放弃 (2). 向量(列表)及函数</title><link>http://x-wei.github.io/Rnotes-2-seq_func.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;首先, R似乎默认所有的变量都为向量vector, 即使一个单独的数字也是长度为1的, 所以&lt;code&gt;1&lt;/code&gt;等价于&lt;code&gt;c(1)&lt;/code&gt;.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; a &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;a&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; a&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;a&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;"double"&lt;/span&gt; &lt;span class="c1"&gt;# means "double vector" (I think)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="fancy-indexing"&gt;fancy indexing&lt;/h2&gt;
&lt;p&gt;R的vector/list/matrix支持类似numpy(稍有不同)的fancy indexing, 以下是例子: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1 …&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 26 Jul 2016 23:48:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-07-26:/Rnotes-2-seq_func.html</guid><category>R</category></item><item><title>R语言从入门到放弃 (1). 基础</title><link>http://x-wei.github.io/Rnotes-1-basics.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;这个"从入门到放弃"系列是为了应付eth的&lt;a href="https://stat.ethz.ch/education/semesters/ss2016/CompStat"&gt;computational statistics&lt;/a&gt;这门课... 对R无爱... &lt;/p&gt;
&lt;h2 id="terminology"&gt;terminology&lt;/h2&gt;
&lt;p&gt;首先在stat里面有一些叫法和以前不太一样: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;predictor variable&lt;/code&gt;: 就是机器学习里面说的feature (Xi)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;design points&lt;/code&gt;: 是机器学习里的训练数据(X1...Xn)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;response variable&lt;/code&gt;: 要预测的变量(y)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rstudio"&gt;Rstudio&lt;/h2&gt;
&lt;p&gt;这个是用R编程的标配, 确实很方便, 不用可惜. 另外R markdown也不错, 可以边写markdown边运行代码, 建议编辑器窗口里新建rmd文件. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认有四个窗口:  编辑器, 变量, 命令行, 画图/帮助. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-1-basics/pasted_image.png"/&gt;&lt;/p&gt;
&lt;h2 id="kuai-jie-jian"&gt;快捷键&lt;/h2&gt;
&lt;p&gt;一些常用的快捷键: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alt+-&lt;/code&gt;: 用于输入赋值符号&lt;code&gt;&amp;lt;-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(编辑器窗口中) &lt;code&gt;ctrl+enter&lt;/code&gt;: (在console里)执行光标所在的行, 等同于按钮"run"&lt;/li&gt;
&lt;li&gt;(r markdown编辑器窗口中 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 26 Jul 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-07-26:/Rnotes-1-basics.html</guid><category>R</category></item><item><title>[Scala MOOC I] Lec4: Types and Pattern Matching</title><link>http://x-wei.github.io/progfun1_lec4_pattern_matching.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id="41-objects-everywhere"&gt;4.1 - Objects Everywhere&lt;/h2&gt;
&lt;p&gt;scala is &lt;em&gt;pure&lt;/em&gt; OO: every value is an obj, every operation is a method of obj.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;scala.Int&lt;/code&gt; &lt;code&gt;scala.Boolean&lt;/code&gt; maps to JVM standard primitive types.  &lt;/p&gt;
&lt;p&gt;Implement &lt;code&gt;Boolean&lt;/code&gt; withous primitive type in scala:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image.png"&gt; &lt;/img&gt;&lt;/p&gt;
&lt;p&gt;Then defin &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;true&lt;/code&gt; as objects, give implementation for &lt;code&gt;ifThenElse()&lt;/code&gt; funciton …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-07-17:/progfun1_lec4_pattern_matching.html</guid><category>scala</category></item><item><title>[Scala MOOC I] Lec3: Data and Abstraction</title><link>http://x-wei.github.io/progfun1_lec3_data_abstraction.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;This week, we'll cover traits, and we'll learn how to organize classes into hierarchies. We'll cover the hierarchy of standard Scala types, and see how to organize classes and traits into packages. Finally, we'll touch upon the different sorts of polymorphism in Scala. &lt;/p&gt;
&lt;h2 id="31-class-hierarchies"&gt;3.1 - Class Hierarchies&lt;/h2&gt;
&lt;h3 id="abstract-class"&gt;abstract class …&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 28 Jun 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-06-28:/progfun1_lec3_data_abstraction.html</guid><category>scala</category></item><item><title>[Scala MOOC I] Lec2: Higher Order Functions</title><link>http://x-wei.github.io/progfun1_lec2_highorder_func.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This week, we'll learn about functions as first-class values, and higher order functions. We'll also learn about Scala's syntax and how it's formally defined. Finally, we'll learn about methods, classes, and data abstraction through the design of a data structure for rational numbers. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="21-higher-order-functions"&gt;2.1 - Higher-Order Functions&lt;/h2&gt;
&lt;p&gt;higher order …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 23 Jun 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-06-23:/progfun1_lec2_highorder_func.html</guid><category>scala</category></item><item><title>[Scala MOOC I] Lec1: Functions &amp; Evaluation</title><link>http://x-wei.github.io/progfun1_lec1_fun_and_eval.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this week, we'll learn the difference between functional imperative programming. We step through the basics of Scala; covering expressions, evaluation, conditionals, functions, and recursion  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="11-programming-paradigms"&gt;1.1 - Programming Paradigms&lt;/h2&gt;
&lt;p&gt;imperative programming:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;modify mutable variables  &lt;/li&gt;
&lt;li&gt;using assignments  &lt;/li&gt;
&lt;li&gt;control structures: if-else, loops, break, continue, return, etc.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;~~~&amp;gt; Von Neumann computer:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image.png"&gt; &lt;/img&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;conceptualize data …&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 21 Jun 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-06-21:/progfun1_lec1_fun_and_eval.html</guid><category>scala</category></item><item><title>[Scala MOOC I] Lec0: Getting Started</title><link>http://x-wei.github.io/progfun1_lec0_setup.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Get up and running with Scala on your computer. Complete an example assignment to familiarize yourself with our unique way of submitting assignments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="tool-setup"&gt;Tool setup&lt;/h1&gt;
&lt;h3 id="intellij"&gt;IntelliJ&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;use worksheet as a better REPL&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="sbt"&gt;SBT&lt;/h3&gt;
&lt;p&gt;navigate to the directory of the assignment you are working on, then start &lt;code&gt;sbt&lt;/code&gt;. 
(when first …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 20 Jun 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-06-20:/progfun1_lec0_setup.html</guid><category>scala</category></item><item><title>(DeepLearning MOOC) Lesson 4: Deep Models for Text and Sequences</title><link>http://x-wei.github.io/dlMOOC_L4.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;problems with text:   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;often very rare word is important, e.g. &lt;em&gt;retinopathy&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;ambiguity: e.g. &lt;em&gt;cat&lt;/em&gt; and &lt;em&gt;kitty&lt;/em&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;→ need a lot of labeled data ⇒ not realistic. &lt;br&gt;
⇒ &lt;strong&gt;unsupervised learning&lt;/strong&gt; &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;similar words appear in similar context. &lt;br&gt;
embedding: map words to small vectors&lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image.png"&gt;&lt;br&gt;
measure the closeness by cosine distance: &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image003.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h2 id="word2vec"&gt;word2vec&lt;/h2&gt;
&lt;p&gt;initial: random …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 07 Jun 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-06-07:/dlMOOC_L4.html</guid><category>deep learning</category></item><item><title>(DeepLearning MOOC) Lesson 3: Convolutional Neural Networks</title><link>http://x-wei.github.io/dlMOOC_L3.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;statistical invariance → &lt;strong&gt;weight sharing&lt;/strong&gt;&lt;br&gt;
e.g. image colors, translation invariance...   &lt;/br&gt;&lt;/p&gt;
&lt;h2 id="convnet"&gt;convnet&lt;/h2&gt;
&lt;p&gt;is NNs that share their weights across space.   &lt;/p&gt;
&lt;p&gt;convolution: slide a small patch of NN over the image to produce a new "image"&lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L3/pasted_image.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;convnet forms a pyramid, each "stack of pincake" get larger depth and smaller area. &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L3/pasted_image001.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h2 id="convolutional-lingo"&gt;convolutional …&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 06 Jun 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-06-06:/dlMOOC_L3.html</guid><category>deep learning</category></item><item><title>(DeepLearning MOOC) Lesson 2: Deep Neural Networks</title><link>http://x-wei.github.io/dlMOOC_L2.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id="linear-models"&gt;Linear models&lt;/h2&gt;
&lt;p&gt;matrix multiplication: fast with GPU&lt;br&gt;
numerically stable&lt;br&gt;
cannot cocatenate linear units → equivalent to one big matrix...  &lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;⇒ add non-linear units in between   &lt;/p&gt;
&lt;h2 id="rectified-linear-units-relu"&gt;rectified linear units (RELU)&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L2/pasted_image.png"&gt; &lt;/img&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L2/pasted_image002.png"&gt; &lt;/img&gt;&lt;/p&gt;
&lt;p&gt;chain rule: efficient computationally&lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L2/pasted_image003.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L2/pasted_image004.png"&gt; &lt;/img&gt;&lt;/p&gt;
&lt;h2 id="back-propagation"&gt;back propagation&lt;/h2&gt;
&lt;p&gt;easy to compute the gradient as long as the function Y(X) is made of simple …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 05 Jun 2016 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-06-05:/dlMOOC_L2.html</guid><category>deep learning</category></item><item><title>(DeepLearning MOOC) Lesson 1: From Machine Learning to Deep Learning</title><link>http://x-wei.github.io/dlMOOC_L1.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;这是udacity上deeplearning的笔记, 做得非常粗糙, 而且这门课也只是介绍性质的... 
&lt;a href="https://www.udacity.com/course/deep-learning--ud730"&gt;https://www.udacity.com/course/deep-learning--ud730&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="softmax-function"&gt;Softmax function&lt;/h2&gt;
&lt;p&gt;socres &lt;code&gt;yi&lt;/code&gt; ⇒ probabilities &lt;code&gt;pi&lt;/code&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;property: &lt;strong&gt;smaller scores ⇒ less certain about result&lt;/strong&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;h2 id="onehot-encoding"&gt;Onehot encoding&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;h2 id="cross-entropy"&gt;Cross entropy&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;measure how well the probability vector &lt;/em&gt;&lt;code&gt;S&lt;/code&gt;&lt;em&gt; corresponds to the label vector &lt;/em&gt;&lt;code&gt;L&lt;/code&gt;&lt;em&gt;.&lt;/em&gt; 
⇒ cross entropy &lt;code&gt;D(S,L)&lt;/code&gt;&lt;em&gt;( D&amp;gt;=0, the smaller the …&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 05 Jun 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-06-05:/dlMOOC_L1.html</guid><category>deep learning</category></item><item><title>codejam常用(python)解题工具</title><link>http://x-wei.github.io/codejam-python-tools.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;总结一下用python撸codejam时常用的一些库, 并且给一些简单的例子. 发现用python撸codejam非常合适: codejam的时间要求不严格(4/8分钟), 而且程序只要本地运行. 正好可以使用python简洁的语法和丰富的函数库.    &lt;/p&gt;
&lt;h1 id="collections"&gt;collections&lt;/h1&gt;
&lt;p&gt;py自带的一些好用的数据结构...&lt;br&gt;
&lt;a href="https://docs.python.org/2/library/collections.html"&gt;https://docs.python.org/2/library/collections.html&lt;/a&gt; &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;from collections import Counter, deque, defaultdict&lt;/code&gt; &lt;/p&gt;
&lt;h1 id="itertools"&gt;itertools&lt;/h1&gt;
&lt;p&gt;主要是用来穷举的时候它里面一些函数很好用... &lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/2/library/itertools.html"&gt;https://docs.python.org/2/library/itertools.html&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'ABCD'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'EFG'&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b …&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 27 May 2016 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-05-27:/codejam-python-tools.html</guid><category>algorithm</category><category>codejam</category><category>python</category></item><item><title>codejam2015-round2-pbC 的三种解法</title><link>http://x-wei.github.io/codejam-2015-r2pbC.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;昨天做的一道codejam题目, 这个题目的三种解法都非常有代表性, 特此一记.    &lt;/p&gt;
&lt;p&gt;题目链接在这里:  &lt;br&gt;
&lt;a href="https://code.google.com/codejam/contest/8234486/dashboard#s=p2"&gt;https://code.google.com/codejam/contest/8234486/dashboard#s=p2&lt;/a&gt; &lt;/br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Elliot's parents speak French and English to him at home. He has heard a lot of words, but it isn't always clear to him which word comes from which language! Elliot knows one sentence that …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 27 May 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-05-27:/codejam-2015-r2pbC.html</guid><category>algorithm</category><category>codejam</category></item><item><title>在java程序里使用weka进行机器学习</title><link>http://x-wei.github.io/java-use-weka.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;之前一直用weka的GUI界面做机器学习的任务, 感觉这个软件虽然界面丑, 不过确实是快速开展机器学期的利器. 关于GUI的weka使用以后有时间再写. 今天这篇记录一下最近使用的java版本的weka.   &lt;/p&gt;
&lt;h1 id="1-include-jars-into-project"&gt;1. Include jars into project&lt;/h1&gt;
&lt;p&gt;weka官网的下载链接里选择linux版本的weka压缩包即可, 下载以后找到weka.jar文件, 在工程里将其include一下就可以使用了(btw, 现在开始放弃eclipse, 进入IDEA的怀抱了...).   &lt;/p&gt;
&lt;p&gt;weka的文档在解压缩的文件里有, 另外在线文档在: &lt;a href="http://weka.sourceforge.net/doc.stable-3-8/"&gt;http://weka.sourceforge.net/doc.stable-3-8/&lt;/a&gt; &lt;/p&gt;
&lt;h3 id="about-libsvm"&gt;about libsvm...&lt;/h3&gt;
&lt;p&gt;关于libsvm需要有一点特别指出. weka自带的算法里是不包含libsvm的 (有个类似的SMO, 不过还是libsvm久经考验啊...), 需要使用weka的package manager安装. 打开package manager是在weka主界面的菜单里: &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/java-use-weka/pasted_image002.png"&gt;&lt;br&gt;
在package manager里搜索到libsvm安装即可. 然后(linux下)在主目录可以看到有个wekafiles文件夹, &lt;code&gt;wekafiles/packages/LibSVM/&lt;/code&gt;目录下就是libsvm的内容.   &lt;/br&gt;&lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;需要指出的一点是, 要使用libsvm的话, &lt;a href="http://stackoverflow.com/questions/30821926/solved-weka-api-libsvm-classpath-not-found"&gt;需要同时引用两个jar文件&lt;/a&gt;, 而且都叫libsvm.jar …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 21 May 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-05-21:/java-use-weka.html</guid><category>ml</category><category>weka</category><category>java</category></item><item><title>[Algorithms II] Week 6-3 Intractability</title><link>http://x-wei.github.io/algoII_week6_3_intractability.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="1-introduction-to-intractability"&gt;1. Introduction to Intractability&lt;/h1&gt;
&lt;p&gt;recall model of computation: DFA &lt;br&gt;
a &lt;em&gt;univeral&lt;/em&gt; model of computation: turing machine  &lt;br&gt;
→ no more powerful model of computation.  &lt;br&gt;
Turing machine can compute any function that can be computed by a physically harnessable process of the natural world.    &lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;bottom line: turing machine is a simple and …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 23 Feb 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-02-23:/algoII_week6_3_intractability.html</guid><category>algorithm</category></item><item><title>[Algorithms II] Week 6-2 Linear Programming</title><link>http://x-wei.github.io/algoII_week6_2_LP.html</link><description>&lt;p&gt;[TOC]   &lt;/p&gt;
&lt;p&gt;simplex algo: top 10 algo of the 20th century (ever?).   &lt;/p&gt;
&lt;p&gt;what is linear programming:  &lt;br&gt;
&lt;em&gt;a general problem-solving model&lt;/em&gt; that works for:  &lt;br&gt;
shortest-path, maxflow, MST, matching, assignment, ...   &lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image.png"&gt; &lt;/img&gt;&lt;/p&gt;
&lt;h1 id="1-brewer-s-problem"&gt;1. Brewer-'s Problem&lt;/h1&gt;
&lt;p&gt;toy example: choose products to maximize profit.  &lt;br&gt;
... &lt;br&gt;
&lt;em&gt;feasible region&lt;/em&gt;: a convex polygon.  &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image002.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;⇒ optimum solution appears at an extreme point.    &lt;/p&gt;
&lt;p&gt;standard …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 21 Feb 2016 17:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-02-21:/algoII_week6_2_LP.html</guid><category>algorithm</category></item><item><title>[python进阶课程] 面向对象编程</title><link>http://x-wei.github.io/imooc_py_oop.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.imooc.com/learn/317"&gt;http://www.imooc.com/learn/317&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="mo-kuai-he-bao"&gt;模块和包&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;包&lt;/strong&gt;: 文件夹 (可以有多级), 且包含&lt;code&gt;__init__.py&lt;/code&gt;文件(每层都要有) 
&lt;strong&gt;模块&lt;/strong&gt;: py文件&lt;/p&gt;
&lt;p&gt;代码分开放在多个py文件(&lt;strong&gt;模块&lt;/strong&gt;名=文件名). 同名变量互不影响. &lt;/p&gt;
&lt;p&gt;模块名冲突: 把同名模块放在不同&lt;strong&gt;包&lt;/strong&gt;中. &lt;/p&gt;
&lt;h3 id="dao-ru-mo-kuai"&gt;导入模块&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引用时: 使用完整的路径(包+模块名). ex. &lt;code&gt;p1.util.f()&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="dong-tai-dao-ru-mo-kuai"&gt;动态导入模块&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cStringIO …&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 19 Feb 2016 14:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-02-19:/imooc_py_oop.html</guid><category>python</category></item><item><title>[Algorithms II] Week 6-1 Reductions</title><link>http://x-wei.github.io/algoII_week6_1_reductions.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;p&gt;Goal: classify problems according to computational requirements. &lt;br&gt;
bad new: for huge number of pbs we don't know...  &lt;/br&gt;&lt;/p&gt;
&lt;h1 id="1-introduction-to-reductions"&gt;1. Introduction to Reductions&lt;/h1&gt;
&lt;p&gt;shifing gears:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from individual problems to problem-solving models.   &lt;/li&gt;
&lt;li&gt;from linear/quard to polynomial/exponential pbs  &lt;/li&gt;
&lt;li&gt;from implementation details to conceptual framwork  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;suppose we could (not) solve pb X …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 19 Feb 2016 09:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-02-19:/algoII_week6_1_reductions.html</guid><category>algorithm</category></item><item><title>[python进阶课程] 函数式编程</title><link>http://x-wei.github.io/imooc_py_functional.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.imooc.com/learn/317"&gt;http://www.imooc.com/learn/317&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;函数式编程: 更抽象, 更脱离指令(计算机), 更贴近计算(数学).   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需要变量 (python允许有变量, 所以python非纯函数式)  &lt;/li&gt;
&lt;li&gt;高阶函数  &lt;/li&gt;
&lt;li&gt;闭包: 返回函数  &lt;/li&gt;
&lt;li&gt;匿名函数  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="gao-jie-han-shu"&gt;高阶函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;变量可以指向函数 &lt;code&gt;f=abs; f(-10)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;函数名: 就是指向函数的变量 &lt;code&gt;abs=len&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高阶函数: 接收函数作为参数的函数  &lt;/p&gt;
&lt;p&gt;def add(x,y,f): &lt;br&gt;
    return f(x)+f(y)&lt;br&gt;
add(-5, 9, abs)  &lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="map"&gt;map()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;map()&lt;/code&gt;是 Python …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 17 Feb 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-02-17:/imooc_py_functional.html</guid><category>python</category></item><item><title>C++ STL小结&amp;代码片段</title><link>http://x-wei.github.io/cpp-demo-snippets.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;总结了一下C++ STL里面用的比较频繁的一些代码片段. (地址: &lt;a href="https://github.com/X-Wei/cpp-demo-snippets/tree/master/STL"&gt;https://github.com/X-Wei/cpp-demo-snippets/tree/master/STL&lt;/a&gt;)&lt;br&gt;
cpp文档: &lt;a href="http://en.cppreference.com/w/cpp"&gt;http://en.cppreference.com/w/cpp&lt;/a&gt; &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;常用的library主要有: &lt;br&gt;
&lt;code&gt;&amp;lt;algorithm&amp;gt;, &amp;lt;vector&amp;gt;, &amp;lt;queue&amp;gt;, &amp;lt;set&amp;gt;, &amp;lt;map&amp;gt;, &amp;lt;cmath&amp;gt;&lt;/code&gt; &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;另外一个常见的cpp文件开头版本是:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;vector&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;algorithm&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;#define forloop(i,lo,hi) for(int i = (lo); i &amp;lt;= (hi); i++)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;#define rep …&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 09 Jan 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-01-09:/cpp-demo-snippets.html</guid><category>C++</category></item><item><title>[Algorithms II] Week 5-2 Data Compression</title><link>http://x-wei.github.io/algoII_week5_2.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h1 id="1-introduction-to-data-compression"&gt;1. Introduction to Data Compression&lt;/h1&gt;
&lt;p&gt;pb: reduce the size of a file, to save space/time for storing/transmitting. &lt;br&gt;
applications: generic file compression(gzip), multimedia (mp3), communication(skype).   &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;From binary data &lt;code&gt;B&lt;/code&gt;, ⇒ generate a compressed representation &lt;code&gt;C(B)&lt;/code&gt;. &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_2/pasted_image.png"&gt;&lt;br&gt;
&lt;strong&gt;lossless compression&lt;/strong&gt;: get exactly &lt;code&gt;B&lt;/code&gt; from &lt;code&gt;C(B)&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;compression ratio&lt;/strong&gt;: &lt;code&gt;|C …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 04 Jan 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2016-01-04:/algoII_week5_2.html</guid><category>algorithm</category></item><item><title>2015年终总结</title><link>http://x-wei.github.io/2015-summary.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="i-gong-zuo"&gt;I. 工作&lt;/h1&gt;
&lt;h3 id="xue-ye"&gt;学业&lt;/h3&gt;
&lt;p&gt;三月初结束了在X的最后几门考试, X的课从来都不简单, 但我真的很享受, 尤其是那些数学课. &lt;br&gt;
(不过刚考完就sb了: 陪伴我两年的杯子丢了...)   &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;Polytechnique, 从憧憬变成回忆. X的各种经历, 三天三夜也说不完.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/2015-summary/lancer%20de%20bicorne_X12.jpg"&gt; &lt;/img&gt;&lt;/p&gt;
&lt;p&gt;然后九月来到ETH, 课程很有意思, project比较多. 第一个学期说实话有点应付, 所以现在要好好复习备考...orz   &lt;/p&gt;
&lt;h3 id="shi-xi"&gt;实习&lt;/h3&gt;
&lt;p&gt;在MEC实习了五个月, 这里的工作环境真是宽松. 一宽松我有点担心没有什么进步, 不过后来看这一段时间我的进步还是很大的.&lt;br&gt;
实习期间做的是音乐分类工作, 实践了一些NLP的流程, 试用了不少算法, 以及读了一些paper...   &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;有幸和神童Aranud(X11 major)一起工作, 感叹智商不够, 只能努力来凑.   &lt;/p&gt;
&lt;p&gt;然后顺利通过了实习的答辩, 算是给X的三年划上了圆满的句号 — 到2017年remise再见了!   &lt;/p&gt;
&lt;h3 id="mian-shi"&gt;面试&lt;/h3&gt;
&lt;p&gt;这是最后三个月的主旋律, 今年算起来经历了好多面试:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AL: 三轮电面, 深感ML方面的知识不够扎实, 不过居然过了, 看来他们真的很缺人...  &lt;/li&gt;
&lt;li&gt;GG: 在充分的准备之后经历了两轮电面五轮现场, 拿下dream offer …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 31 Dec 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-12-31:/2015-summary.html</guid></item><item><title>[Algorithms II] Week 5-1 Regular Expressions</title><link>http://x-wei.github.io/algoII_week5_1.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h1 id="1-regular-expressions"&gt;1. Regular Expressions&lt;/h1&gt;
&lt;p&gt;pb: pattern matching. &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h3 id="regular-expression"&gt;regular expression&lt;/h3&gt;
&lt;p&gt;Is a notation to specify a set of strings. &lt;br&gt;
basic operations:   &lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;concatenation   &lt;/li&gt;
&lt;li&gt;or  &lt;/li&gt;
&lt;li&gt;closure: "0 or more appearances of chars"  &lt;/li&gt;
&lt;li&gt;parentheses  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image001.png"&gt;&lt;br&gt;
additional operations (&lt;em&gt;added for convinence&lt;/em&gt;):&lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image002.png"&gt;&lt;br&gt;
ex. &lt;code&gt;[A-C]+&lt;/code&gt; is equivalent to &lt;code&gt;(A|B|C)(A|B|C)*&lt;/code&gt;.  &lt;/br&gt;&lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;吐槽名句: &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image003.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h1 id="2-res-and-nfas_1"&gt;2. REs and …&lt;/h1&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 27 Dec 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-12-27:/algoII_week5_1.html</guid><category>algorithm</category></item><item><title>Priority Queue/Heap (优先队列/堆)小结</title><link>http://x-wei.github.io/heap-summary.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;今天简单介绍一下优先队列(priority queue, 以下简称PQ)这个数据结构的实现.  &lt;/p&gt;
&lt;p&gt;PQ又叫"堆"(heap), 但是可能优先队列这个名字更容易记忆它的用途: pq是一种队列, 不过不是先进先出(FIFO), 而是每次出队的元素永远是优先级最高的.   &lt;/p&gt;
&lt;h1 id="logical-structure-of-pq"&gt;logical structure of PQ&lt;/h1&gt;
&lt;p&gt;个人感觉"堆"这个名字大概源于PQ的(逻辑上的)形状吧: PQ是一种树(tree), 准确的说, 是一种二叉树(binary tree), 说得再准确一点, 它是一种&lt;strong&gt;完全二叉树(complete binary tree)&lt;/strong&gt;: 没错, PQ是一种满足某些条件的完全二叉树.   &lt;/p&gt;
&lt;p&gt;所谓的"完全二叉树", 要满足:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;除了最后一层, 所有层都排满(没有非空节点)  &lt;/li&gt;
&lt;li&gt;最后一层的所有非空节点都排在左边  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;一张图可以直观说明, 完全二叉树其实就是长得像这样:&lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/heap-summary/pasted_image.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;一个完全二叉树能被成为PQ的话, 要满足的条件就是:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于任何一个节点, 它的优先级都大于左右子节点的优先级 …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 09 Dec 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-12-09:/heap-summary.html</guid><category>algorithm</category></item><item><title>[Algorithms II] Week 4-2 Substring Search</title><link>http://x-wei.github.io/algoII_week4_2.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;h1 id="1-introduction-to-substring-search"&gt;1. Introduction to substring search&lt;/h1&gt;
&lt;p&gt;"most ingenious algorithm we've seen so far"&lt;br&gt;
&lt;strong&gt;pb. &lt;/strong&gt;having two strings, &lt;code&gt;pattern&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt;, len(pattern)=M &amp;lt;&amp;lt; len(text)=N, try to find pattern in text.   &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;ex. &lt;code&gt;indexOf&lt;/code&gt; method of String in java.   &lt;/p&gt;
&lt;h1 id="2-brute-force-substring-search"&gt;2. Brute-Force Substring Search&lt;/h1&gt;
&lt;p&gt;function signature: &lt;br&gt;
&lt;code&gt;public static int search(String …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 07 Dec 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-12-07:/algoII_week4_2.html</guid><category>algorithm</category></item><item><title>quick sort and more: 快速排序算法总结</title><link>http://x-wei.github.io/quick-sort-and-more.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;今天总结一下非常有用的快速排序(qsort)算法, 以及由此衍生的一些其他相关算法(Knuth shuffle, quick select, 3-way partition).   &lt;/p&gt;
&lt;p&gt;快速排序的算法可以用三句话描述:&lt;br&gt;
&lt;strong&gt;[Algo]&lt;/strong&gt; &lt;/br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;选择基准项(pivot element, 一般取第一个元素为pivot)  &lt;/li&gt;
&lt;li&gt;把数组里所有小于pivot的移动到pivot左边, 大于pivot的移动到右边 ⇒ 此时pivot已经位于最终排序时的正确位置  &lt;/li&gt;
&lt;li&gt;对pivot左右两个数组分别递归进行快速排序  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;由以上描述可见, qsort是一个递归算法, 我们可以把它的函数声明写成: &lt;code&gt;void qsort(int[] a, int lo, int hi)&lt;/code&gt;, 表示排序a[lo, hi]之间(闭区间)的所有元素.   &lt;/p&gt;
&lt;h2 id="quick-partition"&gt;quick partition&lt;/h2&gt;
&lt;p&gt;由上面描述可以见, qsort最关键的是第二步: 把数组元素以pivot分为两部分. 这个操作就是quick partition.   &lt;/p&gt;
&lt;p&gt;函数声明为: &lt;code&gt;int partition(int[] a …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 07 Dec 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-12-07:/quick-sort-and-more.html</guid><category>algorithm</category></item><item><title>[Algorithms II] Week 4-1 Tries</title><link>http://x-wei.github.io/algoII_week4_1.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;More efficient version of symbol-table where the keys are strings.   &lt;/p&gt;
&lt;h1 id="1-r-way-tries"&gt;1. R-way Tries&lt;/h1&gt;
&lt;p&gt;Two implementations of symbol tables that we've seen: &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_1/pasted_image.png"&gt;&lt;br&gt;
when keys are strings:&lt;br&gt;
(&lt;code&gt;L&lt;/code&gt;=string length, &lt;code&gt;N&lt;/code&gt;=number of strings, &lt;code&gt;R&lt;/code&gt;=radix)&lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_1/pasted_image001.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;for string keys ⇒ do better by avoiding examing the entire key.  &lt;/p&gt;
&lt;p&gt;goal: faster than hashtable …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 05 Dec 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-12-05:/algoII_week4_1.html</guid><category>algorithm</category></item><item><title>[Algorithms II] Week 3-2 Radix Sorts</title><link>http://x-wei.github.io/algoII_week3_2.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;This week: string sort.  &lt;/p&gt;
&lt;h1 id="1-strings-in-java"&gt;1. Strings in Java&lt;/h1&gt;
&lt;h3 id="char-data-type"&gt;char data type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;char in C&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;8-bit integer, 256 characters, 7-bit ASCII code  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;char in Java&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;16-bit Unicode&lt;/em&gt; &lt;/p&gt;
&lt;h3 id="string-data-type"&gt;String data type&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;String&lt;/code&gt;: &lt;em&gt;immutable&lt;/em&gt; sequence of characters&lt;br&gt;
operations: lengthe, ith char, substring, concatenate  &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;implementation: using a &lt;code&gt;char[]&lt;/code&gt;, maintain a &lt;code&gt;length&lt;/code&gt; and an …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 23 Nov 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-11-23:/algoII_week3_2.html</guid><category>algorithm</category></item><item><title>学术文章写作利器: TeXmacs介绍</title><link>http://x-wei.github.io/TeXmacs_intro.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;今天介绍一个论文写作的神器: TeXmacs !   &lt;/p&gt;
&lt;h1 id="0-why-texmacs"&gt;0. Why TeXmacs?&lt;/h1&gt;
&lt;p&gt;一说到"论文写作神器"一般大家首先想到的就是LaTeX, 确实LaTeX写出来的数学公式和文章的排版非常漂亮. 但是作为一个几年来用过LaTeX写过几次报告的小白用户, 说句实话我从来都没有喜欢上过LaTeX. 根本的原因大概是: LaTeX的语法是一种标记语言(markup language), 本质上是给机器看而不是给人看的—就像html源代码是为了给浏览器看而不是直接给人看的.   &lt;/p&gt;
&lt;h2 id="00-latexqiang-po-zheng-zi-ce"&gt;0.0 LaTeX强迫症自测&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;矩阵A的转置, 你用tex会怎么写?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;⇒ 如果你不能容忍直接写成&lt;code&gt;$A^T$&lt;/code&gt;, 而一定要写成类似&lt;code&gt;$\textbf{A}^\intercal$&lt;/code&gt;的话... 请直接忽略本文 &amp;amp; 继续用LaTeX, 好走不送...... &lt;br&gt;
(另: 强迫症可以去这里看到底怎么打转置: &lt;a href="http://tex.stackexchange.com/questions/30619/what-is-the-best-symbol-for-vector-matrix-transpose"&gt;http://tex.stackexchange.com/questions/30619/what-is-the-best-symbol-for-vector-matrix-transpose&lt;/a&gt;)  &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;如果你认为这样的细节不重要, 好好描述数学问题本身才最重要的话, 请继续阅读.  &lt;/p&gt;
&lt;h2 id="01-texmacsshi-shi-yao"&gt;0.1 TeXmacs是什么&lt;/h2&gt;
&lt;p&gt;简言之 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 22 Nov 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-11-22:/TeXmacs_intro.html</guid><category>tex</category><category>TeXmacs</category></item><item><title>[Algorithms II] Week 3-1 Maximum Flow</title><link>http://x-wei.github.io/algoII_week3_1.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="1-introduction-to-maxflow"&gt;1. Introduction to Maxflow&lt;/h1&gt;
&lt;h3 id="min-cut-pb"&gt;Min-cut pb&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;input: edge-weighted digraph G, each edge &lt;code&gt;e&lt;/code&gt; has weight(&lt;em&gt;"capacity"&lt;/em&gt;) &lt;code&gt;c[e]&lt;/code&gt;&amp;gt;=0, a &lt;em&gt;source vertex&lt;/em&gt; &lt;code&gt;s&lt;/code&gt;, a &lt;em&gt;target vertex&lt;/em&gt; &lt;code&gt;t&lt;/code&gt;.    &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;def&lt;/strong&gt;. an &lt;strong&gt;st-cut &lt;/strong&gt;&lt;code&gt;(A,B)&lt;/code&gt; is a partition of vertices into 2 disjoint sets A and B, with &lt;code&gt;s&lt;/code&gt; in set &lt;code&gt;A …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 17 Nov 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-11-17:/algoII_week3_1.html</guid><category>algorithm</category></item><item><title>[Algorithms II] Week 2-2 Shortest Paths</title><link>http://x-wei.github.io/algoII_week2_2.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="1-shortest-paths-apis"&gt;1. Shortest Paths APIs&lt;/h1&gt;
&lt;p&gt;context: &lt;em&gt;directe, weighted graphs&lt;/em&gt;.     &lt;/p&gt;
&lt;h3 id="shortest-path-variants"&gt;shortest path variants&lt;/h3&gt;
&lt;p&gt;in terms of vertices:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;source-sink: form one vertex to another   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;single source&lt;/strong&gt;: from one vertex to all others (considered in this lecture)   &lt;/li&gt;
&lt;li&gt;all pairs   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;constraints on edge weights:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nonnegative weights    &lt;/li&gt;
&lt;li&gt;arbitary weights   &lt;/li&gt;
&lt;li&gt;eculidean    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cycles:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no directed cycles   &lt;/li&gt;
&lt;li&gt;no …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 15 Nov 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-11-15:/algoII_week2_2.html</guid><category>algorithm</category></item><item><title>[Algorithms II] Week 2-1 Minimum Spanning Trees</title><link>http://x-wei.github.io/algoII_week2_1.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="1-introduction-to-msts"&gt;1. Introduction to MSTs&lt;/h1&gt;
&lt;p&gt;Given: undirected connecte graph &lt;code&gt;G&lt;/code&gt; with positive edge weights.  &lt;br&gt;
def. &lt;strong&gt;Spanning tree &lt;/strong&gt;&lt;code&gt;T&lt;/code&gt; &lt;br&gt;
is a subgraph of &lt;code&gt;G&lt;/code&gt;, that is both tree (&lt;em&gt;connected, acyclic&lt;/em&gt;) and spanning(&lt;em&gt;all vertices are included&lt;/em&gt;).  &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_1/pasted_image-0.png"&gt; &lt;br&gt;
⇒ Goal: find a spanning tree with minimum weight sum.   &lt;/br&gt;&lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h1 id="2-greedy-algorithm"&gt;2. Greedy Algorithm&lt;/h1&gt;
&lt;p&gt;assumptions for simplification …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 11 Nov 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-11-11:/algoII_week2_1.html</guid><category>algorithm</category></item><item><title>[Algorithms II] Week 1-2 Directed Graphs</title><link>http://x-wei.github.io/algoII_week1_2.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="1-intro-to-digraphs"&gt;1. Intro to digraphs&lt;/h1&gt;
&lt;p&gt;Has profound differences wrt undirected graphs.    &lt;/p&gt;
&lt;p&gt;def: digraph &lt;br&gt;
&lt;em&gt; edges: have directions &lt;br&gt;
&lt;/br&gt;&lt;/em&gt; vertex: distinguish indeg and outdeg   &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;digraph pbs:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path/shortest path   &lt;/li&gt;
&lt;li&gt;topological sort: Can you draw a digraph so that all edges point upwards?   &lt;/li&gt;
&lt;li&gt;strong connectivity: Is there a directed path between all pairs of …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 09 Nov 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-11-09:/algoII_week1_2.html</guid><category>algorithm</category></item><item><title>[Algorithms II] Week 1-1 Undirected Graphs</title><link>http://x-wei.github.io/algoII_week1_1.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="1-intro-to-graphs"&gt;1. Intro to graphs&lt;/h1&gt;
&lt;p&gt;Graph: vertices connected by edges.    &lt;/p&gt;
&lt;p&gt;terminology:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;:  sequence of vertices connected by edges   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cycle&lt;/strong&gt;: path with same starting and ending vertex   &lt;/li&gt;
&lt;li&gt;two vertices are &lt;strong&gt;connected&lt;/strong&gt;: if there is a path between     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex of graph problems:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path: or connectivity   &lt;/li&gt;
&lt;li&gt;shortest path   &lt;/li&gt;
&lt;li&gt;cycle   &lt;/li&gt;
&lt;li&gt;Euler tour (ouii..)   &lt;/li&gt;
&lt;li&gt;Hamilton …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 08 Nov 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-11-08:/algoII_week1_1.html</guid><category>algorithm</category></item><item><title>最短路径三剑客: Floyd, Dijkstra, Bellman</title><link>http://x-wei.github.io/shortest-path-summary.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;weighted graph的最短路径问题有三个非常有名的算法, 分别以三个大牛的名字命名, 今天用尽量简洁的篇幅一一介绍.    &lt;/p&gt;
&lt;p&gt;简单起见(这回只写伪代码好了), 对于图的定义如下:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node index = &lt;code&gt;{1,2,...,n}&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;e[u,v]&lt;/code&gt; = distance of edge(u,v); if (u,v) is not an edge, &lt;code&gt;e[u,v]=INF&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;令N=点的数量, M=边的数量   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ren-yi-liang-dian-zui-duan-lu-jing-floyd-warshall"&gt;任意两点最短路径: Floyd-Warshall&lt;/h1&gt;
&lt;p&gt;Floyd算法解决的问题是: 对于&lt;strong&gt;任意&lt;/strong&gt;两个节点&lt;code&gt;s&lt;/code&gt;(source)和&lt;code&gt;t&lt;/code&gt;(target), 求s到达t的最短路径.    &lt;/p&gt;
&lt;p&gt;Floyd算法的思想是动态规划:    &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;定义 …&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 18 Oct 2015 17:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-10-18:/shortest-path-summary.html</guid><category>algorithm</category></item><item><title>深度优先搜索(DFS)小结</title><link>http://x-wei.github.io/dfs-summary.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;今天总结一下也许是搜索问题里最重要的算法: DFS !    &lt;/p&gt;
&lt;p&gt;由于树可以看成是一个graph, 这里还是只写对于graph的DFS算法. Graph类的定义还是用每一个节点保存邻居信息:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;public class GraphNode{      &lt;/span&gt;
&lt;span class="code-line"&gt;    int val;      &lt;/span&gt;
&lt;span class="code-line"&gt;    List&amp;lt;GraphNode&amp;gt; neighbors;      &lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了防止重复, 仍然用一个HaseSet记录走过的节点:    &lt;/p&gt;
&lt;p&gt;&lt;code&gt;HasheSet&amp;lt;GraphNode&amp;gt; visited = new HasheSet&amp;lt;GraphNode&amp;gt;();&lt;/code&gt; &lt;/p&gt;
&lt;h2 id="recursive-dfs"&gt;Recursive DFS&lt;/h2&gt;
&lt;p&gt;首先写递归版本的DFS, DFS就是一条路走到底, 不撞南墙不回头, 所以递归写起来很自然: 每到一个节点, 标记其已经访问过了, 然后对于邻居里面没有访问的节点继续递归进行DFS.    &lt;/p&gt;
&lt;p&gt;递归的DFS代码非常简洁:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;public void DFS(GraphNode nd){      &lt;/span&gt;
&lt;span class="code-line"&gt;    System.out.println(nd.val);    &lt;/span&gt;
&lt;span class="code-line"&gt;    visited.add(nd);   &lt;/span&gt;
&lt;span class="code-line"&gt;    for(GraphNode next: nd.neighbors …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 18 Oct 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-10-18:/dfs-summary.html</guid><category>algorithm</category></item><item><title>Approximate Retrieval(2): simHash</title><link>http://x-wei.github.io/simhash.html</link><description>&lt;p&gt;除了上次介绍的&lt;a href="http://x-wei.github.io/minhash.html"&gt;minhash&lt;/a&gt;方法以外, 还有一种常见的hash方法, 叫做simHash. 这里做简要介绍.  &lt;br&gt;
这个hash函数的背景和上次一样, 还是考虑把文本抽象为ngram的集合:  &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/simhash/pasted_image.png"&gt; &lt;br&gt;
然后相似度依旧是Jaccard similarity:  &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/simhash/pasted_image001.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h2 id="simhash"&gt;simHash&lt;/h2&gt;
&lt;p&gt;simHash的方法听上去比minHash还要简单:    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对一个文档&lt;em&gt;d&lt;/em&gt;中的每一个term(ngram, shingle) &lt;em&gt;t&lt;/em&gt;, 计算其hashcode(比如用java内建的&lt;code&gt;Object.hashCode()&lt;/code&gt;函数) &lt;em&gt;hash(t)&lt;/em&gt;.    &lt;/li&gt;
&lt;li&gt;把d中所有term的&lt;em&gt;hash(t)&lt;/em&gt;合成为一个hashcode作为d的hashcode &lt;em&gt;simHash(d)&lt;/em&gt;: &lt;em&gt;simHash(d)&lt;/em&gt;的长度与&lt;em&gt;hash(t)&lt;/em&gt;相同, &lt;em&gt;simHash(d)&lt;/em&gt;的第k个bit的取值为所有&lt;em&gt;hash(t)&lt;/em&gt;第k个bit的&lt;strong&gt;众数&lt;/strong&gt;.    &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;写成数学表达式很吓人, 其实只不过不断在{0,1}和{-1 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 08 Oct 2015 17:30:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-10-08:/simhash.html</guid><category>ml</category></item><item><title>广度优先搜索(BFS)小结</title><link>http://x-wei.github.io/bfs-summary.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;今天总结一下广度优先搜索(BFS). BFS是树/图的遍历的常用算法之一, 对于没有边权重的图来说可以计算最短路径.  &lt;br&gt;
由于树的BFS只是图的BFS的一种特殊情况, 而且比较简单不需要visited标记, 这里只写一下图的BFS好了.  &lt;br&gt;
先定义一个Graph类, 这里在每一个节点保存邻居信息:    &lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;public class GraphNode{   &lt;/span&gt;
&lt;span class="code-line"&gt;    int val;   &lt;/span&gt;
&lt;span class="code-line"&gt;    List&amp;lt;GraphNode&amp;gt; neighbors;   &lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="bfs-for-treesgraphs"&gt;BFS for trees/graphs&lt;/h2&gt;
&lt;p&gt;图的遍历需要注意不走重复节点, 所以需要一个HashSet(名字叫visited)来保存哪些节点已经访问过了. 需要注意的是, &lt;em&gt;在把一个节点放进队列queue的时刻就要把它放进visited&lt;/em&gt;, 而不是在队列里取出来的时刻再放.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;public void BFS(GraphNode start){   &lt;/span&gt;
&lt;span class="code-line"&gt;    LinkedList&amp;lt;GraphNode&amp;gt; q = new LinkedList&amp;lt;GraphNode&amp;gt;();   &lt;/span&gt;
&lt;span class="code-line"&gt;    HasheSet&amp;lt;GraphNode&amp;gt; visited = new HasheSet&amp;lt;GraphNode&amp;gt;();   &lt;/span&gt;
&lt;span class="code-line"&gt;    q.push(start …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 08 Oct 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-10-08:/bfs-summary.html</guid><category>algorithm</category></item><item><title>Mindmap of algorithms &amp; data structures</title><link>http://x-wei.github.io/algo-ds-mindmap.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;Here is a mindmap of the common algorithms and data structures, it can give an overview of the algorithmic terms.    &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algo-ds-mindmap/Algo%20%26%20DS.png"&gt; &lt;/img&gt;&lt;/p&gt;
&lt;p&gt;I shall update its content later on. And maybe write some blog entries on some of the items.   &lt;/p&gt;
&lt;p&gt;This mindmap is drawn using &lt;a href="http://www.xmind.net/"&gt;xmind&lt;/a&gt;.   &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 05 Oct 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-10-05:/algo-ds-mindmap.html</guid><category>algorithm</category></item><item><title>minHash: 一种快速approximate retrieval方法</title><link>http://x-wei.github.io/minhash.html</link><description>&lt;p&gt;&lt;strong&gt;approximate retrieval&lt;/strong&gt;(相似搜索)这个问题之前实习的时候就经常遇到: 如何快速在大量数据中如何找出相近的数据.    &lt;/p&gt;
&lt;p&gt;问题描述: 假设有N个数据, 并且对于他们有一个相似度(或距离)的度量函数&lt;code&gt;sim(i,j)&lt;/code&gt;, 我们的问题就是如何快速找出所有N个点中相似度较大的i和j组合.    &lt;/p&gt;
&lt;p&gt;乍一看这个问题必须要对所有的(i,j)计算相似度, 但是N^2的复杂度在N太大的情况下是不能够忍受的.    &lt;/p&gt;
&lt;h2 id="kdtree"&gt;kdtree&lt;/h2&gt;
&lt;p&gt;之前在algo-note里面遇到过&lt;a href="http://x-wei.github.io/algoI_week5_2.html"&gt;kdtree&lt;/a&gt;, 用它可以使得寻找nearest neighbor的复杂度减少到logN. 但是这种情况对于维度低一点(比如二三维)的情况合适, 维度到了成千上万的时候并不是很好的选择, 所以这里不多讨论.    &lt;/p&gt;
&lt;h2 id="simhash"&gt;simhash&lt;/h2&gt;
&lt;p&gt;另一个思路是, 使用某个hash函数, 对于每一个数据计算一个哈希值. 这个hash函数要满足: &lt;strong&gt;当i和j的相似度很高的时候, hash(i)和hash(j)的值(很可能)相同.&lt;/strong&gt; 这次介绍的minHash就是这样的一种方法.    &lt;/p&gt;
&lt;h2 id="jaccard-similarity"&gt;Jaccard similarity&lt;/h2&gt;
&lt;p&gt;明确问题含义, 首先需要定义相似度. 这里主要考虑文本相似度的问题, 假设字典D有M个term …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 27 Sep 2015 11:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-09-27:/minhash.html</guid><category>ml</category></item><item><title>linux系统添加swap分区&amp;调整swapness</title><link>http://x-wei.github.io/linux-swap.html</link><description>&lt;p&gt;当年装mint 17.1的时候心想我的电脑有4GB内存怎么可能不够用, 于是果断没有分一个swap分区, 呵呵...   &lt;/p&gt;
&lt;p&gt;然后就看到chrome这几年来吃内存越来越严重, 导致我开多几个标签页再开eclipse的话电脑就很有可能直接卡死... 郁闷啊 ! 于是决定给系统增加一个swap分区. 之前给&lt;a href="http://thealternative.ch/index.php?view=linuxdays"&gt;thealternative&lt;/a&gt;写邮件询问这件事, Sandro Kalbermatter同学热情回复了我告诉我怎么做, 按照他说的果然成功了, 特此一记.    &lt;/p&gt;
&lt;h2 id="step1-jian-li-swapfen-qu"&gt;step1. 建立swap分区&lt;/h2&gt;
&lt;p&gt;首先, 用gparted调整磁盘分区, 缩小一个磁盘的大小, 然后用空出来的空间新建一个swap分区.    &lt;/p&gt;
&lt;p&gt;关于swap分区应该多大, 根据&lt;a href="http://www.linux.com/news/software/applications/8208-all-about-linux-swap-space"&gt;这个帖子&lt;/a&gt;, 大约是内存的2-3倍, 不过我只是分了和内存一样大的4G空间, 感觉这样应该够用了(吧).   &lt;/p&gt;
&lt;p&gt;我是把存放文件的500G分区缩小, 这个过程会比较慢, 大概二十多分钟以后才结束:  &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/linux-swap/pasted_image.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h2 id="step2-bian-ji-fstab"&gt;step2. 编辑fstab&lt;/h2&gt;
&lt;p&gt;建立好了swap分区以后, 打开终端, 输入&lt;code&gt;sudo blkid&lt;/code&gt;查看所有的磁盘分区.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ sudo blkid   &lt;/span&gt;
&lt;span class="code-line"&gt;/dev/sda1: &lt;span class="nv"&gt;LABEL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"FILES"&lt;/span&gt; &lt;span class="nv"&gt;UUID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ddefc0a7-30a1-42fb-a71a-0aebb55cb0b3"&lt;/span&gt; &lt;span class="nv"&gt;TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ext2 …&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 27 Sep 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-09-27:/linux-swap.html</guid><category>linux</category></item><item><title>lin-reg = max-likelihood: 贝叶斯视角看线性回归</title><link>http://x-wei.github.io/linreg-bayes.html</link><description>&lt;p&gt;几乎所有的ml课都是从线性回归讲起, ETH的课也不例外. 不过这次老师用了贝叶斯的视角讲这个问题, 自从高中接触丁老师讲的线性回归以来 第一次听到一个不同于最小二乘的解读, 感觉很有意思. 又想起来刘未鹏那篇非常棒的&lt;a href="http://mindhacks.cn/2008/09/21/the-magical-bayesian-method/"&gt;博客&lt;/a&gt;, 于是想记录一下.    &lt;/p&gt;
&lt;h2 id="notation"&gt;notation&lt;/h2&gt;
&lt;p&gt;首先有n个数据点:  &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image001.png"&gt; &lt;br&gt;
其中y是实数, 每个x有d个维度, 为了方便表示截距, 再给x加入一个始终等于1的维度:  &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image002.png"&gt; &lt;br&gt;
例子: y代表房价, x代表了房子的面积, 使用时间, 距离市中心的距离等因素.   &lt;/br&gt;&lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h2 id="least-square-viewpoint"&gt;least square viewpoint&lt;/h2&gt;
&lt;p&gt;在最小二乘的视角里, 线性回归是用一个x的线性函数拟合y:  &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image003.png"&gt; &lt;br&gt;
使得拟合结果和观测结果的误差尽量小.  &lt;br&gt;
不过这次不说最小二乘, 所以接下来不讨论这个思路...   &lt;/br&gt;&lt;/br&gt;&lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h2 id="assumptions-in-bayes-viewpoint"&gt;assumptions in Bayes viewpoint&lt;/h2&gt;
&lt;p&gt;在贝叶斯视角里, 我们假设: &lt;br&gt;
&lt;strong&gt;假设1. y = 某个x的线性函数 + 观测噪音&lt;/strong&gt; &lt;br&gt;
即:  &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image006.png"&gt; &lt;br&gt;
其中εi是一个&lt;em&gt;随机变量&lt;/em&gt;, 所以y也是一个随机变量.  &lt;br&gt;
另外再有一个比较强的假设: &lt;br&gt;
&lt;strong&gt;假设2.  ε服从centered高斯分布, iid.&lt;/strong&gt; &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image007.png"&gt; &lt;br&gt;
(btw, 对一个随机变量建模, 一般来说, 连续随机变量就用高斯 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 26 Sep 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-09-26:/linreg-bayes.html</guid><category>ml</category></item><item><title>numpy: list, array, matrix小结</title><link>http://x-wei.github.io/list_array_matrix.html</link><description>&lt;p&gt;python科学计算包的基础是numpy, 里面的array类型经常遇到. 一开始可能把这个array和python内建的列表(list)混淆, 这里简单总结一下列表(list), 多维数组(np.ndarray)和矩阵(np.matrix)的区别.    &lt;/p&gt;
&lt;h2 id="listlie-biao"&gt;list列表&lt;/h2&gt;
&lt;p&gt;列表属于python的三种基本集合类型之一, 其他两种是元组(tuple)和字典(dict). tuple和list区别主要在于是不是mutable的.    &lt;/p&gt;
&lt;p&gt;list和java里的数组不同之处在于, python的list可以包含任意类型的对象, 一个list里可以包含int, string或者其他任何对象, 另外list是可变长度的(list有&lt;code&gt;append&lt;/code&gt;, &lt;code&gt;extend&lt;/code&gt;和&lt;code&gt;pop&lt;/code&gt;等方法).   &lt;/p&gt;
&lt;p&gt;所以, python内建的所谓"列表"其实是功能很强大的数组, 类比一下可以说它对应于java里面的&lt;code&gt;ArrayList&amp;lt;Object&amp;gt;&lt;/code&gt; .    &lt;/p&gt;
&lt;h2 id="ndarrayduo-wei-shu-zu"&gt;ndarray多维数组&lt;/h2&gt;
&lt;p&gt;ndarray是numpy的基石, 其实它更像一个java里面的标准数组: 所有元素有一个相同数据类型(dtype), 不过大小不是固定的.    &lt;/p&gt;
&lt;p&gt;ndarray对于大计算量的性能非常好, 所以list要做运算的时候一定要先转为array(&lt;code&gt;np.array(_a_list_ …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 09 Sep 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-09-09:/list_array_matrix.html</guid><category>python</category></item><item><title>[Algorithms I] Week 6 Hash Tables</title><link>http://x-wei.github.io/algoI_week6.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Can we do better than BST if we do not need ordered operations ?&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;(No compare methods, use equals method)   &lt;/p&gt;
&lt;p&gt;Idea: save items in an array.  &lt;br&gt;
&lt;strong&gt;Hash function&lt;/strong&gt;: method for calclulating the array index of  a key.    &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;Issues:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;computing hash function   &lt;/li&gt;
&lt;li&gt;equality tests   &lt;/li&gt;
&lt;li&gt;collision resolution   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Classic space-time tradeoff.&lt;/em&gt; &lt;/p&gt;
&lt;h1 id="1-hash-functions"&gt;1. Hash …&lt;/h1&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 01 Sep 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-09-01:/algoI_week6.html</guid><category>algorithm</category></item><item><title>[Algorithms I] Week 5-2 Geometric Applications of BSTs</title><link>http://x-wei.github.io/algoI_week5_2.html</link><description>&lt;p&gt;[TOC]   &lt;/p&gt;
&lt;h1 id="1-1d-range-search"&gt;1. 1d Range Search&lt;/h1&gt;
&lt;p&gt;Goal: &lt;em&gt;intersections&lt;/em&gt; of geometric objects.  &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image.png"&gt; &lt;br&gt;
Solution: &lt;strong&gt;BST&lt;/strong&gt; &lt;/br&gt;&lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h2 id="1d-range-search"&gt;1d range search&lt;/h2&gt;
&lt;p&gt;operations required:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert   &lt;/li&gt;
&lt;li&gt;search   &lt;/li&gt;
&lt;li&gt;delete   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;range search&lt;/em&gt;: all keys between k1 and k2   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;range count&lt;/em&gt;: how many keys are between k1 and k2   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ find points on an interval  &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image001.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h2 id="implementation-by-bst"&gt;implementation by BST&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;range count&lt;/strong&gt; &lt;br&gt;
using the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 29 Aug 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-08-29:/algoI_week5_2.html</guid><category>algorithm</category></item><item><title>[Algorithms I] Week 5-1 Balanced Search Trees</title><link>http://x-wei.github.io/algoI_week5_1.html</link><description>&lt;p&gt;[TOC]   &lt;/p&gt;
&lt;p&gt;goal: lgN for insert/search/delete operations (not necessarily &lt;em&gt;binary&lt;/em&gt; trees..) &lt;br&gt;
3 algo: 2-3 tree, (left leaning) red-black tree, B-tree   &lt;/br&gt;&lt;/p&gt;
&lt;h1 id="1-2-3-search-trees"&gt;1. 2-3 Search Trees&lt;/h1&gt;
&lt;p&gt;def. &lt;strong&gt;2-3 tree&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allow 1 or 2 keys per node, &amp;amp; 2 or 3 children per node:    &lt;ul&gt;
&lt;li&gt;2-node: one key, 2 children (ordinary BST node)   &lt;/li&gt;
&lt;li&gt;3-node …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 26 Aug 2015 16:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-08-26:/algoI_week5_1.html</guid><category>algorithm</category></item><item><title>[Algorithms I] Week 4-2b Binary Search Trees</title><link>http://x-wei.github.io/algoI_week4_2b.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;(BST是锻炼递归代码的好题目)   &lt;/p&gt;
&lt;h1 id="1-binary-search-trees"&gt;1. Binary Search Trees&lt;/h1&gt;
&lt;p&gt;def. &lt;strong&gt;BST&lt;/strong&gt; &lt;br&gt;
A binary tree where each node has a key:  &lt;br&gt;
for every node, the key is larger than &lt;em&gt;all nodes in left&lt;/em&gt; subtree, smaller than &lt;em&gt;all nodes in right&lt;/em&gt; subtree.  &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_2b/pasted_image.png"&gt; &lt;br&gt;
Fields: key, val, left, right   &lt;/br&gt;&lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h2 id="implementation"&gt;Implementation&lt;/h2&gt;
&lt;p&gt;An inner class of BST nodes:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;private …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 26 Aug 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-08-26:/algoI_week4_2b.html</guid><category>algorithm</category></item><item><title>[Algorithms I] Week 4-2a Elementry Symbol Tables</title><link>http://x-wei.github.io/algoI_week4_2a.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="1-symbol-table-api"&gt;1. Symbol Table API&lt;/h1&gt;
&lt;p&gt;key-value pair abstraction    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;insert&lt;/strong&gt; a value with a key   &lt;/li&gt;
&lt;li&gt;given a key, &lt;strong&gt;search&lt;/strong&gt; for its value   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="association-array-abstraction"&gt;Association array abstraction&lt;/h2&gt;
&lt;p&gt;Associate a value to a key — generalized array: &lt;em&gt;a[key]=val&lt;/em&gt;.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;public class ST&amp;lt;Key, Value&amp;gt;{   &lt;/span&gt;
&lt;span class="code-line"&gt;    void put(Key k, Value v);//remove key if value …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 25 Aug 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-08-25:/algoI_week4_2a.html</guid><category>algorithm</category></item><item><title>[Algorithms I] Week 4-1 Priority Queue</title><link>http://x-wei.github.io/algoI_week4_1.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h1 id="1-api-and-elementary-implementations"&gt;1. API and elementary implementations&lt;/h1&gt;
&lt;p&gt;Collection: data struct for inserting and deleting items (ex. stack and queue).  &lt;br&gt;
Priority queue: a special kind of collection — remove &lt;em&gt;largest/smallest&lt;/em&gt; element.    &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;API:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;public class Max&amp;lt;Kye implements Comparable&amp;lt;Key&amp;gt;&amp;gt;{   &lt;/span&gt;
&lt;span class="code-line"&gt;    public MaxPQ();    &lt;/span&gt;
&lt;span class="code-line"&gt;    public void insert(Key k);   &lt;/span&gt;
&lt;span class="code-line"&gt;    public Key delMax();    &lt;/span&gt;
&lt;span class="code-line"&gt;    public boolean isEmpty …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 24 Aug 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-08-24:/algoI_week4_1.html</guid><category>algorithm</category></item><item><title>[Algorithms I] Week 3-2 Quicksort</title><link>http://x-wei.github.io/algoI_week3_2.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;(maybe best algorithm for sorting.)   &lt;/p&gt;
&lt;h1 id="1-quicksort"&gt;1. Quicksort&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Idea:&lt;/strong&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;shuffle the array     &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Partition&lt;/em&gt; the array into two subarrays to left and right of pivot  (*now pivot is &lt;strong&gt;*in its final position&lt;/strong&gt;)   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;no larger entry to the left of pivot   &lt;br&gt;
no smaller entry to the right of pivot     &lt;/br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sort each subarray …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 22 Aug 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-08-22:/algoI_week3_2.html</guid><category>algorithm</category></item><item><title>[Algorithms I] Week 3-1 Mergesort</title><link>http://x-wei.github.io/algoI_week3_1.html</link><description>&lt;p&gt;[TOC]   &lt;/p&gt;
&lt;p&gt;Two classical sorting algorithms: mergesort, quicksort.    &lt;/p&gt;
&lt;h1 id="1-mergesort"&gt;1. Mergesort&lt;/h1&gt;
&lt;p&gt;Divide and conquer: top 10 algorithms of the 20th century, invented by von Neumann.     &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Idea&lt;/strong&gt;:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;divide array into 2 halves   &lt;/li&gt;
&lt;li&gt;recursively sort each half   &lt;/li&gt;
&lt;li&gt;merge two sorted halves   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="implementation"&gt;Implementation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Merge&lt;/strong&gt;:  &lt;br&gt;
Goal: a[lo] to a[mid] and a[mid+1] to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 21 Aug 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-08-21:/algoI_week3_1.html</guid><category>algorithm</category></item><item><title>[Algorithms I] Week 2-2 Elementary Sorts</title><link>http://x-wei.github.io/algoI_week2_2.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="1-introduction"&gt;1. Introduction&lt;/h1&gt;
&lt;p&gt;rearanging array of size N into ascending order &lt;br&gt;
test client code: &lt;code&gt;Insertion.sort(a);&lt;/code&gt; &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;sort &lt;em&gt;any&lt;/em&gt; datatype &lt;/p&gt;
&lt;h3 id="callback"&gt;callback&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;callback = reference to executable code&lt;/em&gt; &lt;br&gt;
i.e. passing functions as argument to sort() method&lt;br&gt;
sort() function calls object's &lt;code&gt;compareTo()&lt;/code&gt; method  &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image.png"&gt; &lt;br&gt;
→ implement the &lt;code&gt;Comparable&lt;/code&gt; interface:    &lt;/br&gt;&lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    public class XX implements Comparable …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 18 Aug 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-08-18:/algoI_week2_2.html</guid><category>algorithm</category></item><item><title>[Algorithms I] Week 2-1 Stacks and Queues</title><link>http://x-wei.github.io/algoI_week2_1.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;fundamental data types: stacks and queues
operations: 
&lt;strong&gt;insert, remove, test empy, iterate,&lt;/strong&gt;...  &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_1/pasted_image.png"&gt; &lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;module programming: seperate interface and implementation&lt;/p&gt;
&lt;h1 id="1-stacks"&gt;1. Stacks&lt;/h1&gt;
&lt;p&gt;ex. a stack of strings&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;API: &lt;/p&gt;
&lt;p&gt;public interface StackoOfStrings{
    void push(String item);
    String pop();
    boolean isEmpty();
    //int size();
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="implementation-1-using-a-linkedlist"&gt;implementation 1: using a linkedlist&lt;/h3&gt;
&lt;p&gt;insert/remove from the top …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 09 Jul 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-07-09:/algoI_week2_1.html</guid><category>algorithm</category></item><item><title>[Algorithms I] Week1-Lab: Percolation</title><link>http://x-wei.github.io/algoI_week1_lab.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="model-problem"&gt;model &amp;amp; problem&lt;/h1&gt;
&lt;p&gt;(原文描述太啰嗦了)&lt;br&gt;
A system using an N-by-N grid of sites. &lt;br&gt;
→ Each site is either open or blocked. &lt;br&gt;
→ A &lt;strong&gt;full&lt;/strong&gt; site is an open site that can be connected to an open site in the top row via a chain of neighboring open sites. (这个full的定义有玄机 而且导致后面写程序时有个问题, 看论坛想了半天才想出来, 见后文.)&lt;br&gt;
→ We …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 07 Jul 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-07-07:/algoI_week1_lab.html</guid><category>algorithm</category></item><item><title>[Algorithms I] Week 1-2 Analysis of Algorithms</title><link>http://x-wei.github.io/algoI_week1_2.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="1-introduction"&gt;1. Introduction&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image.png"/&gt;&lt;/p&gt;
&lt;h1 id="2-observations"&gt;2. Observations&lt;/h1&gt;
&lt;p&gt;ex. &lt;strong&gt;3-SUM pb&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;given N distinct numbers, how many triples sum up to 0? (pb related to computatioal geogtry)&lt;/em&gt;&lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brute force method:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;for(int i=0;i&amp;lt;N;i++)&lt;/span&gt;
&lt;span class="code-line"&gt;    for(int j=i+1;j&amp;lt;N;j++)&lt;/span&gt;
&lt;span class="code-line"&gt;        for(int k=j+1;k&amp;lt;N;k …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 02 Jul 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-07-02:/algoI_week1_2.html</guid><category>algorithm</category></item><item><title>[Spark MOOC note] lab4. Predicting Movie Ratings</title><link>http://x-wei.github.io/sparkmooc_notelab4.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h1 id="part-0-preliminaries"&gt;Part 0: Preliminaries&lt;/h1&gt;
&lt;p&gt;Each line in the ratings dataset (&lt;em&gt;ratings.dat.gz&lt;/em&gt;) is formatted as: &lt;br&gt;
&lt;code&gt;UserID::MovieID::Rating::Timestamp&lt;/code&gt; ⇒ tuples of &lt;code&gt;(UserID, MovieID, Rating)&lt;/code&gt;in &lt;em&gt;ratingsRDD&lt;/em&gt; &lt;br&gt;
Each line in the movies (&lt;em&gt;movies.dat&lt;/em&gt;) dataset is formatted as: &lt;br&gt;
&lt;code&gt;MovieID::Title::Genres&lt;/code&gt; ⇒ tuples of &lt;code&gt;(MovieID, Title)&lt;/code&gt; in &lt;em&gt;ratingsRDD&lt;/em&gt; &lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;487650 ratings and …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 30 Jun 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-06-30:/sparkmooc_notelab4.html</guid><category>spark</category></item><item><title>[Algorithms I] Week 1-1 Union-Find</title><link>http://x-wei.github.io/algoI_week1_1.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id="1-dynamic-connectivity-pb"&gt;1. Dynamic Connectivity pb&lt;/h1&gt;
&lt;h3 id="pb-statement"&gt;pb statement&lt;/h3&gt;
&lt;p&gt;a set of N obj, &lt;em&gt;indexed by 0,1,...,N-1&lt;/em&gt;
⇒ 
&lt;em&gt; UNION: connect objects &lt;code&gt;void union(int p, int q)&lt;/code&gt;
&lt;/em&gt; FIND: is there a path connecting 2 obj?  &lt;code&gt;boolean connected(int p, int q)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ex: &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image.png"/&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;connect components&lt;/strong&gt;(联通分支): max set of obj that are …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 27 Jun 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-06-27:/algoI_week1_1.html</guid><category>algorithm</category></item><item><title>[Spark MOOC note] Lec8. Exploratory Data Analysis and Machine Learning</title><link>http://x-wei.github.io/sparkmooc_note_lec8.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h2 id="statistics-business-questions-and-learning-techniques"&gt;STATISTICS, BUSINESS QUESTIONS, AND LEARNING TECHNIQUES&lt;/h2&gt;
&lt;p&gt;2 different kinds of statistics: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;descriptive statistics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. median — describes data, &lt;em&gt;but cannot generalize beyong that&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inferential statistics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. &lt;em&gt;t-testing — inferences beyond the data&lt;/em&gt;
techniques leveraged for machine learning and prediction&lt;/p&gt;
&lt;p&gt;supervised learning (clf, reg), unsupervised learning (clustering, dim-reduction)
 → UL often used in …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 23 Jun 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-06-23:/sparkmooc_note_lec8.html</guid><category>spark</category></item><item><title>[Spark MOOC note] Lec7. Data Quality</title><link>http://x-wei.github.io/sparkmooc_note_lec7.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h2 id="data-cleaning"&gt;DATA CLEANING&lt;/h2&gt;
&lt;p&gt;ex. 
deal with missing data, entity resolution, unit mismatch, ... &lt;/p&gt;
&lt;p&gt;deal with non-ideal samples ⇒ tradeoff between simplicity and accuracy. &lt;/p&gt;
&lt;h2 id="data-quality-problems"&gt;DATA QUALITY PROBLEMS&lt;/h2&gt;
&lt;p&gt;data quality problems: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conversions in complex pipelines can mess up data &lt;/li&gt;
&lt;li&gt;Combining multiple datasets can result in errrors&lt;/li&gt;
&lt;li&gt;Data degrades in accuracy or loses value over …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 22 Jun 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-06-22:/sparkmooc_note_lec7.html</guid><category>spark</category></item><item><title>[Spark MOOC note] Lec6. Structured Data</title><link>http://x-wei.github.io/sparkmooc_note_lec6.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h2 id="relational-database"&gt;RELATIONAL DATABASE&lt;/h2&gt;
&lt;p&gt;review: key data management concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data model &lt;/li&gt;
&lt;li&gt;schema&lt;/li&gt;
&lt;li&gt;&lt;em&gt;relational data model&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;structured data: have a specific schema to start with&lt;/p&gt;
&lt;p&gt;relationl database: a set of relations.
2 parts to a Relation: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;schema: name of relation, name and type of columns&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec6//pasted_image.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;instance: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;any data at given time 
(&lt;em&gt;cardinality …&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 18 Jun 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-06-18:/sparkmooc_note_lec6.html</guid><category>spark</category></item><item><title>[Spark MOOC note] Lec5. Semi-structured Data</title><link>http://x-wei.github.io/sparkmooc_note_lec5.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h2 id="key-data-management-concepts"&gt;KEY DATA MANAGEMENT CONCEPTS&lt;/h2&gt;
&lt;p&gt;data model: collection of concepts for describing data
schema: a description of a particular collection of data using a given data model&lt;/p&gt;
&lt;p&gt;structure spectrum: &lt;br&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec5/pasted_image.png"&gt;
semi-structured data: apply schema &lt;strong&gt;after&lt;/strong&gt; creating data. &lt;/img&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h2 id="files"&gt;FILES&lt;/h2&gt;
&lt;p&gt;files: named collection of bytes, in hierarchical namespace (but: In a Content-Addressable Storage …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 17 Jun 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-06-17:/sparkmooc_note_lec5.html</guid><category>spark</category></item><item><title>[Spark MOOC note] Lec4. Spark Essentials</title><link>http://x-wei.github.io/sparkmooc_note_lec4.html</link><description>&lt;p&gt;[TOC]  &lt;/p&gt;
&lt;h2 id="python-spark-pyspark"&gt;PYTHON SPARK (PYSPARK)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;a spark prog has 2 programs:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dirver program: runs on driver machine&lt;/li&gt;
&lt;li&gt;worker program: runs on local threads or cluster nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a spark prog first creates a &lt;strong&gt;SparkContext object:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tells how and where to access a cluster&lt;/li&gt;
&lt;li&gt;shell will automatically create &lt;strong&gt;the sc varible&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;in iPython …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 16 Jun 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-06-16:/sparkmooc_note_lec4.html</guid><category>spark</category></item><item><title>Scrapy 上手笔记</title><link>http://x-wei.github.io/Scrapy%20%E4%B8%8A%E6%89%8B%E7%AC%94%E8%AE%B0.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;Scrapy是用来爬取数据的很流行的包, 这里小记一下. 以前几天做的&lt;a href="https://github.com/X-Wei/OneArticleCrawler"&gt;一个爬虫&lt;/a&gt;为例子, 这个爬虫把韩寒一个app的前九百多期的文章抓了下来. &lt;/p&gt;
&lt;h2 id="i-installation"&gt;I. installation&lt;/h2&gt;
&lt;p&gt;scrapy的安装参考: &lt;a href="http://scrapy-chs.readthedocs.org/zh_CN/latest/topics/ubuntu.html"&gt;http://scrapy-chs.readthedocs.org/zh_CN/latest/topics/ubuntu.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(直接pip安装的好像缺少什么包)&lt;/p&gt;
&lt;h2 id="ii-prerequisite"&gt;II. prerequisite&lt;/h2&gt;
&lt;h3 id="xpath"&gt;XPath&lt;/h3&gt;
&lt;p&gt;需要学习scrapy首先需要会XPath, 这是一种方便与在html/xml文档里查找所需元素的语句. 这个还是很好学的, 其实只需要花一刻钟时间看看w3school的&lt;a href="http://www.w3school.com.cn/xpath/"&gt;教程&lt;/a&gt;, 就可以掌握够用的知识进行下一步了. &lt;/p&gt;
&lt;p&gt;这里总结一下我觉得会用到的语句(不全, 不过经常用到): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;//book&lt;/code&gt;    选取所有名字叫做book的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bookstore/book&lt;/code&gt; 选取bookstore的子元素中所有叫book的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//title[@lang='eng']&lt;/code&gt; 选取lang属性为"eng"的所有title元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//titile/text()&lt;/code&gt; 选取title元素的文字内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;descendant-or-self::text()&lt;/code&gt;: 选取自己或者所有后代节点的文字内容 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 19 Apr 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-04-19:/Scrapy 上手笔记.html</guid><category>python</category><category>scrapy</category></item><item><title>运筹的力量: 用线性规划解决Google 2014 HashCode问题</title><link>http://x-wei.github.io/hashcode2014-solved-by-LP.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;INF580(programmation par contraintes) 大概是在X学到的最有用的一门课, 它让我能够用把运筹学(MAP557)里学到的东西和计算机结合起来: 用电脑的力量解决(大规模)运筹问题. &lt;/p&gt;
&lt;p&gt;这门课的projet是去年巴黎谷歌举行的一个比赛的题目: 最优化谷歌街景拍照小车的路线. 做这个projet的三周里, 我和Manu从一开始信心满满, 到中间一筹莫展, 再到后来柳暗花明, 以及最后乘胜追击终于在今晚得到了近乎完美的解答, 非常精彩, 这里特意一记.&lt;/p&gt;
&lt;h1 id="wen-ti-miao-shu"&gt;问题描述&lt;/h1&gt;
&lt;p&gt;谷歌那次比赛的题目在这里(我们做的是Main Round的题目): &lt;a href="https://sites.google.com/site/hashcode2014/tasks"&gt;https://sites.google.com/site/hashcode2014/tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单来说, 就是已知巴黎的道路信息, 设法用八辆车(每辆车的行驶时间有限)从巴黎谷歌出发, 尽可能多的走遍巴黎的所有街道, 参赛者给出这些车的路线, 他们的分数就是这八辆车走过的街道的长度之和(重复走的街道不算分). &lt;/p&gt;
&lt;p&gt;去年四月份我们也参加了这个比赛, 不过当时纠结于如何设计每辆车的路线, 最后只是用了贪心算法, 再加上一点点的随机, 得到的结果并不好... 当时ENS的人包揽了前三名, 而且比赛后进一步把分数刷到了满分: 他们的路线可以把所有街道都跑遍. &lt;/p&gt;
&lt;p&gt;这学期学了INF580以后 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 02 Feb 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2015-02-02:/hashcode2014-solved-by-LP.html</guid><category>LP</category><category>algorithm</category></item><item><title>Linux下pdf文件的压缩与合并</title><link>http://x-wei.github.io/Linux%E4%B8%8Bpdf%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%8B%E7%BC%A9%E4%B8%8E%E5%90%88%E5%B9%B6.html</link><description>&lt;h2 id="ya-suo-pdf"&gt;压缩pdf&lt;/h2&gt;
&lt;p&gt;用&lt;code&gt;convert&lt;/code&gt; 只简单指定resize好像不太好使: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;convert -resize 50% input.pdf out.pdf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;gs&lt;/code&gt;(&lt;a href="http://blog.sciencenet.cn/blog-467089-773990.html"&gt;http://blog.sciencenet.cn/blog-467089-773990.html&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/screen -dNOPAUSE -dQUIET -dBATCH -sOutputFile=out.pdf input.pdf&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;后来发现老是compress以后的结果不好, 看到&lt;a href="http://superuser.com/questions/427851/batch-resize-and-compress-pdf-files"&gt;这篇帖子&lt;/a&gt;发现&lt;strong&gt;convert有好多选项&lt;/strong&gt;. 最后实验下来这样convert的效果很好, 既能压缩文件, 又保证了压缩后还足够清楚:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;convert -density 200 -compress jpeg input.pdf …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 29 Oct 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2014-10-29:/Linux下pdf文件的压缩与合并.html</guid><category>linux</category></item><item><title>一个简单的python进度条</title><link>http://x-wei.github.io/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84python%E8%BF%9B%E5%BA%A6%E6%9D%A1.html</link><description>&lt;p&gt;在处理大量数的时候, 如果输出类似 "process i out of n files..." 这样的内容来指示进度的话, 虽然可以显示目前的进度(用来安慰等待的心情...)但有个问题是, 如果输出了太多行(比如一万行...), 就看不到前面的内容了... &lt;/p&gt;
&lt;p&gt;所以想找一个命令行下面的进度条, 其实python已经有了(不止一个)进度条的包了, 比如&lt;a href="https://pypi.python.org/pypi/progressbar/2.3-dev"&gt;progressbar&lt;/a&gt;, 但是不知为什么这个包在windows下面没有能做到刷新显示 -- 就是刷新进度的时候, 没有把原先那一行去掉, 而是在下面再输出了一行... (不过后来在linux下面使用这个包是没问题的, 好奇怪...)&lt;/p&gt;
&lt;p&gt;所以想办法自己写了一个, 发现要实现一个简单的进度条还是很简单的, 关键就是使用&lt;code&gt;\r&lt;/code&gt;, 这样会把光标移动到当前行的开头: 这样下次输出的时候就会把原先的内容冲掉了. &lt;/p&gt;
&lt;p&gt;代码只有不到二十行: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleProgressBar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def …&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 14 Aug 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2014-08-14:/一个简单的python进度条.html</guid><category>python</category></item><item><title>正则表达式入门简介</title><link>http://x-wei.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;以前虽然也用过正则表达式(比如那个饮水思源的&lt;a href="http://x-wei.github.io/%E6%B0%B4%E6%BA%90PPP%E6%9D%BF%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E5%99%A8.html"&gt;PPP版图片下载器&lt;/a&gt;...)但是那时候基本上是网上到处搜 然后把代码拿过来改, 没有系统的学过这个东西. 前一段实习一开始的时候要处理很大量的文本, 从文本里提取出需要的信息, 所以用到了不少的正则表达式, 也好好的学了一下, 现在回来进行一下总结. &lt;/p&gt;
&lt;h2 id="shi-yao-shi-zheng-ze-biao-da-shi"&gt;什么是正则表达式&lt;/h2&gt;
&lt;p&gt;很多时候,我们需要在文本里寻找满足一种&lt;strong&gt;模式&lt;/strong&gt;(&lt;em&gt;pattern&lt;/em&gt;)的一段子字符串(substring), 注意是一种模式而不是某一个具体的字符串. 举个例子, 在一段文本里寻找这里面出现的所有的网址, 那么对应的模式就是: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"以&lt;code&gt;www.&lt;/code&gt;开头, 中间有一些东西(可以是字母也可以是数字等), 最后以 &lt;code&gt;.com/.org/.edu...&lt;/code&gt; 结尾的所有的字符串"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再比如, 要查找文本中出现的电话号码, 电话号码的格式是区号加横线再加号码, 那么模式就应该是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"以3个或4个数字开头, 三个或四个数字之后跟一个横线, 横线后再跟7个或8个数字"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再再比如, 要查找出现的电子邮件地址, 那么模式大概是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"以字母或数字或下划线开头, 之后跟着一个@符号, @符号以后一些用点分隔的字母或数字, 最后应该以.com/.org …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 01 Aug 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2014-08-01:/正则表达式入门简介.html</guid><category>regex</category></item><item><title>putty使用备忘</title><link>http://x-wei.github.io/putty%E4%BD%BF%E7%94%A8%E5%A4%87%E5%BF%98.html</link><description>&lt;p&gt;最近要用SSH连接服务器, Windows下面当然就是用putty了, 遇到的问题总结一下. &lt;/p&gt;
&lt;h2 id="bao-cun-session"&gt;保存session&lt;/h2&gt;
&lt;p&gt;打开putty.exe以后, 输入服务器ip, 之后先别点击登录, 先保存一下session下一次就不用再输入了: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/putty使用备忘/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;之后点击登录就好了. &lt;/p&gt;
&lt;h2 id="ben-di-he-fu-wu-qi-zhi-jian-chuan-shu-wen-jian"&gt;本地和服务器之间传输文件&lt;/h2&gt;
&lt;p&gt;传输的时候貌似不能用linux里的scp命令, 而需要使用另一个putty的工具: &lt;code&gt;psftp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下载的时候那个putty.zip压缩包里有一个&lt;code&gt;psftp.exe&lt;/code&gt;, 点击它就打开了. psftp也是一个命令行的工具, 和ssh类似, 用&lt;code&gt;pwd/ls/cd&lt;/code&gt;等在&lt;strong&gt;服务器的&lt;/strong&gt;文件系统里进行移动. &lt;/p&gt;
&lt;p&gt;而在&lt;strong&gt;本地的&lt;/strong&gt;文件系统里移动的话, 用&lt;code&gt;lpwd/lcd/lls.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;移动到了想要传输文件的目录以后(本地和服务器都移动好了以后), 使用&lt;code&gt;put filename&lt;/code&gt;上传本地文件到服务器, 使用 &lt;code&gt;get filename&lt;/code&gt; 下载服务器文件到本地. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.lellansin.com/putty%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6.html"&gt;http://www.lellansin.com/putty …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 28 Jul 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2014-07-28:/putty使用备忘.html</guid><category>ssh</category></item><item><title>IPython上手学习笔记</title><link>http://x-wei.github.io/IPython%E4%B8%8A%E6%89%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.packtpub.com/learning-ipython-for-interactive-computing-and-data-visualization/book"&gt;Learning IPython for Interactive Computing and Data Visualization&lt;/a&gt;这本书的前两章的笔记, 这本书还被放在了IPython官网上, 虽然只有一百页多一点点, 但是讲的内容却很丰富, 介绍了IPython, numpy, pandas以及并行计算等方面. &lt;/p&gt;
&lt;p&gt;(在开始系统学IPython之前简单使用过IPython, 那时候我还是更喜欢bpython的代码提示功能...)&lt;/p&gt;
&lt;h1 id="ch1-10-ipython-essentials"&gt;ch1: 10 IPython essentials&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在任何变量后面加问号&lt;code&gt;?&lt;/code&gt;或者双问号&lt;code&gt;??&lt;/code&gt;, 将会输出详细的信息(按&lt;code&gt;q&lt;/code&gt;退出), &lt;code&gt;??&lt;/code&gt;的信息更加详细些&lt;/li&gt;
&lt;li&gt;Tab Completion: 没啥好说的 没有bpython做的好 也凑合吧...&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_, __, ___&lt;/code&gt;保存最近三次的输出;  &lt;code&gt;_i, __i, ___i&lt;/code&gt;保存最近三次的输入(作为字符串保存)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="magic-commands"&gt;magic commands&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在IPython里面可以使用一些标准unix命令, 比如&lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;pwd,ls …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2014-07-22:/IPython上手学习笔记.html</guid><category>python</category></item><item><title>pandas学习笔记</title><link>http://x-wei.github.io/pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;首先, 导入pandas
&lt;code&gt;import pandas as pd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以及开启pylab: IPython里输入&lt;code&gt;%pylab&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.bearrelroll.com/2013/05/python-pandas-tutorial/"&gt;http://www.bearrelroll.com/2013/05/python-pandas-tutorial/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="ji-ben-cao-zuo"&gt;基本操作&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://cloga.info/python/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/2013/09/17/pandas_intro/"&gt;http://cloga.info/python/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/2013/09/17/pandas_intro/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pandas和numpy的关系&lt;/strong&gt;: pandas是建立在numpy上面的, pandas可以处理不同类型的数据集合(heterogeneous data set: &lt;strong&gt;DataFrame&lt;/strong&gt;), numpy处理的是相同类型的数据集合(homogeneous data set: &lt;strong&gt;ndarray …&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2014-07-22:/pandas学习笔记.html</guid><category>pandas</category><category>python</category></item><item><title>Eclipse快捷键总结</title><link>http://x-wei.github.io/Eclipse%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%80%BB%E7%BB%93.html</link><description>&lt;p&gt;Eclipse让我很喜欢的最大原因大概就是它的好用的快捷键了, 这里进行一下总结, 掌握这些快捷键可以让编辑代码变得更加高效. &lt;/p&gt;
&lt;h2 id="ji-ben-kuai-jie-jian"&gt;基本快捷键&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;格式化代码: &lt;code&gt;ctrl+alt+F&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;非常实用的快捷键, 暂时还不知道别的编辑器还没有发现有同样功能的. 按一下代码就自动缩进得非常整齐了! &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注释/反注释: &lt;code&gt;ctrl+alt+C&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;pydev下面的注释/反注释: &lt;code&gt;ctrl+/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ling-wai-yi-xie-you-yong-de-kuai-jie-jian"&gt;另外一些有用的快捷键&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;显示提示: &lt;code&gt;alt+/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个可以说是eclipse快捷键里面最有用的一个. 可以显示代码提示的窗口, 这也是我喜欢eclipse的原因之一. 虽然编写代码的时候eclipse的提示框也会在适当的时候出来, 比如按下了&lt;code&gt;.&lt;/code&gt;的时候, 但是当它没有出现的时候我们总可以按下&lt;code&gt;alt+/&lt;/code&gt;让提示框弹出来. 尤其在使用Java的时候, eclipse的提示相当智能, 也就是说会根据上下文以及函数的定义等东西来提示那些可能出现的项目. 另外, 有时候可能定义了一个超长名字的变量(这样代码可能比较清楚一些), 然后用这个快捷键, 就只需要打一下这个很长名字的前几个字母就可以自动补全了(如果补全的不是想要的, 只需要多按几次这个快捷键就会显示其他可能了)! &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开函数/变量的声明: &lt;code&gt;F3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比方说在程序的某一段看到了调用一个函数, 然后想看看这个函数的内容, 这是不需要拿着鼠标上下滚动着找(有时候定义的函数可能在另一个文件里, 那就更难找了), 只需要按下 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 15 Jul 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2014-07-15:/Eclipse快捷键总结.html</guid><category>eclipse</category></item><item><title>Eclipse插件推荐</title><link>http://x-wei.github.io/Eclipse%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90.html</link><description>&lt;p&gt;Eclipse被称为编程的瑞士军刀, 意思就是只用一个eclipse就可以做很多事情. &lt;/p&gt;
&lt;p&gt;最近越来越喜欢eclipse了, 因为作为编辑器而言, eclipse的编辑器让我用起来最舒服的一个(配合一些&lt;a href="x-wei.github.com/Eclipse快捷键总结.html"&gt;快捷键&lt;/a&gt;以后更是非常爽). 这半年多来发现了一些非常好用的eclipse的插件, 有了这些插件, eclipse可以做更多的事情... 接下来简单介绍一下:&lt;/p&gt;
&lt;h2 id="cha-jian-an-zhuang-de-fang-fa"&gt;插件安装的方法&lt;/h2&gt;
&lt;p&gt;先简单说一下eclipse的插件安装方法, 在eclispe界面上, 点击: Help-&amp;gt;Install New Software:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./Eclipse插件推荐/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;之后添加对应的URL就可以了... &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./Eclipse插件推荐/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;h1 id="adt_1"&gt;ADT&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://developer.android.com/sdk/installing/installing-adt.html"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;eclipse里添加的URL: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://dl-ssl.google.com/android/eclipse/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个不用说了吧, Eclipse已经基本上是android开发的御用IDE了. &lt;/p&gt;
&lt;h2 id="pydev"&gt;PyDev&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://pydev.org/"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;URL:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://pydev.org/updates&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;python的开发更需要有一个提示的东东(好像叫pyLint, 就是可以发现代码里的一些显然的错误), 这个插件装好以后我就很少用geany写python程序了, 尤其是当程序超过100行以后... &lt;/p&gt;
&lt;p&gt;但是让人不爽的是, 他需要新建一个project才能运行. 这也是Eclipse的一个让人不爽的方面. 如果是一个小的python程序的话我还是会用geany. 另外, 强烈推荐 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 15 Jul 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2014-07-15:/Eclipse插件推荐.html</guid><category>eclipse</category></item><item><title>python pickle 的一个小问题</title><link>http://x-wei.github.io/python%20pickle%20%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98.html</link><description>&lt;p&gt;python的pickle/unpickle机制可以非常方便的保存一些计算的中间结果, 这一点java虽然也可以做到, 但是java里面的包的名字实在是长的让人记不住...&lt;/p&gt;
&lt;p&gt;不过今天在使用pickle的时候遇到了一个很奇怪的问题. &lt;/p&gt;
&lt;p&gt;是这样的, 原本写了一个程序&lt;code&gt;main.py&lt;/code&gt;, 这个程序里进行了一些计算并且pickle下了这些内容, 后来我觉得一个程序main.py写这么多实在太长了, 于是就把那些辅助函数以及class的定义通通放进了一个&lt;code&gt;util.py&lt;/code&gt;文件里. 并且在main.py的第一行写上: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;from util import *&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;按理说这应该没有问题, 和一个main文件时运行的效果相同的, 但是当我运行的时候却显示util.py里面这行unpickle的语句有错误:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;airport_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'airport_info.dict'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'rb'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'module'&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;'Airport'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中&lt;code&gt;Airport&lt;/code&gt;是我定义的一个类, 本来在main.py里面, 后来被我移动到了util.py里面...&lt;/p&gt;
&lt;p&gt;感觉很奇怪, 于是去&lt;a href="https://bbs.sjtu.edu.cn/frame2.html"&gt;水源&lt;/a&gt;求助 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 15 Jul 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2014-07-15:/python pickle 的一个小问题.html</guid><category>python</category></item><item><title>使用Eclipse的UML插件生成类图</title><link>http://x-wei.github.io/%E4%BD%BF%E7%94%A8Eclipse%E7%9A%84UML%E6%8F%92%E4%BB%B6%E7%94%9F%E6%88%90%E7%B1%BB%E5%9B%BE.html</link><description>&lt;p&gt;Created samedi 31 mai 2014UML就是可以把程序的结构用图的形式表达出来的东西(好像叫类图), 虽然写程序的时候不大会用到这种东西来搞, 但是写报告的时候如果能够加上一张图的话, 就可以少费些口舌来解释代码了, 而且还有一种高大上的赶脚... 所以写完程序写报告的时候可以用一下. &lt;/p&gt;
&lt;p&gt;废话不多说, 看看我最后生成的UML图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./eclipse的UML插件/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;这张图表示一个抽象类&lt;code&gt;Operration&lt;/code&gt;有三个子类, 然后他们之间的关系... 如果用文字的话要解释半天吧...&lt;/p&gt;
&lt;p&gt;这张图是用&lt;a href="http://green.sourceforge.net/"&gt;Green UML&lt;/a&gt;做出来的, 这是一个eclipse插件, 安装方法为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在eclipse里, &lt;code&gt;Help-&amp;gt;Install New Software&lt;/code&gt; 然后Add这个URL: &lt;a href="http://www.cse.buffalo.edu/faculty/alphonce/green"&gt;http://www.cse.buffalo.edu/faculty/alphonce/green&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;然后一路Next安装就可以了...&lt;/li&gt;
&lt;li&gt;如果老师显示pending, 可能是代理的问题(在X非常不爽的一点...哎...), 不过没事, 代理的设置在: &lt;code&gt;window → preference → General → Network Connections …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 31 May 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2014-05-31:/使用Eclipse的UML插件生成类图.html</guid><category>java</category><category>eclipse</category></item><item><title>A French Input Method</title><link>http://x-wei.github.io/fr-input.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;h2 id="well-to-be-brief"&gt;Well, to be brief...&lt;/h2&gt;
&lt;p&gt;I made a french input method, if you got annoyed by the freaking french keyboard when typing accented words (i.e.  &lt;strong&gt;é, û, ü, î,...&lt;/strong&gt; ), or you are using a QWERTY keyboard, this will be quite useful !&lt;/p&gt;
&lt;p&gt;In fact, I used &lt;a href="http://yong.dgod.net/"&gt;XiaoxiaoInput&lt;/a&gt; and &lt;a href="https://fcitx-im.org/wiki/Fcitx"&gt;Fcitx&lt;/a&gt;, which …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 23 May 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2014-05-23:/fr-input.html</guid><category>fr</category></item><item><title>A byte of Python 笔记</title><link>http://x-wei.github.io/byte_of_python%E7%AC%94%E8%AE%B0.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;据说这本书是最好的入门读物, 况且只有100来页 (减掉前面后面那些扯淡的 不到100页...)&lt;/p&gt;
&lt;p&gt;那就用这本书过一下py的基本知识点吧! 看完以后收获不少, 把py涉及的很大一部分都讲到了. 这本书已经是够压缩的了, 不过我还是边看边自己再压缩了一遍(写在zim笔记里). &lt;/p&gt;
&lt;p&gt;我看的是1.20版本, 2004年的, 因为这个版本针对的是py2.x, 作者主页上现在的版本针对的是py3. 另外感觉没必要看中文翻译版, 因为这里用的英语比较简单, 而且有的时候中文翻译反而不如原文表达的恰当.&lt;/p&gt;
&lt;h1 id="prefacech1ch2"&gt;preface+ch1+ch2&lt;/h1&gt;
&lt;p&gt;扯淡...&lt;/p&gt;
&lt;h1 id="ch3-first-steps"&gt;ch3. First Steps&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are two ways of using Python to run your program - using the interactive interpreter prompt or using a source file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anything to …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 10 Apr 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2014-04-10:/byte_of_python笔记.html</guid><category>python</category></item><item><title>linux下安装并使用java开发opencv的配置</title><link>http://x-wei.github.io/linux%E4%B8%8B%E5%AE%89%E8%A3%85%E5%B9%B6%E4%BD%BF%E7%94%A8java%E5%BC%80%E5%8F%91opencv%E7%9A%84%E9%85%8D%E7%BD%AE.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;今天花了四个小时, 终于在linux下把eclipse下java开发opencv给搞定了... 至于为什么花这么久的时间... 且听我慢慢讲... &lt;/p&gt;
&lt;h2 id="linuxbian-yi-an-zhuang-opencv"&gt;linux编译安装opencv&lt;/h2&gt;
&lt;p&gt;首先, linux下安装opencv其实不麻烦的, 参考文档即可完成:
&lt;a href="http://docs.opencv.org/trunk/doc/tutorials/introduction/linux_install/linux_install.html"&gt;http://docs.opencv.org/trunk/doc/tutorials/introduction/linux_install/linux_install.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大致有以下几个步骤:&lt;/p&gt;
&lt;p&gt;1) 安装gcc以及cmake等等乱七八糟的软件(不过ubuntu下默认差不多都有了吧...)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install build-essential python-dev cmake&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2) 下载opencv-2.4.8.zip并解压缩&lt;/p&gt;
&lt;p&gt;3) 新建一个build文件夹&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;cd ~/opencv&lt;/span&gt;
&lt;span class="code-line"&gt;mkdir build&lt;/span&gt;
&lt;span class="code-line"&gt;cd build&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4) 在终端里输入: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;cmake -D CMAKE_BUILD_TYPE=RELEASE -D …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 10 Feb 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2014-02-10:/linux下安装并使用java开发opencv的配置.html</guid><category>eclipse</category><category>java</category><category>opencv</category></item><item><title>java线程小结</title><link>http://x-wei.github.io/java%E7%BA%BF%E7%A8%8B%E5%B0%8F%E7%BB%93.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;INF422的TD2, 这节TD是要做一个多线程筛选质数的程序, 关于java的多线程, 以前用过但是不知道啥意思, 在这里总结下. &lt;/p&gt;
&lt;h2 id="chuang-jian-jin-cheng"&gt;创建进程&lt;/h2&gt;
&lt;p&gt;为了实现多线程, 需要定义一个新的class, 有两种方法: 
&lt;strong&gt;或者继承自&lt;/strong&gt;&lt;code&gt;Thread&lt;/code&gt;&lt;strong&gt;类, 或者实现&lt;/strong&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;strong&gt;接口&lt;/strong&gt;(关键是重载run()方法). &lt;/p&gt;
&lt;h3 id="ji-cheng-zi-threadlei"&gt;继承自Thread类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;写法1: 定义一个继承自Thread的内部类--&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;类名&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="kr"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;方法&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;方法&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;// …&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;属性&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;属性&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;或者用下面种&lt;strong&gt;内联(inline)&lt;/strong&gt;的写法, 不用给这个类起名字了(不过还要给这个实例取名字): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;private Thread [实例名] = new Thread () {&lt;/span&gt;
&lt;span class="code-line"&gt;    public void run …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 29 Nov 2013 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2013-11-29:/java线程小结.html</guid><category>android</category><category>java</category></item><item><title>ADT环境搭建</title><link>http://x-wei.github.io/ADT%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;这学期INF422, 第一节课就是android安装调试环境的搭建(居然要一节课?), 这里总结一下.&lt;/p&gt;
&lt;h3 id="di-yi-bu-xia-zai-bundle"&gt;第一步: 下载bundle&lt;/h3&gt;
&lt;p&gt;下载&lt;a href="http://developer.android.com/sdk/index.html"&gt;ADT-Bundle&lt;/a&gt;
解压缩以后啥都有了, 包含一个eclipse...&lt;/p&gt;
&lt;h3 id="di-er-bu-xiu-gai-huan-jing-bian-liang"&gt;第二步: 修改环境变量&lt;/h3&gt;
&lt;p&gt;linux下的环境变量放在&lt;code&gt;.bashrc文件&lt;/code&gt;, 加入下面一行: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;PATH=$PATH:&amp;lt;dir&amp;gt;/sdk/tools/:&amp;lt;dir&amp;gt;/sdk/platform-tools/:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt;是放置SDK的目录地址.&lt;/p&gt;
&lt;p&gt;测试一下好不好使, 在终端中输入&lt;code&gt;android&lt;/code&gt;, 看是否会弹出SDK manager&lt;/p&gt;
&lt;h3 id="di-san-bu-xin-jian-yi-ge-virtual-machine"&gt;第三步: 新建一个virtual machine&lt;/h3&gt;
&lt;p&gt;可以用eclipse的AVDmanager做, 也可以用命令行做. &lt;/p&gt;
&lt;p&gt;输入:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;android list targets&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;找到想要的target(我们要4.1.2)的那个id(一个数字), 然后, 运行命令: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;android …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 08 Nov 2013 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2013-11-08:/ADT环境搭建.html</guid><category>android</category><category>inf422</category></item><item><title>android开发视频教程(重制版) 第一季 课程笔记</title><link>http://x-wei.github.io/android%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E7%AC%AC%E4%B8%80%E5%AD%A3%E7%AC%94%E8%AE%B0.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;h1 id="s01e02-kai-fa-huan-jing-da-jian"&gt;S01E02: 开发环境搭建&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;直接去 developer.android.com/sdk/ 下载bundle解压即可, 里面包含eclipse&lt;/li&gt;
&lt;li&gt;新建一个模拟器: 内部存储一般64MB足矣:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;h1 id="s01e03-androidxiang-mu-mu-lu-jie-gou"&gt;S01E03: android项目目录结构&lt;/h1&gt;
&lt;h4 id="di-yi-ge-androidcheng-xu"&gt;第一个android程序&lt;/h4&gt;
&lt;p&gt;new--&amp;gt;android application&lt;/p&gt;
&lt;h4 id="mu-lu-jie-gou"&gt;目录结构&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;com.example.helloworld这个包名一般为网址倒着写, android是按照包名来区分不同APP的&lt;/li&gt;
&lt;li&gt;src/目录下存放java程序&lt;/li&gt;
&lt;li&gt;gen/目录下存放系统自动生成的文件, R.java里给每一个控件或变量赋予一个id, 千万__不要手动修改R,.java内容__!!&lt;/li&gt;
&lt;li&gt;assets/目录下和res/目录下都可以放各种外部文件(ex. 图片), 但是assets下的文件不会在R.java中生成id&lt;/li&gt;
&lt;li&gt;res/layout/ 存放布局文件(xml格式)&lt;/li&gt;
&lt;li&gt;AndroidManifest.xml用于统筹&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e04-ji-zhu-jie-gou_1"&gt;S01E04: 技术结构&lt;/h1&gt;
&lt;h4 id="si-ceng-jie-gou-tu"&gt;四层结构图&lt;/h4&gt;
&lt;p&gt;开发位于最上层application
&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;h4 id="ji-yu-zu-jian-de-ying-yong-cheng-xu-kai-fa"&gt;基于组件的应用程序开发&lt;/h4&gt;
&lt;p&gt;搭积木 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 31 Jul 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2013-07-31:/android开发教程第一季笔记.html</guid><category>android</category></item><item><title>我的ubuntu10.04配置总结</title><link>http://x-wei.github.io/%E6%88%91%E7%9A%84ubuntu10.04%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;ubuntu已经出到了13.04, 我之所以坚持使用ubuntu10.04的版本(到现在已经三年了, 现在10.04已经过了支持周期而我还在继续用它), 主要是因为ubuntu出的unity界面以及gnome3的界面实在是用起来不爽(吐槽不已!!)... &lt;/p&gt;
&lt;p&gt;目前我的lucid(ubuntu 10.04)经过我的配置, 在我用来已经十分顺手了.. 不过长久这么下去也不是办法...... 在换新的主力系统之前, 把我目前这个系统的配置写下来.&lt;/p&gt;
&lt;h2 id="an-zhuang-de-ruan-jian"&gt;安装的软件&lt;/h2&gt;
&lt;p&gt;写一下用起来特别爽的一些软件: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geany&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;万能IDE&lt;/strong&gt;, java/python/Cpp/matlab(octave)... 甚至tex都是用它写的, 轻巧强大. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zim桌面维基&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;神器&lt;/strong&gt;, 用来写笔记整理思路, 这篇就是在zim下写的. 自从2012年发现zim这个东西以后, 到现在写了上百条笔记了, 确实方便.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GNU octave&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;matlab的开源替代, 语法和matlab完全兼容, 毕设就是用它做的, 如果不用matlab工具箱的话, 这个是很好的选择, 而且比较小巧, 启动很快.
......不过法国人貌似比较喜欢他们自己搞出来的scilab.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;音乐播放器audacious&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;界面和简洁, 用起来蛮好 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 20 Jul 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2013-07-20:/我的ubuntu10.04配置总结.html</guid><category>ubuntu</category><category>外观</category><category>快捷键</category></item><item><title>ssh远程登录学校机房电脑</title><link>http://x-wei.github.io/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E5%AD%A6%E6%A0%A1%E6%9C%BA%E6%88%BF%E7%94%B5%E8%84%91.html</link><description>&lt;p&gt;X&lt;a href="http://www.enseignement.polytechnique.fr/profs/informatique/Philippe.Chassignet/MOYENS/stations.html"&gt;机房的电脑&lt;/a&gt;配置还是很高的, 所以...&lt;/p&gt;
&lt;p&gt;远程登录的命令是: 
    ssh -X nom.prenom@truite.polytechnique.fr&lt;/p&gt;
&lt;p&gt;(-X命令表示允许使用X程序.)&lt;/p&gt;
&lt;p&gt;登录进去以后, 可以在终端里输入命令, 比如查看系统板本: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$  lsb_release -a&lt;/span&gt;
&lt;span class="code-line"&gt;LSB Version:    :core-4.0-ia32:core-4.0-noarch:graphics-4.0-ia32:graphics-4.0-noarch:printing-4.0-ia32:printing-4.0-noarch&lt;/span&gt;
&lt;span class="code-line"&gt;Distributor ID: n/a&lt;/span&gt;
&lt;span class="code-line"&gt;Description:    CentOS&lt;/span&gt;
&lt;span class="code-line"&gt;Release:    n/a&lt;/span&gt;
&lt;span class="code-line"&gt;Codename:   n/a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;机房是centOS, 高效稳定. &lt;/p&gt;
&lt;p&gt;然后可以在终端输入命令来启动程序, 比如&lt;code&gt;eclipse &amp;amp;,&lt;/code&gt;就会在你这边的电脑显示出来eclipse的窗口 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2013-07-02:/ssh远程登录学校机房电脑.html</guid><category>shell</category></item><item><title>网页图片自动适应浏览器宽度</title><link>http://x-wei.github.io/%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E9%80%82%E5%BA%94%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%BD%E5%BA%A6.html</link><description>&lt;p&gt;眼看三月又要结束了, blog还没有更新, 拿来以前写在zim里的一条笔记充数... &lt;/p&gt;
&lt;p&gt;有了zim以后, 几乎不再用office了, 常用它编辑一些富文本, 比如加粗, 下划线, 斜体什么的, 有快捷键操作, 很方便, 插图也很简单. zim是我认为的神器(神器=小巧+强大)之一. &lt;/p&gt;
&lt;p&gt;有时候用zim写好的笔记给别人看时, 直接按"ctrl+p"就可以打印成网页的格式了, 非常方便(而且得承认, 单论富文本的显示效果, 网页格式 &amp;gt; pdf格式 &amp;gt; doc格式). 只是有一点不太好, 就是有时插入的照片很大, 在浏览器里查看的时候显示的还是原尺寸图像, 非常方便...&lt;/p&gt;
&lt;p&gt;查了一下, 其实只要在html文件关于插入图片那一行加入&lt;code&gt;width="100%" height="100%" style="z-index:-100"&lt;/code&gt;就可以了.&lt;/p&gt;
&lt;p&gt;比如, 在zim生成的html文件里, 这样替换就可以了: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;img src="./xxx网页_files/IMG_1186.JPG …&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 28 Mar 2013 20:36:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2013-03-28:/网页图片自动适应浏览器宽度.html</guid></item><item><title>passé simple时态变位总结</title><link>http://x-wei.github.io/passesimple%E6%97%B6%E6%80%81%E5%8F%98%E4%BD%8D%E6%80%BB%E7%BB%93.html</link><description>&lt;p&gt;passé simple 其实一点也不simple... 在Cherbourg时老师直接就没讲, 一是因为这个时态的变位很复杂; 二是现在这个时态几乎不用了, 除了出现在童话故事或人物传记中, 替代passé composé的位置... &lt;/p&gt;
&lt;p&gt;可是回到X之后的法语课上却学了... 这周一还有针对passé simple的考试... 这是上周末总结的passé simple 的一些变位规则, 发现其实这个时态的变位也不是很难(原因见下文), 只不过一般不用, 所以容易忘吧~&lt;/p&gt;
&lt;h2 id="i-ci-wei"&gt;I. 词尾&lt;/h2&gt;
&lt;p&gt;passé simple 的变位词尾可以分为种四类型, 我把它们叫做"A型", "I型", "U型", 和"IN型", 别看四种类型, 其实很容易记的. &lt;/p&gt;
&lt;h3 id="si-chong-lei-xing"&gt;四种"类型"&lt;/h3&gt;
&lt;p&gt;先把这四种类型的词尾写下来: &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A型&lt;/strong&gt; &lt;u&gt;ai&lt;/u&gt;-&lt;u&gt;as&lt;/u&gt;-&lt;u&gt;a&lt;/u&gt;-â&lt;strong&gt;mes&lt;/strong&gt;-â&lt;strong&gt;tes&lt;/strong&gt;-&lt;u&gt;è&lt;/u&gt;&lt;strong&gt;rent&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I型&lt;/strong&gt; i&lt;strong&gt;s&lt;/strong&gt;-i&lt;strong&gt;s …&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 19 Feb 2013 20:35:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2013-02-19:/passesimple时态变位总结.html</guid><category>french</category></item><item><title>Au revoir, Cherbourg</title><link>http://x-wei.github.io/aurevoir-cherbourg.html</link><description>&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./aurevoir-cherbourg/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;任何一种环境或一个人, 初次见面就预感到离别的隐痛时, 你必定爱上他了.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我是在来Cherbourg的第二天突然想起这句话的. &lt;/p&gt;
&lt;p&gt;那天是29-09-2012, 在德先生和赛先生的带领下, 我们在Cherbourg市中心悠闲地溜达了一个下午, 那天阳光很好. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./aurevoir-cherbourg/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;时间过得好快, 四个月过去了, 明天早上就是道别的时候了. 四个月留下了不尽的回忆......&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cherbourg的海风, 雨水, 长堤...&lt;/li&gt;
&lt;li&gt;centre-ville的街道, 以及停泊了许多小船的港口&lt;/li&gt;
&lt;li&gt;EFQ的海鸥&lt;/li&gt;
&lt;li&gt;Guichen &lt;/li&gt;
&lt;li&gt;喇叭里每天的通知("dans 5 minutes, appelle du personnage de service et des gens sonctionne", "attention pour la couleur...")&lt;/li&gt;
&lt;li&gt;每天在楼下等我们的Devailly先生, 我猜想年轻时一定很帅的Stricot先生&lt;/li&gt;
&lt;li&gt;les prof: 有N件毛衣的Sylvain, 漂亮的Stéphanie, 美食专家以及"动词变位女王"Brigitte, 搞怪的Lydia, 家庭美满幸福的Nolwenn......&lt;/li&gt;
&lt;li&gt;在Cherbourg的海边公路上慢跑, 一跑就是四十分钟&lt;/li&gt;
&lt;li&gt;Foule …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 29 Jan 2013 21:41:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2013-01-29:/aurevoir-cherbourg.html</guid><category>fr</category></item><item><title>读 &gt;</title><link>http://x-wei.github.io/%E8%AF%BB%E5%BD%93%E6%88%91%E8%B0%88%E8%B7%91%E6%AD%A5%E6%97%B6%E6%88%91%E8%B0%88%E4%BB%80%E4%B9%88.html</link><description>&lt;p&gt;上个月读的这本书, 后来简单写了点东西(其实主要是摘抄啦...). 圣诞来到住家, blog很久没更新了, 放上来充数...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;嗯, 这本书不错, 心乱的时候读一两章蛮好.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;感觉村上春树绝对是一个精神上强大的人, 虽然他的语气平和而谦逊.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这不是一本很文艺的书(所以我很快就读完了), 都是很朴实的语言, 像坐在火炉边和你谈话一样, 喜欢.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一百千米超级马拉松太恐怖了... &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跑步时心理的变化过程: 跑前决定一定要跑个好成绩; 开始跑觉得很轻松; 跑到半成以为会是一个好成绩; 跑到最后心里只剩下厌恶--该死的路程怎么还不结束!! &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="zhai-chao"&gt;摘抄&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;下面这话颇类狡辩，更令人惶恐：尽管这是一部谈论跑步的书，却不是谈论健康方法的书。我并非要在这里高谈阔论、振臂一呼：“来呀!让我们每天跑步，永葆健康吧!”归根结底，这些都不过是思索片段，抑或自问自答——对我个人而言．坚持跑步究竟有何意味。仅此而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;即使不足以称为“哲学”，然而我以为，这里面含有_些类似经验法则的东西。一些无甚大不了的玩意儿，却是我通过实实在在地运动自己的躯体，通过作为选择的磨难，极其私人地感悟到的东西。也许并不值得推而广之，但无论如何，这，就是我这个人 …&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 22 Dec 2012 09:27:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-12-22:/读当我谈跑步时我谈什么.html</guid></item><item><title>多张图片合并为pdf, 合并mp3, 批量压缩图片</title><link>http://x-wei.github.io/%E5%9B%BE%E7%89%87%E5%90%88%E5%B9%B6%E4%B8%BApdf,%20%E5%90%88%E5%B9%B6mp3,%20%E6%89%B9%E9%87%8F%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87.html</link><description>&lt;p&gt;前一阵遇到的三个小功能, linux下有简单的命令可以实现...&lt;/p&gt;
&lt;h2 id="duo-zhang-tu-pian-he-bing-wei-pdf"&gt;多张图片合并为pdf&lt;/h2&gt;
&lt;p&gt;这个在网上搜一般找到的结果是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;convert *.jpg xx.pdf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是这么做的问题是, 运行起来超级慢, 电脑直接卡死!!!&lt;/p&gt;
&lt;p&gt;后来看了&lt;a href="http://pityonline.info/2009/12/%E7%BB%88%E4%BA%8E%E6%90%9E%E5%AE%9A%E4%BA%86%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90%E4%B8%80%E4%BB%BDpdf%E6%96%87%E6%A1%A3%EF%BC%81/"&gt;这里&lt;/a&gt;, 知道了可以用pdfjam来做. 先要安装pdfjam, 然后:&lt;/p&gt;
&lt;p&gt;先将所有jpg文件重命名为pdf：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;rename 's/\.jpg$/\.pdf/' *.jpg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;合成刚重命名的pdf文件为一份：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;pdfjoin $(ls *.pdf|sort -n) --outfile xx.pdf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;后来看到pdfjam其实是在用latex, 想到其实也可以先自动生成一个tex文件然后再调用tex生成pdf... 不过既然有现成的软件就直接用吧!!&lt;/p&gt;
&lt;h2 id="he-bing-mp3"&gt;合并mp3&lt;/h2&gt;
&lt;p&gt;超级简单的一条命令:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;cat *.mp3 &amp;gt; output.mp3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只要预先把文件按照想要的顺序编号即可
这个操作只是把这些文件前后连接起来, 可能是由于mp3文件格式的原因吧, 只要这么做了就和并完成了!! 而且速度快得惊人!!!&lt;/p&gt;
&lt;p&gt;不过有一点问题: 合并出来的mp3文件的信息(歌名, 艺术家之类)会是最后一个文件的信息 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 16 Nov 2012 19:47:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-11-16:/图片合并为pdf, 合并mp3, 批量压缩图片.html</guid><category>linux</category></item><item><title>Les fêtes chinoises en automne</title><link>http://x-wei.github.io/Les-fetes-chinoises-en-automne.html</link><description>&lt;p&gt;赶在十月最后一天发一篇水文...&lt;/p&gt;
&lt;p&gt;每年X新生的国际学生中会有一些人来到Cherbourg的&lt;a href="http://www.ecoledesfourriers.fr/"&gt;Ecole des Fourriers&lt;/a&gt;学习四个月的法语. 这四个月的时间也许是X四年里最轻松的一段时间了吧......&lt;/p&gt;
&lt;p&gt;今年有19名学生来Cherbourg, 历史最多. 我们每两周要自己出一份法语刊物, 算是促进写作水平吧, 基本上没啥人看...... 我们这年把杂志取名"MelangeXChange", 取各国文化交汇之意...&lt;/p&gt;
&lt;p&gt;第一期的杂志封面是这样的...&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./Les-fetes-chinoises-en-automne/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;把我和QY写的关于中秋和重阳的文章放上来吧, 很水......&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="les-fetes-chinoises-en-automne"&gt;Les Fêtes Chinoises en Automne&lt;/h1&gt;
&lt;h2 id="la-fete-de-la-lune"&gt;La fête de la lune&lt;/h2&gt;
&lt;h2 id="origins"&gt;Origins&lt;/h2&gt;
&lt;p&gt;La fête de la lune procède du mythe de Chang’e(嫦娥). Chang’e est la femme de HouYi (后羿), un …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 31 Oct 2012 19:46:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-10-31:/Les-fetes-chinoises-en-automne.html</guid><category>french</category></item><item><title>2011巴黎高科(ParisTech)申请总结</title><link>http://x-wei.github.io/PT-summery.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;这个总结早就应该写了, 拖延到今天实在惭愧...... 赶在今年申请的同学还没笔试之前把它写出来吧...&lt;/p&gt;
&lt;h1 id="yi-fa-guo-da-xue-xiao-ba-li-gao-ke-ji-tuan-jie-shao"&gt;一. 法国大学校&amp;amp;巴黎高科集团介绍&lt;/h1&gt;
&lt;p&gt;交大的法国项目很多, 最主要的有巴黎高科(9+9), 中央理工(4+4), 法国高旷联盟(GEM), 以及N+I项目. 但是感觉交大的同学们对于法国项目知道的很少, 我是大三考完托福后才知道有巴黎高科这个项目(感谢HY跑步时告诉我T_T......) &lt;/p&gt;
&lt;p&gt;当然也不能全怪同学们, 教务处不知为啥, 总把法国的项目放到很不显眼的位置. 今年交大刚刚和巴黎高科成立了&lt;a href="http://www.polytechnique.edu/accueil/actualites/l-ecole-paristech-shanghai-jiaotong-accueille-sa-1ere-promotion-271762.kjsp?RH=ACCUEIL-FR"&gt;联合学院&lt;/a&gt;, 按说交大应该会大力宣传下吧, 可是今年的报名通知竟然放在了一堆游学项目里!!...... OK, 吐槽完毕, 开始正题...&lt;/p&gt;
&lt;h2 id="fa-guo-jiao-yu-zhi-du"&gt;法国教育制度&lt;/h2&gt;
&lt;p&gt;法国的教育体系非常奇葩... 它有着世界上独一无二的教育体系(and我记得那次中央理工的校长说他们很为此骄傲==...). 法国的高等教育体系分为大学教育(普通教育)和大学校教育(精英教育), 两套体系完全并行. 见下图(盗图自QYQY): 
&lt;img alt="" class="img-responsive" src="../images/./PT-summery/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;简单讲, 就是法国的学生高中毕业后拿到BAC文凭, 之后可以选择进入大学学习或进入预科学校学习. 进入大学的条件很宽松, 法国的大学教育强调平等接受教育的权利, 宽进严出. 而如果选择进入预科学校, 则要经历两年的密集的数学物理课程培训 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 07 Oct 2012 17:06:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-10-07:/PT-summery.html</guid><category>出国</category><category>巴黎高科</category></item><item><title>git push使用代理</title><link>http://x-wei.github.io/git%20push%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86.html</link><description>&lt;p&gt;来到X之后, 上外网全部要用代理的, 非常不爽... 而且ubuntu的所谓的全局代理设置(首选项--&amp;gt;网络代理)好像并不管用... 设置了之后apt-get命令可以用, 但是常用软件(最常用莫过于chrome了)都要单独设置才可以...&lt;/p&gt;
&lt;p&gt;然而极为不爽的是git, 这边可以clone, 但是一到push的时候就报错:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ git push &lt;/span&gt;
&lt;span class="code-line"&gt;ssh: connect to host github.com port &lt;span class="m"&gt;22&lt;/span&gt;: Network is unreachable&lt;/span&gt;
&lt;span class="code-line"&gt;fatal: The remote end hung up unexpectedly&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前一篇帖子把"Toefl"写成了"Tofel"...... 囧大了, 然后想改过来发现没法push...&lt;/p&gt;
&lt;p&gt;不过今天终于弄好了, 虽然不太明白是怎么弄好了的... 这里记一下.&lt;/p&gt;
&lt;p&gt;参考了&lt;a href="http://blog.csdn.net/itstarting/article/details/7305384"&gt;这篇文章&lt;/a&gt;, 不过好像又不大一样(我实在是不懂这个东西是什么原理, 只要求能用就好...).&lt;/p&gt;
&lt;p&gt;首先, 设置代理地址和端口 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 21 Sep 2012 11:22:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-09-21:/git push使用代理.html</guid><category>git</category></item><item><title>用尽量少的时间考一个够用的分数--一点Toefl/GRE备考经验</title><link>http://x-wei.github.io/GT-summery.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;这个暑假马上结束, 再不写这篇文章就再也没心情写了...... &lt;/p&gt;
&lt;p&gt;2011年3月到6月, 三个多月的时间我完成了托福和GRE的考试, 并且取得了让我比较满意的分数(toefl 105+, AW 3.5, GRE 13500+). 在此分享一些经验, 希望能够帮助大家在尽量不影响GPA的前提下, 用尽量短的时间, 考到一个足够的GT分数...&lt;/p&gt;
&lt;h2 id="yi-wei-shi-yao-yao-yong-jin-liang-shao-de-shi-jian-kao-yi-ge-gou-yong-de-fen-shu"&gt;一. 为什么要"用尽量少的时间考一个够用的分数"&lt;/h2&gt;
&lt;h3 id="jin-shao-de-shi-jian"&gt;"尽少的时间"&lt;/h3&gt;
&lt;p&gt;GT这两样几乎是申请出国必须的敲门砖(请原谅我这么功利...). 但是这些考试难度较大, 即使英语基础比较好的也需要相当大的精力准备. 现在人们喜欢拖延, 所以经常又把GT的备考战线拉得很长, 为了考一个好成绩, 提前好几个月甚至半年开始准备, 耗费了很多时间和精力同时效果却不一定好.&lt;/p&gt;
&lt;h3 id="zu-gou-de-fen-shu"&gt;"足够的分数"&lt;/h3&gt;
&lt;p&gt;申请下来我的感觉是, 对于申请的学校, GT的分数要求仅仅是一个&lt;strong&gt;门槛&lt;/strong&gt;. 虽然一个优异的GT分数会给你的申请加分, 但大多数学校只关心你是否qualify, &lt;strong&gt;你的GT成绩再好也不会比一个美国本土的本科生流利&lt;/strong&gt;, 所以GT的分数在考虑录取是不会是占有很高权重的一项. &lt;/p&gt;
&lt;p&gt;而学校更看重的是"干货": GPA和Research, 这两样才会在申请中起到决定作用. 如果在GT上耗费太多的时间和精力, 势必会对GPA和科研造成影响, 得不偿失. &lt;/p&gt;
&lt;h3 id="its-possible"&gt;It's possible!&lt;/h3&gt;
&lt;p&gt;GRE和托福虽然考试难度大, 但是它们的题型固定 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 09 Sep 2012 11:21:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-09-09:/GT-summery.html</guid><category>出国</category><category>Toefl</category><category>GRE</category></item><item><title>[更新]访问google服务和优酷去广告功能的host列表</title><link>http://x-wei.github.io/google_youku_host_20120706.html</link><description>&lt;p&gt;之前两篇帖子介绍了如何通过修改host文件达到无鸭梨&lt;a href="http://x-wei.github.com/google_host.html"&gt;访问google服务&lt;/a&gt;以及&lt;a href="http://x-wei.github.com/host_youkuqiyi.html"&gt;屏蔽优酷土豆广告&lt;/a&gt;的目的, 虽然不明白这东西到底是啥原理, 但一直用得很爽......&lt;/p&gt;
&lt;p&gt;在学校里使用那一个hosts文件一直很顺利, 没啥毛病, 有人抱怨说那个方法不给力, 我也没管...&lt;/p&gt;
&lt;p&gt;后来回家发现原来的host确实不给力了, 优酷广告可以屏蔽, 但gmail的附件预览不能...... 今晚决定搞一搞这个问题... 原先的文件在学校管用的原因, 我猜测是google的host有不少是ipv6的, 回家后这些行都不行了...... 于是上网搜索, 想改改新的host.&lt;/p&gt;
&lt;p&gt;搜了一大堆都是2011年贴出来的, 不知能不能用... 边搜边想, 这样每隔一段时间去搜host的方法貌似有点笨......&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然后我发现了两个比较给力的host项目......&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="smarthosts"&gt;smarthosts&lt;/h2&gt;
&lt;p&gt;一个是&lt;a href="http://code.google.com/p/smarthosts/"&gt;smarthosts&lt;/a&gt;项目, 在云端不断更新(最近一次是07.03, 两天前)host文件, 而且也提供了各种客户端~ for linux的其实就是&lt;a href="https://smarthosts.googlecode.com/svn/trunk/osx_linux.py"&gt;一个python文件&lt;/a&gt;, 功能就是把云端的文件(地址: &lt;a href="https://smarthosts.googlecode.com/svn/trunk/hosts"&gt;https://smarthosts.googlecode.com/svn/trunk/hosts&lt;/a&gt;)copy到本地覆盖原先的文件... 所以(对我来说 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 06 Jul 2012 00:36:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-07-06:/google_youku_host_20120706.html</guid><category>google</category><category>host</category></item><item><title>步入七月</title><link>http://x-wei.github.io/%E6%AD%A5%E5%85%A5%E4%B8%83%E6%9C%88.html</link><description>&lt;p&gt;面临一个早就很渴望的暑假, 两个多月的自由时间, 可以做很多事情, 还有很多雄心勃勃的暑假计划希望在这个暑假充实自己. 可是回家来一周多基本上只在吃饭+睡觉+上网发呆╮(╯▽╰)╭......&lt;/p&gt;
&lt;p&gt;额, 所以得打起精神来做点事情, 像这样的暑假以后估计不多了. 其实&lt;code&gt;必须做的&lt;/code&gt;/&lt;code&gt;该做的&lt;/code&gt;/&lt;code&gt;想做的&lt;/code&gt;事情还是蛮多的, 比如一些以前想研究的小东西, 比如之前喊着要写的一些post...&lt;/p&gt;
&lt;p&gt;所以写这篇水文冒个泡, 算是个宣言吧... 我也希望能把这个小blog慢慢写下去~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Allez!~&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 03 Jul 2012 21:41:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-07-03:/步入七月.html</guid></item><item><title>水源PPP板图片下载器</title><link>http://x-wei.github.io/%E6%B0%B4%E6%BA%90PPP%E6%9D%BF%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E5%99%A8.html</link><description>&lt;p&gt;这个其实是三月份的时候做的, 当时刚刚学会用urllib和正则表达式做一些爬虫, 于是结合人民群众的需要, 写了个小脚本(福利~) &lt;/p&gt;
&lt;p&gt;不过现在我还只是会照葫芦画瓢那样用urllib, 没什么长进...&lt;/p&gt;
&lt;p&gt;github地址: &lt;a href="https://github.com/X-Wei/yssy_ppp_pic_downloader"&gt;https://github.com/X-Wei/yssy_ppp_pic_downloader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;p&gt;功能就是下载水源ppperson板里帖子的图片, 并且每个帖子一个文件夹放好. 通过修改main函数可以选择下载最近一页的帖子还是下载全部帖子(或者最近几页的帖子)&lt;/p&gt;
&lt;p&gt;原理很简单, 分析网页的html代码, 用正则表达式找出图片的地址然后下载到本地. 当时我已经写了两三个简单的爬虫, 所以这个写得蛮快, 而且只用50行就搞定了...&lt;/p&gt;
&lt;p&gt;不会用多线程, 只能一张一张下载, 帖子数目实在太多了, 我让它跑了一晚上, 第二天跑完, 下载了8个G的图, 几千个文件夹(囧)......&lt;/p&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;p&gt;不过还是遇到了一些问题, 比较老的帖子会有些图片404, 这时或者这个帖子对应的文件夹为空, 或者里面的图片其实不是图片, 而是出错信息的html代码(虽然看后缀是个图片). 我需要把那些不是图片的文件删掉, 而且要删掉所有的空文件夹. &lt;/p&gt;
&lt;p&gt;删除不是图片的文件(其实应该是删除纯文本文件), 在水源发贴问, 用shell命令(perl)做到了(虽然不明白为什么这样写...):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find yssy_ppp …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 07 Jun 2012 20:14:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-06-07:/水源PPP板图片下载器.html</guid><category>git</category><category>python</category><category>shell</category></item><item><title>用pandoc自由转换markdown与html格式</title><link>http://x-wei.github.io/%E7%94%A8pandoc%E8%87%AA%E7%94%B1%E8%BD%AC%E6%8D%A2markdown%E4%B8%8Ehtml%E6%A0%BC%E5%BC%8F.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;markdown虽然写起来方便, 但是要预览的话还要用ReText打开, 而且ReText好像是Qt程序, 打开文件时不如别的编辑器那么流畅. 所以想找一个可以把markdown文件变成html格式的工具.&lt;/p&gt;
&lt;p&gt;我甚至搜了很久"markdown2html"(github上居然可以搜到好几个项目...) 而没有注意到, 在终端输入"html2markdown"时显示的警告:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ html2markdown&lt;/span&gt;
&lt;span class="code-line"&gt;程序“html2markdown”尚未安装。  您可以使用以下命令安装：&lt;/span&gt;
&lt;span class="code-line"&gt;sudo apt-get install pandoc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;后来安装了pandoc(&lt;code&gt;sudo apt-get install pandoc&lt;/code&gt;), 其实只要看看帮助就知道咋用了: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ pandoc -h&lt;/span&gt;
&lt;span class="code-line"&gt;pandoc &lt;span class="o"&gt;[&lt;/span&gt;OPTIONS&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;FILES&lt;span class="o"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Input formats:  native, markdown, markdown+lhs, rst, rst+lhs, html, latex, latex+lhs&lt;/span&gt;
&lt;span class="code-line"&gt;Output formats:  native, html …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 07 Jun 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-06-07:/用pandoc自由转换markdown与html格式.html</guid><category>markdown</category></item><item><title>寂静之声The Sound of Silence[Simon&amp;Garfunkel]</title><link>http://x-wei.github.io/TheSoundofSilence.html</link><description>&lt;p&gt;所有事都完成, 开始写歌评.&lt;/p&gt;
&lt;h2 id="introyin-zi"&gt;intro引子&lt;/h2&gt;
&lt;p&gt;本来我是计划从老鹰的一首歌开始写的, 昨天甚至计划好了第一首就写Hotel California. &lt;/p&gt;
&lt;p&gt;BUT SOMEHOW, 决定第一首写它, 寂静之声(SoS).&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./TheSoundofSilence/SnG.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;如果把硬盘里的歌全部删了, 只能留十首歌的话, 我是肯定会留下这一首.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;歌名: The Sound of Silence&lt;/li&gt;
&lt;li&gt;专辑: The Graduate&lt;/li&gt;
&lt;li&gt;歌手: Simon&amp;amp;Garfunkel&lt;/li&gt;
&lt;li&gt;年代: 1967&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;不必多说, 这首歌应该知名度很高的吧, 西蒙与加芬科的成名作. Simon&amp;amp;Garfunkel组合凭借电影&amp;lt;&amp;lt;毕业生&amp;gt;&amp;gt;的两首配乐被许多人所熟知(另一首是Scarborough Fair). &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./TheSoundofSilence/Graduate.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;以下摘自百度百科:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《寂静之声》旋律飘缓低迷，歌词充满了一种幻觉般的意境。细细听来，仿佛在诉说着年轻无助的一种宣泄。眼前似乎看到一个懵懂无知的女孩，独自一人行走在铺着鹅卵石的狭窄、清冷的小巷里，喧嚣的人群在她身后渐渐远去，前面是没有尽头的黑夜……歌曲如果说是属于民谣的话似乎太深邃，如果说随着强劲的乐曲而震荡的节奏是摇滚的话，却太细腻 …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 05 Jun 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-06-05:/TheSoundofSilence.html</guid><category>Simon&amp;Garfunkel</category></item><item><title>交大beamer模板</title><link>http://x-wei.github.io/beamer_template.html</link><description>&lt;p&gt;毕设完了, 把答辩时用的beamer模板拿出来分享下.&lt;/p&gt;
&lt;p&gt;github项目地址:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/X-Wei/aBeamerTemplate4SJTU"&gt;https://github.com/X-Wei/aBeamerTemplate4SJTU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我是tex菜鸟, 基本是遇见什么问题然后上网搜一通找到解决方案... 这个模板自然也是参考的别人的了...&lt;/p&gt;
&lt;p&gt;参考自&lt;a href="http://yixf.name/2011/06/21/%E4%BD%BF%E7%94%A8xetex%E7%9A%84beamer%E6%A8%A1%E7%89%88/"&gt;Yixf’s blog&lt;/a&gt;, 我只是修改了一下主题, 换了一下交大的图标, 并且做了一些常用功能的例子...&lt;/p&gt;
&lt;p&gt;效果截图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./beamer_template/Screenshot.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用xelatex编译生成, latex估计不行, xelatex的配置参考&lt;a href="http://x-wei.github.com/xelatex_zh.html"&gt;这里&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑内容直接修改beame_body.tex即可, 改变设置一般在beamer_header.tex里&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我用的是文泉驿的字体, 可以修改beamer_header.tex改变字体设置, 查看已安装的中文字体的命令为: &lt;code&gt;fc-list :lang=zh-cn&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;个人一点感觉: 用tex写ppt有时也会因为少些括号或者什么地方没注意老编译不过, 所以用tex写也不一定能比用powerpoint方便, 不论啥工具, 只要能&lt;strong&gt;get things done&lt;/strong&gt;,就是好工具~&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 02 Jun 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-06-02:/beamer_template.html</guid><category>tex</category><category>git</category></item><item><title>github上两个比较有用的小项目</title><link>http://x-wei.github.io/github%E4%B8%8A%E4%B8%A4%E4%B8%AA%E6%AF%94%E8%BE%83%E6%9C%89%E7%94%A8%E7%9A%84%E5%B0%8F%E9%A1%B9%E7%9B%AE.html</link><description>&lt;p&gt;github上的好东西不少, 最近发现了两个比较有用的python程序, 这俩功能都是我比较想要的, 有需求就会有牛人去实现~&lt;/p&gt;
&lt;h1 id="1-shi-pin-xia-zai-qi-youku-lixian"&gt;1. 视频下载器youku-lixian&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/iambus/youku-lixian"&gt;https://github.com/iambus/youku-lixian&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可不止支持下载优酷的视频奥, 土豆, 奇艺, 新浪, 酷6...... 通吃~&lt;/p&gt;
&lt;p&gt;而且每个都只是一个小小的py文件, 直接就可以运行, 比起什么优酷客户端, 奇艺客户端小多了! 太赞了!~&lt;/p&gt;
&lt;h1 id="2-115wang-pan-zi-dong-yao-jiang"&gt;2. 115网盘自动摇奖&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/2698830"&gt;https://gist.github.com/2698830&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个功能我曾经想要实现, 但是关于网络通信方面知道的太少了, 搞了一通也没有成功. 现在有人把它共享出来, 代码居然还不到100行, 强大啊~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 31 May 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-05-31:/github上两个比较有用的小项目.html</guid><category>git</category><category>python</category></item><item><title>给网页添加交互的flash小老鼠</title><link>http://x-wei.github.io/%E7%BB%99%E7%BD%91%E9%A1%B5%E6%B7%BB%E5%8A%A0%E4%BA%A4%E4%BA%92%E7%9A%84flash%E5%B0%8F%E8%80%81%E9%BC%A0.html</link><description>&lt;p&gt;昨天晚上, &lt;a href="http://tieba.baidu.com/p/1621093558#10006-renren-1-97561-1e150dff36f3a7351b3a37e9a1af102e"&gt;这个帖子&lt;/a&gt;突然火了, 号称是交大技术男给女朋友做的... 亮点在于那只小老鼠:&lt;/p&gt;
&lt;p&gt;&lt;object class="embed-responsive-item" data="http://hosting.gmodules.com/ig/gadgets/file/112581010116074801021/hamster.swf?" height="225" style="outline:none;" type="application/x-shockwave-flash" width="300"&gt;&lt;param name="movie" value="http://hosting.gmodules.com/ig/gadgets/file/112581010116074801021/hamster.swf?"&gt;&lt;/param&gt;&lt;param name="AllowScriptAccess" value="always"&gt;&lt;/param&gt;&lt;param name="wmode" value="opaque"&gt;&lt;/param&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;我点进去看, 也很吃惊, 不过为什么那是一个flash? 而且美工做得这么好...&lt;/p&gt;
&lt;p&gt;然后今天有人爆料, 这个其实是用的现成的材料, 网站是: &lt;/p&gt;
&lt;p&gt;&lt;a href="http://abowman.com/"&gt;http://abowman.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个网站提供了很多gadgets, 而且都做得好厉害, 还提供了对应的html代码, 只要粘贴进文件就能够看见了...&lt;/p&gt;
&lt;p&gt;所以我把那个小老鼠搬到了侧边栏...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那个网站的一些小工具展示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Penguins:&lt;/p&gt;
&lt;p&gt;&lt;object class="embed-responsive-item" data="http://penguinsgadget.googlecode.com/svn/trunk/penguins.swf?" height="200" style="outline:none;" type="application/x-shockwave-flash" width="300"&gt;&lt;param name="movie" value="http://penguinsgadget.googlecode.com/svn/trunk/penguins.swf?"&gt;&lt;/param&gt;&lt;param name="AllowScriptAccess" value="always"&gt;&lt;/param&gt;&lt;param name="wmode" value="opaque"&gt;&lt;/param&gt;&lt;param name="scale" value="noscale"&gt;&lt;/param&gt;&lt;param name="salign" value="tl"&gt;&lt;/param&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;Tree Frog:&lt;/p&gt;
&lt;p&gt;&lt;object class="embed-responsive-item" data="http://hosting.gmodules.com/ig/gadgets/file/112581010116074801021/treefrog.swf?" height="200" style="outline:none;" type="application/x-shockwave-flash" width="300"&gt;&lt;param name="movie" value="http://hosting.gmodules.com/ig/gadgets/file/112581010116074801021/treefrog.swf?"&gt;&lt;/param&gt;&lt;param name="AllowScriptAccess" value="always"&gt;&lt;/param&gt;&lt;param name="wmode" value="opaque"&gt;&lt;/param&gt;&lt;param name="scale" value="noscale"&gt;&lt;/param&gt;&lt;param name="salign" value="tl"&gt;&lt;/param&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;Newton’s Cradle:&lt;/p&gt;
&lt;p&gt;&lt;object class="embed-responsive-item" data="http://hosting.gmodules.com/ig/gadgets/file/112581010116074801021/newtonsCradle.swf?" height="225" style="outline:none;" type="application/x-shockwave-flash" width="300"&gt;&lt;param name="movie" value="http://hosting.gmodules.com/ig/gadgets/file/112581010116074801021/newtonsCradle.swf?"&gt;&lt;/param&gt;&lt;param name="AllowScriptAccess" value="always"&gt;&lt;/param&gt;&lt;param name="wmode" value="opaque"&gt;&lt;/param&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;Fish:&lt;/p&gt;
&lt;p&gt;&lt;object class="embed-responsive-item" data="http://hosting.gmodules.com/ig/gadgets/file/112581010116074801021/fish.swf?" height="200" style="outline:none;" type="application/x-shockwave-flash" width="300"&gt;&lt;param name="movie" value="http://hosting.gmodules.com/ig/gadgets/file/112581010116074801021/fish.swf?"&gt;&lt;/param&gt;&lt;param name="AllowScriptAccess" value="always"&gt;&lt;/param&gt;&lt;param name="wmode" value="opaque"&gt;&lt;/param&gt;&lt;param name="scale" value="noscale"&gt;&lt;/param&gt;&lt;param name="salign" value="tl"&gt;&lt;/param&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;不过貌似我用的模板的宽度和这个flash有点不匹配... 可能过几天就把它从侧栏撤掉了...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 30 May 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-05-30:/给网页添加交互的flash小老鼠.html</guid></item><item><title>关于用pelican写博客的三点tips</title><link>http://x-wei.github.io/%E5%85%B3%E4%BA%8E%E7%94%A8pelican%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%89%E7%82%B9tips.html</link><description>&lt;h1 id="1cha-ru-shi-pin"&gt;1.插入视频&lt;/h1&gt;
&lt;p&gt;效果就像校内网日志那样, 可以内嵌的视频.&lt;/p&gt;
&lt;p&gt;其实很简单, 只需要把html代码放进markdown源文件就行了! 而视频的html代码在视频网站上一般都会提供:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./关于用pelican写博客的两点tips/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;复制下来放进源文件即可&lt;/p&gt;
&lt;h1 id="2shan-chu-xian"&gt;2.删除线&lt;/h1&gt;
&lt;p&gt;markdown不支持删除线? 反正我没有在教程里找到... 但是删除线确实是个有用的功能, 在zim里记笔记的时候我就经常使用.
但是好像听说markdown是支持html内容的, 那么, 是不是直接加html的删除线代码就行了呢? 果然~!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;s&amp;gt;&lt;/span&gt;文本&lt;span class="nt"&gt;&amp;lt;/s&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;or&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;strike&amp;gt;&lt;/span&gt;文本&lt;span class="nt"&gt;&amp;lt;/strike&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;嗯, 更复杂的html样式如果markdown没有的话也可以用这种方法弄~&lt;/p&gt;
&lt;h1 id="3gei-bo-ke-jia-ru-fen-xiang-an-niu"&gt;3.给博客加入分享按钮&lt;/h1&gt;
&lt;p&gt;这个也是用网上找的html代码, 然后修改了一下主题(pelican-themes/bs5)中的一个html文件, 不过我水平太菜, 改了好久也没能让分享按钮处于标题下方...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2012-05-31补充&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原先那个分享的按钮不好看也不很好用, 我借鉴了&lt;a href="http://www.ubuntusoft.com/"&gt;ubuntusoft&lt;/a&gt;网站上的分享按钮和回顶部按钮, 查看了下网页代码, 原来是用的百度分享以及友荐按钮, 修改主题文件&lt;code&gt;./pelican-themes/bs6/templates/base.html&lt;/code&gt;,在 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sun, 27 May 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-05-27:/关于用pelican写博客的三点tips.html</guid><category>pelican</category><category>markdown</category></item><item><title>TODO list--忙完这一段之后要做的事情</title><link>http://x-wei.github.io/TODOlist-20120511.html</link><description>&lt;p&gt;好吧最近太废了... 主观原因是心不静, 懒惰拖延, 客观原因(理由)是毕设和法语...&lt;/p&gt;
&lt;p&gt;仔细分析一下, 貌似目前还是要专心把毕设跟法语搞定. 但是我还是想在毕业前多做一点事情, 列一个清单, 等忙完这一阵就开始做一下这些事情: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;写歌评&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eagles, Simon&amp;amp;Garfunkel, Brothers Four, 主要是这三个乐队的, 大概会有20首吧... 可能毕业前写不完, 但是一定要开始写, 我觉得关于某些歌我会有很多要写的.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;写写我的毕设&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能我做的毕设没什么意思, 但是至少可以写写那些学到的matlab技巧.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;写(所谓的)总结贴&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个是GT的一些经验总结, 一个是PT申请的一些经验总结. 这两件事大概就是我的2011的主线. 唉, 要是前者在2011年7月写掉, 后者在2011年12月写掉该多好!......&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;行了, 还是好好对付法语考试以及毕设论文去吧...&lt;/p&gt;&lt;/hr&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 11 May 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-05-11:/TODOlist-20120511.html</guid></item><item><title>打乱文本的行</title><link>http://x-wei.github.io/%E6%89%93%E4%B9%B1%E6%96%87%E6%9C%AC%E7%9A%84%E8%A1%8C.html</link><description>&lt;p&gt;今天cbl问了我一个问题: 怎样打乱一个文本文件的所有行??&lt;/p&gt;
&lt;p&gt;仔细一想, 确实有难度... 因为那个文本文件居然有1G, 用python读进内存再打乱的思路估计不行啊... 那么awk, shell什么的有没有解决方法? 搜到了一些帖子, 但是稍微复杂一点的shell脚本我也看不懂(弱爆了)...&lt;/p&gt;
&lt;p&gt;我甚至想大概vim会提供这个功能吧, 没想到在搜的时候居然搜到了一个现成的shell命令: &lt;strong&gt;shuf&lt;/strong&gt;!!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ shuf --help&lt;/span&gt;
&lt;span class="code-line"&gt;用法： shuf &lt;span class="o"&gt;[&lt;/span&gt;选项&lt;span class="o"&gt;]&lt;/span&gt;... &lt;span class="o"&gt;[&lt;/span&gt;文件&lt;span class="o"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;　或者:  shuf -e &lt;span class="o"&gt;[&lt;/span&gt;选项&lt;span class="o"&gt;]&lt;/span&gt;... &lt;span class="o"&gt;[&lt;/span&gt;参数&lt;span class="o"&gt;]&lt;/span&gt;...&lt;/span&gt;
&lt;span class="code-line"&gt;　或者:  shuf -i LO-HI &lt;span class="o"&gt;[&lt;/span&gt;选项&lt;span class="o"&gt;]&lt;/span&gt;...&lt;/span&gt;
&lt;span class="code-line"&gt;把输入行按随机顺序输出到标准输出。&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;长选项必须使用的参数对于短选项时也是必需使用的。&lt;/span&gt;
&lt;span class="code-line"&gt;  -e, --echo            将每个参数视为输入行&lt;/span&gt;
&lt;span class="code-line"&gt;  -i, --input-range&lt;span class="o"&gt;=&lt;/span&gt;LO-HI   将LO 到HI 的每个数字视为输入行&lt;/span&gt;
&lt;span class="code-line"&gt;  -n, --head-count&lt;span class="o"&gt;=&lt;/span&gt;行数       最多输出指定的行数&lt;/span&gt;
&lt;span class="code-line"&gt;  -o, --output&lt;span class="o"&gt;=&lt;/span&gt;文件       将结果输出到指定文件而非标准输出&lt;/span&gt;
&lt;span class="code-line"&gt;      --random-source …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 01 May 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-05-01:/打乱文本的行.html</guid><category>shell</category></item><item><title>在bolg页面上加入ubuntu发布倒计时图标</title><link>http://x-wei.github.io/%E5%9C%A8bolg%E9%A1%B5%E9%9D%A2%E4%B8%8A%E5%8A%A0%E5%85%A5ubuntu%E5%8F%91%E5%B8%83%E5%80%92%E8%AE%A1%E6%97%B6%E5%9B%BE%E6%A0%87.html</link><description>&lt;p&gt;明天ubuntu12.04&lt;strong&gt;LTS&lt;/strong&gt;就要发布了! 然后今天下课回来在各种网站上闲逛, 突然发现了这个页面: &lt;a href="http://www.ubuntu.com/community/countdown"&gt;给网页添加ubuntu发布倒计时&lt;/a&gt;. 很厉害的样子, 介绍说只要把那一段代码加入网页的html文件就可以了. 我试了一下, 直接加在index.html上面--还真的可以唉~~&lt;/p&gt;
&lt;p&gt;不过, pelican每次都是自动生成和更新index.html的啊, 难道每次都要手动加入这一行代码?? 难道还要自己修改pelican的代码??......&lt;/p&gt;
&lt;p&gt;此时我想到了farseerfc学长的配置文件, 其中我把他的微博秀那几行注释掉了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;#~ SIDEBAR_CUSTOM = r"""&lt;/span&gt;
&lt;span class="code-line"&gt;#~ &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;h4&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-list-alt"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;Weibo&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;#~ &lt;span class="nt"&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"550"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"share_self"&lt;/span&gt;  &lt;span class="na"&gt;frameborder=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;scrolling=&lt;/span&gt;&lt;span class="s"&gt;"no"&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;#~&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;http://widget.weibo.com/weiboshow/index …&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 25 Apr 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-04-25:/在bolg页面上加入ubuntu发布倒计时图标.html</guid><category>pelican</category></item><item><title>不用安装插件, 设置chrome点击播放flash</title><link>http://x-wei.github.io/chrome_flashblock.html</link><description>&lt;p&gt;以前搜索怎么加速打开网页的速度, 有人会推荐flashblock插件. 安装之后, 所有的flash(视频也好, 广告也好)都不会自动播放, 只有自己去点击一下才会播放. 当时觉得这样挺好啊, 因为flash肯定占用了不少带宽以及cpu嘛~&lt;/p&gt;
&lt;p&gt;后来, 发现cbl同学没有安装插件也实现了这样的效果, 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./chrome_flashblock/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;cbl教我把chrome设置成插件点击播放, 个人感觉这样挺有用的~
大概是两步:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步&lt;/strong&gt;, 扳手菜单--&amp;gt;首选项--&amp;gt;高级选项--&amp;gt;隐私设置--&amp;gt;内容设置&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./chrome_flashblock/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;然后找到"插件"这一项, 选择"点后运行"
&lt;img alt="" class="img-responsive" src="../images/./chrome_flashblock/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;这样设置之后, chrome就不会自动播放flash, 然后再设置点击运行flash.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步&lt;/strong&gt;, 在地址栏输入: &lt;chrome: flags=""&gt;&lt;/chrome:&gt;, 找到"点后运行"一行, 选择"启用".&lt;/p&gt;
&lt;p&gt;OK, 到此为止, 就可以不装插件实现flashblock效果了~~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 24 Apr 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-04-24:/chrome_flashblock.html</guid><category>google</category></item><item><title>使用google自定义搜索以及让google收录自己的网站</title><link>http://x-wei.github.io/add-google-custom-search.html</link><description>&lt;p&gt;虽然我的blog点击人数可能还是个位数的, 我还是每天都想折腾一下它...&lt;/p&gt;
&lt;p&gt;bootstrap2模板里提供了很丰富的内容(可以看farseerfc学长的页面), 其中的google站内搜索我觉得很有用, 于是也自己去弄了一下...&lt;/p&gt;
&lt;h1 id="shi-yong-googlezi-ding-yi-sou-suo"&gt;使用google自定义搜索&lt;/h1&gt;
&lt;p&gt;要登录google&lt;a href="http://www.google.com/cse/?hl=zh-CN"&gt;自定义搜索&lt;/a&gt;, 的页面, 用google帐号登录, 然后选择新建一个自定义搜索引擎, 会看到这样的界面: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./add-google-custom-search/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;第一项的名称和描述啥的随便填就行, 关键是第二项"要搜索的网站", 可以点击"了解详情"看一下应该怎么写. 比如我的网站是&lt;code&gt;x-wei.github.com&lt;/code&gt;, 而且我想是在这个网站的所有子页面中搜索, 于是这里就填写: &lt;code&gt;x-wei.github.com/*&lt;/code&gt;即可~ 第三项当然是免费版, 然后下一步.&lt;/p&gt;
&lt;p&gt;下一步是一个测试, 可以在搜索框里尝试一下能不能得到想要的结果(&lt;strong&gt;我就是这里有问题的, 待会说&lt;/strong&gt;). 如果没问题, 点击下一步, 下一步是给出了一段html代码, 把这些代码加入网页就可以添加google自定义搜索栏了(不过使用pelican写博客的话就不用这样了, 见后文).&lt;/p&gt;
&lt;p&gt;嗯, 这个过程还是非常简单的吧!~&lt;/p&gt;
&lt;h1 id="ru-he-ba-zi-ding-yi-sou-suo-lan-jia-ru-pelicansheng-cheng-de-ye-mian"&gt;如何把自定义搜索栏加入pelican生成的页面&lt;/h1&gt;
&lt;p&gt;首先, 可能只能使用bootstrap2这个主题... 然后, 在&lt;code&gt;settings.py …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 23 Apr 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-04-23:/add-google-custom-search.html</guid><category>pelican</category><category>google</category></item><item><title>修改host去除优酷奇艺网站广告</title><link>http://x-wei.github.io/host_youkuqiyi.html</link><description>&lt;p&gt;优酷现在的广告已经是半分钟长了?? 所以屏蔽这些广告还是很有必要滴~&lt;/p&gt;
&lt;p&gt;之前, 马阳同学给我一个修改host的方式, 用了几个月之后, 发现不好使了: 虽然不会显示广告, 但是不会直接跳过去, 而是显示"广告不能正常播放..." 然后还是要等待半分钟才能看... &lt;/p&gt;
&lt;p&gt;后来, 看了&lt;a href="http://www.nenew.net/youku-qiyi-hosts-windows-win7-windows7-vista-ubuntu-linux-archlinux-firefox-chrome.html"&gt;奶牛的博客&lt;/a&gt;, 终于找到了解决办法, 至少到目前还是好使的~&lt;/p&gt;
&lt;h1 id="di-yi-bu"&gt;第一步&lt;/h1&gt;
&lt;p&gt;首先, 添加屏蔽广告的host. 关于host的修改, 直接参考&lt;a href="http://x-wei.github.com/google_host.html"&gt;这篇博客&lt;/a&gt;, 把里面host的全部内容粘贴进对应的文件中.&lt;/p&gt;
&lt;h1 id="di-er-bu"&gt;第二步&lt;/h1&gt;
&lt;p&gt;然后, 按照奶牛的办法:&lt;/p&gt;
&lt;h2 id="linuxyong-hu"&gt;linux用户&lt;/h2&gt;
&lt;p&gt;找到: &lt;code&gt;~/.macromedia/Flash_Player/#SharedObjects/某某名字文件夹/&lt;/code&gt; 这里, 可能会有两个文件夹: &lt;code&gt;www.iqiyi.com&lt;/code&gt;以及&lt;code&gt;static.youku.com&lt;/code&gt;, 删除之, 然后新建两个空白文件, 名字就取这两个文件夹的名字(要是没有这俩文件夹, 则直接新建这两个空白文件).&lt;/p&gt;
&lt;h2 id="windowsyong-hu"&gt;windows用户&lt;/h2&gt;
&lt;p&gt;和linux用户一样, 只是那个文件夹在: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;(xp …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 19 Apr 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-04-19:/host_youkuqiyi.html</guid><category>host</category></item><item><title>修改host访问google的所有服务</title><link>http://x-wei.github.io/google_host.html</link><description>&lt;p&gt;google的服务(mail, doc, site, code, project...)很多都实在很方便(个人感觉QQ, 网易什么的和它绝对不是一个档次). 但是比较悲剧的是, google服务在国内不很稳定, 时不时上不去(比如gmail), 而有的服务(比如site)居然完全上不去...&lt;/p&gt;
&lt;p&gt;自己的经验, 使用修改host的方式可以比较好的解决这个问题(而youtube啊, facebook啊什么的修改了不一定好使...) 这里贴一下..&lt;/p&gt;
&lt;p&gt;其实就是修改一个文件...linux用户修改&lt;code&gt;/ect/hosts&lt;/code&gt;, windows用户修改&lt;code&gt;c:/windows/system32/drivers/etc/hosts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2012-07-06更新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面这些host不给力了, 新的host见&lt;a href="http:x-wei.github.com/google_youku_host_20120706.html"&gt;我的日志&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;
关于google的host, 网上到处都是, 比如&lt;a href="http://www.douban.com/note/161139377/"&gt;这里&lt;/a&gt;, 不过我没有试过这里的host可不可以(应该可以吧...), 还是把我的host贴出来吧. 这里说一下, 我同时还加了去优酷广告(这里修改完了还要&lt;a href="http://x-wei.github.com/host_youkuqiyi.html"&gt;再处理一下&lt;/a&gt;), 上youtube(貌似有点问题). 把这些东西粘贴进hosts文件 …&lt;/s&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 18 Apr 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-04-18:/google_host.html</guid><category>google</category><category>host</category></item><item><title>用pelican在github上创建自己的博客!</title><link>http://x-wei.github.io/pelican_github_blog.html</link><description>&lt;p&gt;[TOC] &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2016更新&lt;/strong&gt;&lt;br&gt;
新博客用了pelican3, 参考&lt;a href="http://x-wei.github.io/pelican3_blog_and_theme.html"&gt;这里&lt;/a&gt; &lt;/br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;折腾了许久, 终于把&lt;a href="http://x-wei.github.com"&gt;我的博客&lt;/a&gt;搞得差不多了, 在此写一个总结, 以免自己以后忘了, 并且给和我一样菜的人提供一点参考....&lt;/p&gt;
&lt;h2 id="xian-che-dian-bie-de"&gt;先扯点别的&lt;/h2&gt;
&lt;p&gt;其实啊, 很早就想要建立自己的博客, 把值得分享的东西拿出来放到网上, 但是又不屑于使用网易, 百度等提供的现成服务, 技术又很菜... 于是一直拖着. zim的出现让我很欣喜--zim可以写类似于博客的东西(不过是给自己看的~), 记录有价值的内容. 但是怎么把我的一些总结放到网上?? 我先后考虑了这些东西:&lt;/p&gt;
&lt;p&gt;googlesite--&amp;gt;wordpress--&amp;gt;jekyll+github--&amp;gt;pelican+github&lt;/p&gt;
&lt;p&gt;googlesite是个很好的工具, &lt;strong&gt;很容易上手&lt;/strong&gt;(google好赞...), 我曾经用它做过一个个人页面. 但是这种傻瓜工具的缺点就是: 没法自己定制... 当我发现googlesite的bolg页面不支持标签云的时候, 就决定不用它了... 况且googlesite在国内需要修改一下host才能访问... &lt;/p&gt;
&lt;p&gt;然后是wordpress, 这个似乎目前也是最流行的网页制作工具, 我看到了很多很多大牛小牛使用WP搭建的自己的网站, 而且都是自己的顶级域名, 看上去就灰常霸气~ 当我终于有空折腾, 兴冲冲地研究WP时, 却发现&lt;strong&gt;顶级域名注册都是要交钱的&lt;/strong&gt;, 还要弄什么vpn …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Fri, 13 Apr 2012 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-04-13:/pelican_github_blog.html</guid><category>pelican</category><category>git</category></item><item><title>Hello World!</title><link>http://x-wei.github.io/hello-world.html</link><description>&lt;p&gt;建立起了我的github博客~!&lt;/p&gt;
&lt;p&gt;作为一个很菜的低端桌面(ubuntu, gnome)用户, 这个还是相当不容易啊~~&lt;/p&gt;
&lt;p&gt;本来考虑使用的是jekyll, 但是安装过程老是报错... 最终选择了pelican生成静态页面, 这个工具很好用, 只是目前关注度不足啊~ 关于pelican的介绍可以参考
&lt;a class="reference external" href="http://farseerfc.github.com/try-pelican.html"&gt;这里&lt;/a&gt;
, jekyll我折腾了N久没有搞定, 而pelican很快就装好了~ 非常感谢
&lt;a class="reference external" href="http://farseerfc.github.com/index.html"&gt;farseerfc&lt;/a&gt;
同学, 非常耐心地回答我这个菜鸟的问题... 不过还是自力更生比较好, 好好看它的
&lt;a class="reference external" href="http://readthedocs.org/docs/pelican/en/2.8/"&gt;文档&lt;/a&gt;
吧~&lt;/p&gt;
&lt;p&gt;另外, 我之前用
&lt;a class="reference external" href="http://zim-wiki.org/"&gt;zim&lt;/a&gt;
写了一些笔记, 准备把值得分享的部分放到blog上来. zim0.56刚刚开始支持把笔记导出成markdown格式, 这实在是太棒啦!!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 09 Apr 2012 20:39:00 +0200</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-04-09:/hello-world.html</guid><category>pelican</category></item><item><title>使用google doc建立在线调查表!~</title><link>http://x-wei.github.io/google_doc_form.html</link><description>&lt;p&gt;在线办公我以前试过zoho, 但是一个xls文件有多个人同时编辑时会有问题...&lt;/p&gt;
&lt;p&gt;昨天收到学长关于春游的&lt;a href="https://docs.google.com/spreadsheet/viewform?formkey=dDhzYnRNVHFReXRoanlpZWRyYjM4Y2c6MQ"&gt;调查表&lt;/a&gt;, 居然是用google doc做的, 很给力. 我早就想做一个分布式通讯录, 所以研究了一下. 越来越感觉google提供的服务(google doc, google site, google project)太方便了!!!&lt;/p&gt;
&lt;h2 id="jian-li"&gt;建立&lt;/h2&gt;
&lt;p&gt;大概的流程是这样的:
用google帐号进入google doc, 然后点击creat-&amp;gt;form, 会看到这样的页面:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./google_doc_form/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;嗯, 功能是比较简单但是够用!
点击add item 或者右边俩方框的按钮, 就可以添加问题了, 很easy, 我做的同学录是这个样子的:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./google_doc_form/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;然后还可以选择主题...&lt;/p&gt;
&lt;h2 id="fa-bu"&gt;发布&lt;/h2&gt;
&lt;p&gt;编辑完成之后, 就可以发布了, 点击右上角的"Share"(有个g+的图标, 我一开始以为是像人人那样的分享呢...), 之后页面底部就会有一个链接~! 把这个链接发给别人, 别人就可以提交了~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./google_doc_form/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;btw, 如果不想发布, 只想发给几个人看的话, 点击share右边的那个"email this …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Wed, 21 Mar 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-03-21:/google_doc_form.html</guid><category>google</category></item><item><title>自定义nautilus的菜单栏</title><link>http://x-wei.github.io/nautilus-menu.html</link><description>&lt;p&gt;Nautilus是gnome的默认文件浏览器, 那次更新安装了elementory主题的Nautilus之后, 发现菜单栏少了些很常用的功能: 比如上一层,主页, 刷新等...&lt;/p&gt;
&lt;p&gt;其实可以自定义的, 编辑-&amp;gt;customize toolbar:
&lt;img alt="" class="img-responsive" src="../images/./nautilus-menu/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;顺便提一下, 发现了些方便的快捷键:
alt+up: 父目录
alt+left: 返回
~~alt+home: 到~/~~(不好使?)
F2: 重命名
F5/ctrl+R: 刷新
ctrl+L: 输入位置地址
ctrl+H:显示隐藏文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;--imported from zim&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 08 Mar 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-03-08:/nautilus-menu.html</guid><category>外观</category><category>快捷键</category></item><item><title>无聊中的发现--递归截图~</title><link>http://x-wei.github.io/recursion-scr-shot.html</link><description>&lt;p&gt;就放一张图片, 知道怎么做的吗?~&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./recursion-scr-shot/Screenshot-7.png"/&gt;&lt;/p&gt;
&lt;p&gt;btw, 真心感觉zim可以作为一个写给自己的博客了, 不仅仅是记笔记... BON!~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;--imported from zim&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 08 Mar 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-03-08:/recursion-scr-shot.html</guid></item><item><title>tex插入程序代码--so easy~</title><link>http://x-wei.github.io/tex_insert_code.html</link><description>&lt;p&gt;这个问题... 我本来想用python解决的...&lt;/p&gt;
&lt;p&gt;但是显然应该先搜一下吧... 果然, 早就有人解决了(其实是tex的常用命令里就有的), 比如&lt;a href="http://hi.baidu.com/xuelicheng/blog/item/194c844a22d2452a09f7ef8a.html"&gt;这里&lt;/a&gt;...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;listings&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;lstset&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;这条命令可以让&lt;/span&gt;&lt;span class="n"&gt;LaTeX&lt;/span&gt;&lt;span class="err"&gt;排版时将&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="err"&gt;键字突出显示&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;lstset&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;breaklines&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;这条命令可以让&lt;/span&gt;&lt;span class="n"&gt;LaTeX&lt;/span&gt;&lt;span class="err"&gt;自动将长的代码行换行排版&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;lstset&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;extendedchars&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;这一条命令可以解决代码跨页时，章节标题，页眉等汉字不显示的问题&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;lstlisting&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;%paste&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;lstlisting&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很简单的... 不过比较长的代码换行显示不是很爽(貌似不换行也不是办法啊)... 另外没有颜色高亮哎...&lt;/p&gt;
&lt;p&gt;嗯, 貌似&lt;a href="http://bbs.chinatex.org/forum.php?mod=viewthread&amp;amp;tid=3692"&gt;这里&lt;/a&gt;的介绍更详细...
还有这个人的&lt;a href="http://aifreedom.com/technology/170"&gt;博客&lt;/a&gt;...
&lt;a href="http://blog.sina.com.cn/s/blog_5e16f1770100o9ef.html"&gt;这篇文章&lt;/a&gt;是针对python的高亮 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Sat, 03 Mar 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-03-03:/tex_insert_code.html</guid><category>tex</category></item><item><title>xelatex--linux下tex中文的完全解决!</title><link>http://x-wei.github.io/xelatex_zh.html</link><description>&lt;p&gt;前几天校内上看见了这个&lt;a href="http://page.renren.com/601024697/note/806581340?ref=share"&gt;latex中文指南&lt;/a&gt;, 想试一试...&lt;/p&gt;
&lt;p&gt;可是貌似不给力(or我没做对)安装了texlive之后还是不能编译它的测试源文件...&lt;/p&gt;
&lt;p&gt;搜索发现了&lt;a href="http://blog.sina.com.cn/s/blog_4c20fe7b0100vjbj.html"&gt;这样一篇&lt;/a&gt;非常强大的文章... 这货直接把他的源文件放上去了... 不过这样的话他的文章可读性就不好了...&lt;/p&gt;
&lt;p&gt;要进行的操作:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install texlive-xetex latex-cjk-xcjk texlive-latex-recommended&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实好像这样之后就可以用中文了(按博客里的意思), 可惜我用的geany开始使用latex编译的, 老是报错...&lt;/p&gt;
&lt;p&gt;其实应该用命令行 xelatex xx.tex就应该好使了...&lt;/p&gt;
&lt;p&gt;然后我又按照博客里的提示安装了Gummi...... 一个可以在右面看到效果的texIDE... 还是不行, 因为默认的编译器都是latex不是xelatex...&lt;/p&gt;
&lt;p&gt;当然我最终发现了要用xelatex, 那么老是用命令行也不大方便... gummi里面找到了设置:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./xelatex_zh/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;这样就好了...&lt;/p&gt;
&lt;p&gt;但是我现在已经非常喜欢geany了, 不想因为tex再单独用一个编辑环境... 还好找到了geany里面的设置: 生成--&amp;gt;设置生成命令, 在里面添加一个xelatex就行啦!~ 嗯 还是geany亲切~!&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./xelatex_zh/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;最后把源文件生成好的pdf也放进来吧...
&lt;a href="./xelatex_zh/xelatex_test.tex"&gt;./xelatex_test.tex&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="./xelatex_zh/xelatex%20%E5%8F%8A%E4%B8%AD%E6%96%87%20Gummi%20%E5%9C%A8%20ubuntu%20%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE.pdf"&gt;./xelatex 及中文 Gummi 在 ubuntu …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 27 Feb 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-02-27:/xelatex_zh.html</guid><category>tex</category><category>中文乱码</category></item><item><title>chrome护眼设置--把背景设置为绿豆沙</title><link>http://x-wei.github.io/chrome-background.html</link><description>&lt;p&gt;直接把&lt;a href="http://hi.baidu.com/laolao18k/blog/item/3a268016cd4c4907c83d6d46.html"&gt;这里&lt;/a&gt;的贴上吧...
(以下为copy)&lt;/p&gt;
&lt;p&gt;首先，下载安装chrome的&lt;a href="https://chrome.google.com/extensions/detail/pabfempgigicdjjlccdgnbmeggkbjdhd"&gt;stylist插件&lt;/a&gt;
然后，打开"扩展设置"，点击chrome stylist的选项，点击demo进行修改。 &lt;/p&gt;
&lt;p&gt;把网页背景修改为豆沙绿的参数设置: 
输入框1：demo 选项框2：regexp 输入框3：(ftp|http|https)://\D 输入框4： * { background: #C7EDCC !important; } 修改后保存即可 (url和style text可根据自己喜好配置) 
附：豆沙绿的参数 RGB颜色 199；237；204 十六位颜色代码 #C7EDCC 色调：85；饱和度：123；亮度：205 &lt;/p&gt;
&lt;p&gt;不会的话直接用&lt;a href="https://chrome.google.com/extensions/detail/hnjebfhieiaohnhafcolehbbcfkkkhje#%E5%AE%83%E9%99%A4%E4%BA%86%E6%8A%8AGoogle%E7%9A%84%E8%83%8C%E6%99%AF%E6%94%B9%E4%B8%BA%E4%BF%9D%E6%8A%A4%E7%9C%BC%E7%9D%9B%E7%9A%84%E7%BB%BF%E8%89%B2%EF%BC%8C%E4%BB%96%E6%B2%A1%E6%9C%89%E5%88%AB%E7%9A%84%E5%8A%9F%E8%83%BD"&gt;这个扩展&lt;/a&gt;。
&lt;img alt="" class="img-responsive" src="../images/./chrome-background/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;04/24/2012续&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于那个正则表达式 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 23 Feb 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-02-23:/chrome-background.html</guid><category>tips</category><category>google</category><category>外观</category></item><item><title>chrome输出网页为pdf!</title><link>http://x-wei.github.io/chrome%E8%BE%93%E5%87%BA%E7%BD%91%E9%A1%B5%E4%B8%BApdf!.html</link><description>&lt;p&gt;不用装插件, 直接右键--&amp;gt;打印--&amp;gt;打印到文件 即可!&lt;/p&gt;
&lt;p&gt;太方便了! 关键是pdf分页很合理, 效果超好!&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./chrome%E8%BE%93%E5%87%BA%E7%BD%91%E9%A1%B5%E4%B8%BApdf!/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;03/05/2012续&lt;/strong&gt;
打印前需要把网页缩放足够小, 否则打印的文件只是一部分网页.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 23 Feb 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-02-23:/chrome输出网页为pdf!.html</guid></item><item><title>gnome护眼设置--窗口背景设置为绿豆沙</title><link>http://x-wei.github.io/gnome-background.html</link><description>&lt;p&gt;我就说win能做到ubuntu也能~&lt;/p&gt;
&lt;p&gt;主题--&amp;gt;自定义--&amp;gt;颜色&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./gnome-background/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;修改窗口和输入框两项的颜色:
126-12-91&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./gnome-background/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;现在就很舒服了&lt;/p&gt;
&lt;p&gt;然后貌似nautils要再设置一下:
编辑--&amp;gt;背景和徽标--&amp;gt;颜色--&amp;gt;把那个绿豆沙颜色加进去&lt;/p&gt;
&lt;p&gt;再加上[chrome的设置], 嗯 就完美了!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;--imported from zim&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 23 Feb 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-02-23:/gnome-background.html</guid><category>tips</category><category>外观</category></item><item><title>用du命令查看各目录大小</title><link>http://x-wei.github.io/use_du_shell.html</link><description>&lt;p&gt;du用来计算目录的磁盘用量. 具体的参数可以用man或者--help, 这里不贴了(其实我也没仔细看...). 今天看见水源上有人说 用 -sh这个参数比较好:&lt;/p&gt;
&lt;p&gt;-s: 只计算各个目录的总用量(就是说不要递归操作) 后面跟着&lt;em&gt;或者.&lt;/em&gt;就可以查看各个目录的大小了.
-h: 易于查看的方式&lt;/p&gt;
&lt;p&gt;比如~/目录经常不知道为什么空间在减少, 那就运行:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;du -sh ~/*&lt;/code&gt; 以及 &lt;code&gt;du -sh /.*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即可&lt;/p&gt;
&lt;p&gt;有时候文件夹比较多的情况, 还是不容易发现那个文件夹占用了大部分空间, 这时用sort命令对du的结果进行排序就行了!
参考了&lt;a href="http://www.xn--b0t733db8c.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/12950504311.html"&gt;这里&lt;/a&gt;, 顺便学会了: 两条一起执行是用"|"进行分割的.&lt;/p&gt;
&lt;p&gt;所以命令为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;du -sm ~/* | sort -nr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意这时du不能用-h参数, 因为这样的话文件可能是以M为单位也可能是以k为单位, 而sort的时候只看前面的数字值, 不看单位. 用-m参数, 表示让所有结果以M为单位显示.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;imported from zim&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 14 Feb 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-02-14:/use_du_shell.html</guid><category>shell</category></item><item><title>cmus--很棒的终端音乐播放器</title><link>http://x-wei.github.io/cmus-%E5%BE%88%E6%A3%92%E7%9A%84%E7%BB%88%E7%AB%AF%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8.html</link><description>&lt;p&gt;最近发现一个终端下超好用的音乐播放器: &lt;a href="http://en.wikipedia.org/wiki/Cmus"&gt;CMUS&lt;/a&gt;. 界面简洁, vi的按键绑定, 由于最近越来越感觉键盘和快捷键的方便, 对这个迷你的播放器爱不释手.&lt;/p&gt;
&lt;p&gt;关于它的用法可以参考&lt;a href="http://www.tuxarena.com/static/cmus_guide.php"&gt;这里&lt;/a&gt;, 另外&lt;a href="http://roylez.heroku.com/2010/01/26/replay-gain.html"&gt;这里&lt;/a&gt;还介绍了怎么设置replay gain(大概是不同音乐播放的音量相同), 但我没有设置.&lt;/p&gt;
&lt;p&gt;网站上的文档不多, 我觉得最好的教程还是man:
man cmus
man cmus-tutorial
把tutorial看完就基本上会用了~&lt;/p&gt;
&lt;p&gt;这里列一下我觉得常用的几点吧:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1~7共7种view, 用数字键就可以切换;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用命令要想vi一样加':', 常见命令有:&lt;/p&gt;
&lt;p&gt;:cd xx_dir&lt;br&gt;
:add xx_dir&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c--暂停, hl/&amp;lt;&amp;gt;--快进快退, x--播放, v--停止&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;右下角显示播放模式: R表示重复, S随机, C连续(播完一曲后不停)&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Mon, 23 Jan 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-01-23:/cmus-很棒的终端音乐播放器.html</guid></item><item><title>zip乱码解决</title><link>http://x-wei.github.io/zip%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3.html</link><description>&lt;p&gt;这个问题困扰了很久, 以前的方法参考了&lt;a href="http://thiger.blog.hexun.com/46569055_d.html"&gt;这里&lt;/a&gt;, 使用一条命令:
&lt;code&gt;unzip -O CP936 xxx.zip&lt;/code&gt;
但是谁tm记得住? 所以每次都要上网现查...&lt;/p&gt;
&lt;p&gt;今天看到了ubuntu论坛上的&lt;a href="http://forum.ubuntu.org.cn/viewtopic.php?f=122&amp;amp;t=301951"&gt;帖子&lt;/a&gt;, 六楼给出了终极的解决方案. &lt;/p&gt;
&lt;p&gt;见附件: &lt;a href="../images/zip%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/zip%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3.zip"&gt;zip乱码解决.zip&lt;/a&gt; 
这个压缩包中的5个 7z* 文件拷贝覆盖到/usr/lib/p7zip/&lt;/p&gt;
&lt;p&gt;代码:
&lt;code&gt;sudo cp 7z* /usr/lib/p7zip/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意以后不要升级p7zip&lt;/p&gt;
&lt;p&gt;一切就正常了! 而且打开时也没有乱码! so good!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Thu, 12 Jan 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-01-12:/zip乱码解决.html</guid><category>中文乱码</category></item><item><title>把抓图工具关联到ubuntu快捷键</title><link>http://x-wei.github.io/scrshot-shortcut.html</link><description>&lt;p&gt;终端输入gnome-screenshot --help, 发现选项"-a"表示的是抓取一部分屏幕.&lt;/p&gt;
&lt;p&gt;于是打开编辑键盘快捷键窗口, 新建一个快捷键如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./scrshot-shortcut/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;这样, 按下Ctrl+Alt+s快捷键后即可启动抓图, 且是抓取一个区域. 不过不知为什么, 反应比较慢, 需要按下一段时间  (一秒钟?)才会有反应.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;02/23/2012续:&lt;/strong&gt;
安装了lucid之后不好使了!
症状就是, 参数-a不起作用, 按下快捷键后直接出来桌面截图, 如果一直按着的话会出来选取区域的, 但是此时已经把桌面截了N次了!.... 无语啊!&lt;/p&gt;
&lt;p&gt;上网搜了好久,终于在&lt;a href="http://www.nenew.net/ubuntu-linux-gnome-screenshot-area.html"&gt;奶牛的博客&lt;/a&gt;里看见了方法: 命令参数变成 -ai, 这样每次按下快捷键后会先弹出来交互界面... 也罢...&lt;/p&gt;
&lt;p&gt;我非常无语...&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./scrshot-shortcut/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;嗯 就这样吧~...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;--imported from zim&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mx</dc:creator><pubDate>Tue, 10 Jan 2012 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:x-wei.github.io,2012-01-10:/scrshot-shortcut.html</guid><category>tips</category><category>快捷键</category></item></channel></rss>