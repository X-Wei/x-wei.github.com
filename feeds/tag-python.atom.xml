<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mx's blog</title><link href="http://x-wei.github.io/" rel="alternate"></link><link href="http://x-wei.github.io/feeds/tag-python.atom.xml" rel="self"></link><id>http://x-wei.github.io/</id><updated>2016-05-27T18:00:00+02:00</updated><entry><title>codejam常用(python)解题工具</title><link href="http://x-wei.github.io/codejam-python-tools.html" rel="alternate"></link><published>2016-05-27T18:00:00+02:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2016-05-27:codejam-python-tools.html</id><summary type="html">
&lt;p&gt;总结一下用python撸codejam时常用的一些库, 并且给一些简单的例子. 发现用python撸codejam非常合适: codejam的时间要求不严格(4/8分钟), 而且程序只要本地运行. 正好可以使用python简洁的语法和丰富的函数库.    &lt;/p&gt;
&lt;h1 id="collections"&gt;collections&lt;/h1&gt;
&lt;p&gt;py自带的一些好用的数据结构...&lt;br/&gt;
&lt;a href="https://docs.python.org/2/library/collections.html"&gt;https://docs.python.org/2/library/collections.html&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;from collections import Counter, deque, defaultdict&lt;/code&gt; &lt;/p&gt;
&lt;h1 id="itertools"&gt;itertools&lt;/h1&gt;
&lt;p&gt;主要是用来穷举的时候它里面一些函数很好用... &lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/2/library/itertools.html"&gt;https://docs.python.org/2/library/itertools.html&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'ABCD'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'EFG'&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;...&lt;/span&gt;        &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;...&lt;/span&gt;        &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;...&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="bitmap"&gt;bitmap&lt;/h1&gt;
&lt;p&gt;聪明一点的穷举需要用bitmap... 实测可以加速十倍...&lt;/p&gt;
&lt;h3 id="use-bitmap-for-combinations-2n-possibilities"&gt;use bitmap for combinations (2^N possibilities)&lt;/h3&gt;
&lt;p&gt;(N elements, each element 2 choices) &lt;br/&gt;
&lt;code&gt;for mask in xrange(1&amp;lt;&amp;lt;N): ...&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="setclean-kth-bit"&gt;set/clean Kth bit&lt;/h3&gt;
&lt;p&gt;set: &lt;code&gt;bm |= 1&amp;lt;&amp;lt;k&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;clean: &lt;code&gt;bm &amp;amp;= ~(1&amp;lt;&amp;lt;k)&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="count-nb-of-1s-in-a-bitmap"&gt;count nb of 1s in a bitmap&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bin(bm).count('1')&lt;/code&gt; &lt;/p&gt;
&lt;h1 id="networkx"&gt;networkx&lt;/h1&gt;
&lt;p&gt;常用的图论算法都在里面了. nx最棒的是&lt;strong&gt;任何hashable的object都可以用来作为节点的index&lt;/strong&gt;, 再想想用C++的bgl, 简直蛋疼...
&lt;a href="https://networkx.readthedocs.io/en/stable/"&gt;https://networkx.readthedocs.io/en/stable/&lt;/a&gt; &lt;/p&gt;
&lt;h3 id="constructing-graph"&gt;constructing graph&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;networkx&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;nx&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DiGraph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# use `Graph` for undired graph, `MultiGraph` for dup-edges   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# any hashable obj can be used as node index   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# missing nodes will be automatically added   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# if G is undired(`Graph`), 1--&amp;gt;3 and 3--&amp;gt;1 will be added   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# nx ignores duplicate adding edges/nodes    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# outgoing edges from a node   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'color'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'blue'&lt;/span&gt; &lt;span class="c1"&gt;# easily add edge properties    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'color'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# this is another way to add property   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'color'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'capacity'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}},&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'cat'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'string node'&lt;/span&gt; &lt;span class="c1"&gt;# can also be: G.add_node('a', cat='string node')   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'cat'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'string node'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="digraph-topo-sort-cycle-detection-strongly-connected-component"&gt;DiGraph: topo-sort, cycle-detection, strongly connected component&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://networkx.readthedocs.io/en/stable/reference/algorithms.shortest_paths.html"&gt;http://networkx.readthedocs.io/en/stable/reference/algorithms.shortest_paths.html&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;networkx&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;nx&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DiGraph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strongly_connected_components&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topological_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;simple_cycles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strongly_connected_components&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shortest_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shortest_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shortest_path_length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;3&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shortest_path_length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'weight'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# set attribut edge 'weight' as weight, (if not present, weight=1 )   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="undirected-graph-connected-component-mst"&gt;Undirected Graph: connected component, MST&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://networkx.readthedocs.io/en/networkx-1.11/reference/generated/networkx.algorithms.mst.minimum_spanning_tree.html#networkx.algorithms.mst.minimum_spanning_tree"&gt;http://networkx.readthedocs.io/en/networkx-1.11/reference/generated/networkx.algorithms.mst.minimum_spanning_tree.html#networkx.algorithms.mst.minimum_spanning_tree&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; G = nx.Graph()   &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; G.add_edge(1,2); G.add_edge(1,3); G.add_edge('a','b')   &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; list( nx.connected_components(G) )   &lt;/span&gt;
&lt;span class="code-line"&gt;[set(['a', 'b']), set([1, 2, 3])]   &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; G.add_edge(2,3)   &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; mst =  nx.minimum_spanning_tree(G) # returns a new graph   &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; mst.edges()   &lt;/span&gt;
&lt;span class="code-line"&gt;[('a', 'b'), (1, 2), (1, 3)]   &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; G.add_edge(1,3,weight=2) # mst takes attribut 'weight', if no present, weight=1   &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; nx.minimum_spanning_tree(G).edges()   &lt;/span&gt;
&lt;span class="code-line"&gt;[('a', 'b'), (1, 2), (2, 3)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="maxflow"&gt;maxflow&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://networkx.readthedocs.io/en/networkx-1.11/reference/algorithms.flow.html"&gt;http://networkx.readthedocs.io/en/networkx-1.11/reference/algorithms.flow.html&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;networkx&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;nx&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DiGraph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;flow_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flow_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maximum_flow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;flow_value&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flow_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="maximum-matching"&gt;maximum matching&lt;/h3&gt;
&lt;p&gt;NB: maxi&lt;strong&gt;mum&lt;/strong&gt; matching != maxim&lt;strong&gt;al&lt;/strong&gt; matching... &lt;br/&gt;
there are maximum-matching functions for general undir graph (&lt;code&gt;max_weight_matching&lt;/code&gt;) and for bipartitie graph (&lt;code&gt;maximum_matching&lt;/code&gt;), the one for bipartite graph is faster, the general one takes O(V**3).   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://networkx.readthedocs.io/en/stable/reference/generated/networkx.algorithms.matching.max_weight_matching.html?highlight=maximum_matching"&gt;http://networkx.readthedocs.io/en/stable/reference/generated/networkx.algorithms.matching.max_weight_matching.html?highlight=maximum_matching&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; G = nx.Graph()   &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; G.add_edges_from([(1,2),(2,3),(3,4),(4,5)])   &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; mate = nx.max_weight_matching(G, maxcardinality=True)#mate[v] == w if node v   &lt;/span&gt;
&lt;span class="code-line"&gt; is matched to node w.   &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; mate   &lt;/span&gt;
&lt;span class="code-line"&gt;{2: 3, 3: 2, 4: 5, 5: 4}   &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; nx.is_bipartite(G)   &lt;/span&gt;
&lt;span class="code-line"&gt;True   &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; mate=nx.bipartite.maximum_matching(G)   &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; mate   &lt;/span&gt;
&lt;span class="code-line"&gt;{1: 2, 2: 1, 3: 4, 4: 3}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and there are vertex cover algorithms as well......     &lt;/p&gt;
&lt;h1 id="pulp"&gt;pulp&lt;/h1&gt;
&lt;p&gt;线性规划的库, 供了非常好用的接口来构造LP问题, 增加约束或者定义objective只要用&lt;code&gt;prob+=[expression]&lt;/code&gt;就好了, 基本上看看例子就能上手. 
面对选择问题的时候线性规划是不错的方法 -- 如果计算速度可以足够快的话... &lt;/p&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/PuLP/pulp.html"&gt;https://pythonhosted.org/PuLP/pulp.html&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pulp&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Integer'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# var category can be integer   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpProblem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"myProblem"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LpMinimize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;# add constraint   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="c1"&gt;# add objective   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# solve using default solver   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GLPK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# or use glpk solver   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;LpStatus&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;'Optimal'&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objective&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# see objective value   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;8.0&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# see variable value    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于nx和pulp的应用可以参考&lt;a href="http://x-wei.github.com/codejam-2015-r2pbC.html"&gt;上篇文章&lt;/a&gt;.&lt;/p&gt;</summary><category term="algorithm"></category><category term="codejam"></category><category term="python"></category></entry><entry><title>[python进阶课程] 面向对象编程</title><link href="http://x-wei.github.io/imooc_py_oop.html" rel="alternate"></link><published>2016-02-19T14:00:00+01:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2016-02-19:imooc_py_oop.html</id><summary type="html">
&lt;p&gt;&lt;a href="http://www.imooc.com/learn/317"&gt;http://www.imooc.com/learn/317&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;模块和包&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;包&lt;/strong&gt;: 文件夹 (可以有多级), 且包含&lt;code&gt;__init__.py&lt;/code&gt;文件(每层都要有) 
&lt;strong&gt;模块&lt;/strong&gt;: py文件&lt;/p&gt;
&lt;p&gt;代码分开放在多个py文件(&lt;strong&gt;模块&lt;/strong&gt;名=文件名). 同名变量互不影响. &lt;/p&gt;
&lt;p&gt;模块名冲突: 把同名模块放在不同&lt;strong&gt;包&lt;/strong&gt;中. &lt;/p&gt;
&lt;h3 id="_2"&gt;导入模块&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引用时: 使用完整的路径(包+模块名). ex. &lt;code&gt;p1.util.f()&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;动态导入模块&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cStringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码先尝试从cStringIO导入，如果失败了（比如cStringIO没有被安装），再尝试从StringIO导入。这样，如果cStringIO模块存在，则我们将获得更快的运行速度，如果cStringIO不存在，则顶多代码运行速度会变慢，但不会影响代码的正常执行。&lt;/p&gt;
&lt;h3 id="__future__"&gt;使用__future__&lt;/h3&gt;
&lt;p&gt;Python的新版本会引入新的功能，但是，实际上这些功能在上一个老版本中就已经存在了。要“试用”某一新的特性，就可以通过导入__future__模块的某些功能来实现。&lt;/p&gt;
&lt;p&gt;ex. 在Python 2.7中引入3.x的除法规则，导入__future__的division：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;division&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mf"&gt;3.3333333333333335&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_4"&gt;安装第三方模块&lt;/h2&gt;
&lt;p&gt;模块管理工具: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;easy_install&lt;/li&gt;
&lt;li&gt;pip (推荐) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查找第三方模块: &lt;a href="https://pypi.python.org/pypi"&gt;https://pypi.python.org/pypi&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="_5"&gt;面向对象编程基础&lt;/h1&gt;
&lt;p&gt;OOP: 数据的封装  &lt;/p&gt;
&lt;h3 id="_6"&gt;初始化实例属性&lt;/h3&gt;
&lt;p&gt;当创建实例时，&lt;code&gt;__init__()&lt;/code&gt;方法被自动调用, 第一个参数必须是 self（也可以用别的名字，但建议使用习惯用法, 第一个参数self被Python解释器作为实例的引用），后续参数则可以自由指定，和定义函数没有任何区别。&lt;br/&gt;
相应地，创建实例时，就必须要提供除 self 以外的参数.   &lt;/p&gt;
&lt;p&gt;用&lt;code&gt;setattr&lt;/code&gt;让&lt;code&gt;__init__&lt;/code&gt;接受任意的kw参数:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;setattr(object, name, value)&lt;/code&gt;&lt;br/&gt;
This is the counterpart of getattr(). The arguments are an object, a string and an arbitrary value. The string may name an existing attribute or a new attribute. The function assigns the value to the attribute, provided the object allows it. For example, setattr(x, 'foobar', 123) is equivalent to x.foobar = 123.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;gender&lt;/span&gt;, &lt;span class="n"&gt;birth&lt;/span&gt;, **&lt;span class="n"&gt;kw&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;gender&lt;/span&gt; = &lt;span class="n"&gt;gender&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;birth&lt;/span&gt; = &lt;span class="n"&gt;birth&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;, &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kw&lt;/span&gt;.&lt;span class="n"&gt;iteritems&lt;/span&gt;():  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="n"&gt;setattr&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;k&lt;/span&gt;, &lt;span class="n"&gt;v&lt;/span&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_7"&gt;访问限制&lt;/h3&gt;
&lt;p&gt;Python对属性权限的控制是通过&lt;strong&gt;属性名&lt;/strong&gt;来实现的.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个属性由双下划线开头(&lt;code&gt;__&lt;/code&gt;)，该属性就无法被外部访问。  &lt;/li&gt;
&lt;li&gt;但是，如果一个属性以"&lt;code&gt;__xxx__&lt;/code&gt;"的形式定义，那它又可以被外部访问了，以"&lt;code&gt;__xxx__&lt;/code&gt;"定义的属性在Python的类中被称为特殊属性有很多预定义的特殊属性可以使用，通常我们不要把普通属性用"&lt;strong&gt;xxx&lt;/strong&gt;"定义。  &lt;/li&gt;
&lt;li&gt;以单下划线开头的属性"&lt;code&gt;_xxx&lt;/code&gt;"虽然也可以被外部访问，但是，按照习惯，他们不应该被外部访问。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_8"&gt;创建类属性&lt;/h3&gt;
&lt;p&gt;绑定在一个实例上的属性不会影响其他实例，但是，类本身也是一个对象，如果在类上绑定一个属性，则所有实例都可以访问类的属性，并且，所有实例访问的类属性都是同一个！也就是说，实例属性每个实例各自拥有，互相独立，而&lt;em&gt;类属性有且只有一份&lt;/em&gt;。&lt;br/&gt;
定义类属性可以直接在 class 中定义：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;address&lt;/span&gt; = &lt;span class="s"&gt;'Earth'&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为类属性是直接绑定在类上的，所以，访问类属性不需要创建实例，就可以直接访问.  对一个实例调用类的属性也是可以访问的，所有实例都可以访问到它所属的类的属性.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;print Person.address  &lt;/span&gt;
&lt;span class="code-line"&gt;print p1.address&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;类属性和实例属性名字冲突怎么办&lt;/strong&gt;&lt;br/&gt;
当实例属性和类属性重名时，实例属性优先级高，它将屏蔽掉对类属性的访问。&lt;br/&gt;
可见，千万&lt;em&gt;不要在实例上修改类属性&lt;/em&gt;，它实际上并没有修改类属性，而是给实例绑定了一个实例属性。  &lt;/p&gt;
&lt;h3 id="_9"&gt;定义实例方法&lt;/h3&gt;
&lt;p&gt;实例的方法就是在类中定义的函数，它的&lt;strong&gt;第一个参数永远是&lt;/strong&gt; &lt;code&gt;self&lt;/code&gt;，指向调用该方法的实例本身，其他参数和一个普通函数是完全一样的. 在实例方法内部，可以访问所有实例属性，这样，如果外部需要访问私有属性，可以通过方法调用获得，这种数据封装的形式除了能保护内部数据一致性外，还可以简化外部调用的难度。  &lt;/p&gt;
&lt;p&gt;我们在 class 中定义的实例方法其实也是属性，它实际上是一个函数对象. 因为方法也是一个属性，所以，它也可以动态地添加到实例上，只是需要用 types.MethodType() 把一个函数变为一个方法...  &lt;/p&gt;
&lt;h3 id="_10"&gt;定义类方法&lt;/h3&gt;
&lt;p&gt;和属性类似，方法也分实例方法和类方法。&lt;br/&gt;
在class中定义的全部是实例方法，实例方法第一个参数 self 是实例本身。&lt;br/&gt;
要在class中定义类方法，需要这么写：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;count&lt;/span&gt; = &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;@classmethod&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;how_many&lt;/span&gt;(&lt;span class="n"&gt;cls&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;.&lt;span class="nb"&gt;count&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;Person&lt;/span&gt;.&lt;span class="nb"&gt;count&lt;/span&gt; = &lt;span class="n"&gt;Person&lt;/span&gt;.&lt;span class="nb"&gt;count&lt;/span&gt; + &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;.&lt;span class="n"&gt;how_many&lt;/span&gt;()  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;p1&lt;/span&gt; = &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="s"&gt;'Bob'&lt;/span&gt;)  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;.&lt;span class="n"&gt;how_many&lt;/span&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过标记一个 &lt;code&gt;@classmethod&lt;/code&gt;，该方法将绑定到 Person 类上，而非类的实例。类方法的第一个参数将传入类本身，通常将参数名命名为 &lt;code&gt;cls&lt;/code&gt;，上面的 cls.count 实际上相当于 Person.count。  &lt;/p&gt;
&lt;h1 id="_11"&gt;类的继承&lt;/h1&gt;
&lt;p&gt;代码复用&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/imooc_py_oop/pasted_image.png"/&gt;&lt;br/&gt;
python的继承:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总是从某个类继承(最上层是&lt;code&gt;object&lt;/code&gt;)  &lt;/li&gt;
&lt;li&gt;不要忘记&lt;code&gt;super.__init__&lt;/code&gt;调用  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;super(SubCls, self)将返回当前类继承的父类, 注意self参数已在super()中传入，在__init__()中将隐式传递，不需要写出（也不能写）。&lt;br/&gt;
        def &lt;strong&gt;init&lt;/strong&gt;(self, args):&lt;br/&gt;
            super(SubCls, self).&lt;strong&gt;init&lt;/strong&gt;(args)&lt;br/&gt;
            pass  &lt;/p&gt;
&lt;h3 id="_12"&gt;判断类型&lt;/h3&gt;
&lt;p&gt;函数&lt;code&gt;isinstance()&lt;/code&gt;可以判断一个变量的类型，既可以用在Python内置的数据类型如str、list、dict，也可以用在我们自定义的类，它们本质上都是数据类型。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(p, Person)  &lt;/span&gt;
&lt;span class="code-line"&gt;True    # p是Person类型  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(p, Student)  &lt;/span&gt;
&lt;span class="code-line"&gt;False   # p不是Student类型  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(p, Teacher)  &lt;/span&gt;
&lt;span class="code-line"&gt;False   # p不是Teacher类型  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(s, Person)  &lt;/span&gt;
&lt;span class="code-line"&gt;True    # s是Person类型&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在一条继承链上，一个实例可以看成它本身的类型，也可以看成它父类的类型。  &lt;/p&gt;
&lt;h3 id="_13"&gt;多态&lt;/h3&gt;
&lt;p&gt;调用 s.whoAmI()总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止。  &lt;/p&gt;
&lt;p&gt;由于Python是动态语言，所以，传递给函数 who_am_i(x)的参数 x 不一定是 Person 或 Person 的子类型。任何数据类型的实例都可以，只要它有一个whoAmI()的方法即可：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;whoAmI&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'I am a book'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是动态语言和静态语言（例如Java）最大的差别之一。动态语言调用实例方法，不检查类型，&lt;strong&gt;只要方法存在，参数正确，就可以调用&lt;/strong&gt;。  &lt;/p&gt;
&lt;h3 id="_14"&gt;多重继承&lt;/h3&gt;
&lt;p&gt;除了从一个父类继承外，Python允许&lt;em&gt;从多个父类继承&lt;/em&gt;，称为多重继承。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;a&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'init A...'&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;a&lt;/span&gt; = &lt;span class="n"&gt;a&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;(&lt;span class="n"&gt;A&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;a&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;super&lt;/span&gt;(&lt;span class="n"&gt;B&lt;/span&gt;, &lt;span class="k"&gt;self&lt;/span&gt;).&lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="n"&gt;a&lt;/span&gt;)  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'init B...'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;(&lt;span class="n"&gt;A&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;a&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;super&lt;/span&gt;(&lt;span class="n"&gt;C&lt;/span&gt;, &lt;span class="k"&gt;self&lt;/span&gt;).&lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="n"&gt;a&lt;/span&gt;)  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'init C...'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;(&lt;span class="n"&gt;B&lt;/span&gt;, &lt;span class="n"&gt;C&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;a&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;super&lt;/span&gt;(&lt;span class="n"&gt;D&lt;/span&gt;, &lt;span class="k"&gt;self&lt;/span&gt;).&lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="n"&gt;a&lt;/span&gt;)  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'init D...'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/imooc_py_oop/pasted_image001.png"/&gt;&lt;br/&gt;
D 同时继承自 B 和 C，也就是 D 拥有了 A、B、C 的全部功能。多重继承通过 super()调用__init__()方法时，A 虽然被继承了两次，但&lt;code&gt;__init__()&lt;/code&gt;只调用一次：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; d = D('d')  &lt;/span&gt;
&lt;span class="code-line"&gt;init A...  &lt;/span&gt;
&lt;span class="code-line"&gt;init C...  &lt;/span&gt;
&lt;span class="code-line"&gt;init B...  &lt;/span&gt;
&lt;span class="code-line"&gt;init D...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_15"&gt;获取对象信息&lt;/h3&gt;
&lt;p&gt;首先可以用 &lt;code&gt;type()&lt;/code&gt; 函数获取变量的类型，它返回一个 Type 对象：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; type(123)  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;lt;type 'int'&amp;gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; s = Student('Bob', 'Male', 88)  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; type(s)  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;lt;class '__main__.Student'&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其次，可以用 &lt;code&gt;dir()&lt;/code&gt; 函数获取变量的所有属性：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; dir(123)   # 整数也有很多属性...  &lt;/span&gt;
&lt;span class="code-line"&gt;['__abs__', '__add__', '__and__', '__class__', '__cmp__', ...]&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; dir(s)  &lt;/span&gt;
&lt;span class="code-line"&gt;['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'gender', 'name', 'score', 'whoAmI']&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;dir()&lt;/code&gt;返回的属性是字符串列表，如果已知一个属性名称，要获取或者设置对象的属性，就需要用 &lt;code&gt;getattr()&lt;/code&gt; 和 &lt;code&gt;setattr()&lt;/code&gt;函数了：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; getattr(s, 'name')  # 获取name属性  &lt;/span&gt;
&lt;span class="code-line"&gt;'Bob'  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; setattr(s, 'name', 'Adam')  # 设置新的name属性  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; s.name  &lt;/span&gt;
&lt;span class="code-line"&gt;'Adam'  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; getattr(s, 'age')  # 获取age属性，但是属性不存在，报错：  &lt;/span&gt;
&lt;span class="code-line"&gt;Traceback (most recent call last):  &lt;/span&gt;
&lt;span class="code-line"&gt;  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;AttributeError: 'Student' object has no attribute 'age'  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; getattr(s, 'age', 20)  # 获取age属性，如果属性不存在，就返回默认值20：  &lt;/span&gt;
&lt;span class="code-line"&gt;20&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;class Person(object):  &lt;/span&gt;
&lt;span class="code-line"&gt;    def __init__(self, name, gender, **kw):  &lt;/span&gt;
&lt;span class="code-line"&gt;        for k,v in kw.iteritems():  &lt;/span&gt;
&lt;span class="code-line"&gt;            setattr(self, k, v)&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;p = Person('Bob', 'Male', age=18, course='Python')  &lt;/span&gt;
&lt;span class="code-line"&gt;print p.age  &lt;/span&gt;
&lt;span class="code-line"&gt;print p.course&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="_16"&gt;定制类&lt;/h1&gt;
&lt;h3 id="_17"&gt;特殊方法&lt;/h3&gt;
&lt;p&gt;又叫 "魔术方法"  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义在class中  &lt;/li&gt;
&lt;li&gt;不需要直接调用: py的函数或操作符会自动调用  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. 任何数据类型的实例都有&lt;code&gt;__str__()&lt;/code&gt;特殊方法.   &lt;/p&gt;
&lt;p&gt;pothon的特殊方法:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__str__&lt;/code&gt;: 用于print  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__len__&lt;/code&gt;: 用于len  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__cmp__&lt;/code&gt;: 用于比较&lt;code&gt;cmp&lt;/code&gt;/排序&lt;code&gt;sorted&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="str-repr"&gt;&lt;strong&gt;str&lt;/strong&gt; 和 &lt;strong&gt;repr&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;实现特殊方法&lt;code&gt;__str__()&lt;/code&gt;可以在print的时候打印合适的字符串, 如果直接在命令行敲变量名则不会:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; p = Person('Bob', 'male')  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; print p  &lt;/span&gt;
&lt;span class="code-line"&gt;(Person: Bob, male)  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; p  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;lt;main.Person object at 0x10c941890&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为 Python 定义了&lt;code&gt;__str__()&lt;/code&gt;和&lt;code&gt;__repr__()&lt;/code&gt;两种方法，&lt;code&gt;__str__()&lt;/code&gt;用于显示给用户，而&lt;code&gt;__repr__()&lt;/code&gt;用于显示给开发人员。&lt;br/&gt;
偷懒定义&lt;code&gt;__repr__&lt;/code&gt;: &lt;code&gt;__repr__ = __str__&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="cmp"&gt;&lt;strong&gt;cmp&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;__cmp__&lt;/code&gt;用实例自身self和传入的实例 s 进行比较，如果 self 应该排在前面，就返回 -1，如果 s 应该排在前面，就返回1，如果两者相当，返回 0。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;score&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;score&lt;/span&gt; = &lt;span class="n"&gt;score&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__str__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'(%s: %s)'&lt;/span&gt; % (&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt;.&lt;span class="n"&gt;lower&lt;/span&gt;(), &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;score&lt;/span&gt;)  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;__repr__&lt;/span&gt; = &lt;span class="n"&gt;__str__&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__cmp__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="o"&gt;s&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="o"&gt;!=s&lt;/span&gt;.&lt;span class="n"&gt;score:&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;return&lt;/span&gt; - (&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;score&lt;/span&gt; - &lt;span class="o"&gt;s&lt;/span&gt;.&lt;span class="n"&gt;score&lt;/span&gt;)  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;else:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;cmp&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="o"&gt;s&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="len"&gt;&lt;strong&gt;len&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;如果一个类表现得像一个list，要获取有多少个元素，就得用 len() 函数。&lt;br/&gt;
要让 len() 函数工作正常，类必须提供一个特殊方法&lt;code&gt;__len__()&lt;/code&gt;，它返回元素的个数。  &lt;/p&gt;
&lt;h3 id="_18"&gt;数学运算&lt;/h3&gt;
&lt;p&gt;如果要让Rational类(有理数)进行&lt;code&gt;+&lt;/code&gt;运算，需要正确实现&lt;code&gt;__add__&lt;/code&gt;：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Rational&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;p&lt;/span&gt;, &lt;span class="s"&gt;q):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;        self.p = p  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;        self.q = q&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;p、q 都是整数，表示有理数 p/q。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Rational&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;p&lt;/span&gt;, &lt;span class="s"&gt;q):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;        self.p = p  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;        self.q = q  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;    def __add__(self, r)&lt;/span&gt;:  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Rational&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;p&lt;/span&gt; * &lt;span class="n"&gt;r&lt;/span&gt;.&lt;span class="s"&gt;q + self.q * r.p, self.q * r.q)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;    def __sub__(self, r):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;        return Rational(self.p * r.q - self.q * r.p, self.q * r.q)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;    def __mul__(self, r):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;        return Rational(self.p * r.p, self.q * r.q)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;    def __div__(self, r):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;        return Rational(self.p * r.q, self.q * r.p)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;    def __str__(self):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;        d = 1  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;        for i in xrange(2,min(self.p, self.q)+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="nv"&gt;%i&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;and&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="s"&gt;q%i==0:  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;                d = i  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;        return '%&lt;/span&gt;&lt;span class="sr"&gt;s/%s' % (self.p/d, self.q/&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;)  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;__repr__&lt;/span&gt; = &lt;span class="n"&gt;__str__&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_19"&gt;类型转换&lt;/h3&gt;
&lt;p&gt;要让&lt;code&gt;int()&lt;/code&gt;函数对于Rational类正常工作，只需要实现特殊方法&lt;code&gt;__int__()&lt;/code&gt;:&lt;br/&gt;
同理，要让&lt;code&gt;float()&lt;/code&gt;函数正常工作，只需要实现特殊方法&lt;code&gt;__float__()&lt;/code&gt;。  &lt;/p&gt;
&lt;h3 id="property"&gt;@property&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;score&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__score&lt;/span&gt; = &lt;span class="n"&gt;score&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get_score&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__score&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;set_score&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;score&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &amp;lt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;or&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &amp;gt; &lt;span class="mi"&gt;100&lt;/span&gt;:  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="n"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ValueError&lt;/span&gt;(&lt;span class="s"&gt;'invalid score'&lt;/span&gt;)  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__score&lt;/span&gt; = &lt;span class="n"&gt;score&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 &lt;code&gt;get/set&lt;/code&gt; 方法来封装对一个属性封装. 但是写 s.get_score() 和 s.set_score() 没有直接写 s.score 来得直接。  &lt;/p&gt;
&lt;p&gt;可以用装饰器函数把 get/set 方法“装饰”成属性调用：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;score&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__score&lt;/span&gt; = &lt;span class="n"&gt;score&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;@property&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__score&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;@score&lt;/span&gt;.&lt;span class="n"&gt;setter&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;score&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &amp;lt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;or&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &amp;gt; &lt;span class="mi"&gt;100&lt;/span&gt;:  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="n"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ValueError&lt;/span&gt;(&lt;span class="s"&gt;'invalid score'&lt;/span&gt;)  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__score&lt;/span&gt; = &lt;span class="n"&gt;score&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一个score(self)是get方法，用&lt;code&gt;@property&lt;/code&gt;装饰，第二个score(self, score)是set方法，用&lt;code&gt;@score.setter&lt;/code&gt;装饰，&lt;code&gt;@score.setter&lt;/code&gt;是前一个&lt;code&gt;@property&lt;/code&gt;装饰后的副产品。对 score 赋值实际调用的是 set方法。  &lt;/p&gt;
&lt;h3 id="slots"&gt;&lt;strong&gt;slots&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;由于Python是动态语言，任何实例在运行期都可以动态地添加属性。  &lt;/p&gt;
&lt;p&gt;如果要限制添加的属性，例如，Student类只允许添加 name、gender和score 这3个属性，就可以利用Python的一个特殊的&lt;code&gt;__slots__&lt;/code&gt;来实现。&lt;br/&gt;
顾名思义，&lt;code&gt;__slots__&lt;/code&gt;是指一个类允许的属性列表 (所以是类属性)：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;__slots__&lt;/span&gt; = (&lt;span class="s"&gt;'name'&lt;/span&gt;, &lt;span class="s"&gt;'gender'&lt;/span&gt;, &lt;span class="s"&gt;'score'&lt;/span&gt;)  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;gender&lt;/span&gt;, &lt;span class="n"&gt;score&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;gender&lt;/span&gt; = &lt;span class="n"&gt;gender&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;score&lt;/span&gt; = &lt;span class="n"&gt;score&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;s&lt;/span&gt; = &lt;span class="n"&gt;Student&lt;/span&gt;(&lt;span class="s"&gt;'Bob'&lt;/span&gt;, &lt;span class="s"&gt;'male'&lt;/span&gt;, &lt;span class="mi"&gt;59&lt;/span&gt;)  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;s&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="s"&gt;'Tim'&lt;/span&gt; &lt;span class="c c-Singleline"&gt;# OK  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;s&lt;/span&gt;.&lt;span class="n"&gt;score&lt;/span&gt; = &lt;span class="mi"&gt;99&lt;/span&gt; &lt;span class="c c-Singleline"&gt;# OK  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;s&lt;/span&gt;.&lt;span class="n"&gt;grade&lt;/span&gt; = &lt;span class="s"&gt;'A'&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; (&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="k"&gt;last&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;  ...  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;AttributeError:&lt;/span&gt; &lt;span class="s"&gt;'Student'&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="k"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s"&gt;'grade'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;__slots__&lt;/code&gt;的目的是限制当前类所能拥有的属性，如果不需要添加任意动态的属性，使用&lt;code&gt;__slots__&lt;/code&gt;也能节省内存。  &lt;/p&gt;
&lt;h3 id="call"&gt;&lt;strong&gt;call&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在Python中，函数其实是一个对象：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; f = abs  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; f.__name__  &lt;/span&gt;
&lt;span class="code-line"&gt;'abs'  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; f(-123)  &lt;/span&gt;
&lt;span class="code-line"&gt;123&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于 f 可以被调用，所以，f 被称为可调用对象。&lt;br/&gt;
所有的函数都是可调用对象。&lt;br/&gt;
一个类实例也可以变成一个可调用对象，只需要实现一个特殊方法&lt;code&gt;__call__()&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;把 Person 类变成一个可调用对象：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;gender&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;gender&lt;/span&gt; = &lt;span class="n"&gt;gender&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;friend&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'My name is %s...'&lt;/span&gt; % &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'My friend is %s...'&lt;/span&gt; % &lt;span class="n"&gt;friend&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在可以对 Person 实例直接调用：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; p = Person('Bob', 'male')  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; p('Tim')  &lt;/span&gt;
&lt;span class="code-line"&gt;My name is Bob...  &lt;/span&gt;
&lt;span class="code-line"&gt;My friend is Tim...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;单看 p('Tim') 你无法确定 p 是一个函数还是一个类实例，所以，&lt;em&gt;在Python中，函数也是对象，对象和函数的区别并不显著&lt;/em&gt;。  &lt;/p&gt;</summary><category term="python"></category></entry><entry><title>[python进阶课程] 函数式编程</title><link href="http://x-wei.github.io/imooc_py_functional.html" rel="alternate"></link><published>2016-02-17T00:00:00+01:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2016-02-17:imooc_py_functional.html</id><summary type="html">
&lt;p&gt;&lt;a href="http://www.imooc.com/learn/317"&gt;http://www.imooc.com/learn/317&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;函数式编程: 更抽象, 更脱离指令(计算机), 更贴近计算(数学).   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需要变量 (python允许有变量, 所以python非纯函数式)  &lt;/li&gt;
&lt;li&gt;高阶函数  &lt;/li&gt;
&lt;li&gt;闭包: 返回函数  &lt;/li&gt;
&lt;li&gt;匿名函数  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;高阶函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;变量可以指向函数 &lt;code&gt;f=abs; f(-10)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;函数名: 就是指向函数的变量 &lt;code&gt;abs=len&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高阶函数: 接收函数作为参数的函数  &lt;/p&gt;
&lt;p&gt;def add(x,y,f): &lt;br/&gt;
    return f(x)+f(y)&lt;br/&gt;
add(-5, 9, abs)  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="map"&gt;map()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;map()&lt;/code&gt;是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。map()函数不改变原有的 list，而是返回一个新的 list。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;def format_name(s):  &lt;/span&gt;
&lt;span class="code-line"&gt;    return s.title()  &lt;/span&gt;
&lt;span class="code-line"&gt;print map(format_name, ['adam', 'LISA', 'barT'])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="reduce"&gt;reduce()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;reduce()&lt;/code&gt;函数也是Python内置的一个高阶函数。reduce()函数接收的参数和 map()类似，一个函数 f，一个list，但行为和 map()不同，reduce()传入的函数 f 必须接收两个参数，reduce()对list的每个元素反复调用函数f，并返回最终结果值。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;reduce(function, iterable[, initializer])&lt;/code&gt;&lt;br/&gt;
Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value.  If the optional initializer is present, it is placed before the items of the iterable in the calculation, and serves as a default when the iterable is empty. If initializer is not given and iterable contains only one item, the first item is returned.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="filter"&gt;filter()&lt;/h3&gt;
&lt;p&gt;filter()函数接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。  &lt;/p&gt;
&lt;h3 id="sorted"&gt;自定义sorted()&lt;/h3&gt;
&lt;p&gt;sorted()也是一个高阶函数，它可以接收一个比较函数&lt;code&gt;cmp&lt;/code&gt;来实现自定义排序，比较函数的定义是，传入两个待比较的元素 x, y，如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0。  &lt;/p&gt;
&lt;h3 id="_2"&gt;返回函数&lt;/h3&gt;
&lt;p&gt;在函数内部定义一个函数 然后返回这个内部定义的函数. &lt;br/&gt;
&lt;em&gt;返回函数可以把一些计算延迟执行&lt;/em&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;def calc_sum(lst):  &lt;/span&gt;
&lt;span class="code-line"&gt;    def lazy_sum():  &lt;/span&gt;
&lt;span class="code-line"&gt;        return sum(lst)  &lt;/span&gt;
&lt;span class="code-line"&gt;    return lazy_sum&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用&lt;code&gt;calc_sum()&lt;/code&gt;并没有计算出结果，而是返回函数:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; f = calc_sum([1, 2, 3, 4])  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; f  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;lt;function lazy_sum at 0x1037bfaa0&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对返回的函数进行调用时，才计算出结果:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; f()  &lt;/span&gt;
&lt;span class="code-line"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_3"&gt;闭包&lt;/h3&gt;
&lt;p&gt;函数&lt;code&gt;f&lt;/code&gt;内部定义的函数&lt;code&gt;g&lt;/code&gt;无法被外部访问 → 可以防止其他代码调用&lt;code&gt;g&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;def calc_sum(lst):  &lt;/span&gt;
&lt;span class="code-line"&gt;    def lazy_sum():  &lt;/span&gt;
&lt;span class="code-line"&gt;        return sum(lst)  &lt;/span&gt;
&lt;span class="code-line"&gt;    return lazy_sum&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意: 发现没法把 &lt;code&gt;lazy_sum&lt;/code&gt; 移到 &lt;code&gt;calc_sum&lt;/code&gt; 的外部，因为它&lt;em&gt;引用了 calc_sum 的参数&lt;/em&gt; &lt;code&gt;lst&lt;/code&gt;。&lt;br/&gt;
像这种&lt;strong&gt;内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数&lt;/strong&gt;的情况，称为闭包（Closure）。  &lt;/p&gt;
&lt;p&gt;闭包的特点是返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，就要&lt;em&gt;确保引用的局部变量在函数返回后不能变&lt;/em&gt;。&lt;br/&gt;
ex:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;# 希望一次返回3个函数，分别计算1x1,2x2,3x3:  &lt;/span&gt;
&lt;span class="code-line"&gt;def count():  &lt;/span&gt;
&lt;span class="code-line"&gt;    fs = []  &lt;/span&gt;
&lt;span class="code-line"&gt;    for i in range(1, 4):  &lt;/span&gt;
&lt;span class="code-line"&gt;        def f():  &lt;/span&gt;
&lt;span class="code-line"&gt;             return i*i  &lt;/span&gt;
&lt;span class="code-line"&gt;        fs.append(f)  &lt;/span&gt;
&lt;span class="code-line"&gt;    return fs  &lt;/span&gt;
&lt;span class="code-line"&gt;f1, f2, f3 = count()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以为调用f1()，f2()和f3()结果应该是1，4，9，但实际结果全部都是 9 !  原因就是当count()函数返回了3个函数时，这3个函数所引用的变量 i 的值已经变成了3。&lt;em&gt;函数只在执行时才去获取外层参数i&lt;/em&gt;, 由于f1、f2、f3并没有被调用，所以，此时他们并未计算 i*i，当 f1 被调用时i已经变为3... &lt;br/&gt;
上面的正确写法是:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;def count():  &lt;/span&gt;
&lt;span class="code-line"&gt;    fs = []  &lt;/span&gt;
&lt;span class="code-line"&gt;    for i in range(1, 4):  &lt;/span&gt;
&lt;span class="code-line"&gt;        def f(j=i):   &lt;/span&gt;
&lt;span class="code-line"&gt;            return j*j  &lt;/span&gt;
&lt;span class="code-line"&gt;        fs.append(f)  &lt;/span&gt;
&lt;span class="code-line"&gt;    return fs  &lt;/span&gt;
&lt;span class="code-line"&gt;f1, f2, f3 = count()  &lt;/span&gt;
&lt;span class="code-line"&gt;print f1(), f2(), f3()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;因此，返回函数不要引用任何循环变量，或者后续会发生变化的变量。&lt;/strong&gt; &lt;/p&gt;
&lt;h3 id="_4"&gt;匿名函数&lt;/h3&gt;
&lt;p&gt;Python中，对匿名函数提供了有限支持。 &lt;br/&gt;
关键字&lt;code&gt;lambda&lt;/code&gt; 表示匿名函数，冒号前面的 x 表示函数参数。匿名函数有个限制，就是只能有一个表达式，不写return，返回值就是该表达式的结果。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9])  &lt;/span&gt;
&lt;span class="code-line"&gt;myabs = lambda x: -x if x &amp;lt; 0 else x   &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; myabs(-1)  &lt;/span&gt;
&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_5"&gt;装饰器&lt;/h2&gt;
&lt;p&gt;问题: 定义了函数, 想在运行时增加函数功能同时不改动函数代码.&lt;br/&gt;
ex. 希望函数调用时打印调用日志&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/imooc_py_functional/pasted_image.png"/&gt;&lt;br/&gt;
⇒ 方法: 高阶函数: &lt;strong&gt;接收要修改的函数, 进行包装后返回包装过的新函数.&lt;/strong&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;def new_f(f):  &lt;/span&gt;
&lt;span class="code-line"&gt;    def fn(x):  &lt;/span&gt;
&lt;span class="code-line"&gt;        print 'call %s()' % f.__name__  &lt;/span&gt;
&lt;span class="code-line"&gt;        return f(x)  &lt;/span&gt;
&lt;span class="code-line"&gt;    return fn&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;函数&lt;code&gt;new_fn&lt;/code&gt;就是所谓装饰器函数. python的@语法可以简化装饰器调用: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/imooc_py_functional/pasted_image001.png"/&gt;&lt;br/&gt;
(注意: 右边代码, 原本未装饰的f1函数已经被彻底隐藏了. )&lt;br/&gt;
优点: 极大简化代码.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/imooc_py_functional/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;h3 id="decorator"&gt;无参数decorator&lt;/h3&gt;
&lt;p&gt;上面例子里面的&lt;code&gt;new_fn&lt;/code&gt;函数只能装饰接收一个参数x的函数, 想要处理接收任意参数的函数 ⇒ 利用Python的 &lt;code&gt;*args&lt;/code&gt; 和 &lt;code&gt;**kw&lt;/code&gt;&lt;br/&gt;
    def log(f):&lt;br/&gt;
        def fn(*args, &lt;strong&gt;kw):&lt;br/&gt;
            print 'call %s() in %s'%( f.&lt;strong&gt;name&lt;/strong&gt;, time.ctime() )&lt;br/&gt;
            return f(*args, &lt;/strong&gt;kw)&lt;br/&gt;
        return fn  &lt;/p&gt;
&lt;h3 id="decorator_1"&gt;带参数decorator&lt;/h3&gt;
&lt;p&gt;接上面的log函数, 如果有的函数非常重要，希望打印出'[INFO] call xxx()...'，有的函数不太重要，希望打印出'[DEBUG] call xxx()...'，这时，log函数本身就需要传入'INFO'或'DEBUG'这样的参数，类似这样：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;@log('DEBUG')  &lt;/span&gt;
&lt;span class="code-line"&gt;def my_func():  &lt;/span&gt;
&lt;span class="code-line"&gt;    pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把上面的定义翻译成高阶函数的调用，就是：&lt;br/&gt;
&lt;code&gt;my_func = log('DEBUG')(my_func)&lt;/code&gt;&lt;br/&gt;
再展开一下：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;log_decorator = log('DEBUG')  &lt;/span&gt;
&lt;span class="code-line"&gt;my_func = log_decorator(my_func)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相当于:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;log_decorator = log('DEBUG')  &lt;/span&gt;
&lt;span class="code-line"&gt;@log_decorator  &lt;/span&gt;
&lt;span class="code-line"&gt;def my_func():  &lt;/span&gt;
&lt;span class="code-line"&gt;    pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以，带参数的log函数&lt;em&gt;首先&lt;strong&gt;&lt;em&gt;返回一个decorator函数&lt;/em&gt;&lt;/strong&gt;，再让这个decorator函数接收my_func并返回新函数&lt;/em&gt;：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;def log(prefix):  &lt;/span&gt;
&lt;span class="code-line"&gt;    def log_decorator(f):  &lt;/span&gt;
&lt;span class="code-line"&gt;        def wrapper(*args, **kw):  &lt;/span&gt;
&lt;span class="code-line"&gt;            print '[%s] %s()...' % (prefix, f.__name__)  &lt;/span&gt;
&lt;span class="code-line"&gt;            return f(*args, **kw)  &lt;/span&gt;
&lt;span class="code-line"&gt;        return wrapper  &lt;/span&gt;
&lt;span class="code-line"&gt;    return log_decorator  &lt;/span&gt;
&lt;span class="code-line"&gt;@log('DEBUG')  &lt;/span&gt;
&lt;span class="code-line"&gt;def test():  &lt;/span&gt;
&lt;span class="code-line"&gt;    pass  &lt;/span&gt;
&lt;span class="code-line"&gt;print test()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里用到了闭包: 最里层wrapper函数(即修饰过个函数)用到了prefix参数.   &lt;/p&gt;
&lt;h3 id="decorator_2"&gt;完善decorator&lt;/h3&gt;
&lt;p&gt;上面的decorator会修改函数名:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在没有decorator的情况下，打印函数名：  &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;def f1(x):  &lt;/span&gt;
&lt;span class="code-line"&gt;    pass  &lt;/span&gt;
&lt;span class="code-line"&gt;print f1.__name__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ 输出： f1  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有decorator的情况下，再打印函数名：  &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;def log(f):  &lt;/span&gt;
&lt;span class="code-line"&gt;    def wrapper(*args, **kw):  &lt;/span&gt;
&lt;span class="code-line"&gt;        print 'call...'  &lt;/span&gt;
&lt;span class="code-line"&gt;        return f(*args, **kw)  &lt;/span&gt;
&lt;span class="code-line"&gt;    return wrapper  &lt;/span&gt;
&lt;span class="code-line"&gt;@log  &lt;/span&gt;
&lt;span class="code-line"&gt;def f2(x):  &lt;/span&gt;
&lt;span class="code-line"&gt;    pass  &lt;/span&gt;
&lt;span class="code-line"&gt;print f2.__name__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ 输出： wrapper  &lt;/p&gt;
&lt;p&gt;这对于那些依赖函数名的代码就会失效。decorator还改变了函数的&lt;code&gt;__doc__&lt;/code&gt;等其它属性。如果要让调用者看不出一个函数经过了@decorator的“改造”，就需要&lt;em&gt;把原函数的一些属性复制到新函数中&lt;/em&gt;：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;def log(f):  &lt;/span&gt;
&lt;span class="code-line"&gt;    def wrapper(*args, **kw):  &lt;/span&gt;
&lt;span class="code-line"&gt;        print 'call...'  &lt;/span&gt;
&lt;span class="code-line"&gt;        return f(*args, **kw)  &lt;/span&gt;
&lt;span class="code-line"&gt;    wrapper.__name__ = f.__name__  &lt;/span&gt;
&lt;span class="code-line"&gt;    wrapper.__doc__ = f.__doc__  &lt;/span&gt;
&lt;span class="code-line"&gt;    return wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样写很不方便, Python内置的&lt;code&gt;functools&lt;/code&gt;可以用来自动化完成这个“复制”的任务：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'call...'&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;functools.wraps(f)&lt;/code&gt;是一个装饰器函数, 目的是为了把最后返回的函数再次装饰(复制f的属性进去)... 所以对于带参数的装饰器, 应该在最里面返回的wrapper函数前加上&lt;code&gt;@functools.wraps(f)&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perf_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'call &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;() in &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#closure  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;perf_decorator&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nd"&gt;@performance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ms'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_6"&gt;偏函数&lt;/h3&gt;
&lt;p&gt;假设要转换大量的二进制字符串，每次都传入&lt;code&gt;int(x, base=2)&lt;/code&gt;非常麻烦，于是，我们想到，可以定义一个int2()的函数，默认把base=2传进去：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;def int2(x, base=2):  &lt;/span&gt;
&lt;span class="code-line"&gt;    return int(x, base)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;functools.partial&lt;/code&gt;可以把一个参数多的函数变成一个参数少的新函数，少的参数需要在创建时指定默认值，这样，新函数调用的难度就降低了。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;functools.partial(func[,*args][, **keywords])&lt;/code&gt;&lt;br/&gt;
Return a new partial object which when called will behave like func called with the positional arguments args and keyword arguments keywords.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;int2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;int2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1000000'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;64&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;int2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1010101'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;sorted_ignore_case&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sorted_ignore_case&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'bob'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'about'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Zoo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Credit'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category></entry><entry><title>numpy: list, array, matrix小结</title><link href="http://x-wei.github.io/list_array_matrix.html" rel="alternate"></link><published>2015-09-09T00:00:00+02:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2015-09-09:list_array_matrix.html</id><summary type="html">&lt;p&gt;python科学计算包的基础是numpy, 里面的array类型经常遇到. 一开始可能把这个array和python内建的列表(list)混淆, 这里简单总结一下列表(list), 多维数组(np.ndarray)和矩阵(np.matrix)的区别.    &lt;/p&gt;
&lt;h2 id="list"&gt;list列表&lt;/h2&gt;
&lt;p&gt;列表属于python的三种基本集合类型之一, 其他两种是元组(tuple)和字典(dict). tuple和list区别主要在于是不是mutable的.    &lt;/p&gt;
&lt;p&gt;list和java里的数组不同之处在于, python的list可以包含任意类型的对象, 一个list里可以包含int, string或者其他任何对象, 另外list是可变长度的(list有&lt;code&gt;append&lt;/code&gt;, &lt;code&gt;extend&lt;/code&gt;和&lt;code&gt;pop&lt;/code&gt;等方法).   &lt;/p&gt;
&lt;p&gt;所以, python内建的所谓"列表"其实是功能很强大的数组, 类比一下可以说它对应于java里面的&lt;code&gt;ArrayList&amp;lt;Object&amp;gt;&lt;/code&gt; .    &lt;/p&gt;
&lt;h2 id="ndarray"&gt;ndarray多维数组&lt;/h2&gt;
&lt;p&gt;ndarray是numpy的基石, 其实它更像一个java里面的标准数组: 所有元素有一个相同数据类型(dtype), 不过大小不是固定的.    &lt;/p&gt;
&lt;p&gt;ndarray对于大计算量的性能非常好, 所以list要做运算的时候一定要先转为array(&lt;code&gt;np.array(_a_list_)&lt;/code&gt;).    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ndarray带有一些非常实用的&lt;a href="http://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html"&gt;函数&lt;/a&gt;, 列举几个常用的: &lt;code&gt;sum, cumsum, argmax, reshape, T, ...&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ndarray有&lt;a href="http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#arrays-indexing"&gt;fancy indexing&lt;/a&gt;, 非常实用, 比如: &lt;code&gt;a[a&amp;gt;3]&lt;/code&gt; 返回数组里大于3的元素   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ndarray之间的乘法: 如果用乘法运算符&lt;code&gt;*&lt;/code&gt;的话, 返回的是每个位置元素相乘(类似matlab里面的&lt;code&gt;.*&lt;/code&gt;), 想要矩阵相乘需要用&lt;code&gt;dot()&lt;/code&gt;.   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常见矩阵的生成: &lt;code&gt;ones, zeros, eye, diag, ...&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="matrix"&gt;matrix矩阵&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;matrix是ndarray的子类&lt;/em&gt;, 所以前面ndarray那些优点都保留了.    &lt;/p&gt;
&lt;p&gt;同时, matrix全部都是二维的, 并且加入了一些更符合直觉的函数, 比如对于matrix对象而言, 乘号运算符得到的是矩阵乘法的结果. 另外&lt;code&gt;mat.I&lt;/code&gt;就是逆矩阵...   &lt;/p&gt;
&lt;p&gt;不过应用最多的还是ndarray类型.    &lt;/p&gt;
&lt;p&gt;参考资料:  &lt;br/&gt;
&lt;a href="http://docs.scipy.org/doc/numpy/reference/index.html"&gt;http://docs.scipy.org/doc/numpy/reference/index.html&lt;/a&gt; &lt;br/&gt;
&lt;a href="http://math.mad.free.fr/depot/numpy/base.html"&gt;http://math.mad.free.fr/depot/numpy/base.html&lt;/a&gt; &lt;br/&gt;
&lt;a href="http://stackoverflow.com/questions/4151128/what-are-the-differences-between-numpy-arrays-and-matrices-which-one-should-i-u"&gt;http://stackoverflow.com/questions/4151128/what-are-the-differences-between-numpy-arrays-and-matrices-which-one-should-i-u&lt;/a&gt; &lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Scrapy 上手笔记</title><link href="http://x-wei.github.io/Scrapy%20%E4%B8%8A%E6%89%8B%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><published>2015-04-19T00:00:00+02:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2015-04-19:Scrapy 上手笔记.html</id><summary type="html">
&lt;p&gt;Scrapy是用来爬取数据的很流行的包, 这里小记一下. 以前几天做的&lt;a href="https://github.com/X-Wei/OneArticleCrawler"&gt;一个爬虫&lt;/a&gt;为例子, 这个爬虫把韩寒一个app的前九百多期的文章抓了下来. &lt;/p&gt;
&lt;h2 id="i-installation"&gt;I. installation&lt;/h2&gt;
&lt;p&gt;scrapy的安装参考: &lt;a href="http://scrapy-chs.readthedocs.org/zh_CN/latest/topics/ubuntu.html"&gt;http://scrapy-chs.readthedocs.org/zh_CN/latest/topics/ubuntu.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(直接pip安装的好像缺少什么包)&lt;/p&gt;
&lt;h2 id="ii-prerequisite"&gt;II. prerequisite&lt;/h2&gt;
&lt;h3 id="xpath"&gt;XPath&lt;/h3&gt;
&lt;p&gt;需要学习scrapy首先需要会XPath, 这是一种方便与在html/xml文档里查找所需元素的语句. 这个还是很好学的, 其实只需要花一刻钟时间看看w3school的&lt;a href="http://www.w3school.com.cn/xpath/"&gt;教程&lt;/a&gt;, 就可以掌握够用的知识进行下一步了. &lt;/p&gt;
&lt;p&gt;这里总结一下我觉得会用到的语句(不全, 不过经常用到): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;//book&lt;/code&gt;    选取所有名字叫做book的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bookstore/book&lt;/code&gt; 选取bookstore的子元素中所有叫book的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//title[@lang='eng']&lt;/code&gt; 选取lang属性为"eng"的所有title元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//titile/text()&lt;/code&gt; 选取title元素的文字内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;descendant-or-self::text()&lt;/code&gt;: 选取自己或者所有后代节点的文字内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外还有个在线测试XPath语句的网站, 可以用这个测试XPath语句: &lt;/p&gt;
&lt;p&gt;&lt;a href="http://xpath.online-toolz.com/tools/xpath-editor.php"&gt;http://xpath.online-toolz.com/tools/xpath-editor.php&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;审查元素&lt;/h3&gt;
&lt;p&gt;再一个就是要用chrome的"审查元素"功能, 用这个功能可以看到想查找的网页内容对应在html文件的位置, 甚至可以直接右键复制想要的元素的XPath......(不过有时候并不是最合理的, 所以刚才XPath也不是白学...)&lt;/p&gt;
&lt;h2 id="iii-scrapy-shell"&gt;III. scrapy shell&lt;/h2&gt;
&lt;p&gt;网上的教程一般是从一个&lt;a href="http://doc.scrapy.org/en/latest/intro/tutorial.html"&gt;tutorial&lt;/a&gt;开始的, 介绍了一个小项目, 但是我觉得从scrapy shell开始应该更合理, 有时候甚至没必要建立一个工程, 在这个shell里就可以抓到想要的数据. &lt;/p&gt;
&lt;p&gt;启动的办法很简单: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;scrapy&lt;/span&gt;&lt;span class="x"&gt; shell 'url'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中&lt;code&gt;url&lt;/code&gt;就写想要爬取的一个网址. &lt;/p&gt;
&lt;p&gt;这个shell简单说来, 就是一个测试爬虫的交互环境, 除了&lt;em&gt;多了一些特殊变量和函数&lt;/em&gt;, 就是一个普通的(i)python shell. &lt;/p&gt;
&lt;p&gt;先说两个scrapy shell多出来的变量: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;response&lt;/code&gt;: 把启动的&lt;code&gt;url&lt;/code&gt;抓取后得到的&lt;code&gt;Response&lt;/code&gt;对象, 比如 &lt;code&gt;response.body&lt;/code&gt;就包含了抓取来的html内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sel&lt;/code&gt;: 用刚刚抓取的内容建立的一个&lt;code&gt;Selector&lt;/code&gt;对象, 简单理解, Selector对象可以让我们执行XPath语句提取想要的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经常的用法就是用&lt;code&gt;response&lt;/code&gt;对象查看爬取的情况(&lt;code&gt;response.status&lt;/code&gt;), 用&lt;code&gt;sel&lt;/code&gt;对象测试XPath的正确:
&lt;code&gt;sel.xpath("xpath_statement").extract()&lt;/code&gt; 会在获取的response.body里用xpath查找并提取内容. &lt;/p&gt;
&lt;p&gt;再说两个scrapy shell添加的函数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fetch(request_or_url)&lt;/code&gt;: 修改请求或者网址, 这样scrapy shell会从新用这个request/url抓取数据, 相应的sel和response等对象也会自动更新. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;view(response)&lt;/code&gt;: 在浏览器里查看刚刚抓取的内容.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里举个例子, 抓取一个的文章标题: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    $ scrapy shell 'http://wufazhuce.com/one/vol.921#articulo'&lt;/span&gt;
&lt;span class="code-line"&gt;    ......&lt;/span&gt;
&lt;span class="code-line"&gt;    In [1]: response.status&lt;/span&gt;
&lt;span class="code-line"&gt;    Out[1]: 200&lt;/span&gt;
&lt;span class="code-line"&gt;    In [2]: sel.xpath('//*[@id="tab-articulo"]/div/h2/text()').extract()&lt;/span&gt;
&lt;span class="code-line"&gt;    &amp;lt;string&amp;gt;:1: ScrapyDeprecationWarning: "sel" shortcut is deprecated. Use "response.xpath()", "response.css()" or "response.selector" instead&lt;/span&gt;
&lt;span class="code-line"&gt;    Out[2]: [u'\n\t\t\t\t\t\t\u78b0\u4e0d\u5f97\u7684\u4eba\t\t\t  \t\t']&lt;/span&gt;
&lt;span class="code-line"&gt;    In [3]: print sel.xpath('//*[@id="tab-articulo"]/div/h2/text()').extract()[0]&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                            碰不得的人&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;scrapy shell的完整文档在: 
&lt;a href="http://doc.scrapy.org/en/latest/topics/shell.html"&gt;http://doc.scrapy.org/en/latest/topics/shell.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="iv-scrapy-project"&gt;IV. scrapy project&lt;/h2&gt;
&lt;p&gt;接下来说建立scrapy工程, 这个按照tutorial走就好了. 
建立工程: 
&lt;code&gt;scrapy startproject my_proj&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;会新建一个my_proj文件夹, 里面的结构是: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ tree &lt;/span&gt;
&lt;span class="code-line"&gt;.&lt;/span&gt;
&lt;span class="code-line"&gt;└── my_proj&lt;/span&gt;
&lt;span class="code-line"&gt;    ├── scrapy.cfg&lt;/span&gt;
&lt;span class="code-line"&gt;    └── my_proj&lt;/span&gt;
&lt;span class="code-line"&gt;        ├── __init__.py&lt;/span&gt;
&lt;span class="code-line"&gt;        ├── items.py&lt;/span&gt;
&lt;span class="code-line"&gt;        ├── pipelines.py&lt;/span&gt;
&lt;span class="code-line"&gt;        ├── settings.py&lt;/span&gt;
&lt;span class="code-line"&gt;        └── spiders&lt;/span&gt;
&lt;span class="code-line"&gt;            └── __init__.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要修改的文件主要有两个: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;items.py&lt;/code&gt; 定义要抓取的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spiders/xxx.py&lt;/code&gt; 定义自己的爬虫&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="1"&gt;1. 自定义爬虫&lt;/h3&gt;
&lt;p&gt;先定义爬虫, 在spiders文件夹里面, 新建一个python文件, 这里定义一个&lt;code&gt;scrapy.spider.Spider&lt;/code&gt;的子类: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OneSpider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"one_spider"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;start_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"http://wufazhuce.com/one/vol.&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;#articulo"&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;924&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;title_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'//*[@id="tab-articulo"]/div/h2/text()'&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里, Spider子类一定需要定义三个东西: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;：　 是爬虫的名字, 一会爬取的时候需要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_urls&lt;/code&gt;:　启动时进行爬取的url列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse()&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;爬虫启动的时候会把每一个start_urls里的网址下载, 生成的&lt;code&gt;Response&lt;/code&gt;对象会传入这个&lt;code&gt;parse()&lt;/code&gt;方法, 这个方法负责解析返回的&lt;code&gt;Response&lt;/code&gt;对象, 提取数据(生成item)以及生成需要进一步处理的URL的 Request 对象等...&lt;/p&gt;
&lt;h3 id="2-item"&gt;2. 保存抓取的信息到item&lt;/h3&gt;
&lt;p&gt;刚才只是做到了抓取需要的信息, 还没有能够保存到文件里, 下面要将抓取的信息做成一个&lt;code&gt;Item&lt;/code&gt;保存.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先定义要保存的信息:&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;修改items.py文件, 里面定义一个&lt;code&gt;scrapy.Item&lt;/code&gt;的子类:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OnearticleItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# define the fields for your item here like:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;vol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个文件很简单, 只是说明一下要抓取的信息, 他们都是&lt;code&gt;scrapy.Field()&lt;/code&gt;, 这个东西类似一个字典.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然后在爬虫里保存item:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了保存抓取的内容, 在parse()方法里, 得到需要的数据以后, 新建一个&lt;code&gt;OnearticleItem&lt;/code&gt;, 把抓到的内容放进这个item里, 然后返回这个item即可. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;nb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\d+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;title_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'//*[@id="tab-articulo"]/div/h2/text()'&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;author_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'//*[@id="tab-articulo"]/div/p/text()'&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;content_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'//div[@class="articulo-contenido"]/descendant-or-self::text()'&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;nb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OnearticleItem&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'vol'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nb&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'author'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3"&gt;3. 运行爬虫&lt;/h3&gt;
&lt;p&gt;以上的文件修改好了以后, 只需&lt;em&gt;在命令行里&lt;/em&gt;启动爬虫即可, 这时候就用到了刚才定义的spider的&lt;code&gt;name&lt;/code&gt;属性:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$scrapy crawl one_spider -o one.csv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;大约几分钟功夫, 九百多篇文章就放到了one.csv文件里~&lt;/p&gt;</summary><category term="python"></category><category term="scrapy"></category></entry><entry><title>一个简单的python进度条</title><link href="http://x-wei.github.io/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84python%E8%BF%9B%E5%BA%A6%E6%9D%A1.html" rel="alternate"></link><published>2014-08-14T00:00:00+02:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2014-08-14:一个简单的python进度条.html</id><summary type="html">&lt;p&gt;在处理大量数的时候, 如果输出类似 "process i out of n files..." 这样的内容来指示进度的话, 虽然可以显示目前的进度(用来安慰等待的心情...)但有个问题是, 如果输出了太多行(比如一万行...), 就看不到前面的内容了... &lt;/p&gt;
&lt;p&gt;所以想找一个命令行下面的进度条, 其实python已经有了(不止一个)进度条的包了, 比如&lt;a href="https://pypi.python.org/pypi/progressbar/2.3-dev"&gt;progressbar&lt;/a&gt;, 但是不知为什么这个包在windows下面没有能做到刷新显示 -- 就是刷新进度的时候, 没有把原先那一行去掉, 而是在下面再输出了一行... (不过后来在linux下面使用这个包是没问题的, 好奇怪...)&lt;/p&gt;
&lt;p&gt;所以想办法自己写了一个, 发现要实现一个简单的进度条还是很简单的, 关键就是使用&lt;code&gt;\r&lt;/code&gt;, 这样会把光标移动到当前行的开头: 这样下次输出的时候就会把原先的内容冲掉了. &lt;/p&gt;
&lt;p&gt;代码只有不到二十行: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleProgressBar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;# `x`: progress in percent ( between 0 and 100)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="si"&gt;%d%%&lt;/span&gt;&lt;span class="s1"&gt; [&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;]'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'.'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用法也很简单, 先新建一个SimpleProgressBar对象, 在要更新进度条的时候, 调用update方法即可...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# An example of usage...&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;pb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SimpleProgressBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再吐槽一下windows, 不仅那个progressbar的包不好使, multiprocessing的包也不好使, 郁闷... &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[08-15补充]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;后来想到, 既然用&lt;code&gt;\r&lt;/code&gt;就可以实现刷新当前行, 还要用毛的进度条啊.... 直接这样写就好了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'processing &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; out od &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; items...'&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意print最后要加逗号 否则就换行了...&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>IPython上手学习笔记</title><link href="http://x-wei.github.io/IPython%E4%B8%8A%E6%89%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><published>2014-07-22T00:00:00+02:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2014-07-22:IPython上手学习笔记.html</id><summary type="html">
&lt;p&gt;&lt;a href="http://www.packtpub.com/learning-ipython-for-interactive-computing-and-data-visualization/book"&gt;Learning IPython for Interactive Computing and Data Visualization&lt;/a&gt;这本书的前两章的笔记, 这本书还被放在了IPython官网上, 虽然只有一百页多一点点, 但是讲的内容却很丰富, 介绍了IPython, numpy, pandas以及并行计算等方面. &lt;/p&gt;
&lt;p&gt;(在开始系统学IPython之前简单使用过IPython, 那时候我还是更喜欢bpython的代码提示功能...)&lt;/p&gt;
&lt;h1 id="ch1-10-ipython-essentials"&gt;ch1: 10 IPython essentials&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在任何变量后面加问号&lt;code&gt;?&lt;/code&gt;或者双问号&lt;code&gt;??&lt;/code&gt;, 将会输出详细的信息(按&lt;code&gt;q&lt;/code&gt;退出), &lt;code&gt;??&lt;/code&gt;的信息更加详细些&lt;/li&gt;
&lt;li&gt;Tab Completion: 没啥好说的 没有bpython做的好 也凑合吧...&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_, __, ___&lt;/code&gt;保存最近三次的输出;  &lt;code&gt;_i, __i, ___i&lt;/code&gt;保存最近三次的输入(作为字符串保存)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="magic-commands"&gt;magic commands&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在IPython里面可以使用一些标准unix命令, 比如&lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;pwd,ls&lt;/code&gt;等... &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个太好了 否则还要&lt;code&gt;import os&lt;/code&gt;, 然后再什么&lt;code&gt;os.chdir('...')&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其实这些unix命令是IPython的&lt;strong&gt;magic commands&lt;/strong&gt;, 这些magic commands一般用&lt;code&gt;%&lt;/code&gt;作为前缀.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是由于默认IPython开启了&lt;strong&gt;automagic system&lt;/strong&gt;, 上面那些命令可以不用加前缀了(或者使用Tab自动给加上前缀)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%run&lt;/code&gt; 命令, 运行一个.py脚本, 但是好处是, 与运行完了以后这个.py文件里的变量都可以在Ipython里继续访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%timeit&lt;/code&gt; 命令, 可以用来做基准测试(&lt;em&gt;benchmarking&lt;/em&gt;), 测试一个命令(或者一个函数)的运行时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%timeit&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;56.5&lt;/span&gt; &lt;span class="err"&gt;µ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;%timeit&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;51.7&lt;/span&gt; &lt;span class="err"&gt;µ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%debug&lt;/code&gt; 命令: 当有exception的时候, 在console里输入&lt;code&gt;%debug&lt;/code&gt;即可打开debugger. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在debugger里, 输入&lt;code&gt;u,d&lt;/code&gt;(up, down)查看stack, 输入&lt;code&gt;q&lt;/code&gt;退出debugger&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%debug&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="n"&gt;c374156862&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="n"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;3&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;***&lt;/span&gt; &lt;span class="n"&gt;Oldest&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;***&lt;/span&gt; &lt;span class="n"&gt;Newest&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用%pdb开启自动pdb模式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;%pdb&lt;br/&gt;
Automatic pdb calling has been turned ON&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;%pylab&lt;/code&gt; 命令, 大杀器, 看一下都import了什么:&lt;/p&gt;
&lt;p&gt;%pylab makes the following imports::
    import numpy
    import matplotlib
    from matplotlib import pylab, mlab, pyplot
    np = numpy
    plt = pyplot
    from IPython.display import display
    from IPython.core.pylabtools import figsize, getfigs
    from pylab import *
    from numpy import *&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;画图的时候可以不用非要加&lt;code&gt;plt.&lt;/code&gt;前缀了, 直接&lt;code&gt;plot()&lt;/code&gt;即可. 图像化出来的时候, 画图窗口并没有block, 可以动态(&lt;em&gt;interactively&lt;/em&gt;)画图.&lt;/p&gt;
&lt;p&gt;另外, qtconsole和notebook一样, 指定了&lt;code&gt;inline&lt;/code&gt;选项以后可以直接在窗口里画图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/IPython上手学习笔记/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;p&gt;后来发现inline的图片貌似不能放大看, 所以有时候还是单独一个窗口比较好, 换到非inline模式只需要再输入以下%pylab, 加上选项qt:
&lt;code&gt;%pylab qt&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="ipython-notebook"&gt;IPython Notebook&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;(重头戏)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个可以在浏览器里(!!)使用IPython, 并且可以使用多行编辑后再一并执行. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The Notebook brings the functionality of IPython into the browser for multiline textediting features, interactive session reproducibility, and so on.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在shell/cmd窗口里启动ipython的时候加上notebook:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ipython notebook&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;看到浏览器打开了, 很神奇: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/IPython上手学习笔记/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;新建一个notebook, 用用看: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/IPython上手学习笔记/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;使用的过程中渐渐理解了为什么书里说可以用来做"&lt;em&gt;multiline textediting features, interactive session reproducibility&lt;/em&gt;"... 因为这不只是个编程的东西, 还可以作为一个笔记本 — 而且是一个交互式的笔记本! &lt;/p&gt;
&lt;p&gt;(&lt;em&gt;注: 更多关于notebook的介绍在下面第二章的内容里.&lt;/em&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码,或者段落, 按照cell(格子)进行组织, 一个cell里面的内容可以是code, 但是也同样可以是markdown的段落, 或者是一个标题(heading).&lt;/li&gt;
&lt;li&gt;在一个代码的cell里, 写入多行代码, 就像在编辑器里写python程序一样, 按回车只会换行, 不会运行程序.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写了一段程序代码以后, 按&lt;code&gt;ctrl+Enter&lt;/code&gt;运行程序, 运行结果也是一个作为cell. 
(&lt;strong&gt;注&lt;/strong&gt;: 在qtconsole里面相反, 如果要输入多行程序的话, 按&lt;code&gt;Ctrl+Enter&lt;/code&gt;换行(按一一次ctrl+enter即可进入多行编辑模式), 写了几行代码以后要运行的话, 就按两次回车, 或者按&lt;code&gt;Shift+Enter&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;...还有好多快捷键, 按Esc以后再按h就可以看到... 这个还分编辑模式和命令模式呢... 真不能小看了IPython了!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/IPython上手学习笔记/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;h2 id="customizing-ipython"&gt;customizing IPython&lt;/h2&gt;
&lt;p&gt;保存自己的IPython配置文件, 只需要在shell/cmd里输入ipython profile create&lt;code&gt;,&lt;/code&gt; 配置文件存储在 &lt;code&gt;~.ipython&lt;/code&gt; 或者 &lt;code&gt;~/.config/ipython&lt;/code&gt;目录里.&lt;/p&gt;
&lt;h1 id="ch2-interavtive-work-with-ipython"&gt;ch2: Interavtive Work with IPython&lt;/h1&gt;
&lt;p&gt;IPython可以实现&lt;strong&gt;shell(OS)和python的交互&lt;/strong&gt;. 这样做一些unix shell的操作的时候可以不必退出console了.&lt;/p&gt;
&lt;h2 id="navigating-the-file-system"&gt;navigating the file system&lt;/h2&gt;
&lt;p&gt;例子: 完成下载压缩包, 解压缩, 以及打开解压后的文件这些操作...&lt;/p&gt;
&lt;p&gt;在py变量前面加入$, 可以把这个变量共享给OS或者magic command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;%mkdir&lt;/span&gt; &lt;span class="n"&gt;$folder&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就在当前目录下建立一个'data'文件夹 — 这可比py的命令好记多了啊... &lt;code&gt;%mkdir&lt;/code&gt;的原理其实是给了shell命令一个别名(&lt;code&gt;alias&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;然后, &lt;code&gt;%bookmark&lt;/code&gt;可以把当前的目录加入收藏夹 下次cd的时候方便直接跳到这里来:&lt;/p&gt;
&lt;p&gt;ex.
&lt;code&gt;%bookmark bm&lt;/code&gt;
那么以后可以直接用 &lt;code&gt;cd bm&lt;/code&gt; 跳到这个目录下. &lt;code&gt;%bookmark -l&lt;/code&gt; 可以列出收藏夹的目录内容.&lt;/p&gt;
&lt;p&gt;然后发现原来IPython连文件名都是可以提示的啊!... &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;with open('0&amp;lt;TAB&amp;gt;&lt;/span&gt;
&lt;span class="code-line"&gt;0.circles 0.edges&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="accessing-system-shell-with-ipython"&gt;Accessing system shell with IPython&lt;/h2&gt;
&lt;p&gt;在IPython里调用系统的命令, 不用再使用&lt;code&gt;sys.exec('...')&lt;/code&gt;之类冗长的方式了, 只需要在系统的命令前面加上一个感叹号&lt;code&gt;!&lt;/code&gt;即可...&lt;/p&gt;
&lt;p&gt;shell返回的结果可以作为一个string的列表保存在一个python variable里.&lt;/p&gt;
&lt;p&gt;ex. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;In [2]: files = !ls -1 -S | grep edges&lt;/span&gt;
&lt;span class="code-line"&gt;In [3]: files&lt;/span&gt;
&lt;span class="code-line"&gt;Out[3]: ['1912.edges',&lt;/span&gt;
&lt;span class="code-line"&gt;    '107.edges',&lt;/span&gt;
&lt;span class="code-line"&gt;    [...]&lt;/span&gt;
&lt;span class="code-line"&gt;    '3980.edges']&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(当然 上面这一行只能在unix系统下运行, 因为Windows的cmd没有ls 和 grep命令)&lt;/p&gt;
&lt;p&gt;还可以把一条比较长的命令作为alias保存起来, 用&lt;code&gt;%alias&lt;/code&gt;命令... (这个应该一般用不到)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%alias largest ls -1sSh | grep %s&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="the-extended-python-console"&gt;The Extended Python Console&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%history&lt;/code&gt; 或者 &lt;code&gt;%hist&lt;/code&gt; , 显示之前的记录, 有一些参数可用...&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%store&lt;/code&gt; 把python变量的内容保存下来, 以后的session可以用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%paste&lt;/code&gt; 导入并执行剪贴板里面的内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%run&lt;/code&gt; 之前讲过了, 运行py文件, 运行后py文件里的变量可以在console里访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%edit&lt;/code&gt; 打开系统的文件编辑器, 并且在关闭这个编辑器时自动运行程序&lt;/li&gt;
&lt;li&gt;介绍了一个包 networkx, 可以用来分析复杂网络(graph)的....&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="debug"&gt;debug&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;debug加入断点: &lt;code&gt;%run -d -b29 script.py&lt;/code&gt; 运行script.py 并且在29行的时候暂停, 当输入&lt;code&gt;c&lt;/code&gt;的时候再继续运行.&lt;/li&gt;
&lt;li&gt;一些pdb(debugging环境)里常用的命令:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;u/d&lt;/code&gt; for going up/down into the call stack&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; to step into the next statement&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; to continue execution until the next line in the current function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; to continue execution until the current function returns&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; to continue execution until the next breakpoint or exception&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; to evaluate and print any expression&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; to obtain the arguments of the current functions&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;!&lt;/code&gt; prefix to execute any Python command within the debugger&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="benchmarking"&gt;benchmarking("基准测试")&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%timeit fun()&lt;/code&gt; 测试一个&lt;strong&gt;函数&lt;/strong&gt;的执行速度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%run -t&lt;/code&gt;和&lt;code&gt;%timeit&lt;/code&gt;效果类似, 作用是测试一个py脚本&lt;strong&gt;文件&lt;/strong&gt;的执行速度&lt;/li&gt;
&lt;li&gt;更精细的运行时间测试, 可以用&lt;strong&gt;profile模块&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The profiler outputs details about calls of every Python function used directly or indirectly in this script.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@@...好高级!!! 这样的话就更容易发现程序运行的瓶颈在哪里了!
方法是使用 &lt;code&gt;%run -p&lt;/code&gt; 或者 &lt;code&gt;%prun&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="using-the-ipython-notebook"&gt;Using the IPython notebook&lt;/h2&gt;
&lt;p&gt;这个notebook的功能实在是很NB... 不仅可以加入代码/markdown段落, 还可以加入图片和视频... notebook的格式为.ipybn文件, 用JSON存储数据.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;输入 &lt;code&gt;ipython notebook&lt;/code&gt;(或者在ipython里输入&lt;code&gt;!ipython notebook&lt;/code&gt;)以后, 会在8888端口建立一个web server, 访问 &lt;a href="http://localhost:8888/"&gt;http://localhost:8888/&lt;/a&gt; 就可以看到上面的那个截图, 或者称之为&lt;strong&gt;notebook dashboard.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;cell magics&lt;/strong&gt;的作用域是整个cell(多行), 而magic command的作用域是一行, cell magics的前缀是两个百分号&lt;code&gt;%%&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从一个py文件直接建立一个notebook, 只需要把文件拖入dashboard即可, 然后notebook也可以保存为文件. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑了Markdown以后, 还是&lt;code&gt;Ctrl+Enter/Shift+Enter&lt;/code&gt; , 即可成为格式化的文本, 再双击就可以编辑!!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;让plot的图片直接嵌入在notebook里面: 使用&lt;code&gt;ipython notebook --pylab inline&lt;/code&gt;, 或者在notebook里面输入&lt;code&gt;%pylab inline&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/IPython上手学习笔记/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;h3 id="notebook"&gt;notebook的一些快捷键&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Esc从编辑模式(edit mode)退出到命令模式(command mode)&lt;/li&gt;
&lt;li&gt;Enter从命令模式到编辑模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(编辑模式下)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ctrl+Enter: 运行程序/markdown代码&lt;/li&gt;
&lt;li&gt;shift+Enter: 运行程序, 并自动跳到下一个cell&lt;/li&gt;
&lt;li&gt;alt+Enter: 运行程序, 并自动在后面新建一个cell在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(命令模式下)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c: 复制一个cell&lt;/li&gt;
&lt;li&gt;x: 剪切一个cell&lt;/li&gt;
&lt;li&gt;v: 粘贴cell&lt;/li&gt;
&lt;li&gt;a: 在当前cell上面(&lt;strong&gt;a&lt;/strong&gt;bove)新建一个cell&lt;/li&gt;
&lt;li&gt;b: 在当前cell下面(&lt;strong&gt;b&lt;/strong&gt;elow)新建一个cell&lt;/li&gt;
&lt;li&gt;m: 让当前cell变成一个markdown的cell&lt;/li&gt;
&lt;li&gt;y: 让当前cell变成code的cell&lt;/li&gt;
&lt;li&gt;1,2,3...: n级标题&lt;/li&gt;
&lt;li&gt;j,k: 上下移动选中的cell, vim风格..&lt;/li&gt;
&lt;li&gt;dd(d按两下): 删除一个cell(vim 风格...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;......爽到爆!!&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>pandas学习笔记</title><link href="http://x-wei.github.io/pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><published>2014-07-22T00:00:00+02:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2014-07-22:pandas学习笔记.html</id><summary type="html">
&lt;p&gt;首先, 导入pandas
&lt;code&gt;import pandas as pd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以及开启pylab: IPython里输入&lt;code&gt;%pylab&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.bearrelroll.com/2013/05/python-pandas-tutorial/"&gt;http://www.bearrelroll.com/2013/05/python-pandas-tutorial/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;基本操作&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://cloga.info/python/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/2013/09/17/pandas_intro/"&gt;http://cloga.info/python/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/2013/09/17/pandas_intro/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pandas和numpy的关系&lt;/strong&gt;: pandas是建立在numpy上面的, pandas可以处理不同类型的数据集合(heterogeneous data set: &lt;strong&gt;DataFrame&lt;/strong&gt;), numpy处理的是相同类型的数据集合(homogeneous data set: &lt;strong&gt;ndarray&lt;/strong&gt;)&lt;/p&gt;
&lt;h2 id="csv"&gt;读写csv文件&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;read_csv()&lt;/strong&gt;
&lt;code&gt;df=pd.read_csv('data.csv')&lt;/code&gt;
说一下数据类型的问题: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回类型数据帧(&lt;strong&gt;DataFrame&lt;/strong&gt;): &lt;code&gt;type(df) = pandas.core.frame.DataFrame&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df.columns&lt;/code&gt;包含了所有列的标签(&lt;em&gt;字段名&lt;/em&gt;)
&lt;code&gt;df.index&lt;/code&gt;包含了所有行的标签(可能没有的话, 就是一系列递增的数字了)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;但是其中的每一列是&lt;strong&gt;Series&lt;/strong&gt;类型: &lt;code&gt;type(df.dep)=pandas.core.series.Series&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后可以将Series转换为numpy的ndarray: &lt;code&gt;array(df.dep)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;to_csv()&lt;/strong&gt;
没啥好说的..
&lt;code&gt;df.to_csv('csvfilename')&lt;/code&gt;
要是不希望把index也作为一列写进csv文件的话, 就选择参数&lt;code&gt;index=False&lt;/code&gt;
&lt;a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html?highlight=to_csv#pandas.DataFrame.to_csv"&gt;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html?highlight=to_csv#pandas.DataFrame.to_csv&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="indexing-slicing"&gt;indexing &amp;amp; slicing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;选择一列: &lt;code&gt;df['dep']&lt;/code&gt; 或者&lt;code&gt;df.dep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择前3行(前三条记录): &lt;code&gt;df[:2]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用标签选取数据&lt;/strong&gt;: &lt;code&gt;df.loc[行标签, 列标签]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择前两列:
&lt;code&gt;df.loc[:,('one','two')]&lt;/code&gt;
或者用
&lt;code&gt;df.loc[:,df.columns[:2]]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用位置选取数据&lt;/strong&gt;: &lt;code&gt;df.iloc[行位置, 列位置]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df.iloc[:,:2]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自动判断的切片&lt;/strong&gt;: &lt;code&gt;df.ix[行位置或行标签, 列位置或列标签]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以前面俩基本用不着了...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;df.ix[:,('one','two')]&lt;/span&gt;
&lt;span class="code-line"&gt;df.ix[:,:2]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;boolean indexing&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. 选择dep是'PAR'的记录
&lt;code&gt;hk[hk.dep == 'PAR'].head()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ex. 多个条件, 比如dep是'PAR', dst是'BHM':
&lt;code&gt;hk[(hk.dep == 'PAR')&amp;amp;(hk.dst=='BHM')].head()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: 中括号里面的表达式, 每一个条件需要括号括起来, 中间的&lt;code&gt;&amp;amp;&lt;/code&gt;不能用&lt;code&gt;and&lt;/code&gt;, 等于号&lt;code&gt;==&lt;/code&gt;不能用&lt;code&gt;is&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;文档里的一个表格:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设置小数精度&lt;/strong&gt;
&lt;a href="http://pandas.pydata.org/pandas-docs/stable/options.html?highlight=precision"&gt;http://pandas.pydata.org/pandas-docs/stable/options.html?highlight=precision&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置小数点后六位的精度: 
&lt;code&gt;pd.set_option('precision',7)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意六位精度的话要设置precision为7=6+1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调整某一列的次序&lt;/strong&gt;
&lt;code&gt;df.reindex(columns=pd.Index(['x', 'y']).append(df.columns - ['x', 'y']))&lt;/code&gt;
&lt;a href="http://stackoverflow.com/questions/12329853/how-to-rearrange-pandas-column-sequence"&gt;http://stackoverflow.com/questions/12329853/how-to-rearrange-pandas-column-sequence&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;随机抽取几行&lt;/strong&gt;
    rand_idx = random.choice(df.index,9, replace=False) #要设置replace = False以防止重复!
    df.ix[rand_idx]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两个df相merge&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个df的column都一样, index不重复(增加行):&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pd.concat([df1,df2])&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个df的index一样, column不同(增加列)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pd.concat([df1,df2], axis = 1)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="addingdeleting-columns"&gt;adding/deleting columns&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://pandas.pydata.org/pandas-docs/stable/dsintro.html#column-selection-addition-deletion"&gt;http://pandas.pydata.org/pandas-docs/stable/dsintro.html#column-selection-addition-deletion&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建一列, 加到最后面:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df['new_col']=xxx&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;想要把一列插进中间某一处, 使用df.insert:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df.insert(1, 'bar', df['one'])&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除一列, 只需用 &lt;code&gt;del&lt;/code&gt; 关键字:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;del df['one_col']&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个Series组成一个dataframe:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pd.concat([s1, s2], axis=1)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重命名一列:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df=df.rename(columns = {'old_name':'new_name'})&lt;/code&gt;
或者:
&lt;code&gt;df.rename(columns = {'old_name':'new_name'}, inplace=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/20868394/changing-a-specific-column-name-in-pandas-dataframe"&gt;http://stackoverflow.com/questions/20868394/changing-a-specific-column-name-in-pandas-dataframe&lt;/a&gt;
&lt;a href="http://www.bearrelroll.com/2013/05/python-pandas-tutorial/"&gt;http://www.bearrelroll.com/2013/05/python-pandas-tutorial/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="apply-map-agg"&gt;apply() &amp;amp; map() &amp;amp; agg()&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;apply()&lt;/strong&gt;
对dataframe的内容进行批量处理, 这样要比循环来得快. 
&lt;code&gt;df.apply(func, axis=0,...)&lt;/code&gt;
&lt;code&gt;func&lt;/code&gt;: 定义的函数
&lt;code&gt;axis&lt;/code&gt;: =0的时候对列操作, =1的时候对行操作
ex.
&lt;code&gt;df.apply(self, func, axis=0,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;map()&lt;/strong&gt;
和python内建的没啥区别
&lt;code&gt;df['one'].map(sqrt)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;groupby()&lt;/strong&gt;
按照某一列(&lt;em&gt;字段&lt;/em&gt;)分组, 得到一个&lt;code&gt;DataFrameGroupBy&lt;/code&gt;对象. 之后再对这个对象进行分组操作, 如:
    df.groupby(['A','B']).sum()##按照A、B两列的值分组求和
    groups = df.groupby('A')#按照A列的值分组求和
    groups['B'].sum()##按照A列的值分组求B组和
    groups['B'].count()##按照A列的值分组B组计数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;agg()&lt;/strong&gt;
对分组的结果再分别进行不同的操作... 参数是一个dict, 把每个字段映射到一个函数上来...... 说的不清楚, 直接看例子: 
    In [82]: df
    Out[82]: 
           one  two  three
    index               &lt;br/&gt;
    a        1    1      2
    b        2    2      4
    c        3    3      6
    d      NaN    4    NaN&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;In [83]: g=df.groupby('one')&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;In [84]: g.agg({'two': sum,'three': sqrt})&lt;/span&gt;
&lt;span class="code-line"&gt;Out[84]: &lt;/span&gt;
&lt;span class="code-line"&gt;     two     three&lt;/span&gt;
&lt;span class="code-line"&gt;one               &lt;/span&gt;
&lt;span class="code-line"&gt;1      1  1.414214&lt;/span&gt;
&lt;span class="code-line"&gt;2      2  2.000000&lt;/span&gt;
&lt;span class="code-line"&gt;3      3  2.449490&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;甚至还可以对每一列进行多个处理操作:
    In [100]: g.agg({'two': [sum],'three': [sqrt,exp]})
    Out[100]: 
         two     three          &lt;br/&gt;
         sum      sqrt         exp
    one                         &lt;br/&gt;
    1      1  1.414214    7.389056
    2      2  2.000000   54.598150
    3      3  2.449490  403.428793&lt;/p&gt;
&lt;p&gt;具体见: &lt;a href="http://stackoverflow.com/questions/14529838/apply-multiple-functions-to-multiple-groupby-columns"&gt;http://stackoverflow.com/questions/14529838/apply-multiple-functions-to-multiple-groupby-columns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;统计出现频率&lt;/strong&gt;
方法1: 
&lt;code&gt;_hkhist=hk.groupby(groups).count().ix[:,0]#count of groupes&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;方法2:
&lt;code&gt;hk.groupby('dep').size()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;方法3:
(只适用于一列的情况)
&lt;code&gt;hk.dep.value_counts()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;把一列index转为column(不再作为index使用)&lt;/strong&gt;
&lt;a href="http://stackoverflow.com/questions/20461165/how-to-convert-pandas-index-in-a-dataframe-to-a-column"&gt;http://stackoverflow.com/questions/20461165/how-to-convert-pandas-index-in-a-dataframe-to-a-column&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比如, 原来的dataframe是三层index的, column只有一列(名字叫做'0'):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;df.reset_index(level=2,inplace=True)&lt;/code&gt;
这样就可以把第三层的内容作为使用, 而不是作为index, 现在column有两列了, 再给两列命名一下:
&lt;code&gt;hist_hub.columns = ['hub','occurrence']&lt;/code&gt;
就得到了:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;关于level这个参数:
level : int, str, tuple, or list, default None
Only remove the given levels from the index. Removes all levels by default&lt;/p&gt;
&lt;h2 id="plotting"&gt;Plotting&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://cloga.info/python/2014/02/23/Plotting_with_Pandas/"&gt;http://cloga.info/python/2014/02/23/Plotting_with_Pandas/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;统计出现次数, 画柱状图:&lt;/strong&gt;
    g=hk.groupby('dep')
    dd=g['dst'].count()
    dd.plot(kind='bar')&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pasted_image.png"/&gt;
或者用pandas提供的:
&lt;a href="http://pandas.pydata.org/pandas-docs/stable/basics.html#value-counts-histogramming-mode"&gt;http://pandas.pydata.org/pandas-docs/stable/basics.html#value-counts-histogramming-mode&lt;/a&gt;
nb=hk['#vol_hacker']
hist=nb.value_counts()*100.0/len(hk)
hist=hist.sort_index()
hist.plot(kind='bar')&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;积累分布曲线&lt;/strong&gt;
&lt;a href="http://stackoverflow.com/questions/6326360/python-matplotlib-probability-plot-for-several-data-set"&gt;http://stackoverflow.com/questions/6326360/python-matplotlib-probability-plot-for-several-data-set&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;counts, start, dx, _ = scipy.stats.cumfreq(data, numbins=20)&lt;/span&gt;
&lt;span class="code-line"&gt;x = np.arange(counts.size) * dx + start&lt;/span&gt;
&lt;span class="code-line"&gt;plt.plot(x, counts, 'ro')&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者用pandas提供的东西也能做吧:
&lt;a href="http://pandas.pydata.org/pandas-docs/stable/basics.html#discretization-and-quantiling"&gt;http://pandas.pydata.org/pandas-docs/stable/basics.html#discretization-and-quantiling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hist2d&lt;/strong&gt;
用pcolormesh
&lt;a href="http://www.physicsforums.com/showthread.php?t=653864"&gt;http://www.physicsforums.com/showthread.php?t=653864&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;貌似要转置!!
&lt;a href="http://stackoverflow.com/questions/24791614/numpy-pcolormesh-typeerror-dimensions-of-c-are-incompatible-with-x-and-or-y"&gt;http://stackoverflow.com/questions/24791614/numpy-pcolormesh-typeerror-dimensions-of-c-are-incompatible-with-x-and-or-y&lt;/a&gt;&lt;/p&gt;</summary><category term="pandas"></category><category term="python"></category></entry><entry><title>python pickle 的一个小问题</title><link href="http://x-wei.github.io/python%20pickle%20%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98.html" rel="alternate"></link><published>2014-07-15T00:00:00+02:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2014-07-15:python pickle 的一个小问题.html</id><summary type="html">&lt;p&gt;python的pickle/unpickle机制可以非常方便的保存一些计算的中间结果, 这一点java虽然也可以做到, 但是java里面的包的名字实在是长的让人记不住...&lt;/p&gt;
&lt;p&gt;不过今天在使用pickle的时候遇到了一个很奇怪的问题. &lt;/p&gt;
&lt;p&gt;是这样的, 原本写了一个程序&lt;code&gt;main.py&lt;/code&gt;, 这个程序里进行了一些计算并且pickle下了这些内容, 后来我觉得一个程序main.py写这么多实在太长了, 于是就把那些辅助函数以及class的定义通通放进了一个&lt;code&gt;util.py&lt;/code&gt;文件里. 并且在main.py的第一行写上: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;from util import *&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;按理说这应该没有问题, 和一个main文件时运行的效果相同的, 但是当我运行的时候却显示util.py里面这行unpickle的语句有错误:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;airport_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'airport_info.dict'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'rb'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'module'&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;'Airport'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中&lt;code&gt;Airport&lt;/code&gt;是我定义的一个类, 本来在main.py里面, 后来被我移动到了util.py里面...&lt;/p&gt;
&lt;p&gt;感觉很奇怪, 于是去&lt;a href="https://bbs.sjtu.edu.cn/frame2.html"&gt;水源&lt;/a&gt;求助, 果然fcfarseer学长就很快给了&lt;a href="https://bbs.sjtu.edu.cn/bbscon,board,Script,file,M.1405431916.A.html"&gt;回复&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在pickle一個對象的時候，pickle會記住這個對象的class是定義在哪個python
源文件裏，然後再unpickle的時候，pickle會自動import那個源文件以獲得class的定義。&lt;/p&gt;
&lt;p&gt;所以如果定義class的文件在這期間改過的話，就會拋出類似的錯誤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以问题出在这里(我的理解): 原先我把数据pickle进文件的时候, &lt;code&gt;Airport这个class是定义在了main.py里面, 所以当我在util.py里面load数据的时候, pickle发现原来的main.py里面已经没有了 Airport这个class, 于是就出现了Error...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决办法也不难, 只需要在&lt;code&gt;util.py&lt;/code&gt;里面再生成一下那些要load的数据文件, 之后再次unpickle的时候就会去&lt;code&gt;util.py&lt;/code&gt;而不是&lt;code&gt;main.py&lt;/code&gt;里找class的定义, 也就没有问题了!&lt;/p&gt;
&lt;p&gt;今天碰到的这个问题不是那么evident, 所以特地记一下.&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>A byte of Python 笔记</title><link href="http://x-wei.github.io/byte_of_python%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><published>2014-04-10T00:00:00+02:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2014-04-10:byte_of_python笔记.html</id><summary type="html">
&lt;p&gt;据说这本书是最好的入门读物, 况且只有100来页 (减掉前面后面那些扯淡的 不到100页...)&lt;/p&gt;
&lt;p&gt;那就用这本书过一下py的基本知识点吧! 看完以后收获不少, 把py涉及的很大一部分都讲到了. 这本书已经是够压缩的了, 不过我还是边看边自己再压缩了一遍(写在zim笔记里). &lt;/p&gt;
&lt;p&gt;我看的是1.20版本, 2004年的, 因为这个版本针对的是py2.x, 作者主页上现在的版本针对的是py3. 另外感觉没必要看中文翻译版, 因为这里用的英语比较简单, 而且有的时候中文翻译反而不如原文表达的恰当.&lt;/p&gt;
&lt;h1 id="prefacech1ch2"&gt;preface+ch1+ch2&lt;/h1&gt;
&lt;p&gt;扯淡...&lt;/p&gt;
&lt;h1 id="ch3-first-steps"&gt;ch3. First Steps&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are two ways of using Python to run your program - using the interactive interpreter prompt or using a source file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anything to the right of the # symbol is a comment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;the shebang line&lt;/strong&gt; - whenever the first two characters of the source file are &lt;code&gt;#!&lt;/code&gt; followed by the location of a program, this tells your Linux/Unix system that this program should be run with this interpreter when you execute the program.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Note that you can always run the program on any platform by specifying the interpreter directly on the command line such as the command python helloworld.py .)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use the built-in help functionality.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or example, run &lt;code&gt;help(str)&lt;/code&gt; - this displays the help for the str class which is used to store all text (strings) that you use in your program.&lt;/p&gt;
&lt;h1 id="ch4-the-basics"&gt;ch4. The Basics&lt;/h1&gt;
&lt;h2 id="literal-constants"&gt;Literal Constants&lt;/h2&gt;
&lt;p&gt;It is called a literal because it is literal - you use its value literally. ex. number 2, or string "hello".&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;number&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Numbers in Python are of four types - integers, long integers, floating point and complex numbers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-Examples of floating point numbers (or floats for short) are 3.23 and 52.3E-4. The E notation indicates powers of 10. In this case, 52.3E-4 means 52.3 * 10-4.
-Examples of complex numbers are (-5+4j) and (2.3 - 4.6j)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;string&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;string可以用Single/Double/Triple Quotes括起来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;escape sequence&lt;/em&gt;: \', \n, \t, 以及在行末作为续行符号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;raw string&lt;/strong&gt;: to specify some strings where no special processing such as escape sequences are handled, then what you need is to specify a raw string by prefixing r or R to the string. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. &lt;code&gt;r"Newlines are indicated by \n"&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unicode text:  prefix u or U. For example, &lt;code&gt;u"This is a Unicode string."&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember to use Unicode strings when you are dealing with text files, especially when you know that the file will contain text written in languages other than English.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Strings are immutable:  once you have created a string, you cannot change it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String literal concatenation: If you place two string literals side by side, they are automatically concatenated by Python. For example, '&lt;code&gt;What\'s' 'your name?&lt;/code&gt;' is automatically converted in to &lt;code&gt;"What's your name?".&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note for Regular Expression Users: Always use raw strings when dealing with regular expressions. Otherwise, a lot of backwhacking may be required. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="variables"&gt;Variables&lt;/h2&gt;
&lt;p&gt;顾名思义就是可以可以变的量...
Unlike literal constants, you need some method of accessing these variables &lt;em&gt;and hence you give them names&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identifier(标示符)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Identifiers&lt;/strong&gt; are names given to identify something. 
The first character of the identifier must be a letter of the alphabet (upper or lowercase) &lt;em&gt;or an underscore ('_')&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python refers to anything used in a program as an object.
Python is &lt;strong&gt;strongly object-oriented&lt;/strong&gt; in the sense that everything is an object &lt;em&gt;including numbers, strings and even functions&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Variables are used by just assigning them a value. No declaration or data type definition is needed/used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logical and Physical Lines: Implicitly, Python encourages the use of a single statement per line which makes code more readable. If you want to specify more than one logical line on a single physical line, then you have to explicitly specify this using a semicolon (;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;explicit line joining: ex. 续行符\;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;implicit line joining: ex. 括号...&lt;/p&gt;
&lt;h2 id="indentation"&gt;Indentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Leading whitespace (spaces and tabs) at the beginning of the logical line is used to determine the indentation level of the logical line, which in turn is used to determine the grouping of statements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This means that statements which go together must have the same indentation. Each such set of state- ments is called a &lt;em&gt;block&lt;/em&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not use a mixture of tabs and spaces for the indentation as it does not work across different platforms properly. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch5-operators-and-expressions"&gt;ch5. Operators and Expressions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;expressions&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An expression can be broken down into &lt;em&gt;operators&lt;/em&gt; and &lt;em&gt;operands&lt;/em&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些oprators: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;**, //, &amp;lt;&amp;lt;, &amp;gt;&amp;gt;, &amp;amp;, |, ^, ~, not, and, or&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Operator Precedence: 优先级的一个表...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Associativity: &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Operators are usually associated from left to right i.e. operators with same precedence are evaluated in a left to right manner. For example, &lt;code&gt;2 + 3 + 4&lt;/code&gt; is evaluated as &lt;code&gt;(2 + 3) + 4&lt;/code&gt;. Some operators like assignment operators have right to left associativity i.e. &lt;code&gt;a = b = c&lt;/code&gt; is treated as &lt;code&gt;a = (b = c)&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="ch6-control-flow"&gt;ch6. Control Flow&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;if&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;if-elif-else&lt;/code&gt; statement: This makes the program easier and reduces the amount of indentation required. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is &lt;em&gt;no switch statement in Python:&lt;/em&gt; You can use an if..elif..else statement to do the same thing (and in some cases, use a dictionary to do it quickly)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;while&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember that you can have &lt;em&gt;an &lt;strong&gt;&lt;em&gt;else&lt;/em&gt;&lt;/strong&gt; clause for the while loop&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-The &lt;code&gt;for..in&lt;/code&gt; statement is another looping statement which &lt;em&gt;iterates&lt;/em&gt; over a sequence of objects i.e. go
through each item in a sequence, a &lt;em&gt;sequence&lt;/em&gt; is just an ordered collection of items.
-optional &lt;strong&gt;else&lt;/strong&gt; part  also.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;break&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to break out of a loop statement i.e. stop the execution of a looping statement, even if the loop condition has not become False or the sequence of items has been completely iterated over.
-An important note is that if you break out of a for or while loop, &lt;em&gt;any corresponding loop else block is &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; executed.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;continue&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;used to tell Python to skip the rest of the statements in the current loop block and to continue to the &lt;em&gt;next iteration&lt;/em&gt; of the loop.&lt;/p&gt;
&lt;h1 id="ch7-functions"&gt;ch7. Functions&lt;/h1&gt;
&lt;p&gt;Functions are reusable pieces of programs. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;def func_name()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parameters:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note the terminology used - the names given in the function definition are called &lt;em&gt;parameters(行参)&lt;/em&gt; whereas the values you supply in the function call are called &lt;em&gt;arguments(实参)&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="scope"&gt;scope&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;local variables:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All variables have the &lt;strong&gt;scope&lt;/strong&gt; of the block they are declared in starting from the point of definition of the name.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;global variables&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to assign a value to a name defined outside the function, then you have to tell Python that the name is not local, but it is global. We do this using the &lt;code&gt;global&lt;/code&gt; statement. &lt;/p&gt;
&lt;h2 id="default-argument-values"&gt;Default Argument Values&lt;/h2&gt;
&lt;p&gt;Default Argument Values默认参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can specify default argument values for parameters by following the parameter name in the function definition with the assignment operator (=) followed by the default value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that the default argument value should be &lt;em&gt;immutable.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;you cannot have a parameter with a default argument value &lt;em&gt;before&lt;/em&gt; a parameter without a default argument value in the order of parameters declared in the function parameter list.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is because the values are &lt;em&gt;assigned to the parameters by position&lt;/em&gt;. For example, &lt;code&gt;def func(a, b=5)&lt;/code&gt; is valid, but &lt;code&gt;def func(a=5, b)&lt;/code&gt; is not valid.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keyword Arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have some functions with many parameters and you want to specify only some of them, then you can give values for such parameters by naming them - this is called keyword arguments - we &lt;em&gt;use the name (keyword) instead of the position&lt;/em&gt; to specify the arguments to the function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;used to &lt;em&gt;return&lt;/em&gt; from a function i.e. break out of the function. We can optionally return a value from the function as well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return None&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-a return statement without a value is equivalent to &lt;code&gt;return None&lt;/code&gt;. None is a special type in Python that represents nothingness. For example, it is used to indicate that a variable has no value if it has a value of None.
-Every function implicitly contains a return None statement at the end unless you have written your own return statement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pass&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the &lt;code&gt;pass&lt;/code&gt; statement is used in Python to indicate an empty block of statements.&lt;/p&gt;
&lt;h2 id="docstrings"&gt;DocStrings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;A string on the first logical line of a function&lt;/em&gt; is the &lt;strong&gt;docstring&lt;/strong&gt; for that function (also apply to modules and classes). &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;func.__doc__&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The convention: a multi-line string where the first line starts with a capital letter and ends with a dot. Then the second line is blank followed by any detailed explanation starting from the third line. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch8-modules"&gt;ch8. Modules&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;A module is basically &lt;strong&gt;a file&lt;/strong&gt;&lt;em&gt; containing all your functions and variables that you have defined&lt;/em&gt;. &lt;/li&gt;
&lt;li&gt;To reuse the module in other programs, the filename of the module must have a .py extension.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ex-sys-module"&gt;ex. sys module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When Python executes the &lt;code&gt;import sys&lt;/code&gt; statement, it looks for the sys.py module in one of the directores listed in its &lt;code&gt;sys.path&lt;/code&gt; variable. If the file is found, then the statements in the main block of that module is run and then the module is made available for you to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;sys.argv&lt;/code&gt; variable is a list of strings, contains the list of command line arguments i.e. the arguments passed to your program using the command line. 即程序执行时传给的参数列表.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;sys.path&lt;/code&gt; contains &lt;em&gt;the list of directory names where modules are imported&lt;/em&gt; from. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Observe that the first string in sys.path is empty - this empty string indicates that &lt;em&gt;the current directory&lt;/em&gt; is also part of the sys.path which is same as the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable. This means that you can directly import modules located in the current directory. Otherwise, you will have to place your module in one of the directories listed in sys.path .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Byte-compiled .pyc files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Importing a module is a relatively costly affair.
This .pyc file is useful when you import the module the next time from a different program - it will be much faster since part of the processing required in importing a module is already done. Also, these byte-compiled files are platform-independent. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from..import &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to directly import the &lt;code&gt;argv&lt;/code&gt; variable into your program (to avoid typing the &lt;code&gt;sys.&lt;/code&gt; everytime for it), then you can use the &lt;code&gt;from sys import argv&lt;/code&gt; statement.
not recommended...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every Python module has it's &lt;code&gt;__name__&lt;/code&gt; defined and if this is '&lt;code&gt;__main__&lt;/code&gt;', it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every Python program is also a module. You just have to make sure it has a .py extension. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dir-function"&gt;dir() function&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can use the built-in dir function to &lt;em&gt;list the identifiers&lt;/em&gt; that a module defines. The identifiers are the &lt;strong&gt;functions, classes, variables and imported modules&lt;/strong&gt; defined in that module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you supply a module name to the dir() function, it returns the list of the names defined in that module. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;When no argument is applied to it, it returns the list of names defined in the current module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch9-data-structures"&gt;ch9. Data Structures&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Data structures are structures which can hold some data together. In other words, they are used to store a collection of related data.&lt;/li&gt;
&lt;li&gt;3 built-in data structures in Python - &lt;strong&gt;list, tuple and dictionary&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="list-abc"&gt;List [a,b,c]&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;a data structure that holds an ordered collection of items. &lt;/li&gt;
&lt;li&gt;a &lt;em&gt;mutable&lt;/em&gt; data type&lt;/li&gt;
&lt;li&gt;you can add any kind of object to a list including numbers and even other lists.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;indexing &lt;/em&gt;operator: &lt;code&gt;a_list[1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len(a_list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a_list.append()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for..in&lt;/code&gt; loop to iterate through the items of the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a_list.sort()&lt;/code&gt;: this method affects the list itself and does not return a modified list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;del a_list[0]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tuple-abc"&gt;Tuple (a,b,c)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tuples are just like lists except that they are &lt;strong&gt;immutable&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Tuples are usually used in cases where a statement or a user-defined function can safely assume that the collection of values (i.e. the tuple of values) used will not change.&lt;/li&gt;
&lt;li&gt;can contain another tuple, another list......&lt;/li&gt;
&lt;li&gt;singleton: &lt;code&gt;t=(2,)&lt;/code&gt;(comma is necessary!)&lt;/li&gt;
&lt;li&gt;empth: t=()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;indexing: a_touple[0]&lt;/li&gt;
&lt;li&gt;len(a_tuple)&lt;/li&gt;
&lt;li&gt;used for output format:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;print '%s is %d years old' % (name, age)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="dictionary" k1:v1_="k1:v1," k2:v2="k2:v2"&gt;Dictionary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;key-value mapping&lt;/li&gt;
&lt;li&gt;you can use only immutable objects (like strings) for the keys of a dictionary but you can use either immutable or mutable objects for the values of the dictionary. (This basically translates to say that you should use only simple objects for keys.)&lt;/li&gt;
&lt;li&gt;一个dict中的keys不必同样type, values也是! &lt;/li&gt;
&lt;li&gt;key/value pairs in a dictionary are &lt;em&gt;not ordered&lt;/em&gt; in any manner.&lt;/li&gt;
&lt;li&gt;instances/objects of the dict class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;adding key-value pair by indexing: &lt;code&gt;dic[key]=val&lt;/code&gt;&lt;em&gt;(overwrite if key already exists!)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;deleting: &lt;code&gt;del dic[key]&lt;/code&gt;&lt;em&gt;(KeyError if key doesn't exist!)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dic.items()&lt;/code&gt;&lt;em&gt;返回一个list of tuples&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;dic.items()
[(k1,v1), (k2,v2)]
for k,v in dic.items:
    print k, v&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dic.keys()&lt;/code&gt;&lt;em&gt;返回keys的list&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;test: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the &lt;code&gt;in&lt;/code&gt; operator: &lt;code&gt;if akey in dic&lt;/code&gt;
or even the &lt;code&gt;has_key&lt;/code&gt; method of the dict class: &lt;code&gt;if dic.has_key(k)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="sequences"&gt;Sequences&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lists, tuples and strings are examples of sequences&lt;/li&gt;
&lt;li&gt;Two of the main features of a sequence is the &lt;strong&gt;indexing&lt;/strong&gt; operation which allows us to fetch a particular item in the sequence directly and the &lt;strong&gt;slicing&lt;/strong&gt; operation which allows us to retrieve a slice of the sequence i.e. a part of the sequence.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The great thing about sequences is that you can access tuples, lists and strings all in the same way!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;indexing(seq can be List or Tuple or String):&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;seq&lt;code&gt;[2], seq[-1]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slicing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;seq&lt;code&gt;[1:3]&lt;/code&gt; &lt;em&gt;(from 1 to 2!)&lt;/em&gt;
&lt;code&gt;seq[:]&lt;/code&gt; &lt;em&gt;(a whole copy of the list)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What you need to remember is that if you want to make a copy of a list or such kinds of sequences or complex objects (not simple objects such as integers), then you have to use the slicing operation(&lt;code&gt;list[:]&lt;/code&gt;) to make a copy.&lt;/li&gt;
&lt;li&gt;If you just assign the variable name to another name, both of them will refer to the same object and this could lead to all sorts of trouble if you are not careful.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="string"&gt;String&lt;/h2&gt;
&lt;p&gt;methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;str.startswith('a')&lt;/code&gt; &lt;em&gt;return boolean&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.find(substr)&lt;/code&gt; &lt;em&gt;return index of subster or -1 if not found&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;substr in str&lt;/code&gt; &lt;em&gt;return boolean&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.join(strseq)&lt;/code&gt; &lt;em&gt;use str as delimiter to joint the items in strseq&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch10-problem-solving-writing-a-python-script"&gt;ch10. Problem Solving - Writing a Python Script&lt;/h1&gt;
&lt;p&gt;"a program which creates a backup of all my important files"&lt;/p&gt;
&lt;h2 id="1st-version"&gt;1st version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Run the command using the &lt;code&gt;os.system&lt;/code&gt; function which runs the command as if it was run from the system i.e. in the shell - it returns 0 if the command was successfully, else it returns an error number.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;source = ['/home/swaroop/byte', '/home/swaroop/bin']&lt;/span&gt;
&lt;span class="code-line"&gt;target_dir = '/mnt/e/backup/'&lt;/span&gt;
&lt;span class="code-line"&gt;target = target_dir + time.strftime('%Y%m%d%H%M%S') + '.zip'&lt;/span&gt;
&lt;span class="code-line"&gt;zip_command = "zip -qr '%s' %s" % (target, ' '.join(source))&lt;/span&gt;
&lt;span class="code-line"&gt;if os.system(zip_command) == 0:&lt;/span&gt;
&lt;span class="code-line"&gt;    print 'Successful backup to', target&lt;/span&gt;
&lt;span class="code-line"&gt;else:&lt;/span&gt;
&lt;span class="code-line"&gt;    print 'Backup FAILED'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2nd-version"&gt;2nd version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;using the time as the name of the file within a directory with the current date as a directory within the main backup directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;if not os.path.exists(today):&lt;/span&gt;
&lt;span class="code-line"&gt;    os.mkdir(today) # make directory&lt;/span&gt;
&lt;span class="code-line"&gt;...&lt;/span&gt;
&lt;span class="code-line"&gt;target = today + os.sep + now + '.zip'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;os.sep&lt;/code&gt; variable - this gives the directory separator according to your operating system i.e. it will be '/' in Linux, Unix, it will be '\' in Windows and ':' in Mac OS.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3rd-version"&gt;3rd version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;attaching a user-supplied comment to the name of the zip archive.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;comment = raw_input('Enter a comment --&amp;gt; ')&lt;/span&gt;
&lt;span class="code-line"&gt;if len(comment) == 0: # check if a comment was entered&lt;/span&gt;
&lt;span class="code-line"&gt;    target = today + os.sep + now + '.zip'&lt;/span&gt;
&lt;span class="code-line"&gt;else:&lt;/span&gt;
&lt;span class="code-line"&gt;    target = today + os.sep + now + '_' + \&lt;/span&gt;
&lt;span class="code-line"&gt;    comment.replace(' ', '_') + '.zip'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="more-refinements"&gt;More Refinements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;allow extra files and directories to be passed to the script at the command line. We will get these from the sys.argv list and we can add them to our source list using the extend method provided by the list class.&lt;/li&gt;
&lt;li&gt;use of the tar command instead of the zip command. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One advantage is that when you use the tar command along with gzip, the backup is much faster and the backup created is also much smaller. If I need to use this archive in Windows, then WinZip handles such .tar.gz files easily as well.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tar = 'tar -cvzf %s %s -X /home/swaroop/excludes.txt' % (target, ' '.join(srcdir))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The most preferred way of creating such kind of archives would be using the zipfile or tarfile module respectively.&lt;/li&gt;
&lt;li&gt;"Software is grown, not built"&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch11-object-oriented-programming"&gt;ch11. Object-Oriented Programming&lt;/h1&gt;
&lt;h2 id="fields-methods"&gt;fields, methods&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;class: &lt;strong&gt;fields&lt;/strong&gt;, &lt;strong&gt;methods&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Fields are of two types - they can belong to each instance/object of the class or they can belong to the class itself. They are called &lt;strong&gt;instance variables&lt;/strong&gt; and &lt;strong&gt;class variables&lt;/strong&gt; respectively.&lt;/li&gt;
&lt;li&gt;ou must refer to the variables and methods of the same object using the &lt;code&gt;self&lt;/code&gt; variable only. This is called an &lt;em&gt;attribute reference&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;we refer to the class variable as &lt;code&gt;ClassName.var&lt;/code&gt; and not as &lt;code&gt;self.var&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="self"&gt;self&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Class methods have only one specific difference from ordinary functions - &lt;em&gt;they must have an extra first name that has to be added to the beginning of the parameter list&lt;/em&gt;, but you do do not give a value for this parameter when you call the method, Python will provide it. &lt;/li&gt;
&lt;li&gt;create an object/instance of this class using the name of the class followed by a pair of parentheses.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-init-method"&gt;The &lt;strong&gt;init&lt;/strong&gt; method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;__init__()&lt;/code&gt; method is run as soon as an object of a class is instantiated. The method is useful to do any initialization you want to do with your object. &lt;/li&gt;
&lt;li&gt;analogous to a constructor in C++, C# or Java.&lt;/li&gt;
&lt;li&gt;the same, __&lt;code&gt;del__()&lt;/code&gt; method: run when the object is no longer in use and there is no guarantee when that method will be run. If you want to explicitly do this, you just have to use the del statement.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;All class members (including the data members) are &lt;strong&gt;&lt;em&gt;public&lt;/em&gt;&lt;/strong&gt; and all the methods are &lt;strong&gt;&lt;em&gt;virtual&lt;/em&gt;&lt;/strong&gt; in Python.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;One exception: If you use data members with names using the double underscore prefix such as &lt;code&gt;__privatevar&lt;/code&gt;, Python uses name-mangling to effectively make it a private variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="inheritance"&gt;Inheritance&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ex:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Teacher&lt;/span&gt;(&lt;span class="n"&gt;SchoolMember&lt;/span&gt;)://&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s"&gt;'''Represents a teacher.'''&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;age&lt;/span&gt;, &lt;span class="n"&gt;salary&lt;/span&gt;):&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;SchoolMember&lt;/span&gt;.&lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;age&lt;/span&gt;)&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;salary&lt;/span&gt; = &lt;span class="n"&gt;salary&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'(Initialized Teacher: %s)'&lt;/span&gt; % &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To use inheritance, we specify the base class names in a &lt;strong&gt;tuple&lt;/strong&gt; following the class name in the class definition. --&lt;em&gt;multiple inheritance.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;__init__&lt;/code&gt; method of the base class is explicitly called using the &lt;code&gt;self&lt;/code&gt; variable so that we can initialize the base class part of the object. This is very important to remember - &lt;em&gt;Python does not automatically call the constructor of the base class, you have to explicitly call it yourself.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch12-inputoutput"&gt;ch12. Input/Output&lt;/h1&gt;
&lt;h2 id="files"&gt;Files&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;open and use files for reading or writing by creating an object of the &lt;code&gt;file&lt;/code&gt; class and using its &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;readline&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; methods appropriately to read from or write to the file. Then finally, when you are finished with the file, you call the &lt;code&gt;close&lt;/code&gt; method to tell Python that we are done using the file.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;f = file('poem.txt', 'w') # open for 'w'riting&lt;/span&gt;
&lt;span class="code-line"&gt;f.write(poem) # write text to file&lt;/span&gt;
&lt;span class="code-line"&gt;f.close() # close the file&lt;/span&gt;
&lt;span class="code-line"&gt;f = file('poem.txt') # if no mode is specified, 'r'ead mode is assumed by default&lt;/span&gt;
&lt;span class="code-line"&gt;while True:&lt;/span&gt;
&lt;span class="code-line"&gt;    line = f.readline()# This method returns a complete line including the newline character at the end of the line.&lt;/span&gt;
&lt;span class="code-line"&gt;    if len(line) == 0: # Zero length indicates EOF&lt;/span&gt;
&lt;span class="code-line"&gt;    break&lt;/span&gt;
&lt;span class="code-line"&gt;    print line, # Notice comma to avoid automatic newline added by Python&lt;/span&gt;
&lt;span class="code-line"&gt;f.close() # close the file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pickle"&gt;Pickle&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Python provides a standard module called &lt;/em&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;em&gt; using which you can store any Python object in a file and then get it back later intact. This is called storing the object persistently.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;There is another module called &lt;code&gt;cPickle&lt;/code&gt; which functions exactly same as the &lt;code&gt;pickle&lt;/code&gt; module except that it is written in the C language and is (upto 1000 times) faster. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pickling &amp;amp; unpickling:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cPickle&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shoplistfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shoplist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shoplistfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;storedlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;storedlist&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To store an object in a file, first we open a file object in write mode and store the object into the open file by calling the &lt;code&gt;dump&lt;/code&gt; function of the pickle module. This process is called &lt;em&gt;pickling&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Next, we retrieve the object using the &lt;code&gt;load&lt;/code&gt; function of the pickle module which returns the object. This process is called &lt;em&gt;unpickling&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch13-exceptions"&gt;ch13. Exceptions&lt;/h1&gt;
&lt;h2 id="tryexcept"&gt;Try..Except&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We can handle exceptions using the &lt;code&gt;try..except&lt;/code&gt; statement. We basically put our usual statements within the try-block and put all our error handlers in the except-block.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Enter something --&amp;gt; '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;EOFError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Why did you do an EOF on me?'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# exit the program&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Some error/exception occurred.'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# here, we are not exiting the program&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Done'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;except&lt;/code&gt; clause can handle a single specified error or exception, or a parenthesized list of errors/exceptions. If no names of errors or exceptions are supplied, it will handle all errors and exceptions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;If any error or exception is not handled, then the default Python handler is called which just stops the execution of the program and prints a message.&lt;/li&gt;
&lt;li&gt;You can also have an &lt;code&gt;else&lt;/code&gt; clause associated with a &lt;code&gt;try..catch&lt;/code&gt; block. The &lt;code&gt;else&lt;/code&gt; clause is executed if no exception occurs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="raising-exceptions"&gt;Raising Exceptions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;using the &lt;code&gt;raise&lt;/code&gt; statement. &lt;/li&gt;
&lt;li&gt;You also have to specify the name of the error/exception and the exception object that is to be thrown along with the exception. &lt;/li&gt;
&lt;li&gt;The error or exception that you can arise should be class which directly or indirectly is a derived class of the &lt;code&gt;Error&lt;/code&gt; or &lt;code&gt;Exception&lt;/code&gt; class respectively.&lt;/li&gt;
&lt;li&gt;ex.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ShortInputException&lt;/span&gt;(&lt;span class="nb"&gt;Exception&lt;/span&gt;):&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s"&gt;'''A user-defined exception class.'''&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;length&lt;/span&gt;, &lt;span class="n"&gt;atleast&lt;/span&gt;):&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;Exception&lt;/span&gt;.&lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;)&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;length&lt;/span&gt; = &lt;span class="n"&gt;length&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;atleast&lt;/span&gt; = &lt;span class="n"&gt;atleast&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;try:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;s&lt;/span&gt; = &lt;span class="n"&gt;raw_input&lt;/span&gt;(&lt;span class="s"&gt;'Enter something --&amp;gt; '&lt;/span&gt;)&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;(&lt;span class="o"&gt;s&lt;/span&gt;) &amp;lt; &lt;span class="mi"&gt;3&lt;/span&gt;:&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ShortInputException&lt;/span&gt;(&lt;span class="n"&gt;len&lt;/span&gt;(&lt;span class="o"&gt;s&lt;/span&gt;), &lt;span class="mi"&gt;3&lt;/span&gt;)&lt;span class="c c-Singleline"&gt;#  specify the name of the error/exception and the exception object that is to be thrown&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;EOFError:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'\nWhy did you do an EOF on me?'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ShortInputException&lt;/span&gt;, &lt;span class="o"&gt;x&lt;/span&gt;:&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'ShortInputException: The input was of length %d, \&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;                was expecting at least %d'&lt;/span&gt; % (&lt;span class="o"&gt;x&lt;/span&gt;.&lt;span class="n"&gt;length&lt;/span&gt;, &lt;span class="o"&gt;x&lt;/span&gt;.&lt;span class="n"&gt;atleast&lt;/span&gt;)&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;else:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'No exception was raised.'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tryfinally"&gt;Try..Finally&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What if you were reading a file and you wanted to close the file &lt;em&gt;whether or not an exception was raised&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;before the program exits, the finally clause is executed and the file is closed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch14-the-python-standard-library"&gt;ch14. The Python Standard Library&lt;/h1&gt;
&lt;h2 id="sys-module"&gt;sys module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sys.argv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;there is always at least one item in the &lt;code&gt;sys.argv&lt;/code&gt; list which is the name of the current program being run and is available as &lt;code&gt;sys.argv[0]&lt;/code&gt; . Other command line arguments follow this item.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sys.exit&lt;/code&gt; : to exit the running program.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="os-module"&gt;os module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;os.getcwd()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gets the current working directory i.e. the path of the directory from which the curent Python script is working.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;os.listdir()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.remove()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.system()&lt;/code&gt;: run a shell command.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.linesep&lt;/code&gt;: string gives the line terminator used in the current platform. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.path.split()&lt;/code&gt;: returns the directory name and file name of the path.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.path.isfile()&lt;/code&gt; and &lt;code&gt;os.path.isdir()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch15-more-python"&gt;ch15. More Python&lt;/h1&gt;
&lt;h2 id="special-methods"&gt;Special Methods&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generally, special methods are used to mimic certain behavior. &lt;/li&gt;
&lt;li&gt;For example, if you want to use the &lt;code&gt;x[key]&lt;/code&gt; indexing operation for your class (just like you use for lists and tuples) then just implement the &lt;code&gt;__getitem__()&lt;/code&gt; method and your job is done.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__init__(self, ...)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__del__(self)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__str__(self)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Called when we use the &lt;code&gt;print&lt;/code&gt; statement with the object or when &lt;code&gt;str()&lt;/code&gt; is used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__lt__(self, other)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Called when the &lt;em&gt;less than&lt;/em&gt; operator ( &amp;lt; ) is used. Similarly, there are special methods for all the operators (+, &amp;gt;, etc.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__getitem__(self, key)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Called when x[key] indexing operation is used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__len__(self)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Called when the built-in &lt;code&gt;len()&lt;/code&gt; function is used for the sequence object.&lt;/p&gt;
&lt;h2 id="list-comprehension"&gt;List Comprehension&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;used to derive a new list from an existing list.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;listone = [2, 3, 4]&lt;/span&gt;
&lt;span class="code-line"&gt;listtwo = [2*i for i in listone if i &amp;gt; 2]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Here, we derive a new list by specifying the manipulation to be done (2*i) when some condition is satisfied (if i &amp;gt; 2).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="receiving-tuples-and-lists-in-functions"&gt;Receiving Tuples and Lists in Functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;receiving parameters to a function as a &lt;em&gt;tuple&lt;/em&gt; or a &lt;em&gt;dictionary&lt;/em&gt; using the &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;**&lt;/code&gt; prefix respectively. &lt;/li&gt;
&lt;li&gt;This is useful when taking variable number of arguments in the function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;def powersum(power, *args):...&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Due to the * prefix on the args variable, all extra arguments passed to the function are stored in args as a tuple. If a ** prefix had been used instead, the extra parameters would be considered to be key/value pairs of a dictionary.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lambda-forms"&gt;Lambda Forms&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;lambda&lt;/code&gt; statement is used to create new function objects and then return them &lt;em&gt;at runtime&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;ex. &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;def make_repeater(n):&lt;/span&gt;
&lt;span class="code-line"&gt;    return lambda s: s * n&lt;/span&gt;
&lt;span class="code-line"&gt;twice = make_repeater(2)&lt;/span&gt;
&lt;span class="code-line"&gt;print twice('word')&lt;/span&gt;
&lt;span class="code-line"&gt;print twice(5)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    $ python lambda.py&lt;/span&gt;
&lt;span class="code-line"&gt;    wordword&lt;/span&gt;
&lt;span class="code-line"&gt;    10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;lambda&lt;/code&gt; statement is used to create &lt;em&gt;the function object&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Essentially, &lt;em&gt;the lambda takes a parameter followed by a single expression only which becomes the body of the function and the value of this expression is returned by the new function.&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;Note that even a print statement cannot be used inside a lambda form, only &lt;em&gt;expressions&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-exec-and-eval-statements"&gt;The exec and eval statements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;exec&lt;/code&gt; statement is used to execute Python statements which are stored in a string or file.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;eval&lt;/code&gt; statement is used to evaluate valid Python expressions which are stored in a string. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-assert-statement"&gt;The assert statement&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;to assert that something is true. &lt;/li&gt;
&lt;li&gt;For example, if you are very sure that you will have at least one element in a list you are using and want to check this, and raise an error if it is not true, then assert statement is ideal in this situation. &lt;/li&gt;
&lt;li&gt;When the assert statement fails, an AssertionError is raised.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-repr-function-or-backticks"&gt;The repr function or Backticks(`)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;to obtain a canonical string representation of the object.&lt;/li&gt;
&lt;li&gt;you will have &lt;code&gt;eval(repr(object)) == object&lt;/code&gt; most of the time.&lt;/li&gt;
&lt;li&gt;Basically, the repr function or the backticks are used to obtain a printable representation of the object.&lt;/li&gt;
&lt;li&gt;can control what your objects return for the repr function by defining the __&lt;code&gt;repr__&lt;/code&gt; method in your class.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category></entry><entry><title>水源PPP板图片下载器</title><link href="http://x-wei.github.io/%E6%B0%B4%E6%BA%90PPP%E6%9D%BF%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E5%99%A8.html" rel="alternate"></link><published>2012-06-07T20:14:00+02:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2012-06-07:水源PPP板图片下载器.html</id><summary type="html">&lt;p&gt;这个其实是三月份的时候做的, 当时刚刚学会用urllib和正则表达式做一些爬虫, 于是结合人民群众的需要, 写了个小脚本(福利~) &lt;/p&gt;
&lt;p&gt;不过现在我还只是会照葫芦画瓢那样用urllib, 没什么长进...&lt;/p&gt;
&lt;p&gt;github地址: &lt;a href="https://github.com/X-Wei/yssy_ppp_pic_downloader"&gt;https://github.com/X-Wei/yssy_ppp_pic_downloader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;p&gt;功能就是下载水源ppperson板里帖子的图片, 并且每个帖子一个文件夹放好. 通过修改main函数可以选择下载最近一页的帖子还是下载全部帖子(或者最近几页的帖子)&lt;/p&gt;
&lt;p&gt;原理很简单, 分析网页的html代码, 用正则表达式找出图片的地址然后下载到本地. 当时我已经写了两三个简单的爬虫, 所以这个写得蛮快, 而且只用50行就搞定了...&lt;/p&gt;
&lt;p&gt;不会用多线程, 只能一张一张下载, 帖子数目实在太多了, 我让它跑了一晚上, 第二天跑完, 下载了8个G的图, 几千个文件夹(囧)......&lt;/p&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;p&gt;不过还是遇到了一些问题, 比较老的帖子会有些图片404, 这时或者这个帖子对应的文件夹为空, 或者里面的图片其实不是图片, 而是出错信息的html代码(虽然看后缀是个图片). 我需要把那些不是图片的文件删掉, 而且要删掉所有的空文件夹. &lt;/p&gt;
&lt;p&gt;删除不是图片的文件(其实应该是删除纯文本文件), 在水源发贴问, 用shell命令(perl)做到了(虽然不明白为什么这样写...):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find yssy_ppp/ -type f | perl -ne 'chomp;unlink "$_" if -T $_'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;关于删除空目录, 发现&lt;code&gt;rmdir&lt;/code&gt;命令就已经可以了, 会删除空文件夹, 非空文件夹不会删除(虽然会显示警告).&lt;/p&gt;
&lt;p&gt;python里面调用shell命令只需要:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.system("shell_command")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以, 只需要在程序的最后加上两行:
    os.system('''find yssy_ppp/ -type f | perl -ne 'chomp;unlink "$&lt;em&gt;" if -T $&lt;/em&gt;' ''')
    os.system('rmdir yssy_ppp/*')&lt;/p&gt;
&lt;p&gt;虽然终端里运行时最后会因为那个&lt;code&gt;rmdir&lt;/code&gt;命令出一堆警告, 但是既然功能实现了就懒得改了...&lt;/p&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;p&gt;还写(改写)过一个人人相册下载的脚本, 不过需要改进, 不知毕业前能不能搞定......&lt;/p&gt;</summary><category term="git"></category><category term="python"></category><category term="shell"></category></entry><entry><title>github上两个比较有用的小项目</title><link href="http://x-wei.github.io/github%E4%B8%8A%E4%B8%A4%E4%B8%AA%E6%AF%94%E8%BE%83%E6%9C%89%E7%94%A8%E7%9A%84%E5%B0%8F%E9%A1%B9%E7%9B%AE.html" rel="alternate"></link><published>2012-05-31T00:00:00+02:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2012-05-31:github上两个比较有用的小项目.html</id><summary type="html">&lt;p&gt;github上的好东西不少, 最近发现了两个比较有用的python程序, 这俩功能都是我比较想要的, 有需求就会有牛人去实现~&lt;/p&gt;
&lt;h1 id="1-youku-lixian"&gt;1. 视频下载器youku-lixian&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/iambus/youku-lixian"&gt;https://github.com/iambus/youku-lixian&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可不止支持下载优酷的视频奥, 土豆, 奇艺, 新浪, 酷6...... 通吃~&lt;/p&gt;
&lt;p&gt;而且每个都只是一个小小的py文件, 直接就可以运行, 比起什么优酷客户端, 奇艺客户端小多了! 太赞了!~&lt;/p&gt;
&lt;h1 id="2-115"&gt;2. 115网盘自动摇奖&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/2698830"&gt;https://gist.github.com/2698830&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个功能我曾经想要实现, 但是关于网络通信方面知道的太少了, 搞了一通也没有成功. 现在有人把它共享出来, 代码居然还不到100行, 强大啊~&lt;/p&gt;</summary><category term="git"></category><category term="python"></category></entry></feed>