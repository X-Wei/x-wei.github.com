<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mx's blog</title><link href="https://x-wei.github.io/" rel="alternate"></link><link href="https://x-wei.github.io/feeds/tech.atom.xml" rel="self"></link><id>https://x-wei.github.io/</id><updated>2020-10-18T00:00:00+02:00</updated><entry><title>用analyzer提高Flutter项目的代码质量</title><link href="https://x-wei.github.io/tech/flutter-use-analyzer.html" rel="alternate"></link><published>2020-10-18T00:00:00+02:00</published><updated>2020-10-18T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2020-10-18:tech/flutter-use-analyzer.html</id><summary type="html">&lt;p&gt;Dart默认的linter配置有点弱, 有很多有问题代码也不报错或警告.
添加一个analyzer可以应用dart的最佳代码实践, 对一些不好的代码风格提出警告或者直接报错, 从而提高代码质量.&lt;/p&gt;
&lt;p&gt;Cf. resocoder的介绍&lt;a href="https://resocoder.com/2020/01/17/dart-linting-tutorial-healthy-flutter-codebase-with-analysis_options-yaml/"&gt;文章&lt;/a&gt; (和视频)&lt;/p&gt;
&lt;h2 id="use-an-analyzer"&gt;Use an analyzer&lt;/h2&gt;
&lt;p&gt;Resocoder推荐&lt;a href="https://pub.dev/packages/lint"&gt;lint&lt;/a&gt;, 里面提供了一些最佳的dart和flutter代码风格. 类似的选择还有pandentic和effective_dart.&lt;/p&gt;
&lt;p&gt;使用方式就是, 先在pubsepc.yaml里添加依赖:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pubspec.yaml&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;dependency_overrides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nt"&gt;lint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;^1.3.0&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在根目录新建一个analysis_options.yaml文件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# analysis_options.yaml&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;package:lint/analysis_options.yaml&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="exclude-folders-disable-rules"&gt;Exclude folders / disable rules&lt;/h3&gt;
&lt;p&gt;analyzer默认会扫描文件夹下所有的dart代码, 有时候一些自动生成的代码或者在&lt;code&gt;build/&lt;/code&gt;文件夹下的代码并不需要被分析, 可以用&lt;code&gt;exclude&lt;/code&gt;把它们排除在外.&lt;/p&gt;
&lt;p&gt;另外有些默认的规则可能不适用于自己的代码, 比如我就比较喜欢加&lt;code&gt;this&lt;/code&gt;, 认为这样更容易区分成员变量和普通变量, 而这个是&lt;a href="https://dart-lang.github.io/linter/lints/unnecessary_this.html"&gt;不被推荐&lt;/a&gt;的(毕竟dart的IDE整合的非常棒). 如果要关闭这一项检查, 只需要在linter rule里把它设为false.&lt;/p&gt;
&lt;p&gt;综上, 我的analysis_options.yaml长这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;package:lint/analysis_options.yaml&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;analyzer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nt"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;build/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;linter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nt"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# Rationale: in our app, the codes are for reading on mobile phones. Adding&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# `this` makes it easier for readers to understand which variables class&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# members and which ones are not.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;unnecessary_this&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="auto-fix-suggestions_1"&gt;Auto-fix suggestions&lt;/h2&gt;
&lt;p&gt;不过在加了analyzer以后我发现VSCode出现了几百个warning, 大部分warning都有简单的fix方法(比如给&lt;code&gt;Text("foo")&lt;/code&gt;加个&lt;code&gt;const&lt;/code&gt;之类的). 虽然只要点一下就能fix, 点几百下也实在是太麻烦了...&lt;/p&gt;
&lt;p&gt;搜索一下以后发现了解决办法: &lt;a href="https://stackoverflow.com/a/62664168"&gt;https://stackoverflow.com/a/62664168&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;首先用&lt;code&gt;dartfmt&lt;/code&gt;可以解决一些简单的格式问题:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;# simple style/format fixes&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;$ dartfmt --fix --overwrite --follow-links .&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要应用analyzer的fix, 需要使用&lt;a href="https://pub.dev/packages/dartfix"&gt;dartfix&lt;/a&gt;. 不过它目前只支持pedantic, 不能直接用analysis_options.yaml的配置:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;# install dartfix:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;$ pub global activate dartfix&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;# Use dartfix to auto-apply pedantic suggestions:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;$ dartfix --pedantic --excludeFix unnecessary_this lib/ --fix prefer_const_declarations --overwrite&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但我发现pedantic的检查确实不如lint严格(cf. &lt;a href="https://github.com/passsy/dart-lint#comparison-to-packagepedantic"&gt;二者的比较&lt;/a&gt;), 所以我并没有直接用&lt;code&gt;--pedantic&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;但是, 我们依然可以用dartfix来fix某一类问题(需要先确认某个fix是否被dartfix支持). 比如我看到很多&lt;code&gt;sort_child_properties_last&lt;/code&gt;的建议, 于是可以:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;# Check if the "sort_child_properties_last" lint is supported by dartfix:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;$ dartfix -h | grep sort_&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;• sort_child_properties_last&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;# This fix is available ==&amp;gt; Apply it with dartfix:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;$ dartfix --fix sort_child_properties_last  lib/ --overwrite&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用类似的方式, 就可以快速应用linter的建议:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ dartfix --fix prefer_const_constructors  lib/ --overwrite&lt;/span&gt;
&lt;span class="code-line"&gt;$ dartfix --fix prefer_const_declarations  lib/ --overwrite&lt;/span&gt;
&lt;span class="code-line"&gt;$ dartfix --fix prefer_final_locals  lib/ --overwrite&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# Or apply multiple fixes at once:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;$ dartfix --fix prefer_const_declarations,avoid_redundant_argument_values,prefer_collection_literals,curly_braces_in_flow_control_structures,prefer_if_elements_to_conditional_expressions,annotate_overrides,prefer_const_constructors_in_immutables,unnecessary_const,prefer_is_empty,prefer_final_fields &lt;span class="se"&gt;\&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    lib/ --overwrite&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Flutter"></category></entry><entry><title>用fvm管理多个Flutter SDK</title><link href="https://x-wei.github.io/tech/flutter-use-fvm.html" rel="alternate"></link><published>2020-10-16T00:00:00+02:00</published><updated>2020-10-16T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2020-10-16:tech/flutter-use-fvm.html</id><summary type="html">&lt;h2 id="background"&gt;background&lt;/h2&gt;
&lt;p&gt;flutter有很多channel: stable/beta/dev/master, 而目前有些功能只在某个channel上可用, 比如Linux support目前只在dev channel支持.&lt;/p&gt;
&lt;p&gt;我日常用的是beta channel, 但是想写Linux程序时每次&lt;code&gt;flutter channel dev&lt;/code&gt;的话 需要花费很多时间--因为要下载新channel的内容, switch回去的时候又要等半天(因为要从新下载).&lt;/p&gt;
&lt;p&gt;今天看到Flutter Explained的视频: &lt;a href="https://youtu.be/R6vKde1vIGQ"&gt;https://youtu.be/R6vKde1vIGQ&lt;/a&gt; 这正是解决这个问题的! 它可以cache不同版本的flutterSDK 然后每个repo可以设置不同的版本号, 而且VSCode也只需要简单配置.&lt;/p&gt;
&lt;h2 id="enable-fvm"&gt;enable fvm&lt;/h2&gt;
&lt;p&gt;一行命令即可开启fvm:
&lt;code&gt;$ pub global activate fvm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;常用法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fvm flutter&lt;/code&gt;: Proxies flutter commands 用于选择合适的flutter版本&lt;ul&gt;
&lt;li&gt;也就是说用&lt;code&gt;fvm flutter&lt;/code&gt;来代替flutter命令 — 会自动pick当前repo所用的SDK&lt;/li&gt;
&lt;li&gt;比如: &lt;code&gt;fvm flutter doctor&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fvm list&lt;/code&gt;: 查看目前安装的flutter 版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fvm use&lt;/code&gt;: 选择使用一个SDK版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fvm install dev/beta/stable/...&lt;/code&gt;: 安装SDK &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="use-fvm"&gt;use fvm&lt;/h2&gt;
&lt;p&gt;在flutter文件夹里运行&lt;code&gt;fvm use xxx&lt;/code&gt;即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; my_flutter_proj&lt;/span&gt;
&lt;span class="code-line"&gt;$ fvm use dev&lt;/span&gt;
&lt;span class="code-line"&gt;$ fvm list&lt;/span&gt;
&lt;span class="code-line"&gt;Versions path:  /home/xwei/fvm/versions&lt;/span&gt;
&lt;span class="code-line"&gt;beta&lt;/span&gt;
&lt;span class="code-line"&gt;dev ✔&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个会在当前目录下添加一个&lt;code&gt;.fvm&lt;/code&gt;的文件夹, 里面包含了到指定SDK的软链接 以及一个json config:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ ls .fvm&lt;/span&gt;
&lt;span class="code-line"&gt;flutter_sdk@  fvm_config.json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来就可以愉快的用flutter dev开发linux app了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ fvm flutter config --enable-linux-desktop&lt;/span&gt;
&lt;span class="code-line"&gt;$ fvm flutter devices&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2&lt;/span&gt; connected devices:&lt;/span&gt;
&lt;span class="code-line"&gt;Android SDK built &lt;span class="k"&gt;for&lt;/span&gt; x86 &lt;span class="o"&gt;(&lt;/span&gt;mobile&lt;span class="o"&gt;)&lt;/span&gt; • emulator-5554 • android-x86 • Android &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;API &lt;span class="m"&gt;29&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;emulator&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Linux &lt;span class="o"&gt;(&lt;/span&gt;desktop&lt;span class="o"&gt;)&lt;/span&gt;                    • linux         • linux-x64   • Linux&lt;/span&gt;
&lt;span class="code-line"&gt;$ fvm flutter create .&lt;/span&gt;
&lt;span class="code-line"&gt;$ fvm flutter run -d linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="vscode-config"&gt;VScode config&lt;/h2&gt;
&lt;p&gt;cf. &lt;a href="https://github.com/leoafarias/fvm#vscode"&gt;https://github.com/leoafarias/fvm#vscode&lt;/a&gt;
让vscode使用fvm flutter (而不是默认flutter), 只要修改settings.json把那个flutter_sdk的软链接即可:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ cat .vscode/settings.json &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="s2"&gt;"dart.flutterSdkPaths"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;".fvm/flutter_sdk"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在VSCode的command palette里输入&lt;code&gt;Flutter: Change SDK&lt;/code&gt;, 就可以选择flutter SDK了&lt;/p&gt;
&lt;h2 id="other-config"&gt;other config&lt;/h2&gt;
&lt;h3 id="change-cache-path"&gt;change cache path&lt;/h3&gt;
&lt;p&gt;fvm默认cache在&lt;code&gt;~/fvm&lt;/code&gt;文件夹下, 可以修改&lt;code&gt;FVM_HOME&lt;/code&gt;环境变量改到别的位置.
cf. &lt;a href="https://github.com/leoafarias/fvm#change-fvm-cache-directory"&gt;https://github.com/leoafarias/fvm#change-fvm-cache-directory&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="bashfish-alias"&gt;bash/fish alias&lt;/h3&gt;
&lt;p&gt;每次都写&lt;code&gt;fvm flutter&lt;/code&gt;有点麻烦 可以在bashrc/config.fish里加上一行 &lt;code&gt;alias ff=fvm flutter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;综上, 只需要在.bashrc里加上:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;alias ff='fvm flutter'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;export FVM_HOME="$HOME/.local/fvm"&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我一般用fish, 是在&lt;code&gt;config.fish&lt;/code&gt;里加上:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;alias ff='fvm flutter'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;set FVM_HOME "$HOME/.local/fvm"&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Flutter"></category></entry><entry><title>Scala/OCaml初体验</title><link href="https://x-wei.github.io/tech/scala-ocaml-impression.html" rel="alternate"></link><published>2016-12-31T00:00:00+01:00</published><updated>2016-12-31T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-12-31:tech/scala-ocaml-impression.html</id><summary type="html">&lt;p&gt;2016年的最后几小时, 随便写写关于Scala和OCaml的一些入门体验好了.   &lt;/p&gt;
&lt;p&gt;今年对FP语言特别感兴趣, 上了两门Scala的公开课(&lt;a href="https://www.coursera.org/learn/progfun1/home/welcome"&gt;here&lt;/a&gt; and &lt;a href="https://www.coursera.org/learn/progfun2/home/welcome"&gt;here&lt;/a&gt;)和一门OCaml的公开课(&lt;a href="https://www.fun-mooc.fr/courses/parisdiderot/56002S02/session02/info"&gt;here&lt;/a&gt;), 在博客中写了一系列的笔记, 课后作业也都认真做完了. 斗胆说这两门语言都算入门了吧... 这里就随便写一下使用这两门语言的感受, 想到哪里写到哪里...   &lt;/p&gt;
&lt;p&gt;FP语言和之前接触的语言确实不大一样, 比如之前我都有种错觉, 学什么语言只要知道循环/条件/基本类型运算怎么写, 就差不多可以上手了...... 然后遇到了FP, 发现循环语句其实是不必要的... 记得看到过一篇文章, 类比学FP就好像开了很多种车的老司机突然开始学开宇宙飞船, 肯定各种WTF不适应了~   &lt;/p&gt;
&lt;p&gt;以前谈到FP我只能联想到一些Python里的FP特性: lambda表达式, 高阶函数之类的, 顶多还想到个闭包... 不过Python里面的FP特性和Scala/OCaml里的比起来还是差了不少: i.e. 现在非常希望Python里可以支持pattern matching...   &lt;/p&gt;
&lt;h1 id="scala"&gt;Scala&lt;/h1&gt;
&lt;p&gt;Scala算是比较亲民的FP语言了(和Java有点像...), 也是我最早接触的FP语言. EPFL的那两门公开课质量很棒, 毕竟是Scala的作者亲自来上的...   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;immutable types&lt;/em&gt;: 习惯了就好, 就像java里所有东西都是final的, 要修改什么东西的时候改成新建一个, immutable数据的优点就是并行方便啊...   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;一切皆为表达式&lt;/em&gt;, specifically, &lt;code&gt;if&lt;/code&gt;语句也是表达式(expression)而不是语句(statement)  &lt;/li&gt;
&lt;li&gt;尽量不用&lt;code&gt;return&lt;/code&gt;, 返回值就是最后一句expression  &lt;/li&gt;
&lt;li&gt;类型推导: 就不用写麻烦的类型标记了(有时又必须写, 比如必须要告诉Scala递归函数的返回类型)... 不过有时不标记类型又容易出错(心里以为的类型和实际的类型不一样). 另外Scala的类型是写在冒号后面的, 习惯了就好...   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;for expression&lt;/strong&gt;: (和"for循环"不是一回事) 非常好用, 可以说是一大亮点, 比较复杂的&lt;code&gt;filter/map&lt;/code&gt;组成的表达式, 用for expr写出来非常容易理解, 超棒... 后来学OCaml的时候非常期待OCaml里也有类似的东西(不过好像没有...)  &lt;/li&gt;
&lt;li&gt;pattern matching: 用constructor来switch! 没什么好说的 非常好用的东西...  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://x-wei.github.io/progfun2_lec2_lazyeval.html#lecture-22-streams"&gt;lazy evaluation和Stream&lt;/a&gt;: 非常有用的东西, 学到这里时很受启发...   &lt;/li&gt;
&lt;li&gt;intellij真好用, 还有Scala worksheet...   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;尾递归优化&lt;/strong&gt;: 把递归函数做到和iterative的一样快, tailrec算是工具之一吧. &lt;br/&gt;
    一开始对tailrec有点不太会写, 其实后来大概明白了怎么回事: 尾递归要求&lt;code&gt;f(n)&lt;/code&gt;最后的return语句里应该直接是递归调用&lt;code&gt;f(n-1)&lt;/code&gt;, 不要加别的什么带&lt;code&gt;f(n-1)&lt;/code&gt;的表达式. &lt;br/&gt;
    一般的递归函数大概是: &lt;code&gt;f(n) = some_expr_of f(n-1)&lt;/code&gt;, 而tailrec的版本里, 加入了&lt;code&gt;acc&lt;/code&gt;这样一个参数, 保存累加结果. &lt;em&gt;可以把acc看做f(n-1)的代替品&lt;/em&gt;, 这时, 把那个f(n-1)的expr作用在&lt;code&gt;acc&lt;/code&gt;上, 就是尾递归了! f(n, acc)最后一句就成了&lt;code&gt;f(n-1, some_expr_of acc)&lt;/code&gt; — 简简单单一个递归调用~&lt;br/&gt;
    举个最简单的例子: 阶乘运算&lt;br/&gt;
    非尾递归的写法是:   &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改成尾递归以后:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;factorialTR&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nd"&gt;@tailrec&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;简单的匿名函数有几种写法:   &lt;ul&gt;
&lt;li&gt;用&lt;code&gt;=&amp;gt;&lt;/code&gt;: &lt;code&gt;param  =&amp;gt; ret&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;用pattern matching(这时要用花括号): &lt;code&gt;{case(param list)  =&amp;gt; ret }&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;下划线就表示参数: &lt;code&gt;_*2&lt;/code&gt; — 相比之下 简直受够了Python里面写lambda.......  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一些概念和Java对应一下:   &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Unit&lt;/code&gt;对应Java里的&lt;code&gt;void&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Option&lt;/code&gt;对应Java里的Object(有指针的对象), Java里的&lt;code&gt;null&lt;/code&gt;对应Scala里&lt;code&gt;None&lt;/code&gt;, Java里的某个对象(非null)&lt;code&gt;A&lt;/code&gt;对应Scala里的&lt;code&gt;Some[A]&lt;/code&gt;, Scala里和&lt;code&gt;Option&lt;/code&gt;类似的还有&lt;code&gt;Try&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;trait&lt;/code&gt;大概可以看做Java里的&lt;code&gt;Interface&lt;/code&gt;, 不过Scala的trait是可以包含函数实现的...   &lt;/li&gt;
&lt;li&gt;Scala的&lt;code&gt;object&lt;/code&gt;和Java里可不是一个意思, Scala里object是单例对象(&lt;em&gt;Singleton&lt;/em&gt;), 类似于java里的&lt;code&gt;static final&lt;/code&gt;的对象  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有人说Scala被过度设计了, 感觉有点道理: 快学完第二门Scala公开课的时候看看别人代码, 又发现了好多没见过的关键字... @@  &lt;/li&gt;
&lt;li&gt;并不太喜欢省略点号 省略括号/分号之类的语法糖...  &lt;/li&gt;
&lt;li&gt;Scala的collection有点多: &lt;code&gt;Seq/List/Array/IndexedSeq/Vector&lt;/code&gt;傻傻分不清楚....  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/scala-ocaml-impression/pasted_image.png"/&gt; &lt;/p&gt;
&lt;h1 id="ocaml"&gt;OCaml&lt;/h1&gt;
&lt;p&gt;OCaml也是工业界比较成功的语言了, 而且据说速度和Cpp不相上下, 我对它可以说是向往已久, 看到FUN平台上有公开课就赶紧报名了...   &lt;/p&gt;
&lt;p&gt;OCaml算是比较"正宗"的FP语言(或许还不够"纯"?), 风味和别的语言差了好多, 但是写着写着就喜欢上了...   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数参数不用括号! 这是第一个冲击...  &lt;/li&gt;
&lt;li&gt;不过总是把函数放在最前面, 还是不大习惯, 比如&lt;code&gt;List.map&lt;/code&gt;, 更希望可以写成 &lt;code&gt;a_list map a_fun&lt;/code&gt;这样...  &lt;/li&gt;
&lt;li&gt;运算符完全分隔: 整数加法是&lt;code&gt;+&lt;/code&gt;, 浮点数加法要显示写成&lt;code&gt;+.&lt;/code&gt;, 这样做的好处就是可以做异常强大的类型推导, 比Scala不知高到哪里去了~  &lt;/li&gt;
&lt;li&gt;各种错误都可以在编译时找到, 安全感倍增...   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;let-in binding&lt;/strong&gt;: 理解了这个概念以后, 大脑有了一种开窍的感觉! 这个就非常接近数学推导了, 比如在数学上证明什么东西的时候, 令x y z等于什么什么, 其实最终都是为了在最后一个表达式里面体现. 只是起一个名字而已, 并不是改变了这些"identifier"的数值. Scala里面的"最后一个表达式即为返回值"这一点, 我当时有点不太习惯, 不过在OCaml里面用let-in绑定这么一写, 这不是显然的么?! ...总之这个写法理解了以后, 感觉非常美妙...   &lt;/li&gt;
&lt;li&gt;函数的类型为&lt;code&gt;para1_type -&amp;gt; para2_type -&amp;gt; ... -&amp;gt; ret_type&lt;/code&gt;, 这样写了以后对于理解partial function之类的就有很大帮助, 另外OCaml并不区分数值和函数了: 都是用let声明, 一个数值可以看做是接收0个参数的函数.   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;try-with&lt;/code&gt;处理异常: 除了处理异常以外, 由于没发现break对应的写法, 现在要break的时候我就也写成&lt;code&gt;try-with&lt;/code&gt;...   &lt;/li&gt;
&lt;li&gt;basic composed types: &lt;code&gt;tuple/record/array&lt;/code&gt;这三个, 个人感觉并不是特别好用... @@  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;taged type&lt;/strong&gt; (又叫sum type/variant type): 感觉非常强大, 定义了taged type以后再pattern matching不要太爽... 感觉我对这块理解还不太够, 看别人写的taged type可能可以写一些处理的函数, 自己定义taged type就比较虚了... 好的程序, 把类型定义写好了 基本上就完成一半了...   &lt;/li&gt;
&lt;li&gt;关于模块(module)的签名的写法什么的, 其实还是有点晕... 可能实践还是不够  &lt;/li&gt;
&lt;li&gt;OCaml里的"Polymorphism"大概相当于Java里的generic/Cpp里的template.   &lt;/li&gt;
&lt;li&gt;pattern matching: 在OCaml里被大量的应用, 感觉比Scala里面的还好用不少...   &lt;/li&gt;
&lt;li&gt;utop作为交互式终端体验还是很棒的  &lt;/li&gt;
&lt;li&gt;编辑器和ide还是不够丰富, 没找到(非vim/emacs)很好的方案... 不过FUN平台的网络编辑环境非常给力, 自动indent这个feature太喜欢了, 最后所有作业都是直接在web环境下写的...   &lt;/li&gt;
&lt;li&gt;opam包管理器有时候会出现一些模块安装不上的问题  &lt;/li&gt;
&lt;li&gt;听说&lt;code&gt;Core&lt;/code&gt;提供了比较完善的函数支持, 希望学一下(也就是看看real world OCaml)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="compared-with-python"&gt;compared with Python&lt;/h1&gt;
&lt;p&gt;那么这两个语言和我现在用得最多的语言(Python)相比较一下吧:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为Python, 非常羡慕Scala/OCaml的执行速度  &lt;/li&gt;
&lt;li&gt;眼馋pattern matching和各种compile time保护......   &lt;/li&gt;
&lt;li&gt;Python的REPL(&lt;a href="https://bpython-interpreter.org/"&gt;bpython&lt;/a&gt;)还是比Scala worksheet / ocaml utop体验好不少   &lt;/li&gt;
&lt;li&gt;Python的"自带电池"特色是很大的优点, 很好奇Scala/OCaml有没有提供defaultdict/counter/datetime之类的模块......   &lt;/li&gt;
&lt;/ul&gt;</summary><category term="scala"></category><category term="OCaml"></category></entry><entry><title>使用requests和lxml编写python爬虫小记</title><link href="https://x-wei.github.io/tech/python_crawler_requests_lxml.html" rel="alternate"></link><published>2016-12-29T00:00:00+01:00</published><updated>2016-12-29T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-12-29:tech/python_crawler_requests_lxml.html</id><summary type="html">&lt;p&gt;前一段时间写了不少Python的爬虫程序, 为此还看了极客学院上的一些&lt;a href="http://ke.jikexueyuan.com/xilie/116"&gt;教程&lt;/a&gt;, 现在来简单总结一下. 主要介绍用&lt;code&gt;requests&lt;/code&gt; + &lt;code&gt;lxml&lt;/code&gt;的方式, &lt;code&gt;scrapy&lt;/code&gt;的话之前写过一篇介绍性的&lt;a href="http://x-wei.github.io/Scrapy%20%E4%B8%8A%E6%89%8B%E7%AC%94%E8%AE%B0.html"&gt;文章&lt;/a&gt;, 这里就不重复了. 而且感觉一般简单的爬虫项目, 一个Python文件就基本可以搞定, 没必要用scrapy建立一个工程文件夹搞那么正式...   &lt;/p&gt;
&lt;p&gt;安装需要的库(python2):   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install requests, lxml&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;然后在Python程序最开始导入:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="requestsji-chu-yong-fa"&gt;requests基础用法&lt;/h1&gt;
&lt;h3 id="zhua-qu-htmlnei-rong"&gt;抓取html内容&lt;/h3&gt;
&lt;p&gt;用requests获取目标网址的html代码非常简单, 只需要用&lt;code&gt;requests.get&lt;/code&gt;方法, 传入网址URL即可.   &lt;/p&gt;
&lt;p&gt;举个例子, 想要抓取&lt;a href="https://zh.wikiquote.org/wiki/Wikiquote:%E9%A6%96%E9%A1%B5"&gt;维基语录&lt;/a&gt;的HTML内容, 代码很简单:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;url = 'https://zh.wikiquote.org/zh-cn/阿爾伯特·愛因斯坦'  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;r = requests.get(url)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;html = r.text&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;requests.get()&lt;/code&gt;返回一个response对象&lt;code&gt;r&lt;/code&gt;, 可以用&lt;code&gt;r.ok&lt;/code&gt;或者&lt;code&gt;r.status_code&lt;/code&gt;检查对象是否正常返回(status code=200).   &lt;/p&gt;
&lt;h3 id="bian-ma-wen-ti"&gt;编码问题&lt;/h3&gt;
&lt;p&gt;处理非英文网页时经常遇到的问题就是编码的问题了(不知道py3是不是对Unicode支持好一点?), 前面得到的html其实并非字符串而是Unicode对象:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; type(html)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;lt;type 'unicode'&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unicode对象处理的时候一不小心就会得到以下的错误:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;UnicodeEncodeError: 'ascii' codec can't encode characters in position 101-113: ordinal not in range(128)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以在那些需要string类型的地方, 需要用&lt;code&gt;encode&lt;/code&gt;函数转换:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; type(html.encode('utf-8'))  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;lt;type 'str'&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外实际中还遇到过比较奇葩的情况, 是返回的response的编码并不对(这个编码是requests根据网页内容自己推断的, 所以有时会出错), 比如&lt;a href="http://diglib.hab.de/content.php?dir=edoc/ed000216&amp;amp;distype=optional&amp;amp;metsID=edoc_ed000216_009_introduction&amp;amp;xml=009%2F009_introduction.xml&amp;amp;xsl=tei-introduction.xsl"&gt;这个网址&lt;/a&gt;, requests以为它的encoding是'ISO-8859-1', 所以为了保险起见, &lt;em&gt;最好手动指定r.encoding&lt;/em&gt;:   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;r.encoding = 'utf-8&lt;/code&gt;'   &lt;/p&gt;
&lt;p&gt;另: 还有一种经常用的解决utf编码的方式, 就是在文件开头加上这四句话:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# coding: utf-8  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过, 看到有人说这种方式&lt;a href="http://blog.ernest.me/post/python-setdefaultencoding-unicode-bytes"&gt;并不好&lt;/a&gt;, 所以最好别用这么暴力的方式吧...  &lt;/p&gt;
&lt;h3 id="yong-scrapy-shelljian-cha-de-dao-de-htmlwen-jian-nei-rong"&gt;用scrapy shell检查得到的html文件内容&lt;/h3&gt;
&lt;p&gt;需要注意的一点是, requests.get得到的html内容&lt;strong&gt;并不一定&lt;/strong&gt;和在浏览器打开链接得到的内容相同!   &lt;/p&gt;
&lt;p&gt;为了检查是否得到了想要的html内容, 有两个方式, 一个是把得到的内容输出为一个.html文件, 然后用浏览器打开, 比如这样:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; with open('tmp.html', 'w') as f:  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;...     f.write(html.encode('utf8')) # 注意要显式指定编码&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样做其实并不方便, 输出到本地文件以后还要用文件浏览器找到那个文件再打开, 而且打开的网页并没有图片, 也没有css样式.   &lt;/p&gt;
&lt;p&gt;我比较喜欢用scrapy shell这个工具, 这个工具在之前的文章也&lt;a href="http://x-wei.github.io/Scrapy%20%E4%B8%8A%E6%89%8B%E7%AC%94%E8%AE%B0.html#iii-scrapy-shell"&gt;提到过&lt;/a&gt;, 它非常适合快速测试一些东西.   &lt;/p&gt;
&lt;p&gt;首先安装一下scrapy吧还是:　 &lt;code&gt;pip install scrapy&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;然后输入&lt;code&gt;scrapy shell&lt;/code&gt;即可使用. 用&lt;code&gt;fetch(url)&lt;/code&gt;可以把返回的结果存放在(scrapy shell默认的)&lt;code&gt;response&lt;/code&gt;变量中, 可以把&lt;code&gt;fetch&lt;/code&gt;操作理解为&lt;code&gt;response = requests.get(url)&lt;/code&gt;. 然后查看得到的html文件 只需要 &lt;code&gt;view(response)&lt;/code&gt;, 就会自动用浏览器打开下载的临时文件, 非常方便.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--nolog  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Available&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Scrapy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;contains&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Selector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;crawler&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Crawler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x7f8aa3b70e50&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Settings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x7f8aa3b70cd0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Useful&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;shortcuts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;shelp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;Shell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req_or_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Fetch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;View&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="ow"&gt;In&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'https://zh.wikiquote.org/zh-cn/阿爾伯特·愛因斯坦'&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="ow"&gt;In&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="ow"&gt;In&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;Out&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xiu-gai-header-wei-zhuang-liu-lan-qi"&gt;修改header, 伪装浏览器&lt;/h3&gt;
&lt;p&gt;对于有些网站, 直接用&lt;code&gt;requests.get&lt;/code&gt;抓取会得到403forbidden错误, 这时就要修改一下get函数的&lt;code&gt;headers&lt;/code&gt;参数了, 把一个Python字典传给headers参数, 这个字典理, 'user-agent'对应chrome/firefox使用的内容. 例子:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;hea = {'User-Agent':'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36'}  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;r = requests.get('http://jp.tingroom.com/yuedu/yd300p/', headers = hea)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;headers参数对于那些不太好爬的网站非常有用, 不过关于如何知道往header里放什么东西, 需要用chrome-dev-tools, 这个后面再说.   &lt;/p&gt;
&lt;h1 id="lxmlyi-ji-xpathyu-fa_1"&gt;lxml以及xpath语法&lt;/h1&gt;
&lt;p&gt;还是继续上面维基语录的例子, 假设现在已经获取了网页的html文件, 下一步就是在html文件里提取想要的内容了. 比如我们想要从维基语录上抓取&lt;a href="https://zh.wikiquote.org/wiki/%E9%98%BF%E7%88%BE%E4%BC%AF%E7%89%B9%C2%B7%E6%84%9B%E5%9B%A0%E6%96%AF%E5%9D%A6"&gt;爱因斯坦&lt;/a&gt;的所有名言.   &lt;/p&gt;
&lt;p&gt;从html中提取感兴趣的内容, 一种选择是用正则表达式, 不过正则表达式写起来太蛋疼了 — &lt;code&gt;(?&amp;lt;=blablah).*(?=blah)&lt;/code&gt;之类的, 每次用都得从新查. 而且处理html代码时经常容易出错.   &lt;/p&gt;
&lt;p&gt;html语言可以看做是一种xml语言, 而xml语言其实是分层次的(可以parse为一个xml树), 操作xml元素的神器就是xpath语言了.  &lt;/p&gt;
&lt;h3 id="xpathji-chu-yu-fa"&gt;xpath基础语法&lt;/h3&gt;
&lt;p&gt;xpath的语法其实不难, 入门的话话二十分钟看看&lt;a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp"&gt;这里&lt;/a&gt;估计就差不多. 这里简单列一下:   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选取节点&lt;/strong&gt;的语法有:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; 从根节点选取, &lt;code&gt;//&lt;/code&gt; 从所有匹配的节点选取  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; 当前节点, &lt;code&gt;..&lt;/code&gt; 当前的父节点  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodename&lt;/code&gt;选取节点, &lt;code&gt;@&lt;/code&gt;选取节点的属性  &lt;/li&gt;
&lt;li&gt;通配符: &lt;code&gt;*&lt;/code&gt;, 选取若干路径则用&lt;code&gt;|&lt;/code&gt;分隔  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;text()&lt;/code&gt;: 获取该节点的文本内容  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;//img/@src&lt;/code&gt;: 选取所有img节点的src属性  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;//img/../text&lt;/code&gt;: 选取img节点的父节点下的text节点(所以text和img为"sibling"关系)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;//*/@src&lt;/code&gt;: 选取任何节点的src属性  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后&lt;strong&gt;过滤节点&lt;/strong&gt;的谓词语法有: (谓词放在方括号中)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[1]&lt;/code&gt;选取第一个元素, &lt;code&gt;[last()]&lt;/code&gt;选取最后一个, &lt;code&gt;[position&amp;lt;3]&lt;/code&gt; 选取前两个   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[@lang="eng"]&lt;/code&gt; 选取属性lang等于"eng"的元素  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遇到更复杂的xpath不会写的话 尝试翻译成英文然后Google一下, 几乎总会找到答案.   &lt;/p&gt;
&lt;h3 id="shi-yong-chrome-dev-toolhuo-de-yuan-su-de-xpath"&gt;使用chrome-dev-tool获得元素的xpath&lt;/h3&gt;
&lt;p&gt;可以直接用chrome的开发者工具获取网页元素的xpath, 在该网页上按下crtl-shift-I就可以打开devtool了:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/python_crawler_requests_lxml/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;点击左上角那个指针的小图标, 然后再在网页上点击想要查找的元素, 就可以快速定位到它在html里对应的代码了:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/python_crawler_requests_lxml/chromedev-elem-picker.gif"/&gt; &lt;/p&gt;
&lt;p&gt;在代码中点击右键, 可以得到xpath:   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/python_crawler_requests_lxml/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;p&gt;不过一般chrome找到的xpath并不具有通用性, 所以最好还是自己分析得到合适的xpath代码.   &lt;/p&gt;
&lt;p&gt;chrome给找到的xpath是&lt;code&gt;//*[@id="mw-content-text"]/ul[1]/li[1]&lt;/code&gt;, 经过分析和测试, &lt;code&gt;//div[@id="mw-content-text"]/ul[position()&amp;lt;last()]/li/text()&lt;/code&gt;应该是比较正确的所有名言的xpath代码. 为了测试xpath, 可以直接在chrome-dev-tool里面按下ctrl-F查找xpath:   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/python_crawler_requests_lxml/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;h3 id="yong-lxmletreecao-zuo-xpath"&gt;用lxml.etree操作xpath&lt;/h3&gt;
&lt;p&gt;学会了xpath, 接下来要在Python里使用xpath则需要lxml.   &lt;/p&gt;
&lt;p&gt;步骤是: 首先用网页html内容建立一个etree对象, 然后在使用它的&lt;code&gt;xpath&lt;/code&gt;方法, 传入之前得到的xpath语句. 返回的结果为一个list, list里面就是所有匹配的元素了.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;url = 'https://zh.wikiquote.org/zh-cn/阿爾伯特·愛因斯坦'  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;r = requests.get(url)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;sel = etree.HTML(r.text)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;for quote in sel.xpath('//div[@id="mw-content-text"]/ul[position()&amp;lt;last()]/li/text()'):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    print quote.strip()&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xpathshi-yong-ji-qiao"&gt;xpath使用技巧&lt;/h3&gt;
&lt;p&gt;这里说一下xpath的实际使用技巧. 正好前面的代码也不完善, 结合这个例子来说.   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;先抓大再抓小&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实之前的xpath还有不完美的地方, 比如爱因斯坦的页面中有不少名言还有"原文"这一信息:   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/python_crawler_requests_lxml/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;p&gt;在一个&lt;code&gt;li&lt;/code&gt;节点下面有可能还有东西, 所以我们可以先获得这一个个&lt;code&gt;li&lt;/code&gt;元素, 然后再在每个&lt;code&gt;li&lt;/code&gt;元素里面尝试查找"原文"的信息. 代码如下:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;for li in sel.xpath('//div[@id="mw-content-text"]/ul[position()&amp;lt;last()]/li'):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    quote = li.xpath('./text()')[0]  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    print quote.strip()  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    origin = li.xpath('./ul/li/span/i/text()')  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if len(origin)&amp;gt;0: print 'origin:', origin[0]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更复杂的例子比如豆瓣电影的页面, 每一个电影的entry都有电影名/上映时间/国家等好多信息. 处理这样的页面, 必须要先把大的元素(整个电影信息的div)抓取, 然后再在每个大元素里分别提取信息.   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用&lt;/strong&gt;&lt;code&gt;string()&lt;/code&gt;&lt;strong&gt;获得nested节点文字内容&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面的代码运行结果还有不满意的地方: 对于一些带有超链接的名言, 我们的程序不能获取那些带有超链接的文字, 比如这句话:   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/python_crawler_requests_lxml/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;p&gt;它的html代码是这样的:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;一个  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/w/index.php?title=%E5%BF%AB%E4%B9%90&amp;amp;amp;action=edit&amp;amp;amp;redlink=1"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"new"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"快乐（页面不存在）"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;快乐&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;的人总是满足与活于当下，而非浪费时间揣想&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/wiki/%E6%9C%AA%E6%9D%A5"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"未来"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;未来&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;。  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果直接用&lt;code&gt;/text()&lt;/code&gt;处理的话, 只能得到"一个"这俩字... 问题出在这个元素是nested的, 里面嵌套了别的元素(两个&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;), 而这种情况还非常常见, 所以怎么办呢? 需要用xpath的&lt;code&gt;string()&lt;/code&gt;函数, 它可以返回节点的正确字符串表示. 所以代码再次修改, quote的获取改为: &lt;code&gt;quote = li.xpath('string(.)')&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;xpath里提供了蛮丰富的&lt;a href="http://www.w3school.com.cn/xpath/xpath_functions.asp"&gt;函数&lt;/a&gt;, 遇到比较复杂的操作的时候可以参考一下.   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;删除不想要的节点&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;进行了上面的修改, 又引入了新的问题: 对于那些有"原文"信息的li元素而言, 用string()函数的话会把这些原文信息也包括在内了, 这不是我们想要的结果. 比如这样的节点:   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/python_crawler_requests_lxml/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;p&gt;这时, 可以用lxml提供的&lt;code&gt;remove&lt;/code&gt;函数, 在li节点中把不需要的节点先去掉, 然后再使用string()就不会有不需要的内容了.   &lt;/p&gt;
&lt;p&gt;最终的代码为:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//div[@id="mw-content-text"]/ul[position()&amp;lt;last()]/li'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'---'&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./ul'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;badnodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./ul'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# remove 'origin' stuff in the li element  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bad&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;badnodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;bad&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getparent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'string(.)'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'string(.)'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="dong-tai-ye-mian-mo-ni-deng-lu-shan-yong-chrome-dev-tools_1"&gt;动态页面/模拟登录: 善用chrome-dev-tools&lt;/h1&gt;
&lt;p&gt;上面的维基语录的例子还算比较简单, 对于那些需要动态加载的网页或者需要登录才可以查看的内容, 就需要多用chrome开发者工具了. 由于这方面要根据不同网站去试验(+猜测), 所以这里介绍的不会太详细...   &lt;/p&gt;
&lt;p&gt;一般来说, 对于动态加载的网页, 可以打开ctrl-shift-I打开devtools以后, 选择network标签页然后刷新, 在最开始的地方一般会有form提交(可以用&lt;code&gt;requests.post&lt;/code&gt;模拟)或者url请求之类的东西, 一路追踪过去即可.   &lt;/p&gt;
&lt;p&gt;这里展示一下用cookies模拟登录微博的过程. weibo电脑版的页面太过凌乱, 用微博手机版(weibo.cn).   &lt;/p&gt;
&lt;h3 id="yong-dev-toolshuo-qu-deng-lu-cookies"&gt;用dev-tools获取登录cookies&lt;/h3&gt;
&lt;p&gt;cookies就是一小段(加密后的)字符串, 它的大概是本地存储的保留用户信息的加密字符, 有的网站点选"下次自动登录"时, 其实就是生成了一个cookie保存在本地, 下次登录时只要向网站发送这串cookies字符, 如果cookies没有过期的话就可以直接登录了.   &lt;/p&gt;
&lt;p&gt;在要点击登录前, 打开devtools并选择network标签. 然后在登录以后, 找开头的几个requests, 定位到一个header带有cookie的request上面, cookie就在这里了(我试验发现, 好像需要登录以后再刷新一下, 这时dev-tools得到的cookies才是可用的):   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/python_crawler_requests_lxml/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;p&gt;另一种办法是用chrome自带的监测页面 &lt;chrome: #events="" net-internals=""&gt;, (设置capture→Include the actual bytes sent/received), 也可以得到cookies:   &lt;/chrome:&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/python_crawler_requests_lxml/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;h3 id="zai-requestsli-shi-yong-cookies"&gt;在requests里使用cookies&lt;/h3&gt;
&lt;p&gt;一旦获得了cookies字符串, 模拟登录就很简单: 在requests.get里传入headers参数:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;hea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'Cookie'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'_T_WM=3a52fbed11ed299552cf910553be7d3b; SUB=_2A251Y_geDeTxGedG6lUQ9SrKyj2IHXVWr5hWrDV6PUJbkdAKLUejkW1CLxUVXEMZZq8EFgsGuIYNqC6MqQ..; gsid_CTandWM=4uno88c512gBK6O5nyuKd7CIW9R'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://weibo.cn'&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="c1"&gt;# use content instead of text   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="bao-cun-pa-qu-de-nei-rong_1"&gt;保存爬取的内容&lt;/h1&gt;
&lt;h3 id="bao-cun-wen-ben-nei-rong-csv"&gt;保存文本内容: csv&lt;/h3&gt;
&lt;p&gt;保存文本信息我一般喜欢放进csv里面, 而用&lt;code&gt;pandas&lt;/code&gt;操作csv文件会比较方便: 在程序中, 把每一个抓取的条目(item)放进一个字典, 然后append到dataframe里面, 最后直接&lt;code&gt;to_csv&lt;/code&gt;搞定.   &lt;/p&gt;
&lt;p&gt;下面是个简单的示意代码, 假设我们要抓取一些文章的title, date和发表地点三个信息:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# ...  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__loop__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="c1"&gt;#...  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__code_for_extracting_these_fields__&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="c1"&gt;#...  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;series&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'place'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'date'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;series&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ignore_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'date'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'place'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="c1"&gt;# adjust column order  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'melanthon.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bao-cun-fei-wen-ben-nei-rong"&gt;保存非文本内容&lt;/h3&gt;
&lt;p&gt;有些时候我们要下载图片/视频等非文本的信息, 我们可以用xpath定位到图片/视频的链接地址处, 那么下载到本地文件, 我查的有两个办法.  &lt;/p&gt;
&lt;p&gt;第一个方法简单粗暴: 用urlretrieve, 直接往函数里传入url和本地路径即可:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlretrieve&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;urlretrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fpath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另一个方法还是用requests, 用分片的方式获取文件(我猜这种更适合大文件的下载?):   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;resp = requests.get(url, stream=True)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;f = open(fpath, 'wb')  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;for chunk in resp.iter_content(chunk_size=1024):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;       if chunk: # filter out keep-alive new chunks  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;           f.write(chunk)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;f.close()&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bing-xing-xia-zai"&gt;并行下载&lt;/h3&gt;
&lt;p&gt;在下载大文件的时候可以非常明显感受到, 下载文件的过程占据了大部分程序的执行时间. &lt;br/&gt;
比较简单的加速办法就是, 先把所有要下载的文件url(以及本地保存的fpath)放进一个list里, 最后在一起下载, 这时就可以使用Python的多进程模块进行加速了.   &lt;/p&gt;
&lt;p&gt;核心的代码只其实就是pool.map, 把爬去的函数map到要爬的url列表上:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing.dummy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;crawl_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urls_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是个实际的例子, 首先定义了一个download函数用于下载视频, 然后download_videos函数, 多线程下载视频.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fpath&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fpath&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'start downloading &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; ...'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fpath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'wb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# filter out keep-alive new chunks  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'download finished: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;fpath&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_videos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_urls_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="c1"&gt;# input = list of (url,fpath) pairs  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'downloading &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; files in parallel...'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_urls_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;video_urls_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;      &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'all downloading finished !'&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后, 我写了一个极客学院课程视频的下载脚本, 用cookies模拟登录. 一百来行的代码, 跑一晚上可以下载好几十G的视频... &lt;br/&gt;
gist放在: &lt;a href="https://gist.github.com/X-Wei/46817a6614e3677391ab13e420b4cb9f"&gt;https://gist.github.com/X-Wei/46817a6614e3677391ab13e420b4cb9f&lt;/a&gt;  (不过这里用的cookies早就过期了)  &lt;/p&gt;</summary><category term="python"></category></entry><entry><title>codejam常用(python)解题工具</title><link href="https://x-wei.github.io/tech/codejam-python-tools.html" rel="alternate"></link><published>2016-05-27T18:00:00+02:00</published><updated>2016-05-27T18:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-05-27:tech/codejam-python-tools.html</id><summary type="html">&lt;p&gt;总结一下用python撸codejam时常用的一些库, 并且给一些简单的例子. 发现用python撸codejam非常合适: codejam的时间要求不严格(4/8分钟), 而且程序只要本地运行. 正好可以使用python简洁的语法和丰富的函数库.    &lt;/p&gt;
&lt;h1 id="collections"&gt;collections&lt;/h1&gt;
&lt;p&gt;py自带的一些好用的数据结构...&lt;br/&gt;
&lt;a href="https://docs.python.org/2/library/collections.html"&gt;https://docs.python.org/2/library/collections.html&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;from collections import Counter, deque, defaultdict&lt;/code&gt; &lt;/p&gt;
&lt;h1 id="itertools"&gt;itertools&lt;/h1&gt;
&lt;p&gt;主要是用来穷举的时候它里面一些函数很好用... &lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/2/library/itertools.html"&gt;https://docs.python.org/2/library/itertools.html&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'ABCD'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'EFG'&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;...&lt;/span&gt;        &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;...&lt;/span&gt;        &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;...&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="bitmap"&gt;bitmap&lt;/h1&gt;
&lt;p&gt;聪明一点的穷举需要用bitmap... 实测可以加速十倍...&lt;/p&gt;
&lt;h3 id="use-bitmap-for-combinations-2n-possibilities"&gt;use bitmap for combinations (2^N possibilities)&lt;/h3&gt;
&lt;p&gt;(N elements, each element 2 choices) &lt;br/&gt;
&lt;code&gt;for mask in xrange(1&amp;lt;&amp;lt;N): ...&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="setclean-kth-bit"&gt;set/clean Kth bit&lt;/h3&gt;
&lt;p&gt;set: &lt;code&gt;bm |= 1&amp;lt;&amp;lt;k&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;clean: &lt;code&gt;bm &amp;amp;= ~(1&amp;lt;&amp;lt;k)&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="count-nb-of-1s-in-a-bitmap"&gt;count nb of 1s in a bitmap&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bin(bm).count('1')&lt;/code&gt; &lt;/p&gt;
&lt;h1 id="networkx_1"&gt;networkx&lt;/h1&gt;
&lt;p&gt;常用的图论算法都在里面了. nx最棒的是&lt;strong&gt;任何hashable的object都可以用来作为节点的index&lt;/strong&gt;, 再想想用C++的bgl, 简直蛋疼...
&lt;a href="https://networkx.readthedocs.io/en/stable/"&gt;https://networkx.readthedocs.io/en/stable/&lt;/a&gt; &lt;/p&gt;
&lt;h3 id="constructing-graph"&gt;constructing graph&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;networkx&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;nx&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DiGraph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# use `Graph` for undired graph, `MultiGraph` for dup-edges   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# any hashable obj can be used as node index   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# missing nodes will be automatically added   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# if G is undired(`Graph`), 1--&amp;gt;3 and 3--&amp;gt;1 will be added   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# nx ignores duplicate adding edges/nodes    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# outgoing edges from a node   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'color'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'blue'&lt;/span&gt; &lt;span class="c1"&gt;# easily add edge properties    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'color'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# this is another way to add property   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'color'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'capacity'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}},&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'cat'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'string node'&lt;/span&gt; &lt;span class="c1"&gt;# can also be: G.add_node('a', cat='string node')   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'cat'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'string node'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="digraph-topo-sort-cycle-detection-strongly-connected-component"&gt;DiGraph: topo-sort, cycle-detection, strongly connected component&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://networkx.readthedocs.io/en/stable/reference/algorithms.shortest_paths.html"&gt;http://networkx.readthedocs.io/en/stable/reference/algorithms.shortest_paths.html&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;networkx&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;nx&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DiGraph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strongly_connected_components&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topological_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;simple_cycles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strongly_connected_components&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shortest_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shortest_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shortest_path_length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;3&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shortest_path_length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'weight'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# set attribut edge 'weight' as weight, (if not present, weight=1 )   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="undirected-graph-connected-component-mst"&gt;Undirected Graph: connected component, MST&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://networkx.readthedocs.io/en/networkx-1.11/reference/generated/networkx.algorithms.mst.minimum_spanning_tree.html#networkx.algorithms.mst.minimum_spanning_tree"&gt;http://networkx.readthedocs.io/en/networkx-1.11/reference/generated/networkx.algorithms.mst.minimum_spanning_tree.html#networkx.algorithms.mst.minimum_spanning_tree&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; G = nx.Graph()   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; G.add_edge(1,2); G.add_edge(1,3); G.add_edge('a','b')   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; list( nx.connected_components(G) )   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[set(['a', 'b']), set([1, 2, 3])]   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; G.add_edge(2,3)   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; mst =  nx.minimum_spanning_tree(G) # returns a new graph   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; mst.edges()   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[('a', 'b'), (1, 2), (1, 3)]   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; G.add_edge(1,3,weight=2) # mst takes attribut 'weight', if no present, weight=1   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; nx.minimum_spanning_tree(G).edges()   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[('a', 'b'), (1, 2), (2, 3)]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="maxflow"&gt;maxflow&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://networkx.readthedocs.io/en/networkx-1.11/reference/algorithms.flow.html"&gt;http://networkx.readthedocs.io/en/networkx-1.11/reference/algorithms.flow.html&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;networkx&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;nx&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DiGraph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;flow_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flow_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maximum_flow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;flow_value&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flow_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="maximum-matching"&gt;maximum matching&lt;/h3&gt;
&lt;p&gt;NB: maxi&lt;strong&gt;mum&lt;/strong&gt; matching != maxim&lt;strong&gt;al&lt;/strong&gt; matching... &lt;br/&gt;
there are maximum-matching functions for general undir graph (&lt;code&gt;max_weight_matching&lt;/code&gt;) and for bipartitie graph (&lt;code&gt;maximum_matching&lt;/code&gt;), the one for bipartite graph is faster, the general one takes O(V**3).   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://networkx.readthedocs.io/en/stable/reference/generated/networkx.algorithms.matching.max_weight_matching.html?highlight=maximum_matching"&gt;http://networkx.readthedocs.io/en/stable/reference/generated/networkx.algorithms.matching.max_weight_matching.html?highlight=maximum_matching&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edges_from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;(1,2),(2,3),(3,4),(4,5)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_weight_matching&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maxcardinality&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;#mate&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mate&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_bipartite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bipartite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maximum_matching&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mate&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and there are vertex cover algorithms as well......     &lt;/p&gt;
&lt;h1 id="pulp_1"&gt;pulp&lt;/h1&gt;
&lt;p&gt;线性规划的库, 供了非常好用的接口来构造LP问题, 增加约束或者定义objective只要用&lt;code&gt;prob+=[expression]&lt;/code&gt;就好了, 基本上看看例子就能上手. 
面对选择问题的时候线性规划是不错的方法 -- 如果计算速度可以足够快的话... &lt;/p&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/PuLP/pulp.html"&gt;https://pythonhosted.org/PuLP/pulp.html&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pulp&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Integer'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# var category can be integer   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpProblem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"myProblem"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LpMinimize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;# add constraint   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="c1"&gt;# add objective   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# solve using default solver   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GLPK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# or use glpk solver   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;LpStatus&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;'Optimal'&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objective&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# see objective value   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;8.0&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# see variable value    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于nx和pulp的应用可以参考&lt;a href="http://x-wei.github.com/codejam-2015-r2pbC.html"&gt;上篇文章&lt;/a&gt;.&lt;/p&gt;</summary><category term="algorithm"></category><category term="codejam"></category><category term="python"></category></entry><entry><title>codejam2015-round2-pbC 的三种解法</title><link href="https://x-wei.github.io/tech/codejam-2015-r2pbC.html" rel="alternate"></link><published>2016-05-27T00:00:00+02:00</published><updated>2016-05-27T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-05-27:tech/codejam-2015-r2pbC.html</id><summary type="html">&lt;p&gt;昨天做的一道codejam题目, 这个题目的三种解法都非常有代表性, 特此一记.    &lt;/p&gt;
&lt;p&gt;题目链接在这里:  &lt;br/&gt;
&lt;a href="https://code.google.com/codejam/contest/8234486/dashboard#s=p2"&gt;https://code.google.com/codejam/contest/8234486/dashboard#s=p2&lt;/a&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Elliot's parents speak French and English to him at home. He has heard a lot of words, but it isn't always clear to him which word comes from which language! Elliot knows one sentence that he's sure is English and one sentence that he's sure is French, and some other sentences that could be either English or French. If a word appears in an English sentence, it must be a word in English. If a word appears in a French sentence, it must be a word in French.    &lt;br/&gt;
Considering all the sentences that Elliot has heard, what is the minimum possible number of words that he's heard that must be words in both English and French?        &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Input     &lt;br/&gt;
The first line of the input gives the number of test cases, T. T test cases follow. Each starts with a single line containing an integer N. N lines follow, each of which contains a series of space-separated "words". Each "word" is made up only of lowercase characters a-z. The first of those N lines is a "sentence" in English, and the second is a "sentence" in French. The rest could be "sentences" in either English or French. (Note that the "words" and "sentences" are not guaranteed to be valid in any real language.)   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Output     &lt;br/&gt;
For each test case, output one line containing "Case #x: y", where x is the test case number (starting from 1) and y is the minimum number of words that Elliot has heard that must be words in both English and French.   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Limits   &lt;br/&gt;
1 ≤ T ≤ 25. &lt;br/&gt;
Each word will contain no more than 10 characters. &lt;br/&gt;
The two "known" sentences will contain no more than 1000 words each. &lt;br/&gt;
The "unknown" sentences will contain no more than 10 words each. &lt;br/&gt;
Small dataset &lt;br/&gt;
2 ≤ N ≤ 20. &lt;br/&gt;
Large dataset &lt;br/&gt;
2 ≤ N ≤ 200.   &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的codejam程序模板长这样:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;readval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typ&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;typ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;readvals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typ&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;typ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;testcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cas&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Case #%d: %d'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;cas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;testcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="fa-1-qiong-ju-bruteforce-for-small-testcase"&gt;法1: 穷举 bruteforce (for small testcase)&lt;/h1&gt;
&lt;p&gt;在small set(N=20) 中, 对于那18个未知语言的句子, 每句可能是英语或法语. 那么穷举所有可能性, 然后选择双语单词最少的即可. 2^18约等于几十万 , 按说python还是可以handle的 (2^10=1k, 2^ 20=1M, python每秒大约能循环几百万次).    &lt;/p&gt;
&lt;h2 id="naive-bruteforce"&gt;naive bruteforce&lt;/h2&gt;
&lt;p&gt;生成所有的可能性组合, python的&lt;code&gt;itertools&lt;/code&gt;包里提供了&lt;a href="https://docs.python.org/2/library/itertools.html#itertools.combinations"&gt;combinations&lt;/a&gt;函数, &lt;code&gt;combinations(iterable, r)&lt;/code&gt;返回所有在iterable中大小为r的子集(的迭代器):    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ABCD'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用&lt;code&gt;combination&lt;/code&gt;函数即可实现枚举每句话是英语还是法语的功能.    &lt;/p&gt;
&lt;p&gt;当每句话是英语还是法语已经确定以后, 可以用集合取交集的方法(&lt;code&gt;set1.intersection(set2)&lt;/code&gt;)得到两种语言一共有多少个重复的单词. 程序长这样:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;testcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enough&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;readval&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;En&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;readvals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Fr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;readvals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'Case #%d: %d'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;En&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;intersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;scent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;scent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readvals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engsubset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;allEn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;allFr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;En&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;engsubset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;allEn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scent&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;allFr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scent&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;allEn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;intersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allFr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;possibleres&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;engsubset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;possibleres&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engsubset&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;possibleres&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'Case #%d: %d'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然而, 下载了small testcase以后运行程序, 速度还是不够快, 大约要十分钟才有结果 — 而codejam的提交时间限制是4分钟啊... 程序每次检查2^18种可能性, 但是由于每次检查都要进行集合的union和intersection操作(这种操作的效率并不高, 甚至C++里也是一样), 这个操作太耗费时间了所以不行...    &lt;/p&gt;
&lt;h2 id="bruteforce-using-bitmap"&gt;bruteforce using bitmap&lt;/h2&gt;
&lt;p&gt;需要更加聪明的穷举方法, 自然的想法就是用bitmap(或者叫bitvector?). 之前的两个基本操作都可以用bitmap完成:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;枚举各个句子的语言种类: 如果每个句子用一位来表示的话(1代表英语, 0代表法语), 那么用N位的bitmap即可表示一种情形. 这个bitmap只需从0增加到2^N-1, 就把2^N个可能性都遍历了. (实际上是2^N-2个可能性, 因为前两个句子已经确定语言了).    &lt;/li&gt;
&lt;li&gt;两种语言的词汇表进行union/intersection: 假设共有K个不同的单词, 那么用一个K位的bitmap即可表示一种语言包含了哪些单词. 然后集合的union和intersection即可表示为OR和AND的逻辑运算.    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bit manipulation蛮subtle的, 不过习惯了就好... 另外python的integer可以任意长度, 不用像C/java那样考虑bitmap位数大于64的情况, 还是非常方便的. 代码如下:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;testcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bitmap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;instead&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;speedup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;small&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;!!&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;readval&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;scent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;allwords&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;scent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;readval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;allwords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scent&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allwords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;distinct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reprensented&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nc"&gt;bit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bitmap&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;bitmaps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;#construct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bitmaps&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;bm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scent&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;bm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;bitmaps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1e10&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;look&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bitmaps&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bitmaps&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bitmaps&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k+2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bitmaps&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k+2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'Case #%d: %d'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上代码在我电脑上执行small的时候大约花费1分钟, 比最开始用set的速度提高了十倍. 当然, 对于large的case这种解法肯定就超时了...    &lt;/p&gt;
&lt;h1 id="fa-2-zui-da-liu-maxflow_1"&gt;法2: 最大流 maxflow&lt;/h1&gt;
&lt;p&gt;这个方法也是官方&lt;a href="https://code.google.com/codejam/contest/8234486/dashboard#s=a&amp;amp;a=2"&gt;analysis&lt;/a&gt;里提供的答案. 如果将所有句子&lt;code&gt;S&lt;/code&gt;以及所有单词&lt;code&gt;w&lt;/code&gt;看作节点, 每个句子的节点&lt;code&gt;S&lt;/code&gt;于它包含的单词的节点&lt;code&gt;w&lt;/code&gt;相连, 问题转化成了从节点&lt;code&gt;S1&lt;/code&gt;到节点&lt;code&gt;S2&lt;/code&gt;的vertex cut问题 (选取最小的节点集合, 将该集合的节点去掉以后S1和S2不再联通).    &lt;/p&gt;
&lt;p&gt;然后这个问题又可以转为边的min cut问题: 只需要把每个单词节点w分成左右两个节点&lt;code&gt;w1&lt;/code&gt;和&lt;code&gt;w2&lt;/code&gt;, 并且这样添加边(假设w在句子S中):    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;w1--&amp;gt;w2&lt;/code&gt;, capacity=1   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;S--&amp;gt;w1&lt;/code&gt;, capacity=INF   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;w2--&amp;gt;S&lt;/code&gt;, capacity=INF   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这样构造的图里计算maxflow即可得到mincut, 也就是题目的答案...    &lt;/p&gt;
&lt;p&gt;在实现这个解法的时候用到了networkx这个包, 它提供了比bgl好用100倍的接口(虽然也比bgl慢差不多100倍 ==...). &lt;em&gt;任何hashable的object都可以用来作为节点的index&lt;/em&gt;, 所以写起来非常舒服, 15行搞定:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;testcase_maxflow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# using maxflow !   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;INF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1e10&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;networkx&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;nx&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DiGraph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readval&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readvals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;si&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'sent-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;wd&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;wd&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'_l'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wd&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'_r'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wd&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'_l'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;INF&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;wd&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'_r'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;INF&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;flow_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flow_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maximum_flow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sent-0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sent-1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Case #&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;ind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flow_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用这个代码即可轻松通过large case... maxflow的建模还真是艺术...orz   &lt;/p&gt;
&lt;h1 id="fa-3-xian-xing-gui-hua-integer-linear-programming"&gt;法3: 线性规划 (integer) linear programming&lt;/h1&gt;
&lt;p&gt;写完上面那个解法以后, 我又看了看&lt;a href="https://www.go-hero.net/jam/15/name/linguo"&gt;大神&lt;/a&gt;的解法, 发现他居然用的是&lt;a href="https://pythonhosted.org/PuLP/pulp.html"&gt;pulp&lt;/a&gt;(python线性规划的包), 于是自己想了一下, 这个问题确实可以用线性规划来建模 !    &lt;/p&gt;
&lt;p&gt;首先说一句pulp这个包, 它提供了非常好用的接口来构造LP问题, 增加约束或者定义objective只要用&lt;code&gt;prob+=[expression]&lt;/code&gt;就好了, 可以说比AMPL好用不少... 下面是一个简单的例子:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pulp&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Integer'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# var category can be integer   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpProblem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"myProblem"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LpMinimize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;# add constraint   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="c1"&gt;# add objective   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# solve using default solver   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GLPK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# or use glpk solver   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;LpStatus&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;'Optimal'&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objective&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# see objective value   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;8.0&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# see variable value    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK, 本题的建模过程如下:  &lt;br/&gt;
对于每一个句子&lt;code&gt;S&lt;/code&gt;, 定义binary的LP变量&lt;code&gt;Se&lt;/code&gt;, Se=1表示句子S为英语, =0表示为法语.  &lt;br/&gt;
对于每个单词&lt;code&gt;w&lt;/code&gt;, 定义两个binary变量&lt;code&gt;we&lt;/code&gt;, &lt;code&gt;wf&lt;/code&gt;, 表示单词w是英(法)语单词.  &lt;br/&gt;
然后, 再定义变量&lt;code&gt;wef&lt;/code&gt;, 它表示单词&lt;code&gt;w&lt;/code&gt;既是英语单词又是法语单词. 所以有这个逻辑关系: &lt;code&gt;wef = we AND wf&lt;/code&gt; 那么这种逻辑关系如何用线性约束描述呢? 可以这样: &lt;code&gt;wef &amp;gt;= we+wf-1&lt;/code&gt; 非常巧妙吧... &lt;br/&gt;
(&lt;a href="http://cs.stackexchange.com/questions/12102/express-boolean-logic-operations-in-zero-one-integer-linear-programming-ilp"&gt;这篇文章&lt;/a&gt;总结了各种逻辑关系用线性规划的描述方式, 写的得非常详细. )   &lt;/p&gt;
&lt;p&gt;要最小化的目标函数就是 &lt;code&gt;sum(wef)&lt;/code&gt; 了, 约束除了刚才那个&lt;code&gt;wef &amp;gt;= we+wf-1&lt;/code&gt;以外, 还要表达单词和句子之间的关系: 如果一个句子为英(法)语, 那么句子里的每一个单词都为英(法)语. 这是一个&lt;code&gt;se==&amp;gt;we&lt;/code&gt;的逻辑关系, 用线性约束表达为: &lt;code&gt;we&amp;gt;=se&lt;/code&gt;.    &lt;/p&gt;
&lt;p&gt;所以整个模型是:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;Minimize sum(wef)   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;st:   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;we &amp;gt;= se   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;wf &amp;gt;= (1-se)   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;wef &amp;gt;= we+wf-1   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;Se[0]==1, Se[1]==0&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用pulp编写的代码如下:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;testcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;formulate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;programming&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;readval&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sentc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;allwords&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sentc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readvals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;allwords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sentc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;allwords&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;wordsindex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;its&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LpProblem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Bilingual'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LpMinimize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Se&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; LpVariable('Se_'+str(i), cat='Binary') for i in xrange(N) &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Se&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;indicator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scentence&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;english&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; LpVariable('we_'+str(j), cat='Binary') for j in xrange(M) &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;indicator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;english&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;wf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; LpVariable('wf_'+str(j), cat='Binary') for j in xrange(M) &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wf&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;indicator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;french&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;wef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; LpVariable('wef_'+str(j), cat='Binary') for j in xrange(M) &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wef&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;indicator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BOTH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Se&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Se&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sentc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;si&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wordsindex&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;wd&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Se&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wf&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Se&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wef&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]+&lt;/span&gt;&lt;span class="n"&gt;wf&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wef&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wf&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GLPK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objective&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'Case #%d: %d'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上代码在small上运行约1分钟, large约3分钟.    &lt;/p&gt;
&lt;p&gt;另外我发现&lt;a href="https://www.go-hero.net/jam/15/name/liutianren"&gt;另一个大神&lt;/a&gt;代码里没有用Binary/Integer的lp变量, 也就是说他用的是连续的线性规划! 当我把变量的定义改成:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Se&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; LpVariable('Se_'+str(i), 0, 1) for i in xrange(N) &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Se&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;indicator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scentence&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;english&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; LpVariable('we_'+str(j), 0) for j in xrange(M) &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;indicator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;english&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;wf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; LpVariable('wf_'+str(j), 0) for j in xrange(M) &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wf&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;indicator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;french&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;wef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; LpVariable('wef_'+str(j), 0) for j in xrange(M) &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wef&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;indicator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BOTH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样以后, 得到的结果还是正确的!! (不过代码运行时间没有显著的提高).    &lt;/p&gt;
&lt;p&gt;所以是这个模型中的矩阵满足&lt;a href="https://en.wikipedia.org/wiki/Unimodular_matrix#Total_unimodularity"&gt;totally unimodular&lt;/a&gt;性质?  &lt;br/&gt;
不过这个模型似乎并不满足wikipedia里写的那个充分条件?...@@  &lt;br/&gt;
&lt;a href="https://kunigami.wordpress.com/2013/08/12/tu-matrix-recognition/"&gt;这里&lt;/a&gt;有一篇真•大神的文章是讲如何识别TU矩阵的 (tl;dr......), 那么是不是各种solver内部已经有了自动判断TU的代码, 所以这两种程序的运行时间差不多?...    &lt;/p&gt;
&lt;p&gt;总而言之这道题目还是非常有意思的, 三种解法都很有代表性, 这里的技巧估计在codejam里会经常用到...    &lt;/p&gt;</summary><category term="algorithm"></category><category term="codejam"></category></entry><entry><title>C++ STL小结&amp;代码片段</title><link href="https://x-wei.github.io/tech/cpp-demo-snippets.html" rel="alternate"></link><published>2016-01-09T00:00:00+01:00</published><updated>2016-01-09T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-01-09:tech/cpp-demo-snippets.html</id><summary type="html">&lt;p&gt;总结了一下C++ STL里面用的比较频繁的一些代码片段. (地址: &lt;a href="https://github.com/X-Wei/cpp-demo-snippets/tree/master/STL"&gt;https://github.com/X-Wei/cpp-demo-snippets/tree/master/STL&lt;/a&gt;)&lt;br/&gt;
cpp文档: &lt;a href="http://en.cppreference.com/w/cpp"&gt;http://en.cppreference.com/w/cpp&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;常用的library主要有: &lt;br/&gt;
&lt;code&gt;&amp;lt;algorithm&amp;gt;, &amp;lt;vector&amp;gt;, &amp;lt;queue&amp;gt;, &amp;lt;set&amp;gt;, &amp;lt;map&amp;gt;, &amp;lt;cmath&amp;gt;&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;另外一个常见的cpp文件开头版本是:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;vector&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;algorithm&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;#define forloop(i,lo,hi) for(int i = (lo); i &amp;lt;= (hi); i++)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;#define rep(i,N) forloop(i,0,(int)N-1)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="algorithm"&gt;algorithm&lt;/h1&gt;
&lt;h3 id="copy"&gt;copy()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;OutputIt copy( InputIt first, InputIt last, OutputIt d_first );&lt;/code&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Copies the elements in the range, defined by &lt;code&gt;[first, last)&lt;/code&gt;, to another range beginning at &lt;code&gt;d_first&lt;/code&gt;.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意如果要放入的container大小不够, 最后一个参数要用&lt;code&gt;back_inserter&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;ex.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;int a[] = {1,2,3,4,5};  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;vector&amp;lt;int&amp;gt; v(5);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;copy(a, a+5, v.begin());  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;vector&amp;lt;int&amp;gt; v2;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// if v2 needs to increase capacity, need to use back_inserter  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;copy(v.begin(), v.end(), back_inserter(v2));&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="sort"&gt;sort()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;void sort( RandomIt first, RandomIt last, [Compare comp]);&lt;/code&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sorts the elements in the range &lt;code&gt;[first, last)&lt;/code&gt; in ascending order.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;int a[] = {3,1,5,0,8,9};  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;vector&amp;lt;int&amp;gt; v(&amp;amp;a[0], &amp;amp;a[0]+6);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;sort(a, a+6);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;sort(v.begin(), v.end());&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果想要降序排列, 可以直接reverse一下: &lt;code&gt;reverse(v.begin(), v.end());&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;如果自定义比较函数的话, 可以自己写一个cmp函数(内容和重载的小于运算符相同), 然后把函数名放在第三个参数:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bool my_cmp(const pair&amp;lt;int, int&amp;gt; &amp;amp;lhs, const pair&amp;lt;int, int&amp;gt; &amp;amp;rhs) {  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return (lhs.first &amp;lt; rhs.first) || (lhs.first==rhs.first &amp;amp;&amp;amp; lhs.second &amp;lt; rhs.second);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;//...  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;sort(vp.begin(), vp.end(), my_cmp);&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者把元素封装为class/struct, 然后重载它的小于号&lt;code&gt;&amp;lt;&lt;/code&gt;运算符:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;MyFooClass&lt;/span&gt; {  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;public&lt;/span&gt; :  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;x&lt;/span&gt;,&lt;span class="n"&gt;y&lt;/span&gt;;      &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;MyFooClass&lt;/span&gt;(&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;xx&lt;/span&gt;, &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;yy&lt;/span&gt;){  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="o"&gt;x&lt;/span&gt; = &lt;span class="o"&gt;xx&lt;/span&gt;;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;y&lt;/span&gt; = &lt;span class="n"&gt;yy&lt;/span&gt;;  &lt;/span&gt;
&lt;span class="code-line"&gt;    }  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="nb"&gt;operator&lt;/span&gt; &amp;lt; ( &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MyFooClass&lt;/span&gt; &amp;amp; &lt;span class="n"&gt;other&lt;/span&gt; ) &lt;span class="n"&gt;const&lt;/span&gt; {  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; (&lt;span class="o"&gt;x&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;.&lt;span class="o"&gt;x&lt;/span&gt;) || (&lt;span class="o"&gt;x==&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;.&lt;span class="o"&gt;x&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;.&lt;span class="n"&gt;y&lt;/span&gt;) ;  &lt;/span&gt;
&lt;span class="code-line"&gt;    }  &lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;MyFooStruct&lt;/span&gt; {  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;x&lt;/span&gt;,&lt;span class="n"&gt;y&lt;/span&gt;;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;MyFooStruct&lt;/span&gt;(&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;xx&lt;/span&gt;, &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;yy&lt;/span&gt;){  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="o"&gt;x&lt;/span&gt; = &lt;span class="o"&gt;xx&lt;/span&gt;;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;y&lt;/span&gt; = &lt;span class="n"&gt;yy&lt;/span&gt;;  &lt;/span&gt;
&lt;span class="code-line"&gt;    }  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="nb"&gt;operator&lt;/span&gt; &amp;lt; ( &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MyFooStruct&lt;/span&gt; &amp;amp; &lt;span class="n"&gt;other&lt;/span&gt; ) &lt;span class="n"&gt;const&lt;/span&gt; {  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; (&lt;span class="o"&gt;x&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;.&lt;span class="o"&gt;x&lt;/span&gt;) || (&lt;span class="o"&gt;x==&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;.&lt;span class="o"&gt;x&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;.&lt;span class="n"&gt;y&lt;/span&gt;) ;  &lt;/span&gt;
&lt;span class="code-line"&gt;    }  &lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="vector_1"&gt;vector&lt;/h1&gt;
&lt;h3 id="vector_2"&gt;vector&lt;/h3&gt;
&lt;p&gt;相当于java里面的&lt;code&gt;ArrayList&lt;/code&gt;. &lt;br/&gt;
主要操作: &lt;code&gt;push_back()&lt;/code&gt;, &lt;code&gt;pop_back()&lt;/code&gt; (所以可以当作stack使用).   &lt;/p&gt;
&lt;p&gt;另外iterator操作也很常用(set, map等同理):   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;for(vector&amp;lt;int&amp;gt;::iterator it=v1.begin(); it!=v1.end(); it++)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; " ";&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pair"&gt;pair&lt;/h3&gt;
&lt;p&gt;就是一个first一个second. &lt;br/&gt;
另外有&lt;code&gt;make_pair&lt;/code&gt;函数可以构造pair.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;pair&amp;lt;string, int&amp;gt; p1("pair1", 1);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;pair&amp;lt;string, int&amp;gt; p2 = make_pair("pair2", 2);&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外两个尖括号再一起时一定要中间加空格, 否则就是位操作运算符了! &lt;br/&gt;
&lt;code&gt;pair&amp;lt;string, pair&amp;lt;int, double&amp;gt; &amp;gt; p3 = make_pair("pair3", make_pair(3,3.33));&lt;/code&gt; &lt;/p&gt;
&lt;h1 id="queue_1"&gt;queue&lt;/h1&gt;
&lt;p&gt;包含普通队列和优先队列(pq)  &lt;/p&gt;
&lt;h3 id="queue_2"&gt;queue&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bool empty() const;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;reference front();  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;void push( const value_type&amp;amp; value );  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;void pop();&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="priority_queue"&gt;priority_queue&lt;/h3&gt;
&lt;p&gt;(pq的实现也可以用&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;里的&lt;code&gt;make_heap&lt;/code&gt;, &lt;code&gt;pop_heap&lt;/code&gt;, &lt;code&gt;push_heap&lt;/code&gt;等方法. priority_queue 其实就是algorithm里面函数的封装...)&lt;br/&gt;
和queue的API区别是, pq查看队首的函数叫&lt;code&gt;top&lt;/code&gt;而不是&lt;code&gt;front&lt;/code&gt;.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bool empty() const;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;const_reference top() const;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;void push( const value_type&amp;amp; value );  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;void pop();&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用自定义的cmp方法, 可以把cmp的内容作为括号运算符&lt;code&gt;()&lt;/code&gt;的重载放入一个struct作为第三个类型参数, 第二个是container, 一般用vector即可.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;struct MyCmpStruct{  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    bool operator()(const pair&amp;lt;int, int&amp;gt; &amp;amp;lhs, const pair&amp;lt;int, int&amp;gt; &amp;amp;rhs){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return   return (lhs.first &amp;lt; rhs.first) || (lhs.first==rhs.first &amp;amp;&amp;amp; lhs.second &amp;lt; rhs.second);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;};  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;priority_queue&amp;lt;pair&amp;lt;int,int&amp;gt;, vector&amp;lt;pair&amp;lt;int,int&amp;gt; &amp;gt;, MyCmpStruct&amp;gt; ppq;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另一种方法是自定义元素的struct/class, 然后重载小于&lt;code&gt;&amp;lt;&lt;/code&gt;运算符为cmp (同sort).   &lt;/p&gt;
&lt;h1 id="setmap_1"&gt;set/map&lt;/h1&gt;
&lt;p&gt;C++里面的set/map是用红黑树实现的, 所以key类型需要支持比较运算. &lt;br/&gt;
set/map也支持iterator操作(&lt;code&gt;begin()&lt;/code&gt;, &lt;code&gt;end()&lt;/code&gt;), 而且由于是BST, 顺序自然是排好了的.   &lt;/p&gt;
&lt;h3 id="set"&gt;set&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;std::pair&amp;lt;iterator,bool&amp;gt; insert( const value_type&amp;amp; value );  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;void erase( iterator pos );  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;size_type count( const Key&amp;amp; key ) const;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;iterator find( const Key&amp;amp; key );&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;insert&lt;/code&gt;和&lt;code&gt;erase&lt;/code&gt;的参数可以是iterator或者value.   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;count&lt;/code&gt;的返回值为1或0  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;find&lt;/code&gt;如果没找到则返回&lt;code&gt;s.end()&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="map"&gt;map&lt;k,v&gt;&lt;/k,v&gt;&lt;/h3&gt;
&lt;p&gt;map的value_type是一个&lt;code&gt;pair&amp;lt;K,V&amp;gt;&lt;/code&gt;, 所以遍历是这样:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;for(map&amp;lt;string,int&amp;gt;::iterator it=m.begin(); it!=m.end(); it++)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        cout &amp;lt;&amp;lt; it-&amp;gt;first &amp;lt;&amp;lt; ":" &amp;lt;&amp;lt; it-&amp;gt;second &amp;lt;&amp;lt; ", ";&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;insertion: 用&lt;code&gt;[]&lt;/code&gt;或者&lt;code&gt;insert&lt;/code&gt;函数  &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;map&amp;lt;string,int&amp;gt; m;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;m["aa"] = 3;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;m.insert( make_pair("dd", 6) );&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意&lt;code&gt;insert&lt;/code&gt;函数如果key已经存在的话value不会改变! 但是用&lt;code&gt;[]&lt;/code&gt;的话则可以.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;erase/find/count&lt;/code&gt;: 同set.   &lt;/li&gt;
&lt;/ul&gt;</summary><category term="C++"></category></entry><entry><title>Priority Queue/Heap (优先队列/堆)小结</title><link href="https://x-wei.github.io/tech/heap-summary.html" rel="alternate"></link><published>2015-12-09T00:00:00+01:00</published><updated>2015-12-09T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-12-09:tech/heap-summary.html</id><summary type="html">&lt;p&gt;今天简单介绍一下优先队列(priority queue, 以下简称PQ)这个数据结构的实现.  &lt;/p&gt;
&lt;p&gt;PQ又叫"堆"(heap), 但是可能优先队列这个名字更容易记忆它的用途: pq是一种队列, 不过不是先进先出(FIFO), 而是每次出队的元素永远是优先级最高的.   &lt;/p&gt;
&lt;h1 id="logical-structure-of-pq"&gt;logical structure of PQ&lt;/h1&gt;
&lt;p&gt;个人感觉"堆"这个名字大概源于PQ的(逻辑上的)形状吧: PQ是一种树(tree), 准确的说, 是一种二叉树(binary tree), 说得再准确一点, 它是一种&lt;strong&gt;完全二叉树(complete binary tree)&lt;/strong&gt;: 没错, PQ是一种满足某些条件的完全二叉树.   &lt;/p&gt;
&lt;p&gt;所谓的"完全二叉树", 要满足:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;除了最后一层, 所有层都排满(没有非空节点)  &lt;/li&gt;
&lt;li&gt;最后一层的所有非空节点都排在左边  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;一张图可以直观说明, 完全二叉树其实就是长得像这样:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/heap-summary/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;一个完全二叉树能被成为PQ的话, 要满足的条件就是:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于任何一个节点, 它的优先级都大于左右子节点的优先级.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如下图(圆圈里数字代表优先级):&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/heap-summary/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;p&gt;这样看上去的话, 确实像是"一堆"东西的形状(码的还挺整齐的), 而且我们知道在这一堆节点里, 优先级最高的就是最顶上的那个节点了.   &lt;/p&gt;
&lt;p&gt;我很喜欢这个比喻: 一个heap就像是一个&lt;em&gt;公司的hirachy结构:&lt;/em&gt; 子节点就是下属, 父节点就是上司, 每一个上司的能力都比他的下属强(优先级比子节点搞). 能力最强(优先级最高)的人在最上面.  &lt;/p&gt;
&lt;h1 id="array-representation-of-pq"&gt;array representation of PQ&lt;/h1&gt;
&lt;p&gt;对于一个完全二叉树, 没有必要用常规的树结构(使用指针)来表示, 因为如果从上到下走过每层(每层内从左到右)给所有节点编号(根节点的编号为1)的话, 完全二叉树有以下性质:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;father(i) = i/2&lt;/code&gt; 其中father(i)表示编号为i的节点的父节点的下标   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;leftchild(i) = i*2, rightchild(i) = i*2+1&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;既然用数组表示的时候, 任何节点的父亲节点和左右子节点都可以轻松得到, 就没有必要使用指针了. 所以只需要一个数组即可表示PQ ! 比如一个int的PQ在内部只要表示为: &lt;code&gt;int pq[]&lt;/code&gt;.   &lt;/p&gt;
&lt;p&gt;另外注意, 上面的公式成立的前提是数组下标从1开始, 实现的时候我们把数组的第0个元素空出来即可.   &lt;/p&gt;
&lt;p&gt;不难看出一个PQ有以下性质:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;高度为lgN  &lt;/li&gt;
&lt;li&gt;第k层有 2^k 个节点 (root是第0层)  &lt;/li&gt;
&lt;li&gt;最后一层的节点对应的下标&amp;gt;=N/2  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id="pq-implementation"&gt;PQ implementation&lt;/h1&gt;
&lt;p&gt;先写一下代码框架:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PQ&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maxPQ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAX_CAPACITY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;need&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAX_CAPACITY&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;element&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rightmost&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PQ&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAX_CAPACITY+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;top&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;top&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;element&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;element&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PQ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--&amp;gt; stay tuned  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;top&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;element&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--&amp;gt; stay tuned  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最关键的两个函数是&lt;code&gt;add&lt;/code&gt;和&lt;code&gt;poll&lt;/code&gt;, 实现这两个操作的关键在于两个基本操作: &lt;code&gt;siftup()&lt;/code&gt;和&lt;code&gt;siftdown()&lt;/code&gt;. 在PQ的性质被扰乱的时候, 使用这两个操作可以使PQ恢复性质(所谓的"调整").   &lt;/p&gt;
&lt;h3 id="siftup"&gt;siftup&lt;/h3&gt;
&lt;p&gt;如果一个新元素到来, 首先将其放在最后(最底层最右边的节点), 如果新来节点的优先级比较高, 可以用siftup将其提升到一个合适的层次. 用公司结构来类比就是新入职的员工由于能力强被提高到了高层, 而提升的办法就是: 和上司交换岗位(也就是和父节点交换位置).   &lt;/p&gt;
&lt;p&gt;所以这个操作只要不断把该元素与父节点交换, 直到遇到一个优先级大于该节点的父节点或者已经到了最高处停止. 代码很短:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;siftup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;newly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;added&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;element&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i/2&lt;/span&gt;&lt;span class="o"&gt;]&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="siftdown"&gt;siftdown&lt;/h3&gt;
&lt;p&gt;siftdown的功能和siftup相反: 如果在最高处是一个优先级很低的元素, 需要将其"下放". 方法就是把它和子节点里面优先级较高的进行交换.   &lt;/p&gt;
&lt;p&gt;代码也不长, 不过第一次写可能不太简洁:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;siftdown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nothing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sift&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;siftdown&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;level&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;element&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i*2&lt;/span&gt;&lt;span class="o"&gt;]&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i*2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i*2+1&lt;/span&gt;&lt;span class="o"&gt;]&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i*2+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bigger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;than&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;both&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="implementation-of-add-and-poll_1"&gt;implementation of add and poll&lt;/h2&gt;
&lt;p&gt;有了这两个sift的基本操作, add和poll的操作就简单了. &lt;br/&gt;
&lt;strong&gt;add&lt;/strong&gt;&lt;br/&gt;
加入新元素的时候, 只要先把它放在最后面, 然后调用siftup()函数调整一下pq即可:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public void add(int n){ // insert element to PQ  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    assert size+1&amp;lt;MAX_CAPACITY;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    pq[++size] = n;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    siftup();  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;poll&lt;/strong&gt;&lt;br/&gt;
堆顶元素被拿走以后, 我们可以先把最后一个元素放在顶部, 然后调用siftdown进行调整:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public int poll(){ // get and remove top element  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    assert !isEmpty();  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int top = pq[1];  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    pq[1] = pq[size--];// put last element on the top  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    siftdown();  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return top;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="pq-application_1"&gt;PQ application&lt;/h1&gt;
&lt;p&gt;接下来讲一下PQ的应用.   &lt;/p&gt;
&lt;h3 id="heapsort"&gt;heapsort&lt;/h3&gt;
&lt;p&gt;由于每次出队的都是在剩下元素里面最大(小)的, 所以只要把数组的元素放到一个pq里, 然后依次poll出来, 得到的序列就是排序好了的.   &lt;/p&gt;
&lt;p&gt;不管是插入还是删除操作, 每次调整的复杂度为log(n) (堆的高度), 所以算法复杂度为 O(NlgN). 实际使用的时候效率比快速排序/合并排序略差, 以后专门写一篇关于排序算法的文章时再聊.   &lt;/p&gt;
&lt;h3 id="heapify"&gt;heapify&lt;/h3&gt;
&lt;p&gt;首先前面的siftdown函数很明显可以修改一下加上一个参数变为&lt;code&gt;siftdown(int i)&lt;/code&gt;(i代表要向下调整的元素的下标).   &lt;/p&gt;
&lt;p&gt;在heapsort里第一步是要建立一个PQ. 最naive的建堆操作就是新建一个空的heap然后不断向里面加入数组&lt;code&gt;a&lt;/code&gt;里的元素(空间复杂度N, 时间复杂度NlgN). 其实这个操作可以做的更好: 我们&lt;em&gt;先直接把数组a当作pq[]数组&lt;/em&gt;, 现在显然它不满足PQ性质, 只需要&lt;em&gt;多次使用siftdown&lt;/em&gt;进行调整即可.   &lt;/p&gt;
&lt;p&gt;假设一共有h(=lgN)层, 由于最后一层的节点不必调用siftdown, 我们只要从倒数第二层开始调用siftdown即可, 结合前面提到的pq的性质(N/2以后的节点都在最后一层), 写法很简单(简单起见认为a也是把第0个元素空出来好了):   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public static void heapify(int[] a){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int N = a.length;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for(int i=N/2;i&amp;lt;=1;i--){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        siftdown(a, i);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个操作的时间复杂度是O(N)的 ! 为什么呢?&lt;br/&gt;
→ 第k层节点有2^k个节点, 这一层的节点向下调整最多会进行h-k步, 所以计算量是一个求和表达式: &lt;br/&gt;
&lt;code&gt;Sigma( 2^k * (h-k) ) for k=0,...,h-1&lt;/code&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/heap-summary/pasted_image002.png"/&gt;&lt;br/&gt;
(具体见 &lt;a href="http://algs4.cs.princeton.edu/24pq/"&gt;http://algs4.cs.princeton.edu/24pq/&lt;/a&gt; 里面Q20的答案)  &lt;/p&gt;
&lt;h3 id="top-k-elements-of-a-stream"&gt;top K elements of a stream&lt;/h3&gt;
&lt;p&gt;问题描述: 一系列数字一个一个到达, 当所有数(假设有N个)都到达以后, 求最大的K个数字.   &lt;/p&gt;
&lt;p&gt;这是一个经典的PQ应用 ⇒ 使用一个最小堆(minPQ)即可达到这个效果: 新建一个minPQ(最小的数字在最上面, 每次当一个数字n到达时:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if minPQ.size&amp;lt;K → &lt;code&gt;minPQ.add(n)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;if minPQ.size==K → 比较n和minPQ.top():   &lt;ul&gt;
&lt;li&gt;if n&amp;gt;minPQ.top(): &lt;code&gt;minPQ.poll(); minPQ.add(n)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;else pass...  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="median-of-a-stream"&gt;median of a stream&lt;/h3&gt;
&lt;p&gt;问题描述: 一系列数字一个一个到达, 求他们的中位数(median)?&lt;br/&gt;
这个的解法是使用&lt;em&gt;两个PQ&lt;/em&gt;, 一个最大堆&lt;code&gt;maxpq&lt;/code&gt;一个最小堆&lt;code&gt;minpq&lt;/code&gt;, 然后&lt;em&gt;maxpq里存放较&lt;strong&gt;&lt;em&gt;小&lt;/em&gt;&lt;/strong&gt;的一半数字, minpq里存放较&lt;strong&gt;&lt;em&gt;大&lt;/em&gt;&lt;/strong&gt;的一半数字: &lt;/em&gt;&lt;code&gt;maxpq.top()&amp;lt;=minpq.top()&lt;/code&gt;. &lt;br/&gt;
并且我们要求: &lt;code&gt;minpq.size &amp;lt;= maxpq.size &amp;lt;= minpq.size+1&lt;/code&gt;&lt;br/&gt;
⇒ 这样中位数或者是maxpq.top(), 或者是两个top的平均值了~  &lt;/p&gt;
&lt;p&gt;初始时两个pq都是空的, 每次数字n到来时:&lt;br/&gt;
&lt;em&gt; 先把n放进maxpq里&lt;br/&gt;
&lt;/em&gt; 如果&lt;code&gt;maxpq.size&amp;gt;minpq.size+1&lt;/code&gt;的话: &lt;code&gt;minpq.add(maxpq.poll())&lt;/code&gt; &lt;/p&gt;
&lt;h1 id="more-about-heap_1"&gt;more about heap&lt;/h1&gt;
&lt;h3 id="k-way-heap"&gt;k-way heap&lt;/h3&gt;
&lt;p&gt;这里介绍的PQ其实是binary heap, 即这棵树是一个完全&lt;strong&gt;二&lt;/strong&gt;叉树, 但是我们完全可以做成完全&lt;strong&gt;K&lt;/strong&gt;叉树, 就是所谓的K-way heap了.  &lt;/p&gt;
&lt;p&gt;这样的好处是heap的高度会变得更小(从log2(N)变为logK(N)), 不过由于每个分叉变成了K个, 所以siftdown每次循环的操作复杂度也会增加(从2变为K).   &lt;/p&gt;
&lt;h3 id="more-flexible-heap"&gt;more "flexible" heap&lt;/h3&gt;
&lt;p&gt;在某些应用中(比如Dijkstra算法), 我们希望在插入后修改某个元素的优先级, 这时候需要对这个标准的heap做一些修改, 需要用一个数组把元素的"逻辑编号"和在pq数组里的"实际编号"相互转换.   &lt;/p&gt;
&lt;p&gt;不过这个会比较subtle(其实我已经记不起来了...), 见: &lt;a href="http://x-wei.github.io/algoII_week2_2.html"&gt;http://x-wei.github.io/algoII_week2_2.html&lt;/a&gt; (IndexedPQ部分)&lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>quick sort and more: 快速排序算法总结</title><link href="https://x-wei.github.io/tech/quick-sort-and-more.html" rel="alternate"></link><published>2015-12-07T00:00:00+01:00</published><updated>2015-12-07T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-12-07:tech/quick-sort-and-more.html</id><summary type="html">&lt;p&gt;今天总结一下非常有用的快速排序(qsort)算法, 以及由此衍生的一些其他相关算法(Knuth shuffle, quick select, 3-way partition).   &lt;/p&gt;
&lt;p&gt;快速排序的算法可以用三句话描述:&lt;br/&gt;
&lt;strong&gt;[Algo]&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;选择基准项(pivot element, 一般取第一个元素为pivot)  &lt;/li&gt;
&lt;li&gt;把数组里所有小于pivot的移动到pivot左边, 大于pivot的移动到右边 ⇒ 此时pivot已经位于最终排序时的正确位置  &lt;/li&gt;
&lt;li&gt;对pivot左右两个数组分别递归进行快速排序  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;由以上描述可见, qsort是一个递归算法, 我们可以把它的函数声明写成: &lt;code&gt;void qsort(int[] a, int lo, int hi)&lt;/code&gt;, 表示排序a[lo, hi]之间(闭区间)的所有元素.   &lt;/p&gt;
&lt;h2 id="quick-partition"&gt;quick partition&lt;/h2&gt;
&lt;p&gt;由上面描述可以见, qsort最关键的是第二步: 把数组元素以pivot分为两部分. 这个操作就是quick partition.   &lt;/p&gt;
&lt;p&gt;函数声明为: &lt;code&gt;int partition(int[] a, int lo, int hi)&lt;/code&gt;, 该函数返回pivot(即subarray的第一个元素&lt;code&gt;a[lo]&lt;/code&gt;)所在的位置.   &lt;/p&gt;
&lt;p&gt;如果允许新建一个临时数组的话, 那么这个就不是什么问题, 但是为了节约空间占用, 现在需要直接修改(in-place)使得a[lo] 到, 而且希望可以用尽量少的交换(&lt;code&gt;swap(int[]a, int i, int j)&lt;/code&gt;)操作, 就不是很evident了.   &lt;/p&gt;
&lt;p&gt;这个函数的写法是用两个指针i和j分别从两端向中间走, 如果两个指针指向的元素一个小于pivot一个大于pivot那么就进行交换, 当两个指针碰面的时候结束(最后把pivot和指针元素交换). 请看下面这个萌萌的图(图片来自&amp;lt;&amp;lt;啊哈!算法&amp;gt;&amp;gt;): &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/quick-sort-and-more/pasted_image003.png"/&gt;&lt;br/&gt;
选取第一个元素(6)为pivot, 然后j向左走直到遇到一个小于pivot(6)的数停止, i向右走直到遇到一个大于pivot的数停止(&lt;em&gt;注意要让j先移动&lt;/em&gt;), 此时二者交换: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/quick-sort-and-more/pasted_image004.png"/&gt;&lt;br/&gt;
只要重复这个过程, 直到i&amp;gt;=j为止, 此时只要最后把pivot和j(&lt;em&gt;注意是j而不是i&lt;/em&gt;)指向的元素交换即可: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/quick-sort-and-more/pasted_image005.png"/&gt;&lt;br/&gt;
所以pivot的位置就是j, 函数返回j即可.    &lt;/p&gt;
&lt;p&gt;java实现:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&amp;gt;=&lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="c1"&gt;--);// move j to a point where a[j]&amp;lt;pivot  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&amp;lt;=&lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;meets&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="c1"&gt;--);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里有几点要注意的:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让j先移动  &lt;/li&gt;
&lt;li&gt;最后pivot要和j交换而不是和i交换: 因为最后放在最左边的应该是一个小于pivot的数嘛  &lt;/li&gt;
&lt;li&gt;移动的时候别忘了需要加数组下标的边界检查(&lt;code&gt;i&amp;lt;=hi&lt;/code&gt;, &lt;code&gt;j&amp;gt;=lo&lt;/code&gt;)  &lt;/li&gt;
&lt;li&gt;partition()的复杂度是线性的&lt;strong&gt;O(n)&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="knuth-shuffle"&gt;Knuth shuffle&lt;/h2&gt;
&lt;p&gt;qsort之所以快, 是因为每次都能够按照pivot分为大致同样长度的两个子数组(所以每次子问题的规模除以二), 所以复杂度为&lt;strong&gt;O(NlogN)&lt;/strong&gt;. 最坏情况下, 如果每次两个子数组中可能有一个长度为0, 那么每次子问题的规模只减少了1, 所以复杂度变成了quadratic &lt;strong&gt;O(N2)&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;为了防止这种最坏情况的出现, 可以在一切开始之前把数组打乱顺序, 所以这一节讨论快速shuffle的算法. 最经典的就是Knuth的shuffle算法了, 算法很简答, 描述为: for(k=1 to n): 每次把第k个元素和前k个元素中的随机一个元素交换.  &lt;/p&gt;
&lt;p&gt;代码只有两行:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;void shuffle(int[] a){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for(int K=0; K&amp;lt;a.length; K++)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        swap(K, Random.nextInt(K+1));  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于算法的正确性, 其实只要证明"元素i在shuffle后最终位于位置i"的概率为1/N即可, 不难证明.   &lt;/p&gt;
&lt;h2 id="quick-sort"&gt;quick sort&lt;/h2&gt;
&lt;p&gt;好了 有了以上两个辅助函数就可以写qsort函数了:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;void qsort(int[] a, int lo, int hi){//recursive helper function  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(lo&amp;gt;=hi) return;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int p = partition(a, lo, hi);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    qsort(a, lo, p-1);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    qsort(a, hi, p+1);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;void qsort(int[] a){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    shuffle(a);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    qsort(a, 0, a.length-1);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实qsort的主体就是那个partition函数, 单独把partition列出来是因为它不止可以用在排序, 还可以用来做quick select, 见quick select节.    &lt;/p&gt;
&lt;h2 id="quick-select"&gt;quick select&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;对于一个没有排序的数组, 如何快速找到它的中值(median)?&lt;/em&gt;&lt;br/&gt;
以上这个问题的答案就在&lt;code&gt;partition()&lt;/code&gt;函数.   &lt;/p&gt;
&lt;p&gt;之前说过, &lt;code&gt;partition()&lt;/code&gt;函数的返回值表示pivot在排序好的数组中的位置(rank), 这个消息非常有用: 中值只不过是rank等于长度除以2的元素而已.   &lt;/p&gt;
&lt;p&gt;为了寻找rank等于k的元素, 我们用partition函数可以每次把问题规模缩小: 如果partition()=p&lt;k, 如果p="" 那么pivot左边的subarray不必考虑,=""&gt;k那么右边subarray不用考虑, 如果数组事先shuffle过了的话, 问题规模每次缩小一半.   &lt;/k,&gt;&lt;/p&gt;
&lt;p&gt;定义一个函数, 寻找rank等于k的元素, 代码类似于二分查找:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;findKth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该算法内层循环为O(hi-lo), 每次问题规模减少一半, 所以复杂度为N+N/2+N/4+...+1 = 2N, 复杂度为线性时间!  &lt;/p&gt;
&lt;h2 id="3-way-qsort"&gt;3-way qsort&lt;/h2&gt;
&lt;p&gt;qsort之前有个bug: 在数组里很多重复元素的时候, 效率会下降为O(N2). 原因是qsort没有好好处理重复元素的问题.   &lt;/p&gt;
&lt;p&gt;于是Dijkstra提出了一个&lt;strong&gt;3-way partition&lt;/strong&gt;的算法: 把数组分为三部分: 左边&lt;code&gt;[lo, lt)&lt;/code&gt;严格小于pivot, 中间&lt;code&gt;[lt, gt]&lt;/code&gt;等于pivot, 右边&lt;code&gt;(gt, hi]&lt;/code&gt;严格大于pivot.   &lt;/p&gt;
&lt;p&gt;算法初始化&lt;code&gt;lt=lo, gt=hi, i=lo&lt;/code&gt;, 用指针i向右扫描, [i,gt]为未处理到的部分. &lt;br/&gt;
算法很subtle, invariant是这样的:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;a[lo,lt-1] &amp;lt; pivot  &lt;/li&gt;
&lt;li&gt;a[lt, i-1] = pivot  &lt;/li&gt;
&lt;li&gt;a[i,gt] = unseen  &lt;/li&gt;
&lt;li&gt;a[gt+1, hi] &amp;gt; pivot  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/quick-sort-and-more/pasted_image006.png"/&gt;&lt;br/&gt;
这个图很有助于写代码: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/quick-sort-and-more/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;qsort3way&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i,gt&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unseen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lt,i-1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;gt+1, hi&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;--, i);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lo, lt-1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;qsort3way&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;qsort3way&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说它很subtle, 除了因为没有那个图我写不出来以外, 还有就是, 在把i和lt交换时, i可以increment (因为我们知道&lt;code&gt;a[lt]==pivot&lt;/code&gt;), 但是i和gt交换时, i&lt;strong&gt;不能&lt;/strong&gt;increment: 因为a[gt]不知道多大, 所以i位置要继续检查.   &lt;/p&gt;
&lt;p&gt;另外说一句, quicksort的思想在radix sort和trie里面也有闪现, 见我关于这两个主题的MOOC笔记...&lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>最短路径三剑客: Floyd, Dijkstra, Bellman</title><link href="https://x-wei.github.io/tech/shortest-path-summary.html" rel="alternate"></link><published>2015-10-18T17:00:00+02:00</published><updated>2015-10-18T17:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-10-18:tech/shortest-path-summary.html</id><summary type="html">&lt;p&gt;weighted graph的最短路径问题有三个非常有名的算法, 分别以三个大牛的名字命名, 今天用尽量简洁的篇幅一一介绍.    &lt;/p&gt;
&lt;p&gt;简单起见(这回只写伪代码好了), 对于图的定义如下:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node index = &lt;code&gt;{1,2,...,n}&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;e[u,v]&lt;/code&gt; = distance of edge(u,v); if (u,v) is not an edge, &lt;code&gt;e[u,v]=INF&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;令N=点的数量, M=边的数量   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ren-yi-liang-dian-zui-duan-lu-jing-floyd-warshall"&gt;任意两点最短路径: Floyd-Warshall&lt;/h1&gt;
&lt;p&gt;Floyd算法解决的问题是: 对于&lt;strong&gt;任意&lt;/strong&gt;两个节点&lt;code&gt;s&lt;/code&gt;(source)和&lt;code&gt;t&lt;/code&gt;(target), 求s到达t的最短路径.    &lt;/p&gt;
&lt;p&gt;Floyd算法的思想是动态规划:    &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;定义&lt;code&gt;d(i,j,k)&lt;/code&gt;为点i到点j之间, &lt;strong&gt;只允许借道节点1...k的最短路径&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;初始化: &lt;code&gt;d(i,j,0)=e[i,j]&lt;/code&gt;(即i到j之间不经由其他任何中转节点的最短路径)   &lt;/li&gt;
&lt;li&gt;更新dij的公式就是: &lt;code&gt;d(i,j,k)=min( d(i,j,k-1), d(i,k-1,k-1)+e[k,j])&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;更新n次   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;每次更新dij的意思就是: 现在从i到j可以经过节点k了, 那么看一下ij之间从k这个点经过的话(i → k → j 这条路)能不能缩短dij.    &lt;/p&gt;
&lt;p&gt;i到j最短路径最终就是: &lt;code&gt;d(i,j,n)&lt;/code&gt; 即i到j的路程可以经过1~n中的任何中转节点.    &lt;/p&gt;
&lt;p&gt;伪代码特别短(其实真代码也一样短....):    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;for all [i,j]: // initialize   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    d[i,j] = e[i,j]    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;for k = 1 ~ n: // relax for k times:    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for all [i,j]:   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        d[i,j] = min(d[i,j], d[i,k] + e[k,j])&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;核心代码只有最后三行... 运行结束后&lt;code&gt;d[i,j]&lt;/code&gt;就保存着任意i和j之间的最短路径长度.  &lt;br/&gt;
程序主循环n次, 每次要处理遍历所有的ij组合, 所以复杂度是&lt;strong&gt;O(N^3)&lt;/strong&gt;.    &lt;/p&gt;
&lt;h1 id="dan-yuan-zui-duan-lu-jing-dijkstra"&gt;单源最短路径: Dijkstra&lt;/h1&gt;
&lt;p&gt;Dijkstra算法解决的问题是: 没有负权边的情况下, 从&lt;strong&gt;源节点&lt;/strong&gt;&lt;code&gt;s&lt;/code&gt;到其他任意节点&lt;code&gt;t&lt;/code&gt;的路径长度.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维护一个dist数组, dist[i]就表示(目前为止)s到i的最短距离.    &lt;/li&gt;
&lt;li&gt;对于每个元素, &lt;strong&gt;标记&lt;/strong&gt;是否其dist是否已经确定不再更改(或者说维护两个集合: 一个集合的dist确定, 另一个未确定).    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dijkstra算法是一种贪心策略: 每次在未确定最短路径的节点里挑选距离s最近的那个点, 把这个点标记为已经确定dist, 然后对从这个点出发的边进行松弛.    &lt;/p&gt;
&lt;p&gt;为了标记每个点, 这里用一个bool数组表示: &lt;code&gt;determined[i]&lt;/code&gt;为true表示i的dist已经是最短路程, 为false表示还不确定.    &lt;/p&gt;
&lt;p&gt;算法如下:    &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;初始化&lt;code&gt;dist[i] = e[s,i]&lt;/code&gt;, &lt;code&gt;determined[i]&lt;/code&gt;全为false   &lt;/li&gt;
&lt;li&gt;在dist未确定的元素里(&lt;code&gt;determined[i]==false&lt;/code&gt;)寻找一个dist最小的节点&lt;code&gt;u:&lt;/code&gt; &lt;ul&gt;
&lt;li&gt;标记&lt;code&gt;u&lt;/code&gt;的dist已经确定&lt;code&gt;determined[i]=true&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;用u的所有出边进行松弛: s到i如果经过(u,i)这条边会不会变近? &lt;code&gt;dist[i] = min(dist[i], dist[u]+e[u,i])&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;重复循环直到所有的点都确定dist(or 重复N遍即可: &lt;em&gt;每次只会确定一个新的节点的距离&lt;/em&gt;)   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;伪代码:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nl"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s,i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;determined&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;times&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;among&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;determined&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;determined&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;determine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;such&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u,v&lt;/span&gt;&lt;span class="o"&gt;]&amp;lt;&lt;/span&gt;&lt;span class="nl"&gt;INF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;]+&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u,v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上代码的复杂度为O(N^2), 不过如果用堆来优化寻找最近的u的距离, 复杂度可以变得更低.    &lt;/p&gt;
&lt;h1 id="you-fu-quan-bian-de-dan-yuan-zui-duan-lu-jing-bellman-ford"&gt;有负权边的单源最短路径: Bellman-Ford&lt;/h1&gt;
&lt;p&gt;Dijkstra算法的缺点在于不能处理边长为负数的情况, 而这就是Bellman-Ford算法解决的.    &lt;/p&gt;
&lt;p&gt;Bellman算法也是一种动态规划(动态规划这个东西就是Bellman提出来的):    &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;定义&lt;code&gt;d(i,k)&lt;/code&gt;为源点s到i&lt;strong&gt;最多经过k条边的&lt;/strong&gt;最短距离   &lt;/li&gt;
&lt;li&gt;初始化: &lt;code&gt;d(i,1)=e[s,i]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;每次更新di的公式: &lt;code&gt;for all (u,v): d(v,k)=min( d(v,k-1), d(u,k-1)+e[u,v] )&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;更新n-1次   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么是更新n-1次? 因为s到i的最短路径至多只有n-1条边(即s到i的路径经过了所有n个点).  &lt;br/&gt;
注意每次更新, 需要把&lt;strong&gt;所有的边&lt;/strong&gt;试一遍: 看看用每条边(u,v)能不能松弛dv.    &lt;/p&gt;
&lt;p&gt;伪代码:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nl"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s,i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;times&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;such&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u,v&lt;/span&gt;&lt;span class="o"&gt;]&amp;lt;&lt;/span&gt;&lt;span class="nl"&gt;INF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;]+&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u,v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;核心代码也是最后三行... 太tm精妙了!!    &lt;/p&gt;
&lt;p&gt;外层循环N-1次, 内层循环M次, 所以代码的复杂度是O(NM).   &lt;/p&gt;
&lt;h1 id="more"&gt;More&lt;/h1&gt;
&lt;p&gt;以下问题有空再写...   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;negative cycle   &lt;/li&gt;
&lt;li&gt;A*   &lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category></entry><entry><title>深度优先搜索(DFS)小结</title><link href="https://x-wei.github.io/tech/dfs-summary.html" rel="alternate"></link><published>2015-10-18T00:00:00+02:00</published><updated>2015-10-18T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-10-18:tech/dfs-summary.html</id><summary type="html">&lt;p&gt;今天总结一下也许是搜索问题里最重要的算法: DFS !    &lt;/p&gt;
&lt;p&gt;由于树可以看成是一个graph, 这里还是只写对于graph的DFS算法. Graph类的定义还是用每一个节点保存邻居信息:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class GraphNode{      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int val;      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    List&amp;lt;GraphNode&amp;gt; neighbors;      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了防止重复, 仍然用一个HaseSet记录走过的节点:    &lt;/p&gt;
&lt;p&gt;&lt;code&gt;HasheSet&amp;lt;GraphNode&amp;gt; visited = new HasheSet&amp;lt;GraphNode&amp;gt;();&lt;/code&gt; &lt;/p&gt;
&lt;h2 id="recursive-dfs"&gt;Recursive DFS&lt;/h2&gt;
&lt;p&gt;首先写递归版本的DFS, DFS就是一条路走到底, 不撞南墙不回头, 所以递归写起来很自然: 每到一个节点, 标记其已经访问过了, 然后对于邻居里面没有访问的节点继续递归进行DFS.    &lt;/p&gt;
&lt;p&gt;递归的DFS代码非常简洁:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public void DFS(GraphNode nd){      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    System.out.println(nd.val);    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    visited.add(nd);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for(GraphNode next: nd.neighbors){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if( !visited.contains(next) )   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            DFS(next);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然这个算法很短, 但是它非常重要, 回溯算法(backtracking)其实就相当于在问题的求解域做一个dfs. 另外拓扑排序也是基于递归dfs进行一点点修改.    &lt;/p&gt;
&lt;h2 id="non-recursive-dfs"&gt;Non-recursive DFS&lt;/h2&gt;
&lt;p&gt;非递归版本的dfs同样很重要, 因为毕竟非递归的版本效率高一些, 另外这个算法和bfs非常相似, 只不过把队列queue换成了栈stack而已:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public void DFS(GraphNode start){      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Stack&amp;lt;GraphNode&amp;gt; s = new Stack&amp;lt;GraphNode&amp;gt;();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    q.push(start);      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    visited.add(start);      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    while(!s.empty()){      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        GraphNode cur = s.pop();      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        System.out.println(cur.val);      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        for(GraphNode next: cur.children){       &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            if(!visited.contains(next)){      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                s.push(next);      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                visited.add(next); // mark node as visited when adding to stack!       &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            }      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        }      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }//while      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样要注意的一点就是在把一个节点入栈的时刻就将其标记为已访问.    &lt;/p&gt;
&lt;h2 id="for-trees-dfs-with-depth"&gt;(for Trees) DFS with depth&lt;/h2&gt;
&lt;p&gt;和上次&lt;a href="http://x-wei.github.io/bfs-summary.html"&gt;bfs&lt;/a&gt;一样, &lt;strong&gt;对于树而言&lt;/strong&gt;, 在dfs搜索的过程中也可以记录该节点所在的depth.    &lt;/p&gt;
&lt;p&gt;非递归版本的程序就是用一个和上面&lt;code&gt;s&lt;/code&gt;平行的栈记录深度, 程序和"BFS with distance"很像. 递归版本只要在函数签名里加上一个depth的参数即可. 这两个实现都很简单, 就不写了.    &lt;/p&gt;
&lt;p&gt;注意这个只对于树有意义, 对一个图而言没有depth一说...    &lt;/p&gt;
&lt;h2 id="dfs-for-binary-tree-preorder-traversal"&gt;DFS for binary tree: Preorder traversal&lt;/h2&gt;
&lt;p&gt;dfs另一个有用的性质是: 对于&lt;strong&gt;二叉树&lt;/strong&gt;而言, dfs得到的节点顺序正是其前序遍历(preorder traversal)的顺序.    &lt;/p&gt;
&lt;p&gt;其实前序遍历的定义就相当于是一个递归版本的dfs了:  &lt;br/&gt;
&lt;code&gt;[preorder(node)] = node.val + [preorder(node.left)] + [preorder(node.right)]&lt;/code&gt; &lt;/p&gt;
&lt;h2 id="dfs-with-path"&gt;DFS with path&lt;/h2&gt;
&lt;p&gt;如果在访问到某一个节点的时候想同时获得到该点的路径, 其实也不麻烦.    &lt;/p&gt;
&lt;p&gt;对于递归版本的dfs而言, 可以在参数里面用一个List记录到当前节点的路径.    &lt;/p&gt;
&lt;p&gt;非递归的版本的话... 貌似不是很trival, 需要对stack做好维护, 可能需要一个hashmap什么的... 以后有空了再写写.    &lt;/p&gt;
&lt;h2 id="cycle-detection"&gt;Cycle Detection&lt;/h2&gt;
&lt;p&gt;判断一个有向图是否存在回路是一个非常重要的问题, 简单修改dfs就可以做到了.    &lt;/p&gt;
&lt;p&gt;在递归版本的dfs里, 我们对每一个点改为&lt;strong&gt;三种标记&lt;/strong&gt;:  &lt;br/&gt;
&lt;em&gt;未访问过(0), 正在访问其邻居节点(1), 已经访问完该节点以及所有该节点可以到达的节点(2)&lt;/em&gt;.    &lt;/p&gt;
&lt;p&gt;什么时候会出现回路呢? &lt;em&gt;就是当前节点v的一个邻居u的状态为1的时候&lt;/em&gt;. 因为该节点状态为1, 即还没有把它以后的节点全部遍历, 所以当前节点v肯定可以从u到达, 而现在又可以从v到达u, 所以构成一个回路.    &lt;/p&gt;
&lt;p&gt;为了表示一个节点的三种状态, 我们把visited的定义改一下, 定义为一个hashmap:     &lt;br/&gt;
&lt;code&gt;HasheMap&amp;lt;GraphNode, Boolean&amp;gt; visited = new HasheMap&amp;lt;GraphNode, Boolean&amp;gt;();&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;节点不在visited表示还未访问过, 节点对应为false表示正在访问, 节点对应为true表示已经访问该节点以及所有可以从它到达的节点.    &lt;/p&gt;
&lt;p&gt;写一下代码:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public void DFS(GraphNode nd){      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    visited.put(nd, false); // mark as status-1   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for(GraphNode next: nd.neighbors){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if( !visited.contains(next) )   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            DFS(next);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        else if(visited.get(next)==false) // found cycle   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            System.out.println("Cycle detected!!!");   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }// now all touchable nodes from nd are visited   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    visited.put(nd, true); // mark as status-2   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;非递归版本的话貌似也不很容易, 暂时不写了, 以后有空了考虑一下...   &lt;/p&gt;
&lt;h2 id="topology-sort"&gt;Topology Sort&lt;/h2&gt;
&lt;p&gt;这一节(以及上一节)参考这个非常棒的视频: &lt;a href="https://class.coursera.org/algo-003/lecture/52"&gt;https://class.coursera.org/algo-003/lecture/52&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;拓扑排序是一个dfs的应用, 所谓拓扑排序是指在一个DAG(有向无回路图)里给每个节点定义一个顺序(v1...vn), 使得按照这个顺序遍历的节点, 每一个节点vi都是之前遍历过的的节点(v1 ~ vi-1)所指向的(或没有任何其他节点指向的).    &lt;/p&gt;
&lt;p&gt;好像还没说清楚... 拓扑排序的一个应用就是对于各种依赖性(比如学习课程A需要先学习过课程B)组成的图寻找一个节点遍历的顺序使其可行.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;propositions&lt;/strong&gt;:    &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;拓扑排序的结果不唯一.    &lt;/li&gt;
&lt;li&gt;有回路的图不存在拓扑顺序.   &lt;/li&gt;
&lt;li&gt;如果一个节点没有出边, 那么它可以放在拓扑排序的最后面(没有节点以来它).   &lt;/li&gt;
&lt;li&gt;如果一个节点没有入边, 那么它可以放在拓扑排序的最后面.    &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单修改一下递归的dfs就可以处理拓扑排序: 维护一个计数器&lt;code&gt;K&lt;/code&gt;(初始化为n=所有节点数), 每当一个点已经遍历完毕(所有通过这个点可以到达的点都已经被走过)以后, 就把这个点的顺序设为K, 同时减少K.    &lt;/p&gt;
&lt;p&gt;就用一个HashMap来为每个节点关联一个序号好了:  &lt;br/&gt;
&lt;code&gt;HasheMap&amp;lt;GraphNode, Integer&amp;gt; order = new HasheMap&amp;lt;GraphNode, Integer&amp;gt;();&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public void DFS(GraphNode nd){      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for(GraphNode next: nd.neighbors){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if( !visited.contains(next) )   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            DFS(next);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }// all touchable nodes from nd are visited   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    order.put(nd, K--);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是不是特别简单, 太神奇了!    &lt;/p&gt;
&lt;p&gt;上面只是对于一个点进行的, 为了给所有点拓扑排序, 只要从一个没有出边的节点出发进行遍历, 一直运行到所有的节点都已经访问过为止.    &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>广度优先搜索(BFS)小结</title><link href="https://x-wei.github.io/tech/bfs-summary.html" rel="alternate"></link><published>2015-10-08T00:00:00+02:00</published><updated>2015-10-08T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-10-08:tech/bfs-summary.html</id><summary type="html">&lt;p&gt;今天总结一下广度优先搜索(BFS). BFS是树/图的遍历的常用算法之一, 对于没有边权重的图来说可以计算最短路径.  &lt;br/&gt;
由于树的BFS只是图的BFS的一种特殊情况, 而且比较简单不需要visited标记, 这里只写一下图的BFS好了.  &lt;br/&gt;
先定义一个Graph类, 这里在每一个节点保存邻居信息:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class GraphNode{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int val;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    List&amp;lt;GraphNode&amp;gt; neighbors;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="bfs-for-treesgraphs"&gt;BFS for trees/graphs&lt;/h2&gt;
&lt;p&gt;图的遍历需要注意不走重复节点, 所以需要一个HashSet(名字叫visited)来保存哪些节点已经访问过了. 需要注意的是, &lt;em&gt;在把一个节点放进队列queue的时刻就要把它放进visited&lt;/em&gt;, 而不是在队列里取出来的时刻再放.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public void BFS(GraphNode start){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    LinkedList&amp;lt;GraphNode&amp;gt; q = new LinkedList&amp;lt;GraphNode&amp;gt;();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    HasheSet&amp;lt;GraphNode&amp;gt; visited = new HasheSet&amp;lt;GraphNode&amp;gt;();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    q.push(start);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    visited.add(start);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    while(!q.empty()){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        GraphNode cur = q.poll();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        System.out.println(cur.val);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        for(GraphNode next: cur.children){    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            if(!visited.contains(next)){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                q.push(next);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                visited.add(next); // mark node as visited when adding to queue!    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }//while   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="bfs-with-distance"&gt;BFS with distance&lt;/h2&gt;
&lt;p&gt;在BFS的同时我们可以记录从start节点到当前node的距离, 方法是把一个距离信息同时入队(封装一个&lt;code&gt;Pair&amp;lt;GraphNode, Integer&amp;gt;&lt;/code&gt;), 或者使用一个与queue&lt;em&gt;平行&lt;/em&gt;的队列保存距离信息.  &lt;br/&gt;
在上面的代码中, 加入:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;//...   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;LinkedList&amp;lt;Integer&amp;gt; distq = new LinkedList&amp;lt;Integer&amp;gt;();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;distq.push(0);// distance from start to start   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;//...   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// in the while(!q.empty()) loop:    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int d = distq.poll();//get distance from start to current node   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for(GraphNode next: node.children){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        distq.push(d+1);// distance from start to next node   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        //...&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于Tree的情况来说, 这里的dist其实就是当前节点的深度depth.    &lt;/p&gt;
&lt;h2 id="properties"&gt;properties&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;性质1:&lt;/strong&gt; &lt;br/&gt;
每个节点node的distance都是node距离起始点start的最短距离.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;性质2:&lt;/strong&gt; &lt;br/&gt;
距离start近的节点(depth浅的节点)一定比距离start远的节点早被访问到.    &lt;/p&gt;
&lt;p&gt;这是对一个树BFS的时候节点的访问顺序:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/bfs-summary/pasted_image.png"/&gt; &lt;/p&gt;
&lt;h2 id="bfs-by-layer"&gt;BFS "by layer"&lt;/h2&gt;
&lt;p&gt;参考上面的性质, 可以一次处理"一层"的节点, "一层"的意思是指所有节点距离start的距离相同. 代码在while循环里不是一次poll一个节点, 而是一次把queue的内容处理完, 然后换新的queue进入下一次while循环. 代码重新写一下:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public void BFS(GraphNode start){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    ArrayList&amp;lt;GraphNode&amp;gt; q = new ArrayList&amp;lt;Tree&amp;gt;();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    HasheSet&amp;lt;GraphNode&amp;gt; visited = new HasheSet&amp;lt;GraphNode&amp;gt;();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    q.push(start);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    visited.add(start);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    while(!q.empty()){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        ArrayList&amp;lt;GraphNode&amp;gt; newq = new ArrayList&amp;lt;Tree&amp;gt;();// create a new queue   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        for(GraphNode cur: q){// deal with all nodes in the queue    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            System.out.print(cur.val+", ");// all nodes in q are of the same distance/depth   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            for(GraphNode next: cur.children)    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                if(!visited.contains(next))   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                    { newq.push(next);visited.add(next); }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        System.out.println();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        q = newq;//replace q with newq   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }//while   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上程序每次打印一行, 第i行包括了距start距离为i的所有节点.  &lt;br/&gt;
由于这样的话每次不必在队首poll出元素(而是依次处理所有queue的元素), 所以可以改用ArrayList. 此时while循环里的不变量是: 所有q里面的节点距离start的距离都相同.    &lt;/p&gt;
&lt;h2 id="complexity"&gt;complexity&lt;/h2&gt;
&lt;p&gt;假设一个图有N个节点和M条边, BFS会走遍所有节点, 时间是O(N), 然后由于每个节点会检查所有的出边, 最终所有的边都会被检查过, 时间是O(M), 所以BFS的时间复杂度是&lt;strong&gt;O(N+M)&lt;/strong&gt;.    &lt;/p&gt;
&lt;p&gt;队列里面最多可能存放所有节点, 空间复杂度为&lt;strong&gt;O(N)&lt;/strong&gt;.    &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>Mindmap of algorithms &amp; data structures</title><link href="https://x-wei.github.io/tech/algo-ds-mindmap.html" rel="alternate"></link><published>2015-10-05T00:00:00+02:00</published><updated>2015-10-05T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-10-05:tech/algo-ds-mindmap.html</id><summary type="html">&lt;p&gt;Here is a mindmap of the common algorithms and data structures, it can give an overview of the algorithmic terms.    &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algo-ds-mindmap/Algo%20%26%20DS.png"/&gt; &lt;/p&gt;
&lt;p&gt;I shall update its content later on. And maybe write some blog entries on some of the items.   &lt;/p&gt;
&lt;p&gt;This mindmap is drawn using &lt;a href="http://www.xmind.net/"&gt;xmind&lt;/a&gt;.   &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>numpy: list, array, matrix小结</title><link href="https://x-wei.github.io/tech/list_array_matrix.html" rel="alternate"></link><published>2015-09-09T00:00:00+02:00</published><updated>2015-09-09T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-09-09:tech/list_array_matrix.html</id><summary type="html">&lt;p&gt;python科学计算包的基础是numpy, 里面的array类型经常遇到. 一开始可能把这个array和python内建的列表(list)混淆, 这里简单总结一下列表(list), 多维数组(np.ndarray)和矩阵(np.matrix)的区别.    &lt;/p&gt;
&lt;h2 id="listlie-biao"&gt;list列表&lt;/h2&gt;
&lt;p&gt;列表属于python的三种基本集合类型之一, 其他两种是元组(tuple)和字典(dict). tuple和list区别主要在于是不是mutable的.    &lt;/p&gt;
&lt;p&gt;list和java里的数组不同之处在于, python的list可以包含任意类型的对象, 一个list里可以包含int, string或者其他任何对象, 另外list是可变长度的(list有&lt;code&gt;append&lt;/code&gt;, &lt;code&gt;extend&lt;/code&gt;和&lt;code&gt;pop&lt;/code&gt;等方法).   &lt;/p&gt;
&lt;p&gt;所以, python内建的所谓"列表"其实是功能很强大的数组, 类比一下可以说它对应于java里面的&lt;code&gt;ArrayList&amp;lt;Object&amp;gt;&lt;/code&gt; .    &lt;/p&gt;
&lt;h2 id="ndarrayduo-wei-shu-zu"&gt;ndarray多维数组&lt;/h2&gt;
&lt;p&gt;ndarray是numpy的基石, 其实它更像一个java里面的标准数组: 所有元素有一个相同数据类型(dtype), 不过大小不是固定的.    &lt;/p&gt;
&lt;p&gt;ndarray对于大计算量的性能非常好, 所以list要做运算的时候一定要先转为array(&lt;code&gt;np.array(_a_list_)&lt;/code&gt;).    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ndarray带有一些非常实用的&lt;a href="http://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html"&gt;函数&lt;/a&gt;, 列举几个常用的: &lt;code&gt;sum, cumsum, argmax, reshape, T, ...&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ndarray有&lt;a href="http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#arrays-indexing"&gt;fancy indexing&lt;/a&gt;, 非常实用, 比如: &lt;code&gt;a[a&amp;gt;3]&lt;/code&gt; 返回数组里大于3的元素   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ndarray之间的乘法: 如果用乘法运算符&lt;code&gt;*&lt;/code&gt;的话, 返回的是每个位置元素相乘(类似matlab里面的&lt;code&gt;.*&lt;/code&gt;), 想要矩阵相乘需要用&lt;code&gt;dot()&lt;/code&gt;.   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常见矩阵的生成: &lt;code&gt;ones, zeros, eye, diag, ...&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="matrixju-zhen"&gt;matrix矩阵&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;matrix是ndarray的子类&lt;/em&gt;, 所以前面ndarray那些优点都保留了.    &lt;/p&gt;
&lt;p&gt;同时, matrix全部都是二维的, 并且加入了一些更符合直觉的函数, 比如对于matrix对象而言, 乘号运算符得到的是矩阵乘法的结果. 另外&lt;code&gt;mat.I&lt;/code&gt;就是逆矩阵...   &lt;/p&gt;
&lt;p&gt;不过应用最多的还是ndarray类型.    &lt;/p&gt;
&lt;p&gt;参考资料:  &lt;br/&gt;
&lt;a href="http://docs.scipy.org/doc/numpy/reference/index.html"&gt;http://docs.scipy.org/doc/numpy/reference/index.html&lt;/a&gt; &lt;br/&gt;
&lt;a href="http://math.mad.free.fr/depot/numpy/base.html"&gt;http://math.mad.free.fr/depot/numpy/base.html&lt;/a&gt; &lt;br/&gt;
&lt;a href="http://stackoverflow.com/questions/4151128/what-are-the-differences-between-numpy-arrays-and-matrices-which-one-should-i-u"&gt;http://stackoverflow.com/questions/4151128/what-are-the-differences-between-numpy-arrays-and-matrices-which-one-should-i-u&lt;/a&gt; &lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Scrapy 上手笔记</title><link href="https://x-wei.github.io/tech/Scrapy%20%E4%B8%8A%E6%89%8B%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><published>2015-04-19T00:00:00+02:00</published><updated>2015-04-19T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-04-19:tech/Scrapy 上手笔记.html</id><summary type="html">&lt;p&gt;Scrapy是用来爬取数据的很流行的包, 这里小记一下. 以前几天做的&lt;a href="https://github.com/X-Wei/OneArticleCrawler"&gt;一个爬虫&lt;/a&gt;为例子, 这个爬虫把韩寒一个app的前九百多期的文章抓了下来. &lt;/p&gt;
&lt;h2 id="i-installation"&gt;I. installation&lt;/h2&gt;
&lt;p&gt;scrapy的安装参考: &lt;a href="http://scrapy-chs.readthedocs.org/zh_CN/latest/topics/ubuntu.html"&gt;http://scrapy-chs.readthedocs.org/zh_CN/latest/topics/ubuntu.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(直接pip安装的好像缺少什么包)&lt;/p&gt;
&lt;h2 id="ii-prerequisite"&gt;II. prerequisite&lt;/h2&gt;
&lt;h3 id="xpath"&gt;XPath&lt;/h3&gt;
&lt;p&gt;需要学习scrapy首先需要会XPath, 这是一种方便与在html/xml文档里查找所需元素的语句. 这个还是很好学的, 其实只需要花一刻钟时间看看w3school的&lt;a href="http://www.w3school.com.cn/xpath/"&gt;教程&lt;/a&gt;, 就可以掌握够用的知识进行下一步了. &lt;/p&gt;
&lt;p&gt;这里总结一下我觉得会用到的语句(不全, 不过经常用到): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;//book&lt;/code&gt;    选取所有名字叫做book的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bookstore/book&lt;/code&gt; 选取bookstore的子元素中所有叫book的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//title[@lang='eng']&lt;/code&gt; 选取lang属性为"eng"的所有title元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//titile/text()&lt;/code&gt; 选取title元素的文字内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;descendant-or-self::text()&lt;/code&gt;: 选取自己或者所有后代节点的文字内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外还有个在线测试XPath语句的网站, 可以用这个测试XPath语句: &lt;/p&gt;
&lt;p&gt;&lt;a href="http://xpath.online-toolz.com/tools/xpath-editor.php"&gt;http://xpath.online-toolz.com/tools/xpath-editor.php&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="shen-cha-yuan-su"&gt;审查元素&lt;/h3&gt;
&lt;p&gt;再一个就是要用chrome的"审查元素"功能, 用这个功能可以看到想查找的网页内容对应在html文件的位置, 甚至可以直接右键复制想要的元素的XPath......(不过有时候并不是最合理的, 所以刚才XPath也不是白学...)&lt;/p&gt;
&lt;h2 id="iii-scrapy-shell_1"&gt;III. scrapy shell&lt;/h2&gt;
&lt;p&gt;网上的教程一般是从一个&lt;a href="http://doc.scrapy.org/en/latest/intro/tutorial.html"&gt;tutorial&lt;/a&gt;开始的, 介绍了一个小项目, 但是我觉得从scrapy shell开始应该更合理, 有时候甚至没必要建立一个工程, 在这个shell里就可以抓到想要的数据. &lt;/p&gt;
&lt;p&gt;启动的办法很简单: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$scrapy shell 'url'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中&lt;code&gt;url&lt;/code&gt;就写想要爬取的一个网址. &lt;/p&gt;
&lt;p&gt;这个shell简单说来, 就是一个测试爬虫的交互环境, 除了&lt;em&gt;多了一些特殊变量和函数&lt;/em&gt;, 就是一个普通的(i)python shell. &lt;/p&gt;
&lt;p&gt;先说两个scrapy shell多出来的变量: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;response&lt;/code&gt;: 把启动的&lt;code&gt;url&lt;/code&gt;抓取后得到的&lt;code&gt;Response&lt;/code&gt;对象, 比如 &lt;code&gt;response.body&lt;/code&gt;就包含了抓取来的html内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sel&lt;/code&gt;: 用刚刚抓取的内容建立的一个&lt;code&gt;Selector&lt;/code&gt;对象, 简单理解, Selector对象可以让我们执行XPath语句提取想要的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经常的用法就是用&lt;code&gt;response&lt;/code&gt;对象查看爬取的情况(&lt;code&gt;response.status&lt;/code&gt;), 用&lt;code&gt;sel&lt;/code&gt;对象测试XPath的正确:
&lt;code&gt;sel.xpath("xpath_statement").extract()&lt;/code&gt; 会在获取的response.body里用xpath查找并提取内容. &lt;/p&gt;
&lt;p&gt;再说两个scrapy shell添加的函数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fetch(request_or_url)&lt;/code&gt;: 修改请求或者网址, 这样scrapy shell会从新用这个request/url抓取数据, 相应的sel和response等对象也会自动更新. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;view(response)&lt;/code&gt;: 在浏览器里查看刚刚抓取的内容.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里举个例子, 抓取一个的文章标题: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'http://wufazhuce.com/one/vol.921#articulo'&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;......&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="ow"&gt;In&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Out&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="ow"&gt;In&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//*[@id="tab-articulo"]/div/h2/text()'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;ScrapyDeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"sel"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shortcut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deprecated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"response.xpath()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"response.css()"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"response.selector"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;instead&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Out&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u'\n\t\t\t\t\t\t\u78b0\u4e0d\u5f97\u7684\u4eba\t\t\t  \t\t'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="ow"&gt;In&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//*[@id="tab-articulo"]/div/h2/text()'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="n"&gt;碰不得的人&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;scrapy shell的完整文档在: 
&lt;a href="http://doc.scrapy.org/en/latest/topics/shell.html"&gt;http://doc.scrapy.org/en/latest/topics/shell.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="iv-scrapy-project"&gt;IV. scrapy project&lt;/h2&gt;
&lt;p&gt;接下来说建立scrapy工程, 这个按照tutorial走就好了. 
建立工程: 
&lt;code&gt;scrapy startproject my_proj&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;会新建一个my_proj文件夹, 里面的结构是: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ tree &lt;/span&gt;
&lt;span class="code-line"&gt;.&lt;/span&gt;
&lt;span class="code-line"&gt;└── my_proj&lt;/span&gt;
&lt;span class="code-line"&gt;    ├── scrapy.cfg&lt;/span&gt;
&lt;span class="code-line"&gt;    └── my_proj&lt;/span&gt;
&lt;span class="code-line"&gt;        ├── __init__.py&lt;/span&gt;
&lt;span class="code-line"&gt;        ├── items.py&lt;/span&gt;
&lt;span class="code-line"&gt;        ├── pipelines.py&lt;/span&gt;
&lt;span class="code-line"&gt;        ├── settings.py&lt;/span&gt;
&lt;span class="code-line"&gt;        └── spiders&lt;/span&gt;
&lt;span class="code-line"&gt;            └── __init__.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要修改的文件主要有两个: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;items.py&lt;/code&gt; 定义要抓取的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spiders/xxx.py&lt;/code&gt; 定义自己的爬虫&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="1-zi-ding-yi-pa-chong"&gt;1. 自定义爬虫&lt;/h3&gt;
&lt;p&gt;先定义爬虫, 在spiders文件夹里面, 新建一个python文件, 这里定义一个&lt;code&gt;scrapy.spider.Spider&lt;/code&gt;的子类: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OneSpider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"one_spider"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;start_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"http://wufazhuce.com/one/vol.&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;#articulo"&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;924&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;title_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'//*[@id="tab-articulo"]/div/h2/text()'&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里, Spider子类一定需要定义三个东西: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;：　 是爬虫的名字, 一会爬取的时候需要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_urls&lt;/code&gt;:　启动时进行爬取的url列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse()&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;爬虫启动的时候会把每一个start_urls里的网址下载, 生成的&lt;code&gt;Response&lt;/code&gt;对象会传入这个&lt;code&gt;parse()&lt;/code&gt;方法, 这个方法负责解析返回的&lt;code&gt;Response&lt;/code&gt;对象, 提取数据(生成item)以及生成需要进一步处理的URL的 Request 对象等...&lt;/p&gt;
&lt;h3 id="2-bao-cun-zhua-qu-de-xin-xi-dao-item"&gt;2. 保存抓取的信息到item&lt;/h3&gt;
&lt;p&gt;刚才只是做到了抓取需要的信息, 还没有能够保存到文件里, 下面要将抓取的信息做成一个&lt;code&gt;Item&lt;/code&gt;保存.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先定义要保存的信息:&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;修改items.py文件, 里面定义一个&lt;code&gt;scrapy.Item&lt;/code&gt;的子类:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OnearticleItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# define the fields for your item here like:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;vol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个文件很简单, 只是说明一下要抓取的信息, 他们都是&lt;code&gt;scrapy.Field()&lt;/code&gt;, 这个东西类似一个字典.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然后在爬虫里保存item:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了保存抓取的内容, 在parse()方法里, 得到需要的数据以后, 新建一个&lt;code&gt;OnearticleItem&lt;/code&gt;, 把抓到的内容放进这个item里, 然后返回这个item即可. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;nb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\d+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;title_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'//*[@id="tab-articulo"]/div/h2/text()'&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;author_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'//*[@id="tab-articulo"]/div/p/text()'&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;content_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'//div[@class="articulo-contenido"]/descendant-or-self::text()'&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;nb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OnearticleItem&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'vol'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nb&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'author'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3-yun-xing-pa-chong"&gt;3. 运行爬虫&lt;/h3&gt;
&lt;p&gt;以上的文件修改好了以后, 只需&lt;em&gt;在命令行里&lt;/em&gt;启动爬虫即可, 这时候就用到了刚才定义的spider的&lt;code&gt;name&lt;/code&gt;属性:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$scrapy crawl one_spider -o one.csv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;大约几分钟功夫, 九百多篇文章就放到了one.csv文件里~&lt;/p&gt;</summary><category term="python"></category><category term="scrapy"></category></entry><entry><title>运筹的力量: 用线性规划解决Google 2014 HashCode问题</title><link href="https://x-wei.github.io/tech/hashcode2014-solved-by-LP.html" rel="alternate"></link><published>2015-02-02T00:00:00+01:00</published><updated>2015-02-02T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-02-02:tech/hashcode2014-solved-by-LP.html</id><summary type="html">&lt;p&gt;INF580(programmation par contraintes) 大概是在X学到的最有用的一门课, 它让我能够用把运筹学(MAP557)里学到的东西和计算机结合起来: 用电脑的力量解决(大规模)运筹问题. &lt;/p&gt;
&lt;p&gt;这门课的projet是去年巴黎谷歌举行的一个比赛的题目: 最优化谷歌街景拍照小车的路线. 做这个projet的三周里, 我和Manu从一开始信心满满, 到中间一筹莫展, 再到后来柳暗花明, 以及最后乘胜追击终于在今晚得到了近乎完美的解答, 非常精彩, 这里特意一记.&lt;/p&gt;
&lt;h1 id="wen-ti-miao-shu"&gt;问题描述&lt;/h1&gt;
&lt;p&gt;谷歌那次比赛的题目在这里(我们做的是Main Round的题目): &lt;a href="https://sites.google.com/site/hashcode2014/tasks"&gt;https://sites.google.com/site/hashcode2014/tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单来说, 就是已知巴黎的道路信息, 设法用八辆车(每辆车的行驶时间有限)从巴黎谷歌出发, 尽可能多的走遍巴黎的所有街道, 参赛者给出这些车的路线, 他们的分数就是这八辆车走过的街道的长度之和(重复走的街道不算分). &lt;/p&gt;
&lt;p&gt;去年四月份我们也参加了这个比赛, 不过当时纠结于如何设计每辆车的路线, 最后只是用了贪心算法, 再加上一点点的随机, 得到的结果并不好... 当时ENS的人包揽了前三名, 而且比赛后进一步把分数刷到了满分: 他们的路线可以把所有街道都跑遍. &lt;/p&gt;
&lt;p&gt;这学期学了INF580以后, 手里有了&lt;strong&gt;JaCoP&lt;/strong&gt;以及&lt;strong&gt;AMPL&lt;/strong&gt;等"重型武器", 我们经过一番努力也得到了满分, 而且用了几乎最少的时间. 代码放在了: &lt;a href="https://github.com/X-Wei/INF580_HashCode2014"&gt;https://github.com/X-Wei/INF580_HashCode2014&lt;/a&gt; (里面还有个pdf的报告, 比这篇博客里说的精炼).&lt;/p&gt;
&lt;h1 id="i-chu-bu-jian-mo"&gt;I. 初步建模&lt;/h1&gt;
&lt;h2 id="xian-xing-gui-hua-lpmo-xing"&gt;线性规划(LP)模型&lt;/h2&gt;
&lt;p&gt;站在一个更高的角度上考虑这个问题, 从一个线性规划的角度看, 给定一个图&lt;code&gt;G(V,E)&lt;/code&gt;, 目标是最大化走过的街道长度, 如果用对每条街道&lt;code&gt;e&lt;/code&gt;, 定义一个&lt;code&gt;x_e&lt;/code&gt;,: 当一条街被经过的时候使它为1, 否则为0, 那么目标函数就是一个x的线性组合(系数就是对应街道的长度). &lt;/p&gt;
&lt;p&gt;但是如果一条街被经过了大于一次, &lt;code&gt;x_e&lt;/code&gt;也只能是1, 所以再引入一个变量&lt;code&gt;y_e&lt;/code&gt;: 用来表示一条街被经过的&lt;strong&gt;次数&lt;/strong&gt;. 所以&lt;code&gt;x_e&lt;/code&gt;可以看成是&lt;code&gt;y_e&lt;/code&gt;的indicatrice函数: &lt;img alt="" class="img-responsive" src="../images/./运筹的力量_用LP解决Google_2014_Hashcode/equation.png"/&gt;, 这一点可以通过增加线性约束: &lt;code&gt;x_e&amp;lt;=y_e&lt;/code&gt; 即可实现, 因为&lt;code&gt;x_e&lt;/code&gt;的取值范围是{0,1}. &lt;/p&gt;
&lt;p&gt;不过一条街可能从两个方向被经过(&lt;code&gt;G&lt;/code&gt;里面的边是有向的), 如果&lt;code&gt;e&lt;/code&gt;'代表反方向的&lt;code&gt;e&lt;/code&gt;, 那么还应该增加约束:  &lt;code&gt;x_e+x_e'&amp;lt;=1&lt;/code&gt; 就好了. &lt;/p&gt;
&lt;p&gt;接下来&lt;code&gt;y&lt;/code&gt;要满足的就是所有的&lt;code&gt;y&lt;/code&gt;要组成一个&lt;em&gt;路径(path)&lt;/em&gt;, 对于既不是起点又不是终点的一个节点&lt;code&gt;v&lt;/code&gt;, 还是很好写的, 类似flot: &lt;code&gt;sum(进入v的y_e) = sum(从v流出的y_e)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;对于起点&lt;code&gt;v_start&lt;/code&gt;来说, 其实也不难: &lt;code&gt;sum(进入v_start的y_e) = sum(从v-start流出的y_e)+1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;但是对于终点的话, 有个问题是我们不知道车会停在哪里! Manu太聪明了, 对每一个节点&lt;code&gt;v&lt;/code&gt;引入了另一个变量&lt;code&gt;f_v&lt;/code&gt;,取值范围也是{0,1}, 如果在节点&lt;code&gt;v&lt;/code&gt;停下来, 那么&lt;code&gt;f_v&lt;/code&gt;等于1, 否则就是0. 所以上面的约束可以写成: &lt;code&gt;sum(进入v的y) = sum(从v流出的y_e)+f_v&lt;/code&gt;. 另外别忘了只能停在一个节点, 所以再加约束: &lt;code&gt;sum(所有的f_v)=1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;以上的目标函数以及约束, 虽然数目庞大, 但是都是线性的, 所以是一个整数线性规划问题, 写成数学形式就是: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./运筹的力量_用LP解决Google_2014_Hashcode/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;h2 id="cong-solutionde-dao-lu-jing"&gt;从solution得到路径&lt;/h2&gt;
&lt;p&gt;一旦上面那个线性规划问题解决了, 我们得到的将会是那些变量&lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt;,以及&lt;code&gt;f&lt;/code&gt;, 但是需要从中提取一条路径最后才能作为solution!! &lt;/p&gt;
&lt;p&gt;这个问题实际上可以归结为: 给定一个一笔画的曲线(其实就是那些&lt;code&gt;y&lt;/code&gt;: 可以想象把每条边都复制&lt;code&gt;y&lt;/code&gt;次, 得到的就是这么一个曲线了), 找出一个可以将其一笔画出来的路径(这条路径也叫"欧拉路径", 没"汉密尔顿路径"有名). 聪明的Manu很快想出来一个算法(我们叫它"Orsini算法"): 大意是当走到底没有走完的时候, 把那些错过的路径夹在原路径的中间就好了. &lt;/p&gt;
&lt;p&gt;算法描述如下: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i) 从起点开始出发走, 把走过的边涂上颜色(以后不能再走), 只要还可以继续走(还有没有着色的边可走)就一直走下去, 一直到无路可走. (应该会停在&lt;code&gt;f=1&lt;/code&gt;的地方), 得到路径&lt;code&gt;p0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;ii)  如果所有边已经被走过了: &lt;strong&gt;over&lt;/strong&gt;. 如果没有: 找一个没有走过的边与&lt;code&gt;p0&lt;/code&gt;的交叉点: &lt;code&gt;v&lt;/code&gt;(如果找不到的话说明有问题: 后面就遇到这个问题了), 然后执行(iii)&lt;/p&gt;
&lt;p&gt;iii) 从&lt;code&gt;v&lt;/code&gt;出发, 在进行类似(i)的操作得到一条路径(应该是一个环), 然后把&lt;code&gt;p0&lt;/code&gt;从&lt;code&gt;v&lt;/code&gt;那里劈开, 把这个环塞到中间组成新的&lt;code&gt;p0&lt;/code&gt;, 然后再执行(ii).  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样就可以得到对应的路径了. &lt;/p&gt;
&lt;h2 id="yi-kai-shi-de-xiang-fa"&gt;一开始的想法&lt;/h2&gt;
&lt;p&gt;以上的建模是针对一辆车的, 我们一开始的想法是: 对一辆车进行这个操作, 得到结果以后更新一下&lt;code&gt;G&lt;/code&gt;(把那些已经走过的街道的长度设为0, 然后再走下一辆车... 这样跑8次就能得到最优解了. &lt;/p&gt;
&lt;p&gt;一切看起来&lt;em&gt;似乎&lt;/em&gt;都非常完美......&lt;/p&gt;
&lt;h1 id="iiyu-dao-de-wen-ti_1"&gt;II.遇到的问题&lt;/h1&gt;
&lt;h2 id="ji-suan-neng-li-wen-ti"&gt;计算能力问题&lt;/h2&gt;
&lt;p&gt;写好了AMPL的程序以后, 我们遇到的第一个问题是: 这么大的问题, 一般电脑算不出来(曾经用glpk让电脑跑了一夜, 还是没有得到结果). &lt;/p&gt;
&lt;p&gt;后来问老师, 老师说glpk并不是非常高效的求解器, 然后推荐给了我们一个非常给力的网站: &lt;a href="http://neos-server.org/neos/"&gt;NEOS&lt;/a&gt; ! 这个网站可以让人上传AMPL程序, 然后用它们的服务器跑, 而且使用的求解器也是商用的, 比开源求解器快的不是一个数量级(我们发现最快的求解器是&lt;em&gt;Gurobi&lt;/em&gt;, 十分给力). &lt;/p&gt;
&lt;p&gt;这样一来计算的问题就解决了, 但是我们很快发现一个更严重的问题, 是我们的建模里的一个严重缺陷...&lt;/p&gt;
&lt;h2 id="subtourwen-ti"&gt;subtour问题&lt;/h2&gt;
&lt;p&gt;我们兴冲冲的拿NEOS的结果跑Orsini算法的时候, 发现总是报错: 也就是在第二步, 程序无法找到一个和&lt;code&gt;p0&lt;/code&gt;有交叉点的边: &lt;em&gt;也就意味着我们的模型得到的路径并不是只有一个connected component!!! &lt;/em&gt;也就是说, 我们得到的解其实是一条从起点到某个终点的路径, 外加很多和这个路径没有交点的圈圈(subtour)!&lt;/p&gt;
&lt;p&gt;是啊, 这个问题很类似旅行商问题(TSP), 而TSP的困难之一 就是要解决subtour的话需要加入2^n个新的约束.... 2^10000个约束? impossible...&lt;/p&gt;
&lt;h1 id="iii-subtourwen-ti-de-jie-jue_1"&gt;III. subtour问题的"解决"&lt;/h1&gt;
&lt;h2 id="ge-chong-jiu-jie"&gt;各种纠结&lt;/h2&gt;
&lt;p&gt;在一次PC上有一道题目介绍了TSP subtour问题的一种建模方式, "potentiel"建模, 可以防止加入2^n个约束: 为每个节点&lt;code&gt;v&lt;/code&gt;引入新的变量&lt;code&gt;u_v&lt;/code&gt;,&lt;code&gt;u_v&lt;/code&gt;代表了节点&lt;code&gt;v&lt;/code&gt;被访问的顺序, 约束做的非常巧妙, 是这样的: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./运筹的力量_用LP解决Google_2014_Hashcode/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;这样, 当&lt;code&gt;x_ij&lt;/code&gt;是1的时候, 就保证&lt;code&gt;u_j&lt;/code&gt;比&lt;code&gt;u_i&lt;/code&gt;大1, 而当&lt;code&gt;x_ij&lt;/code&gt;是0的时候, 这个约束则非常松弛, 几乎相当于没有. &lt;/p&gt;
&lt;p&gt;不过这个方法套到我们这个projet的话也有问题: 那就是每个节点只能有一个&lt;code&gt;u_v&lt;/code&gt;, 所以每个节点只能最多访问一次.... 不过我们很快想到了办法: 把所有节点复制一个(复制"一层"), 然后每条边的话也进行复制, 同时加上那些连接各层的边. &lt;/p&gt;
&lt;p&gt;举个例子, 原来的一条边是: &lt;code&gt;(u, v)&lt;/code&gt;, 我们复制了一层, 这些新节点叫它们&lt;code&gt;u',v&lt;/code&gt;',... 那么在这个两层的图里, 我们要把原来的这条边变成4条: &lt;code&gt;(u, v)&lt;/code&gt;, &lt;code&gt;(u, v')&lt;/code&gt;, &lt;code&gt;(u', v)&lt;/code&gt; 和 &lt;code&gt;(u', v')&lt;/code&gt;. 这样就可以保证路径可以经过一个点两次了, 如果想要保证可以经过一个点K次, 只要做K层就好了(每条边变成K^2条). &lt;/p&gt;
&lt;p&gt;然后, &lt;code&gt;x&lt;/code&gt;也不需要了, 因为每条边的&lt;code&gt;y&lt;/code&gt;最大就是1. 但是还有一个问题是目标函数, 由于一条边变成了四条, 如果走四遍的话就多算了四次这条边的长度... 有两种解决办法: 一是类似前面的方法, 给每条边指定定一个indicatrice, 这样就不会重复了, 还有一种更简单的办法是, 在四条边里, 只取一条边的长度保持不变, 其他长度都设成0, 算法自然会优先走那条长度不是0的边(这个没有仔细证明, 不过貌似是这样的). 我们采用了第二个办法.... &lt;/p&gt;
&lt;p&gt;就这样废了好大功夫, 写好了两层节点的程序, 送去NEOS一跑.... 超时了(超过8h后NEOS会自动停止求解过程)... 后来我们发现即使是不多加新一层的程序, 也会超时. 那节PC里也说, 这种建模方法实际上计算效率比加入2^N个约束的建模还要差... &lt;/p&gt;
&lt;p&gt;所以总结一下就是: 问题还是没有解决...&lt;/p&gt;
&lt;h2 id="rao-guo-subtourwen-ti"&gt;绕过subtour问题&lt;/h2&gt;
&lt;p&gt;就在一筹莫展之际, Manu提议把搜索的范围缩小: 不用整个巴黎的数据, 只取起点附近的区域, 这样的话, 说不定我们原先的模型得到的结果会少一点connected components... 试了一下, 果然! 虽然没有强制要求路径的连通性, 得到的结果确实(几乎)只有一个联通分支! &lt;/p&gt;
&lt;p&gt;后来就想到了一个很聪明的办法: 用八倍的T作为时间限制, 让一辆车去跑, 由于时间很充分, 我们得到的解应该不太会出现多个联通分支, 然后一旦得到了这个路径(后来我们叫它"big path"), 只需要把它分成8段, 每辆车先从起点(巴黎谷歌)跑到每一段的开头, 然后沿着这条路跑就好了啊!! 虽然从巴黎谷歌跑到每一段的起点会稍微浪费一些时间, 但是这点损失其实微不足道!! 而且也不用跑8次LP这么麻烦了 -- 要是早点想到这个就好了!!&lt;/p&gt;
&lt;p&gt;而且很神奇的是, 把时间变成了8T以后, 我们的Lp模型计算的更快了: 原先要计算30分钟左右, 现在只要差不多3分钟就出结果了!! 这一点没太想明白, 可能是搜索的空间变小了??&lt;/p&gt;
&lt;p&gt;说写就写, 最短路径用Dijkstra算法就能得到了, 不一会就写出了这个把一条big path变成8条small path的程序. 然后我们一举得到了1957596分(离满分还差了两千米左右)!!&lt;/p&gt;
&lt;h1 id="iv-jin-yi-bu-you-hua_1"&gt;IV. 进一步优化&lt;/h1&gt;
&lt;p&gt;优化的话有两个方向: 第一个方向是修改那个程序代码, 使得每次走到big path某段起点的时候可以少走些路, 不过这个方向应该没什么前途: 程序写起来麻烦不说, 可以改进的空间也很有限, 因为big path一共也没有剩多少时间, 所以八辆车是不可能把big path走完的. 第二个方向则是设法优化big path的时间使用, 使得它在得到最长路径的同时使用尽量少的时间. &lt;/p&gt;
&lt;h2 id="yin-ru-shi-jian-zheng-ze-xiang"&gt;引入时间正则项&lt;/h2&gt;
&lt;p&gt;其实8T作为时间来说非常充裕, 但是我们的解里面, big path还是把时间用的差不多了: 因为时间根本没有出现在目标函数里. 所以, 可以把时间也作为目标函数加上去, 不过要注意最优先要优化的还是路径长度, 所以时间项前面要乘以一个非常小的数(比如0.000001), 类似做regularization. &lt;/p&gt;
&lt;p&gt;所以新的目标函数是: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./运筹的力量_用LP解决Google_2014_Hashcode/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;这样一运行, 我们的big path居然剩下了六千多秒的时间!!! 这些时间足够八辆车跑到各段的起点了!! 我们这样, 八辆车走完了big path所有的路程得到的结果离满分只差了7米, 而最后一辆车还有两千多秒没有走! &lt;/p&gt;
&lt;p&gt;检查了一下, 发现有一个7米长的路是唯一剩下没走过的路: 于是只要再让最后一辆车去走一下就好了(因为时间够用), 最终我们的方案走完了整个巴黎:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./运筹的力量_用LP解决Google_2014_Hashcode/pasted_image005.png"/&gt;&lt;/p&gt;
&lt;p&gt;等一下, 这里有点奇怪: 为什么优化得到的结果并不是最优的(没有走完所有的路程)? 我们通过后来手动走那条剩下的路都没有超时, 所以说其实肯定可以在8T的时间走遍所有街道的! 后来查了一下才发现, 原来Gurobi并不是返回最优解, 而是当当前可行解与最优解足够接近的时候就直接停止, 这个参数的名字叫mipgap, 更多参数可以参考这里: &lt;a href="http://www.gurobi.com/documentation/6.0/ampl-gurobi-guide/parameters"&gt;http://www.gurobi.com/documentation/6.0/ampl-gurobi-guide/parameters&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;这也就解释了为什么NEOS得到的解不是最优的, 不过还好, 通过最后手动添加那条没走的边, 还是走完了所有的街道. &lt;/p&gt;
&lt;p&gt;............&lt;/p&gt;
&lt;p&gt;只是作为强迫症的话觉得还是有点......不够完美.&lt;/p&gt;
&lt;h2 id="zhi-jie-you-hua-shi-jian"&gt;直接优化时间&lt;/h2&gt;
&lt;p&gt;今晚, 机智的Manu想到了解决办法: 既然知道所有的街道都会被走遍, 直接不把它看成目标, 而是直接作为约束好了, 然后约束直接改成优化时间! &lt;/p&gt;
&lt;p&gt;要就经过所有街道的约束很简单, 那就是对任何街道&lt;code&gt;e&lt;/code&gt;, 都有: &lt;code&gt;y_e+y_e'&amp;gt;=1&lt;/code&gt;. 另外肯定所有街道都会经过, &lt;code&gt;x&lt;/code&gt;就没有必要存在了. &lt;/p&gt;
&lt;p&gt;LP模型表达为: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./运筹的力量_用LP解决Google_2014_Hashcode/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;p&gt;用这样的模型, 我们的big path 省下了一万两千多秒, 所以我们的最终结果里, 最后的一辆车跑完以后还有9596秒没有用!!&lt;/p&gt;
&lt;p&gt;到这一步, 真的可以算是完美解决这个问题了, 而且强迫症也得救了. &lt;/p&gt;
&lt;p&gt;Yeah!  : )&lt;/p&gt;</summary><category term="LP"></category><category term="algorithm"></category></entry><entry><title>一个简单的python进度条</title><link href="https://x-wei.github.io/tech/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84python%E8%BF%9B%E5%BA%A6%E6%9D%A1.html" rel="alternate"></link><published>2014-08-14T00:00:00+02:00</published><updated>2014-08-14T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2014-08-14:tech/一个简单的python进度条.html</id><summary type="html">&lt;p&gt;在处理大量数的时候, 如果输出类似 "process i out of n files..." 这样的内容来指示进度的话, 虽然可以显示目前的进度(用来安慰等待的心情...)但有个问题是, 如果输出了太多行(比如一万行...), 就看不到前面的内容了... &lt;/p&gt;
&lt;p&gt;所以想找一个命令行下面的进度条, 其实python已经有了(不止一个)进度条的包了, 比如&lt;a href="https://pypi.python.org/pypi/progressbar/2.3-dev"&gt;progressbar&lt;/a&gt;, 但是不知为什么这个包在windows下面没有能做到刷新显示 -- 就是刷新进度的时候, 没有把原先那一行去掉, 而是在下面再输出了一行... (不过后来在linux下面使用这个包是没问题的, 好奇怪...)&lt;/p&gt;
&lt;p&gt;所以想办法自己写了一个, 发现要实现一个简单的进度条还是很简单的, 关键就是使用&lt;code&gt;\r&lt;/code&gt;, 这样会把光标移动到当前行的开头: 这样下次输出的时候就会把原先的内容冲掉了. &lt;/p&gt;
&lt;p&gt;代码只有不到二十行: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleProgressBar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;# `x`: progress in percent ( between 0 and 100)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="si"&gt;%d%%&lt;/span&gt;&lt;span class="s1"&gt; [&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;]'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'.'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用法也很简单, 先新建一个SimpleProgressBar对象, 在要更新进度条的时候, 调用update方法即可...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# An example of usage...&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;pb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SimpleProgressBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再吐槽一下windows, 不仅那个progressbar的包不好使, multiprocessing的包也不好使, 郁闷... &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[08-15补充]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;后来想到, 既然用&lt;code&gt;\r&lt;/code&gt;就可以实现刷新当前行, 还要用毛的进度条啊.... 直接这样写就好了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'processing &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; out od &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; items...'&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意print最后要加逗号 否则就换行了...&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>正则表达式入门简介</title><link href="https://x-wei.github.io/tech/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B.html" rel="alternate"></link><published>2014-08-01T00:00:00+02:00</published><updated>2014-08-01T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2014-08-01:tech/正则表达式入门简介.html</id><summary type="html">&lt;p&gt;以前虽然也用过正则表达式(比如那个饮水思源的&lt;a href="http://x-wei.github.io/%E6%B0%B4%E6%BA%90PPP%E6%9D%BF%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E5%99%A8.html"&gt;PPP版图片下载器&lt;/a&gt;...)但是那时候基本上是网上到处搜 然后把代码拿过来改, 没有系统的学过这个东西. 前一段实习一开始的时候要处理很大量的文本, 从文本里提取出需要的信息, 所以用到了不少的正则表达式, 也好好的学了一下, 现在回来进行一下总结. &lt;/p&gt;
&lt;h2 id="shi-yao-shi-zheng-ze-biao-da-shi"&gt;什么是正则表达式&lt;/h2&gt;
&lt;p&gt;很多时候,我们需要在文本里寻找满足一种&lt;strong&gt;模式&lt;/strong&gt;(&lt;em&gt;pattern&lt;/em&gt;)的一段子字符串(substring), 注意是一种模式而不是某一个具体的字符串. 举个例子, 在一段文本里寻找这里面出现的所有的网址, 那么对应的模式就是: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"以&lt;code&gt;www.&lt;/code&gt;开头, 中间有一些东西(可以是字母也可以是数字等), 最后以 &lt;code&gt;.com/.org/.edu...&lt;/code&gt; 结尾的所有的字符串"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再比如, 要查找文本中出现的电话号码, 电话号码的格式是区号加横线再加号码, 那么模式就应该是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"以3个或4个数字开头, 三个或四个数字之后跟一个横线, 横线后再跟7个或8个数字"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再再比如, 要查找出现的电子邮件地址, 那么模式大概是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"以字母或数字或下划线开头, 之后跟着一个@符号, @符号以后一些用点分隔的字母或数字, 最后应该以.com/.org/.edu等结束"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以想象实际应用中会有描述起来更加罗嗦的模式, 而&lt;strong&gt;正则表达式就是用来描述这种"模式"的语法&lt;/strong&gt;, 使用正则表达式, 可以用很简短的代码表达很复杂的模式. 有人给正则表达式起了个别名叫"&lt;em&gt;字符串模板&lt;/em&gt;", 其实更贴切... &lt;/p&gt;
&lt;p&gt;还有, 后面总是会提到"某个正则表达式&lt;em&gt;exp&lt;/em&gt;匹配(match)了某个字符串&lt;em&gt;str&lt;/em&gt;", 这里说&lt;strong&gt;"匹配"&lt;/strong&gt;的意思其实是&lt;em&gt;"字符串str满足了正则表达式exp描述的那种模式"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;关于正则表达式, &lt;a href="http://deerchao.net/tutorials/regex/regex.htm"&gt;这篇博客&lt;/a&gt;可以说是经典之作, 搜索"正则表达式"这篇文章几乎都是第一个被找到的. 每次我有问题都要再翻出来看一下这篇, 讲的非常好. &lt;/p&gt;
&lt;p&gt;另外强烈推荐一个非常赞的在线测试正则表达式的网站: &lt;a href="http://regex101.com/"&gt;http://regex101.com/&lt;/a&gt; 做得超级棒(具体怎么棒见后文).&lt;/p&gt;
&lt;h2 id="pi-pei-dan-ge-zi-fu"&gt;匹配单个字符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;匹配某个&lt;em&gt;特定的&lt;/em&gt;字符:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只需要写出来就好了, 类似于记事本的查找功能. 
ex. 查找"abc"这个字符串, 正则表达式就是: &lt;code&gt;abc&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配&lt;em&gt;某一类&lt;/em&gt;字符:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如匹配数字, 只需要把候选的字符放进&lt;strong&gt;中括号&lt;/strong&gt;, 而且可以用横线表示一系列的字符:&lt;/p&gt;
&lt;p&gt;ex. 匹配一个数字: &lt;code&gt;[0-9]&lt;/code&gt;
ex. 匹配大写的一个字母: &lt;code&gt;[A-Z]&lt;/code&gt;
ex. 匹配一个数字或字母(大小写都可以): &lt;code&gt;[A-Za-z0-9]&lt;/code&gt;
ex. 匹配一个元音字母(aeiou中的一个): [aeiou]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配某一类以外的字符:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这一类字符前面加上&lt;code&gt;^&lt;/code&gt;, 起到的作用就是取这些字符的补集(&lt;strong&gt;"反义"&lt;/strong&gt;).
ex. 匹配一个不是数字的字符: &lt;code&gt;[^0-9]&lt;/code&gt;
ex. 匹配任意一个不是元音字母的字符: &lt;code&gt;[^aeiou]&lt;/code&gt;
ex. 匹配以b开头, 以d结尾的三个字母长的单词: &lt;code&gt;b[a-z]d&lt;/code&gt;, "bed", "bad"都满足这个条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配正则表达式中用到的的特殊字符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如要匹配'^'这个字符, 由于这个字符是正则表达式里使用的有特殊含义的字符, 需要在前面加&lt;strong&gt;反斜杠转义&lt;/strong&gt;: &lt;code&gt;\^&lt;/code&gt;
类似的特殊字符还有不少:  &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;,......&lt;/p&gt;
&lt;h2 id="pi-pei-ren-yi-zi-fu"&gt;匹配任意字符&lt;/h2&gt;
&lt;p&gt;用的最多的是这一个:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配除了换行符以外的任意字符: &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(在开启"单行模式"的时候, 可以连换行符一起匹配, 见后文.)&lt;/p&gt;
&lt;p&gt;然后, 在反斜杠后面加某些字母的时候有特殊含义(&lt;strong&gt;"元字符"&lt;/strong&gt;): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配字母或数字或下划线或汉字: &lt;code&gt;\w&lt;/code&gt;(用前面的&lt;code&gt;[A-Za-z0-9]&lt;/code&gt;之类的方法也可以做到)&lt;/li&gt;
&lt;li&gt;匹配任意空白字符(空格或TAB): &lt;code&gt;\s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;匹配任意数字: &lt;code&gt;\d&lt;/code&gt;(用前面的&lt;code&gt;[0-9]&lt;/code&gt;也可以做到)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把上面这些反斜杠加小写字母变成反斜杠加&lt;em&gt;大写字母&lt;/em&gt;的话, 成了取补集(类似前面那个&lt;code&gt;^&lt;/code&gt;的作用)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配任意不是字母，数字，下划线，汉字的字符: &lt;code&gt;\W&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;匹配任意不是空白符的字符: &lt;code&gt;\S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;匹配任意非数字的字符: &lt;code&gt;\D&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以如果要匹配, 包括换行符的话, 只需要把&lt;code&gt;\s \S&lt;/code&gt;一起用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配所有字符, 包括换行符: &lt;code&gt;[\s\S]&lt;/code&gt; &lt;a href="http://bbs.csdn.net/topics/300041987"&gt;http://bbs.csdn.net/topics/300041987&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pi-pei-wei-zhi"&gt;匹配位置&lt;/h2&gt;
&lt;p&gt;有时候还要指定某些位置, 比如说: 要匹配网址, 网址要以"www."开头, 所以如果有个网址是: "www.abcwww.com" 的话, 有可能匹配成了中间那个"www.", 那么就有问题了. 所以要指定"www."要在一个字符的开头出现, 而不能是在中间(前面不能有字符). &lt;/p&gt;
&lt;p&gt;这种情况下我们就不是要匹配某个具体的字符串, 而是&lt;strong&gt;匹配一个位置&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配单词的开始或结束(&lt;em&gt;word boundary&lt;/em&gt;): &lt;code&gt;\b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就是我们前面说的情况, 只需要加上\b, 就不会匹配在某个单词中间出现的"www."了.
ex. 匹配网址开头的"www.": &lt;code&gt;\bwww\.&lt;/code&gt; &lt;a href="http://regex101.com/r/oZ6aK1/1"&gt;例子链接&lt;/a&gt; ⇐ 可以把最开始那个&lt;code&gt;\b&lt;/code&gt;去掉, 看看结果有什么区别. &lt;/p&gt;
&lt;p&gt;注意这个&lt;code&gt;\b&lt;/code&gt;可以是单词的开始, 也可以是单词的结束. 还是网址的例子, 如果一个网址是:"www.abcwww.qwert.coming.com"的话, 我们说"匹配以.com"结尾的字符串, 就有可能是匹配到了&lt;strong&gt;qwert.com&lt;/strong&gt;ing, 也会有问题, 所以我们应该在"com"后面加上一个&lt;code&gt;\b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;ex. 匹配网址结束处的".com": &lt;code&gt;\.com\b&lt;/code&gt;&lt;a href="http://regex101.com/r/oZ6aK1/2"&gt;例子链接&lt;/a&gt; ⇐ 同理可以看看去掉&lt;code&gt;\b&lt;/code&gt;以后有什么不同.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;然后这个元字符&lt;code&gt;\b&lt;/code&gt;变成大写以后也是反义, &lt;code&gt;\B&lt;/code&gt;匹配所有不是单词开头或结束的位置.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;匹配整个字符串的开头: &lt;code&gt;^&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意是整个字符串的开头, 而不是指每一行的开头! (但是在"多行模式"时可以代表每一行的开头, 见后面冠以正则表达式选项的讨论)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配字符串的结束: &lt;code&gt;$&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样是指整个字符串的结束. &lt;/p&gt;
&lt;h2 id="zhong-fu-ci-shu"&gt;重复次数&lt;/h2&gt;
&lt;p&gt;这个和前面介绍的匹配字符配合起来(指定要匹配的字符, 再指定字符重复的次数), 就可以完成大部分的工作了.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符重复&lt;em&gt;(exactly)n次&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只需要把数字n放进&lt;strong&gt;大括号&lt;/strong&gt;里就可以了. 
ex. 找一个六位的数字, 那么就是0-9的数字重复6次: &lt;code&gt;[0-9]{6}&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复&lt;em&gt;m到n次&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只需要在大括号里把m和n用逗号进行分隔.
ex. 找一个6到8位的数字: &lt;code&gt;[0-9]{6,8}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是要重复m&lt;strong&gt;或&lt;/strong&gt;n次的话, 我没有找到好的写法, 可以用后面介绍的分支条件实现, 不过比较繁琐...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复&lt;em&gt;大于等于n次&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(重复小于等于n次等价于0到m次)
大括号里面n后面加一个逗号:
ex. 找6位以上的数字: [0-9]{6,}&lt;/p&gt;
&lt;p&gt;平时用到的比较多的是要求&lt;em&gt;"重复大于等于1次"&lt;/em&gt;或者&lt;em&gt;"重复大于等于0次"&lt;/em&gt;, 由于上面这样的写法有的时候比较罗嗦, 所以有了下面的简写:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复&lt;em&gt;大于等于1次&lt;/em&gt;: &lt;code&gt;+&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等价于 &lt;code&gt;{1,}&lt;/code&gt;
ex. &lt;code&gt;goo+gle&lt;/code&gt;, 可以匹配"google", "gooogle", "goooogle"等, 因为第二个o可以出现大于等于1次. 
(当然上面这个例子也可以在前后加上单词边界&lt;code&gt;\b&lt;/code&gt;, 以防止匹配到某个长单词的中间)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复&lt;em&gt;大于等于0次&lt;/em&gt;: &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等价于 &lt;code&gt;{0,}&lt;/code&gt;
ex. 匹配以a开头以t结尾的单词: &lt;code&gt;a[a-z]*t&lt;/code&gt; , "at", "attachment", "act"等都符合条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复一次或0次: &lt;code&gt;?&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等价于 &lt;code&gt;{0,1}&lt;/code&gt;
ex. 匹配"color"或者"colour": &lt;code&gt;colou?r&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="tan-lan-greedymo-shi-lan-duo-lazymo-shi"&gt;贪婪(greedy)模式/懒惰(lazy)模式&lt;/h2&gt;
&lt;p&gt;前面介绍的那些指定重复次数的部分, 由于有时是指定一个重复次数的范围, 而经常匹配到的重复的次数也是一个范围, 所以有"贪婪"和"懒惰"的区别.&lt;/p&gt;
&lt;p&gt;好像上一句话没有说清楚... 举个例子, 要匹配大于六位的数字, 我们的正则表达式是&lt;code&gt;[0-9]{6,}&lt;/code&gt;, 意思是要有六个或更多的重复次数. 那么对于一个字符串: "123456789", 一共有9位, 它既可以看作重复6次(取前6位), 也可以看作重复7次, 8次, 9次... 那么岂不是含义上出现歧义(ambiguous)了??&lt;/p&gt;
&lt;p&gt;而实际上, 我们写的表达式&lt;code&gt;[0-9]{6,}&lt;/code&gt;在这个例子里最终会匹配所有的9位, 这是因为我们写的这个表达式默认上是&lt;strong&gt;贪婪模式&lt;/strong&gt;的, 意思是匹配重复&amp;gt;=6次的的重复, 但是会&lt;em&gt;尽可能多重复&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;与之相反, &lt;strong&gt;懒惰模式&lt;/strong&gt;的意思是&lt;em&gt;尽可能少重复&lt;/em&gt;. &lt;strong&gt;正则表达式默认是贪婪模式&lt;/strong&gt;, 要开启懒惰模式只需要在重复次数的后面加上一个问号"&lt;code&gt;?&lt;/code&gt;".&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+?&lt;/code&gt; : 重复&amp;gt;=1次, 但是尽量少重复&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*?&lt;/code&gt; : 重复&amp;gt;=0次, 但是尽量少重复&lt;/li&gt;
&lt;li&gt;&lt;code&gt;??&lt;/code&gt; : 重复0或1次, 但是尽量少重复&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n,}?&lt;/code&gt;: 重复&amp;gt;=n次, 但是尽量少重复&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{m,n}?&lt;/code&gt;: 重复m到n次, 但是尽量少重复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再插一句, 这个"贪婪模式的开启标志"&lt;code&gt;?&lt;/code&gt; 和"重复次数的符号"&lt;code&gt;?&lt;/code&gt; 虽然都是问号, 但是由于放的位置不一样, 所以不会造成歧义, 因为"重复次数的符号"的问号是出现在"匹配字符"(比如&lt;code&gt;\w&lt;/code&gt;, &lt;code&gt;[0-9]&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;)的后面的, 而"贪婪模式的开启标志"的问号是出现在"重复次数"(如&lt;code&gt;{m,n}&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;)的后面的...&lt;/p&gt;
&lt;h2 id="fen-zhi-tiao-jian-alternative"&gt;分支条件(alternative)&lt;/h2&gt;
&lt;p&gt;意思就是可以匹配两种模式的任意一种, 看例子:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex1. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中国的电话号码有的城市是三位区号加横线加八位号码(比如"021-54749110" ⇐ 这是上海一所学校的保卫处号码), 有的是四位区号加横线加七位或八位号码的(比如"0635-8238080" ⇐ 这是山东一所大学的保卫处, 以及"0531-88881234" ⇐ 这是山东台小么哥的号码==...). 要匹配这样的号码, 如果这样写:
&lt;code&gt;\d{3,4}-\d{7,8}&lt;/code&gt;
(别忘了&lt;code&gt;\d&lt;/code&gt;等价于&lt;code&gt;[0-9]&lt;/code&gt;)
那么其实是不对的, 因为我们不允许出现3位区号后面跟7位号码的情况出现, 所以这里其实是两种模式, 所以我们是要&lt;strong&gt;匹配这两种模式其中的任意一种&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;这种情况下, 只需要把两种情况分别写出来, 中间用&lt;code&gt;|&lt;/code&gt;分割即可:
&lt;code&gt;\d{3}-\d{8}|\d{4}-\d{7,8}&lt;/code&gt;
不过看起来有点乱了... 可以加上小括号这样显得更清楚一些: 
&lt;code&gt;(\d{3}-\d{8})|(\d{4}-\d{7,8})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不过小括号在正则表达式里面除了让正则表达式(稍微)更容易读以外, 还有一个作用是后面提到的"分组"或者"捕获", 这个后面再说...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面说到过怎么匹配重复m&lt;strong&gt;或&lt;/strong&gt;n次的数字, 我没有找到更方便的方法, 只好用分支条件实现了:
&lt;code&gt;\d{m}|\d{n}&lt;/code&gt;
但是要注意, 这个时候会有和前面贪婪/懒惰类似的问题: 如果一串数字有9位长, 我要匹配6位或9位的数字, 那么应该匹配到哪里呢? &lt;/p&gt;
&lt;p&gt;其实这个时候取决于我们是写&lt;code&gt;\d{9}|\d{6}&lt;/code&gt;还是&lt;code&gt;\d{6}|\d{9}&lt;/code&gt;, 正则表达式有类似于编程语言里的"&lt;strong&gt;条件短路&lt;/strong&gt;"(shortcut)性质, 一旦第一个模式满足了, 就不会去寻找竖线后面的第二个模式了...&lt;/p&gt;
&lt;h2 id="xiao-gua-hao-dui-jie-guo-jin-xing-fen-zu-group-bu-huo"&gt;小括号: 对结果进行分组(group), "捕获"&lt;/h2&gt;
&lt;p&gt;先说一句别的, 前面介绍重复次数的部分, 介绍了怎么指定某个类型的&lt;em&gt;单个字符&lt;/em&gt;重复的次数, 要是想寻找某个特定字符组合的重复次数该怎么办呢? 只需要把要重复的部分用小括号括起来, 然后后面指定重复的次数就可以了...&lt;/p&gt;
&lt;p&gt;ex. 寻找好几个"bla"连着的字符串: &lt;code&gt;(bla)+&lt;/code&gt;, 这样"blablabla"之类的字符串就可以被匹配了. &lt;/p&gt;
&lt;p&gt;所以小括号的这种作用类似于小括号在一般编程语言的作用, 就是把一部分内容放在一起. 但是与此同时, 每一个小括号其实还"&lt;strong&gt;捕获&lt;/strong&gt;"了一个"&lt;strong&gt;分组&lt;/strong&gt;"(group). 意思就是在匹配到的字符串里(叫做一个"match"), 我们还可以得到它的一个子字符串. &lt;/p&gt;
&lt;p&gt;还是举电话号码的例子, 前面的方法我们可以得到一个类似"021-54749110"这样的匹配结果, 但是如果我们想&lt;em&gt;把区号和区号后的号码分别保存&lt;/em&gt;的话, 还需要再&lt;em&gt;在程序里&lt;/em&gt;对这个字符串做个处理: 比如把字符串的前三个截取出来保存为区号, 把第五个字符到最后的子字符串截取出来保存为号码... 这样会有问题, 因为我们也可能得到"0531-8881234"这样的结果... 于是我们只能先在得到的字符串里寻找"-", 然后再从"-出现的位置那里把字符串截成两段...... 总之这样的话在程序里还要进行很麻烦的后期处理, 非常不爽(c'est trop lourd!)......&lt;/p&gt;
&lt;p&gt;幸好我们可以使用正则表达式的分组功能, 在得到结果的字符串的同时, 还在不同的分组里放了对应的的子字符串,&lt;em&gt;这样在程序里只要得到每一个分组就可以了&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;而给字符串分组的方法也很简单, 就是简单的&lt;em&gt;给要分组的地方加上小括号括起来就好了&lt;/em&gt;. (当然, 可能你只是为了看得清楚才给表达式加小括号, 但是在正则表达式匹配字符串的时候也会帮你把它捕获到一个分组里.) 所以没加一对小括号就会在结果中增加一个分组, 分组的顺序是按照小括号出现的顺序排列的. &lt;/p&gt;
&lt;p&gt;所以在电话号码这个例子里, 我们可以写:
&lt;code&gt;(\d{3})-(\d{8})|(\d{4})-(\d{7,8})&lt;/code&gt;
&lt;a href="http://regex101.com/r/bS1uP4/3"&gt;例子链接&lt;/a&gt;
我喜欢reg101这个网站的原因就是它可以显示非常丰富的信息. 
在网站的右上角,有关于表达式的解释:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/正则表达式入门简介/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;在右下角会显示捕获到的分组(groups):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/正则表达式入门简介/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;(这里的分组编号可能有点问题, 后两个分组的编号应该是1和2的... 这是由于我们使用了分支条件造成的, 不知是bug还是feature...)&lt;/p&gt;
&lt;p&gt;然后关于怎么在程序里获得正则表达式的分组, 可以去看每一种编程语言的相关文档...... &lt;/p&gt;
&lt;h2 id="zheng-ze-biao-da-shi-xuan-xiang-mo-shi"&gt;正则表达式选项("模式")&lt;/h2&gt;
&lt;p&gt;使用正则表达式的时候, 还可以指定一些"模式"选项, 比如在reg101网站上, 表达式右边有一个选项窗口:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/正则表达式入门简介/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;当开启某些"模式"的时候, 正则表达式的匹配行为稍有不同. 其实上面的截图已经讲的很清楚了, 下面捡比较常用的说一下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局模式global, "g": 就是不止匹配第一个, 而是把所有的匹配都显示出来.&lt;/li&gt;
&lt;li&gt;扩展模式(或者"注释模式")extended, "x": 使用后正则表达式也可以换行, 可以随便加空格(将被忽略), 也可以使用注释(使用&lt;code&gt;#&lt;/code&gt;开始注释)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个是我经常用的选项, 有时候表达式写的很长很乱, 如果不能换行或者加注释的话, 下次看得时候就不知道是怎么回事了...
比如刚才那个电话的例子, 我们在开启了扩展模式以后, 可以写成这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;(\d{3}) - (\d{8}) #region code, -, phone number&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;| #alternative&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;(\d{4}) - (\d{7,8})#region code, -, phone number&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://regex101.com/r/bS1uP4/4"&gt;例子链接&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多行模式multiline, "m": 前面"匹配位置"那一节提到了, 就是改变&lt;code&gt;^&lt;/code&gt;和&lt;code&gt;$&lt;/code&gt;的意思, 不让它们匹配整个字符串的开始和结束, 而是每一行的开始和结束.&lt;/li&gt;
&lt;li&gt;单行模式singleline, "s": 前面也提到了, 作用是让&lt;code&gt;.&lt;/code&gt;也匹配换行符...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(所以可见, &lt;em&gt;单行模式和多行模式根本不是相互排斥的关系&lt;/em&gt;....... 这名字起的不好...)&lt;/p&gt;
&lt;p&gt;关于怎么开启这些选项, 还是要看不同语言的文档... 
比如在python里, 只要在&lt;code&gt;re.compile()&lt;/code&gt;函数使用加入&lt;code&gt;re.X&lt;/code&gt;等参数, 见&lt;a href="https://docs.python.org/2/library/re.html#module-contents"&gt;文档&lt;/a&gt;...&lt;/p&gt;
&lt;h2 id="qi-ta-nei-rong"&gt;其他内容&lt;/h2&gt;
&lt;p&gt;这里我只写了我用到的一些东西, 关于正则表达式还有很多没有提到的内容(所谓的"高级议题"?), 比如"零宽断言"以及"平衡组"等内容, 这些都在deerchao的那篇&lt;a href="http://deerchao.net/tutorials/regex/regex.htm"&gt;经典博客&lt;/a&gt;里提到了...&lt;/p&gt;
&lt;h2 id="shi-ji-li-zi"&gt;实际例子&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;例子1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要分析很长的文本, 文本的一部分包含了一趟航班的信息, 比如出发和到达的时间, 出发和到达的机场, 以及航班号等... 这些信息中间都包含在一长串字符中间. &lt;/p&gt;
&lt;p&gt;我们用正则表达式处理, 并且把不同的信息放在不同的分组里, 这样就方便了程序的处理. &lt;a href="http://regex101.com/r/bS1uP4/5"&gt;这里&lt;/a&gt;是我写的正则表达式.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例子2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再举个例子, 我想要现在&lt;a href="http://www.cs.waikato.ac.nz/ml/weka/mooc/dataminingwithweka/"&gt;这个页面&lt;/a&gt;的所有的东西, 可是用鼠标一个一个点击实在是太麻烦了, 所以可以写一个程序把这些链接都提取出来, 然后自动进行下载. &lt;/p&gt;
&lt;p&gt;所以需要分析这个页面的html文件, 右键 → 显示网页源代码就可以看到了, 虽然我不懂html的语法, 但是可以发现, 下载的链接都是这样的片段:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="download_link" href="https://drive.google.com/uc?export=download&amp;amp;id=0B-f7ZbfsS9-xUjhLaURQbWsxbjg" target="_blank"&gt;en&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;就是说在&lt;code&gt;class="download_link"&lt;/code&gt;之后, &lt;code&gt;href=&lt;/code&gt;后面的用引号引起来的内容就是我们想要的下载链接了, 于是可以很快用正则表达式来提取它, 我写的表达式见&lt;a href="http://regex101.com/r/hN1lH1/1"&gt;这里&lt;/a&gt;.&lt;/p&gt;</summary><category term="regex"></category></entry><entry><title>IPython上手学习笔记</title><link href="https://x-wei.github.io/tech/IPython%E4%B8%8A%E6%89%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><published>2014-07-22T00:00:00+02:00</published><updated>2014-07-22T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2014-07-22:tech/IPython上手学习笔记.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.packtpub.com/learning-ipython-for-interactive-computing-and-data-visualization/book"&gt;Learning IPython for Interactive Computing and Data Visualization&lt;/a&gt;这本书的前两章的笔记, 这本书还被放在了IPython官网上, 虽然只有一百页多一点点, 但是讲的内容却很丰富, 介绍了IPython, numpy, pandas以及并行计算等方面. &lt;/p&gt;
&lt;p&gt;(在开始系统学IPython之前简单使用过IPython, 那时候我还是更喜欢bpython的代码提示功能...)&lt;/p&gt;
&lt;h1 id="ch1-10-ipython-essentials"&gt;ch1: 10 IPython essentials&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在任何变量后面加问号&lt;code&gt;?&lt;/code&gt;或者双问号&lt;code&gt;??&lt;/code&gt;, 将会输出详细的信息(按&lt;code&gt;q&lt;/code&gt;退出), &lt;code&gt;??&lt;/code&gt;的信息更加详细些&lt;/li&gt;
&lt;li&gt;Tab Completion: 没啥好说的 没有bpython做的好 也凑合吧...&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_, __, ___&lt;/code&gt;保存最近三次的输出;  &lt;code&gt;_i, __i, ___i&lt;/code&gt;保存最近三次的输入(作为字符串保存)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="magic-commands"&gt;magic commands&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在IPython里面可以使用一些标准unix命令, 比如&lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;pwd,ls&lt;/code&gt;等... &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个太好了 否则还要&lt;code&gt;import os&lt;/code&gt;, 然后再什么&lt;code&gt;os.chdir('...')&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其实这些unix命令是IPython的&lt;strong&gt;magic commands&lt;/strong&gt;, 这些magic commands一般用&lt;code&gt;%&lt;/code&gt;作为前缀.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是由于默认IPython开启了&lt;strong&gt;automagic system&lt;/strong&gt;, 上面那些命令可以不用加前缀了(或者使用Tab自动给加上前缀)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%run&lt;/code&gt; 命令, 运行一个.py脚本, 但是好处是, 与运行完了以后这个.py文件里的变量都可以在Ipython里继续访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%timeit&lt;/code&gt; 命令, 可以用来做基准测试(&lt;em&gt;benchmarking&lt;/em&gt;), 测试一个命令(或者一个函数)的运行时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%timeit&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;56.5&lt;/span&gt; &lt;span class="err"&gt;µ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;%timeit&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;51.7&lt;/span&gt; &lt;span class="err"&gt;µ&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%debug&lt;/code&gt; 命令: 当有exception的时候, 在console里输入&lt;code&gt;%debug&lt;/code&gt;即可打开debugger. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在debugger里, 输入&lt;code&gt;u,d&lt;/code&gt;(up, down)查看stack, 输入&lt;code&gt;q&lt;/code&gt;退出debugger&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%debug&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="n"&gt;c374156862&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="n"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;3&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;***&lt;/span&gt; &lt;span class="n"&gt;Oldest&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;***&lt;/span&gt; &lt;span class="n"&gt;Newest&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用%pdb开启自动pdb模式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;%pdb&lt;br/&gt;
Automatic pdb calling has been turned ON&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;%pylab&lt;/code&gt; 命令, 大杀器, 看一下都import了什么:&lt;/p&gt;
&lt;p&gt;%pylab makes the following imports::
    import numpy
    import matplotlib
    from matplotlib import pylab, mlab, pyplot
    np = numpy
    plt = pyplot
    from IPython.display import display
    from IPython.core.pylabtools import figsize, getfigs
    from pylab import *
    from numpy import *&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;画图的时候可以不用非要加&lt;code&gt;plt.&lt;/code&gt;前缀了, 直接&lt;code&gt;plot()&lt;/code&gt;即可. 图像化出来的时候, 画图窗口并没有block, 可以动态(&lt;em&gt;interactively&lt;/em&gt;)画图.&lt;/p&gt;
&lt;p&gt;另外, qtconsole和notebook一样, 指定了&lt;code&gt;inline&lt;/code&gt;选项以后可以直接在窗口里画图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/IPython上手学习笔记/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;p&gt;后来发现inline的图片貌似不能放大看, 所以有时候还是单独一个窗口比较好, 换到非inline模式只需要再输入以下%pylab, 加上选项qt:
&lt;code&gt;%pylab qt&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="ipython-notebook"&gt;IPython Notebook&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;(重头戏)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个可以在浏览器里(!!)使用IPython, 并且可以使用多行编辑后再一并执行. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The Notebook brings the functionality of IPython into the browser for multiline textediting features, interactive session reproducibility, and so on.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在shell/cmd窗口里启动ipython的时候加上notebook:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ipython notebook&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;看到浏览器打开了, 很神奇: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/IPython上手学习笔记/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;新建一个notebook, 用用看: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/IPython上手学习笔记/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;使用的过程中渐渐理解了为什么书里说可以用来做"&lt;em&gt;multiline textediting features, interactive session reproducibility&lt;/em&gt;"... 因为这不只是个编程的东西, 还可以作为一个笔记本 — 而且是一个交互式的笔记本! &lt;/p&gt;
&lt;p&gt;(&lt;em&gt;注: 更多关于notebook的介绍在下面第二章的内容里.&lt;/em&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码,或者段落, 按照cell(格子)进行组织, 一个cell里面的内容可以是code, 但是也同样可以是markdown的段落, 或者是一个标题(heading).&lt;/li&gt;
&lt;li&gt;在一个代码的cell里, 写入多行代码, 就像在编辑器里写python程序一样, 按回车只会换行, 不会运行程序.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写了一段程序代码以后, 按&lt;code&gt;ctrl+Enter&lt;/code&gt;运行程序, 运行结果也是一个作为cell. 
(&lt;strong&gt;注&lt;/strong&gt;: 在qtconsole里面相反, 如果要输入多行程序的话, 按&lt;code&gt;Ctrl+Enter&lt;/code&gt;换行(按一一次ctrl+enter即可进入多行编辑模式), 写了几行代码以后要运行的话, 就按两次回车, 或者按&lt;code&gt;Shift+Enter&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;...还有好多快捷键, 按Esc以后再按h就可以看到... 这个还分编辑模式和命令模式呢... 真不能小看了IPython了!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/IPython上手学习笔记/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;h2 id="customizing-ipython"&gt;customizing IPython&lt;/h2&gt;
&lt;p&gt;保存自己的IPython配置文件, 只需要在shell/cmd里输入ipython profile create&lt;code&gt;,&lt;/code&gt; 配置文件存储在 &lt;code&gt;~.ipython&lt;/code&gt; 或者 &lt;code&gt;~/.config/ipython&lt;/code&gt;目录里.&lt;/p&gt;
&lt;h1 id="ch2-interavtive-work-with-ipython_1"&gt;ch2: Interavtive Work with IPython&lt;/h1&gt;
&lt;p&gt;IPython可以实现&lt;strong&gt;shell(OS)和python的交互&lt;/strong&gt;. 这样做一些unix shell的操作的时候可以不必退出console了.&lt;/p&gt;
&lt;h2 id="navigating-the-file-system"&gt;navigating the file system&lt;/h2&gt;
&lt;p&gt;例子: 完成下载压缩包, 解压缩, 以及打开解压后的文件这些操作...&lt;/p&gt;
&lt;p&gt;在py变量前面加入$, 可以把这个变量共享给OS或者magic command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;%mkdir&lt;/span&gt; &lt;span class="n"&gt;$folder&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就在当前目录下建立一个'data'文件夹 — 这可比py的命令好记多了啊... &lt;code&gt;%mkdir&lt;/code&gt;的原理其实是给了shell命令一个别名(&lt;code&gt;alias&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;然后, &lt;code&gt;%bookmark&lt;/code&gt;可以把当前的目录加入收藏夹 下次cd的时候方便直接跳到这里来:&lt;/p&gt;
&lt;p&gt;ex.
&lt;code&gt;%bookmark bm&lt;/code&gt;
那么以后可以直接用 &lt;code&gt;cd bm&lt;/code&gt; 跳到这个目录下. &lt;code&gt;%bookmark -l&lt;/code&gt; 可以列出收藏夹的目录内容.&lt;/p&gt;
&lt;p&gt;然后发现原来IPython连文件名都是可以提示的啊!... &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;with open('0&amp;lt;TAB&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;0.circles 0.edges&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="accessing-system-shell-with-ipython"&gt;Accessing system shell with IPython&lt;/h2&gt;
&lt;p&gt;在IPython里调用系统的命令, 不用再使用&lt;code&gt;sys.exec('...')&lt;/code&gt;之类冗长的方式了, 只需要在系统的命令前面加上一个感叹号&lt;code&gt;!&lt;/code&gt;即可...&lt;/p&gt;
&lt;p&gt;shell返回的结果可以作为一个string的列表保存在一个python variable里.&lt;/p&gt;
&lt;p&gt;ex. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;In [2]: files = !ls -1 -S | grep edges&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;In [3]: files&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;Out[3]: ['1912.edges',&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    '107.edges',&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    [...]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    '3980.edges']&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(当然 上面这一行只能在unix系统下运行, 因为Windows的cmd没有ls 和 grep命令)&lt;/p&gt;
&lt;p&gt;还可以把一条比较长的命令作为alias保存起来, 用&lt;code&gt;%alias&lt;/code&gt;命令... (这个应该一般用不到)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%alias largest ls -1sSh | grep %s&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="the-extended-python-console"&gt;The Extended Python Console&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%history&lt;/code&gt; 或者 &lt;code&gt;%hist&lt;/code&gt; , 显示之前的记录, 有一些参数可用...&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%store&lt;/code&gt; 把python变量的内容保存下来, 以后的session可以用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%paste&lt;/code&gt; 导入并执行剪贴板里面的内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%run&lt;/code&gt; 之前讲过了, 运行py文件, 运行后py文件里的变量可以在console里访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%edit&lt;/code&gt; 打开系统的文件编辑器, 并且在关闭这个编辑器时自动运行程序&lt;/li&gt;
&lt;li&gt;介绍了一个包 networkx, 可以用来分析复杂网络(graph)的....&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="debug"&gt;debug&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;debug加入断点: &lt;code&gt;%run -d -b29 script.py&lt;/code&gt; 运行script.py 并且在29行的时候暂停, 当输入&lt;code&gt;c&lt;/code&gt;的时候再继续运行.&lt;/li&gt;
&lt;li&gt;一些pdb(debugging环境)里常用的命令:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;u/d&lt;/code&gt; for going up/down into the call stack&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; to step into the next statement&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; to continue execution until the next line in the current function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; to continue execution until the current function returns&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; to continue execution until the next breakpoint or exception&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; to evaluate and print any expression&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; to obtain the arguments of the current functions&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;!&lt;/code&gt; prefix to execute any Python command within the debugger&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="benchmarkingji-zhun-ce-shi"&gt;benchmarking("基准测试")&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%timeit fun()&lt;/code&gt; 测试一个&lt;strong&gt;函数&lt;/strong&gt;的执行速度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%run -t&lt;/code&gt;和&lt;code&gt;%timeit&lt;/code&gt;效果类似, 作用是测试一个py脚本&lt;strong&gt;文件&lt;/strong&gt;的执行速度&lt;/li&gt;
&lt;li&gt;更精细的运行时间测试, 可以用&lt;strong&gt;profile模块&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The profiler outputs details about calls of every Python function used directly or indirectly in this script.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@@...好高级!!! 这样的话就更容易发现程序运行的瓶颈在哪里了!
方法是使用 &lt;code&gt;%run -p&lt;/code&gt; 或者 &lt;code&gt;%prun&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="using-the-ipython-notebook_1"&gt;Using the IPython notebook&lt;/h2&gt;
&lt;p&gt;这个notebook的功能实在是很NB... 不仅可以加入代码/markdown段落, 还可以加入图片和视频... notebook的格式为.ipybn文件, 用JSON存储数据.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;输入 &lt;code&gt;ipython notebook&lt;/code&gt;(或者在ipython里输入&lt;code&gt;!ipython notebook&lt;/code&gt;)以后, 会在8888端口建立一个web server, 访问 &lt;a href="http://localhost:8888/"&gt;http://localhost:8888/&lt;/a&gt; 就可以看到上面的那个截图, 或者称之为&lt;strong&gt;notebook dashboard.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;cell magics&lt;/strong&gt;的作用域是整个cell(多行), 而magic command的作用域是一行, cell magics的前缀是两个百分号&lt;code&gt;%%&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从一个py文件直接建立一个notebook, 只需要把文件拖入dashboard即可, 然后notebook也可以保存为文件. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑了Markdown以后, 还是&lt;code&gt;Ctrl+Enter/Shift+Enter&lt;/code&gt; , 即可成为格式化的文本, 再双击就可以编辑!!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;让plot的图片直接嵌入在notebook里面: 使用&lt;code&gt;ipython notebook --pylab inline&lt;/code&gt;, 或者在notebook里面输入&lt;code&gt;%pylab inline&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/IPython上手学习笔记/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;h3 id="notebookde-yi-xie-kuai-jie-jian"&gt;notebook的一些快捷键&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Esc从编辑模式(edit mode)退出到命令模式(command mode)&lt;/li&gt;
&lt;li&gt;Enter从命令模式到编辑模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(编辑模式下)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ctrl+Enter: 运行程序/markdown代码&lt;/li&gt;
&lt;li&gt;shift+Enter: 运行程序, 并自动跳到下一个cell&lt;/li&gt;
&lt;li&gt;alt+Enter: 运行程序, 并自动在后面新建一个cell在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(命令模式下)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c: 复制一个cell&lt;/li&gt;
&lt;li&gt;x: 剪切一个cell&lt;/li&gt;
&lt;li&gt;v: 粘贴cell&lt;/li&gt;
&lt;li&gt;a: 在当前cell上面(&lt;strong&gt;a&lt;/strong&gt;bove)新建一个cell&lt;/li&gt;
&lt;li&gt;b: 在当前cell下面(&lt;strong&gt;b&lt;/strong&gt;elow)新建一个cell&lt;/li&gt;
&lt;li&gt;m: 让当前cell变成一个markdown的cell&lt;/li&gt;
&lt;li&gt;y: 让当前cell变成code的cell&lt;/li&gt;
&lt;li&gt;1,2,3...: n级标题&lt;/li&gt;
&lt;li&gt;j,k: 上下移动选中的cell, vim风格..&lt;/li&gt;
&lt;li&gt;dd(d按两下): 删除一个cell(vim 风格...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;......爽到爆!!&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>pandas学习笔记</title><link href="https://x-wei.github.io/tech/pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><published>2014-07-22T00:00:00+02:00</published><updated>2014-07-22T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2014-07-22:tech/pandas学习笔记.html</id><summary type="html">&lt;p&gt;首先, 导入pandas
&lt;code&gt;import pandas as pd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以及开启pylab: IPython里输入&lt;code&gt;%pylab&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.bearrelroll.com/2013/05/python-pandas-tutorial/"&gt;http://www.bearrelroll.com/2013/05/python-pandas-tutorial/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="ji-ben-cao-zuo"&gt;基本操作&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://cloga.info/python/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/2013/09/17/pandas_intro/"&gt;http://cloga.info/python/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/2013/09/17/pandas_intro/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pandas和numpy的关系&lt;/strong&gt;: pandas是建立在numpy上面的, pandas可以处理不同类型的数据集合(heterogeneous data set: &lt;strong&gt;DataFrame&lt;/strong&gt;), numpy处理的是相同类型的数据集合(homogeneous data set: &lt;strong&gt;ndarray&lt;/strong&gt;)&lt;/p&gt;
&lt;h2 id="du-xie-csvwen-jian"&gt;读写csv文件&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;read_csv()&lt;/strong&gt;
&lt;code&gt;df=pd.read_csv('data.csv')&lt;/code&gt;
说一下数据类型的问题: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回类型数据帧(&lt;strong&gt;DataFrame&lt;/strong&gt;): &lt;code&gt;type(df) = pandas.core.frame.DataFrame&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df.columns&lt;/code&gt;包含了所有列的标签(&lt;em&gt;字段名&lt;/em&gt;)
&lt;code&gt;df.index&lt;/code&gt;包含了所有行的标签(可能没有的话, 就是一系列递增的数字了)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;但是其中的每一列是&lt;strong&gt;Series&lt;/strong&gt;类型: &lt;code&gt;type(df.dep)=pandas.core.series.Series&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后可以将Series转换为numpy的ndarray: &lt;code&gt;array(df.dep)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;to_csv()&lt;/strong&gt;
没啥好说的..
&lt;code&gt;df.to_csv('csvfilename')&lt;/code&gt;
要是不希望把index也作为一列写进csv文件的话, 就选择参数&lt;code&gt;index=False&lt;/code&gt;
&lt;a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html?highlight=to_csv#pandas.DataFrame.to_csv"&gt;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html?highlight=to_csv#pandas.DataFrame.to_csv&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="indexing-slicing"&gt;indexing &amp;amp; slicing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;选择一列: &lt;code&gt;df['dep']&lt;/code&gt; 或者&lt;code&gt;df.dep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择前3行(前三条记录): &lt;code&gt;df[:2]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用标签选取数据&lt;/strong&gt;: &lt;code&gt;df.loc[行标签, 列标签]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择前两列:
&lt;code&gt;df.loc[:,('one','two')]&lt;/code&gt;
或者用
&lt;code&gt;df.loc[:,df.columns[:2]]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用位置选取数据&lt;/strong&gt;: &lt;code&gt;df.iloc[行位置, 列位置]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df.iloc[:,:2]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自动判断的切片&lt;/strong&gt;: &lt;code&gt;df.ix[行位置或行标签, 列位置或列标签]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以前面俩基本用不着了...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;df.ix[:,('one','two')]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;df.ix[:,:2]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;boolean indexing&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. 选择dep是'PAR'的记录
&lt;code&gt;hk[hk.dep == 'PAR'].head()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ex. 多个条件, 比如dep是'PAR', dst是'BHM':
&lt;code&gt;hk[(hk.dep == 'PAR')&amp;amp;(hk.dst=='BHM')].head()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: 中括号里面的表达式, 每一个条件需要括号括起来, 中间的&lt;code&gt;&amp;amp;&lt;/code&gt;不能用&lt;code&gt;and&lt;/code&gt;, 等于号&lt;code&gt;==&lt;/code&gt;不能用&lt;code&gt;is&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;文档里的一个表格:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设置小数精度&lt;/strong&gt;
&lt;a href="http://pandas.pydata.org/pandas-docs/stable/options.html?highlight=precision"&gt;http://pandas.pydata.org/pandas-docs/stable/options.html?highlight=precision&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置小数点后六位的精度: 
&lt;code&gt;pd.set_option('precision',7)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意六位精度的话要设置precision为7=6+1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调整某一列的次序&lt;/strong&gt;
&lt;code&gt;df.reindex(columns=pd.Index(['x', 'y']).append(df.columns - ['x', 'y']))&lt;/code&gt;
&lt;a href="http://stackoverflow.com/questions/12329853/how-to-rearrange-pandas-column-sequence"&gt;http://stackoverflow.com/questions/12329853/how-to-rearrange-pandas-column-sequence&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;随机抽取几行&lt;/strong&gt;
    rand_idx = random.choice(df.index,9, replace=False) #要设置replace = False以防止重复!
    df.ix[rand_idx]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两个df相merge&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个df的column都一样, index不重复(增加行):&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pd.concat([df1,df2])&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个df的index一样, column不同(增加列)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pd.concat([df1,df2], axis = 1)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="addingdeleting-columns"&gt;adding/deleting columns&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://pandas.pydata.org/pandas-docs/stable/dsintro.html#column-selection-addition-deletion"&gt;http://pandas.pydata.org/pandas-docs/stable/dsintro.html#column-selection-addition-deletion&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建一列, 加到最后面:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df['new_col']=xxx&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;想要把一列插进中间某一处, 使用df.insert:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df.insert(1, 'bar', df['one'])&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除一列, 只需用 &lt;code&gt;del&lt;/code&gt; 关键字:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;del df['one_col']&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个Series组成一个dataframe:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pd.concat([s1, s2], axis=1)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重命名一列:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df=df.rename(columns = {'old_name':'new_name'})&lt;/code&gt;
或者:
&lt;code&gt;df.rename(columns = {'old_name':'new_name'}, inplace=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/20868394/changing-a-specific-column-name-in-pandas-dataframe"&gt;http://stackoverflow.com/questions/20868394/changing-a-specific-column-name-in-pandas-dataframe&lt;/a&gt;
&lt;a href="http://www.bearrelroll.com/2013/05/python-pandas-tutorial/"&gt;http://www.bearrelroll.com/2013/05/python-pandas-tutorial/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="apply-map-agg"&gt;apply() &amp;amp; map() &amp;amp; agg()&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;apply()&lt;/strong&gt;
对dataframe的内容进行批量处理, 这样要比循环来得快. 
&lt;code&gt;df.apply(func, axis=0,...)&lt;/code&gt;
&lt;code&gt;func&lt;/code&gt;: 定义的函数
&lt;code&gt;axis&lt;/code&gt;: =0的时候对列操作, =1的时候对行操作
ex.
&lt;code&gt;df.apply(self, func, axis=0,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;map()&lt;/strong&gt;
和python内建的没啥区别
&lt;code&gt;df['one'].map(sqrt)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;groupby()&lt;/strong&gt;
按照某一列(&lt;em&gt;字段&lt;/em&gt;)分组, 得到一个&lt;code&gt;DataFrameGroupBy&lt;/code&gt;对象. 之后再对这个对象进行分组操作, 如:
    df.groupby(['A','B']).sum()##按照A、B两列的值分组求和
    groups = df.groupby('A')#按照A列的值分组求和
    groups['B'].sum()##按照A列的值分组求B组和
    groups['B'].count()##按照A列的值分组B组计数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;agg()&lt;/strong&gt;
对分组的结果再分别进行不同的操作... 参数是一个dict, 把每个字段映射到一个函数上来...... 说的不清楚, 直接看例子: 
    In [82]: df
    Out[82]: 
           one  two  three
    index               &lt;br/&gt;
    a        1    1      2
    b        2    2      4
    c        3    3      6
    d      NaN    4    NaN&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'three'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="n"&gt;two&lt;/span&gt;     &lt;span class="n"&gt;three&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;one&lt;/span&gt;               &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;414214&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;2&lt;/span&gt;      &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;000000&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;3&lt;/span&gt;      &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;449490&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;甚至还可以对每一列进行多个处理操作:
    In [100]: g.agg({'two': [sum],'three': [sqrt,exp]})
    Out[100]: 
         two     three          &lt;br/&gt;
         sum      sqrt         exp
    one                         &lt;br/&gt;
    1      1  1.414214    7.389056
    2      2  2.000000   54.598150
    3      3  2.449490  403.428793&lt;/p&gt;
&lt;p&gt;具体见: &lt;a href="http://stackoverflow.com/questions/14529838/apply-multiple-functions-to-multiple-groupby-columns"&gt;http://stackoverflow.com/questions/14529838/apply-multiple-functions-to-multiple-groupby-columns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;统计出现频率&lt;/strong&gt;
方法1: 
&lt;code&gt;_hkhist=hk.groupby(groups).count().ix[:,0]#count of groupes&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;方法2:
&lt;code&gt;hk.groupby('dep').size()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;方法3:
(只适用于一列的情况)
&lt;code&gt;hk.dep.value_counts()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;把一列index转为column(不再作为index使用)&lt;/strong&gt;
&lt;a href="http://stackoverflow.com/questions/20461165/how-to-convert-pandas-index-in-a-dataframe-to-a-column"&gt;http://stackoverflow.com/questions/20461165/how-to-convert-pandas-index-in-a-dataframe-to-a-column&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比如, 原来的dataframe是三层index的, column只有一列(名字叫做'0'):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;df.reset_index(level=2,inplace=True)&lt;/code&gt;
这样就可以把第三层的内容作为使用, 而不是作为index, 现在column有两列了, 再给两列命名一下:
&lt;code&gt;hist_hub.columns = ['hub','occurrence']&lt;/code&gt;
就得到了:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;关于level这个参数:
level : int, str, tuple, or list, default None
Only remove the given levels from the index. Removes all levels by default&lt;/p&gt;
&lt;h2 id="plotting"&gt;Plotting&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://cloga.info/python/2014/02/23/Plotting_with_Pandas/"&gt;http://cloga.info/python/2014/02/23/Plotting_with_Pandas/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;统计出现次数, 画柱状图:&lt;/strong&gt;
    g=hk.groupby('dep')
    dd=g['dst'].count()
    dd.plot(kind='bar')&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pasted_image.png"/&gt;
或者用pandas提供的:
&lt;a href="http://pandas.pydata.org/pandas-docs/stable/basics.html#value-counts-histogramming-mode"&gt;http://pandas.pydata.org/pandas-docs/stable/basics.html#value-counts-histogramming-mode&lt;/a&gt;
nb=hk['#vol_hacker']
hist=nb.value_counts()*100.0/len(hk)
hist=hist.sort_index()
hist.plot(kind='bar')&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;积累分布曲线&lt;/strong&gt;
&lt;a href="http://stackoverflow.com/questions/6326360/python-matplotlib-probability-plot-for-several-data-set"&gt;http://stackoverflow.com/questions/6326360/python-matplotlib-probability-plot-for-several-data-set&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;counts, start, dx, _ = scipy.stats.cumfreq(data, numbins=20)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;x = np.arange(counts.size) * dx + start&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;plt.plot(x, counts, 'ro')&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者用pandas提供的东西也能做吧:
&lt;a href="http://pandas.pydata.org/pandas-docs/stable/basics.html#discretization-and-quantiling"&gt;http://pandas.pydata.org/pandas-docs/stable/basics.html#discretization-and-quantiling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hist2d&lt;/strong&gt;
用pcolormesh
&lt;a href="http://www.physicsforums.com/showthread.php?t=653864"&gt;http://www.physicsforums.com/showthread.php?t=653864&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;貌似要转置!!
&lt;a href="http://stackoverflow.com/questions/24791614/numpy-pcolormesh-typeerror-dimensions-of-c-are-incompatible-with-x-and-or-y"&gt;http://stackoverflow.com/questions/24791614/numpy-pcolormesh-typeerror-dimensions-of-c-are-incompatible-with-x-and-or-y&lt;/a&gt;&lt;/p&gt;</summary><category term="pandas"></category><category term="python"></category></entry><entry><title>python pickle 的一个小问题</title><link href="https://x-wei.github.io/tech/python%20pickle%20%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98.html" rel="alternate"></link><published>2014-07-15T00:00:00+02:00</published><updated>2014-07-15T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2014-07-15:tech/python pickle 的一个小问题.html</id><summary type="html">&lt;p&gt;python的pickle/unpickle机制可以非常方便的保存一些计算的中间结果, 这一点java虽然也可以做到, 但是java里面的包的名字实在是长的让人记不住...&lt;/p&gt;
&lt;p&gt;不过今天在使用pickle的时候遇到了一个很奇怪的问题. &lt;/p&gt;
&lt;p&gt;是这样的, 原本写了一个程序&lt;code&gt;main.py&lt;/code&gt;, 这个程序里进行了一些计算并且pickle下了这些内容, 后来我觉得一个程序main.py写这么多实在太长了, 于是就把那些辅助函数以及class的定义通通放进了一个&lt;code&gt;util.py&lt;/code&gt;文件里. 并且在main.py的第一行写上: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;from util import *&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;按理说这应该没有问题, 和一个main文件时运行的效果相同的, 但是当我运行的时候却显示util.py里面这行unpickle的语句有错误:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;airport_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'airport_info.dict'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'rb'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'module'&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;'Airport'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中&lt;code&gt;Airport&lt;/code&gt;是我定义的一个类, 本来在main.py里面, 后来被我移动到了util.py里面...&lt;/p&gt;
&lt;p&gt;感觉很奇怪, 于是去&lt;a href="https://bbs.sjtu.edu.cn/frame2.html"&gt;水源&lt;/a&gt;求助, 果然fcfarseer学长就很快给了&lt;a href="https://bbs.sjtu.edu.cn/bbscon,board,Script,file,M.1405431916.A.html"&gt;回复&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在pickle一個對象的時候，pickle會記住這個對象的class是定義在哪個python
源文件裏，然後再unpickle的時候，pickle會自動import那個源文件以獲得class的定義。&lt;/p&gt;
&lt;p&gt;所以如果定義class的文件在這期間改過的話，就會拋出類似的錯誤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以问题出在这里(我的理解): 原先我把数据pickle进文件的时候, &lt;code&gt;Airport这个class是定义在了main.py里面, 所以当我在util.py里面load数据的时候, pickle发现原来的main.py里面已经没有了 Airport这个class, 于是就出现了Error...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决办法也不难, 只需要在&lt;code&gt;util.py&lt;/code&gt;里面再生成一下那些要load的数据文件, 之后再次unpickle的时候就会去&lt;code&gt;util.py&lt;/code&gt;而不是&lt;code&gt;main.py&lt;/code&gt;里找class的定义, 也就没有问题了!&lt;/p&gt;
&lt;p&gt;今天碰到的这个问题不是那么evident, 所以特地记一下.&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>A byte of Python 笔记</title><link href="https://x-wei.github.io/tech/byte_of_python%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><published>2014-04-10T00:00:00+02:00</published><updated>2014-04-10T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2014-04-10:tech/byte_of_python笔记.html</id><summary type="html">&lt;p&gt;据说这本书是最好的入门读物, 况且只有100来页 (减掉前面后面那些扯淡的 不到100页...)&lt;/p&gt;
&lt;p&gt;那就用这本书过一下py的基本知识点吧! 看完以后收获不少, 把py涉及的很大一部分都讲到了. 这本书已经是够压缩的了, 不过我还是边看边自己再压缩了一遍(写在zim笔记里). &lt;/p&gt;
&lt;p&gt;我看的是1.20版本, 2004年的, 因为这个版本针对的是py2.x, 作者主页上现在的版本针对的是py3. 另外感觉没必要看中文翻译版, 因为这里用的英语比较简单, 而且有的时候中文翻译反而不如原文表达的恰当.&lt;/p&gt;
&lt;h1 id="prefacech1ch2"&gt;preface+ch1+ch2&lt;/h1&gt;
&lt;p&gt;扯淡...&lt;/p&gt;
&lt;h1 id="ch3-first-steps"&gt;ch3. First Steps&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are two ways of using Python to run your program - using the interactive interpreter prompt or using a source file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anything to the right of the # symbol is a comment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;the shebang line&lt;/strong&gt; - whenever the first two characters of the source file are &lt;code&gt;#!&lt;/code&gt; followed by the location of a program, this tells your Linux/Unix system that this program should be run with this interpreter when you execute the program.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Note that you can always run the program on any platform by specifying the interpreter directly on the command line such as the command python helloworld.py .)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use the built-in help functionality.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or example, run &lt;code&gt;help(str)&lt;/code&gt; - this displays the help for the str class which is used to store all text (strings) that you use in your program.&lt;/p&gt;
&lt;h1 id="ch4-the-basics"&gt;ch4. The Basics&lt;/h1&gt;
&lt;h2 id="literal-constants"&gt;Literal Constants&lt;/h2&gt;
&lt;p&gt;It is called a literal because it is literal - you use its value literally. ex. number 2, or string "hello".&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;number&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Numbers in Python are of four types - integers, long integers, floating point and complex numbers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-Examples of floating point numbers (or floats for short) are 3.23 and 52.3E-4. The E notation indicates powers of 10. In this case, 52.3E-4 means 52.3 * 10-4.
-Examples of complex numbers are (-5+4j) and (2.3 - 4.6j)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;string&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;string可以用Single/Double/Triple Quotes括起来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;escape sequence&lt;/em&gt;: \', \n, \t, 以及在行末作为续行符号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;raw string&lt;/strong&gt;: to specify some strings where no special processing such as escape sequences are handled, then what you need is to specify a raw string by prefixing r or R to the string. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. &lt;code&gt;r"Newlines are indicated by \n"&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unicode text:  prefix u or U. For example, &lt;code&gt;u"This is a Unicode string."&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember to use Unicode strings when you are dealing with text files, especially when you know that the file will contain text written in languages other than English.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Strings are immutable:  once you have created a string, you cannot change it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String literal concatenation: If you place two string literals side by side, they are automatically concatenated by Python. For example, '&lt;code&gt;What\'s' 'your name?&lt;/code&gt;' is automatically converted in to &lt;code&gt;"What's your name?".&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note for Regular Expression Users: Always use raw strings when dealing with regular expressions. Otherwise, a lot of backwhacking may be required. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="variables"&gt;Variables&lt;/h2&gt;
&lt;p&gt;顾名思义就是可以可以变的量...
Unlike literal constants, you need some method of accessing these variables &lt;em&gt;and hence you give them names&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identifier(标示符)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Identifiers&lt;/strong&gt; are names given to identify something. 
The first character of the identifier must be a letter of the alphabet (upper or lowercase) &lt;em&gt;or an underscore ('_')&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python refers to anything used in a program as an object.
Python is &lt;strong&gt;strongly object-oriented&lt;/strong&gt; in the sense that everything is an object &lt;em&gt;including numbers, strings and even functions&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Variables are used by just assigning them a value. No declaration or data type definition is needed/used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logical and Physical Lines: Implicitly, Python encourages the use of a single statement per line which makes code more readable. If you want to specify more than one logical line on a single physical line, then you have to explicitly specify this using a semicolon (;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;explicit line joining: ex. 续行符\;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;implicit line joining: ex. 括号...&lt;/p&gt;
&lt;h2 id="indentation"&gt;Indentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Leading whitespace (spaces and tabs) at the beginning of the logical line is used to determine the indentation level of the logical line, which in turn is used to determine the grouping of statements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This means that statements which go together must have the same indentation. Each such set of state- ments is called a &lt;em&gt;block&lt;/em&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not use a mixture of tabs and spaces for the indentation as it does not work across different platforms properly. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch5-operators-and-expressions_1"&gt;ch5. Operators and Expressions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;expressions&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An expression can be broken down into &lt;em&gt;operators&lt;/em&gt; and &lt;em&gt;operands&lt;/em&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些oprators: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;**, //, &amp;lt;&amp;lt;, &amp;gt;&amp;gt;, &amp;amp;, |, ^, ~, not, and, or&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Operator Precedence: 优先级的一个表...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Associativity: &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Operators are usually associated from left to right i.e. operators with same precedence are evaluated in a left to right manner. For example, &lt;code&gt;2 + 3 + 4&lt;/code&gt; is evaluated as &lt;code&gt;(2 + 3) + 4&lt;/code&gt;. Some operators like assignment operators have right to left associativity i.e. &lt;code&gt;a = b = c&lt;/code&gt; is treated as &lt;code&gt;a = (b = c)&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="ch6-control-flow"&gt;ch6. Control Flow&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;if&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;if-elif-else&lt;/code&gt; statement: This makes the program easier and reduces the amount of indentation required. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is &lt;em&gt;no switch statement in Python:&lt;/em&gt; You can use an if..elif..else statement to do the same thing (and in some cases, use a dictionary to do it quickly)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;while&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember that you can have &lt;em&gt;an &lt;strong&gt;&lt;em&gt;else&lt;/em&gt;&lt;/strong&gt; clause for the while loop&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-The &lt;code&gt;for..in&lt;/code&gt; statement is another looping statement which &lt;em&gt;iterates&lt;/em&gt; over a sequence of objects i.e. go
through each item in a sequence, a &lt;em&gt;sequence&lt;/em&gt; is just an ordered collection of items.
-optional &lt;strong&gt;else&lt;/strong&gt; part  also.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;break&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to break out of a loop statement i.e. stop the execution of a looping statement, even if the loop condition has not become False or the sequence of items has been completely iterated over.
-An important note is that if you break out of a for or while loop, &lt;em&gt;any corresponding loop else block is &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; executed.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;continue&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;used to tell Python to skip the rest of the statements in the current loop block and to continue to the &lt;em&gt;next iteration&lt;/em&gt; of the loop.&lt;/p&gt;
&lt;h1 id="ch7-functions"&gt;ch7. Functions&lt;/h1&gt;
&lt;p&gt;Functions are reusable pieces of programs. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;def func_name()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parameters:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note the terminology used - the names given in the function definition are called &lt;em&gt;parameters(行参)&lt;/em&gt; whereas the values you supply in the function call are called &lt;em&gt;arguments(实参)&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="scope"&gt;scope&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;local variables:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All variables have the &lt;strong&gt;scope&lt;/strong&gt; of the block they are declared in starting from the point of definition of the name.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;global variables&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to assign a value to a name defined outside the function, then you have to tell Python that the name is not local, but it is global. We do this using the &lt;code&gt;global&lt;/code&gt; statement. &lt;/p&gt;
&lt;h2 id="default-argument-values"&gt;Default Argument Values&lt;/h2&gt;
&lt;p&gt;Default Argument Values默认参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can specify default argument values for parameters by following the parameter name in the function definition with the assignment operator (=) followed by the default value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that the default argument value should be &lt;em&gt;immutable.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;you cannot have a parameter with a default argument value &lt;em&gt;before&lt;/em&gt; a parameter without a default argument value in the order of parameters declared in the function parameter list.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is because the values are &lt;em&gt;assigned to the parameters by position&lt;/em&gt;. For example, &lt;code&gt;def func(a, b=5)&lt;/code&gt; is valid, but &lt;code&gt;def func(a=5, b)&lt;/code&gt; is not valid.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keyword Arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have some functions with many parameters and you want to specify only some of them, then you can give values for such parameters by naming them - this is called keyword arguments - we &lt;em&gt;use the name (keyword) instead of the position&lt;/em&gt; to specify the arguments to the function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;used to &lt;em&gt;return&lt;/em&gt; from a function i.e. break out of the function. We can optionally return a value from the function as well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return None&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-a return statement without a value is equivalent to &lt;code&gt;return None&lt;/code&gt;. None is a special type in Python that represents nothingness. For example, it is used to indicate that a variable has no value if it has a value of None.
-Every function implicitly contains a return None statement at the end unless you have written your own return statement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pass&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the &lt;code&gt;pass&lt;/code&gt; statement is used in Python to indicate an empty block of statements.&lt;/p&gt;
&lt;h2 id="docstrings"&gt;DocStrings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;A string on the first logical line of a function&lt;/em&gt; is the &lt;strong&gt;docstring&lt;/strong&gt; for that function (also apply to modules and classes). &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;func.__doc__&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The convention: a multi-line string where the first line starts with a capital letter and ends with a dot. Then the second line is blank followed by any detailed explanation starting from the third line. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch8-modules_1"&gt;ch8. Modules&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;A module is basically &lt;strong&gt;a file&lt;/strong&gt;&lt;em&gt; containing all your functions and variables that you have defined&lt;/em&gt;. &lt;/li&gt;
&lt;li&gt;To reuse the module in other programs, the filename of the module must have a .py extension.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ex-sys-module"&gt;ex. sys module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When Python executes the &lt;code&gt;import sys&lt;/code&gt; statement, it looks for the sys.py module in one of the directores listed in its &lt;code&gt;sys.path&lt;/code&gt; variable. If the file is found, then the statements in the main block of that module is run and then the module is made available for you to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;sys.argv&lt;/code&gt; variable is a list of strings, contains the list of command line arguments i.e. the arguments passed to your program using the command line. 即程序执行时传给的参数列表.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;sys.path&lt;/code&gt; contains &lt;em&gt;the list of directory names where modules are imported&lt;/em&gt; from. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Observe that the first string in sys.path is empty - this empty string indicates that &lt;em&gt;the current directory&lt;/em&gt; is also part of the sys.path which is same as the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable. This means that you can directly import modules located in the current directory. Otherwise, you will have to place your module in one of the directories listed in sys.path .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Byte-compiled .pyc files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Importing a module is a relatively costly affair.
This .pyc file is useful when you import the module the next time from a different program - it will be much faster since part of the processing required in importing a module is already done. Also, these byte-compiled files are platform-independent. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from..import &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to directly import the &lt;code&gt;argv&lt;/code&gt; variable into your program (to avoid typing the &lt;code&gt;sys.&lt;/code&gt; everytime for it), then you can use the &lt;code&gt;from sys import argv&lt;/code&gt; statement.
not recommended...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every Python module has it's &lt;code&gt;__name__&lt;/code&gt; defined and if this is '&lt;code&gt;__main__&lt;/code&gt;', it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every Python program is also a module. You just have to make sure it has a .py extension. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dir-function"&gt;dir() function&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can use the built-in dir function to &lt;em&gt;list the identifiers&lt;/em&gt; that a module defines. The identifiers are the &lt;strong&gt;functions, classes, variables and imported modules&lt;/strong&gt; defined in that module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you supply a module name to the dir() function, it returns the list of the names defined in that module. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;When no argument is applied to it, it returns the list of names defined in the current module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch9-data-structures_1"&gt;ch9. Data Structures&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Data structures are structures which can hold some data together. In other words, they are used to store a collection of related data.&lt;/li&gt;
&lt;li&gt;3 built-in data structures in Python - &lt;strong&gt;list, tuple and dictionary&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="list-abc"&gt;List [a,b,c]&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;a data structure that holds an ordered collection of items. &lt;/li&gt;
&lt;li&gt;a &lt;em&gt;mutable&lt;/em&gt; data type&lt;/li&gt;
&lt;li&gt;you can add any kind of object to a list including numbers and even other lists.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;indexing &lt;/em&gt;operator: &lt;code&gt;a_list[1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len(a_list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a_list.append()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for..in&lt;/code&gt; loop to iterate through the items of the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a_list.sort()&lt;/code&gt;: this method affects the list itself and does not return a modified list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;del a_list[0]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tuple-abc"&gt;Tuple (a,b,c)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tuples are just like lists except that they are &lt;strong&gt;immutable&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Tuples are usually used in cases where a statement or a user-defined function can safely assume that the collection of values (i.e. the tuple of values) used will not change.&lt;/li&gt;
&lt;li&gt;can contain another tuple, another list......&lt;/li&gt;
&lt;li&gt;singleton: &lt;code&gt;t=(2,)&lt;/code&gt;(comma is necessary!)&lt;/li&gt;
&lt;li&gt;empth: t=()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;indexing: a_touple[0]&lt;/li&gt;
&lt;li&gt;len(a_tuple)&lt;/li&gt;
&lt;li&gt;used for output format:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;print '%s is %d years old' % (name, age)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="dictionary" k1:v1_="k1:v1," k2:v2="k2:v2"&gt;Dictionary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;key-value mapping&lt;/li&gt;
&lt;li&gt;you can use only immutable objects (like strings) for the keys of a dictionary but you can use either immutable or mutable objects for the values of the dictionary. (This basically translates to say that you should use only simple objects for keys.)&lt;/li&gt;
&lt;li&gt;一个dict中的keys不必同样type, values也是! &lt;/li&gt;
&lt;li&gt;key/value pairs in a dictionary are &lt;em&gt;not ordered&lt;/em&gt; in any manner.&lt;/li&gt;
&lt;li&gt;instances/objects of the dict class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;adding key-value pair by indexing: &lt;code&gt;dic[key]=val&lt;/code&gt;&lt;em&gt;(overwrite if key already exists!)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;deleting: &lt;code&gt;del dic[key]&lt;/code&gt;&lt;em&gt;(KeyError if key doesn't exist!)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dic.items()&lt;/code&gt;&lt;em&gt;返回一个list of tuples&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;dic.items()
[(k1,v1), (k2,v2)]
for k,v in dic.items:
    print k, v&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dic.keys()&lt;/code&gt;&lt;em&gt;返回keys的list&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;test: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the &lt;code&gt;in&lt;/code&gt; operator: &lt;code&gt;if akey in dic&lt;/code&gt;
or even the &lt;code&gt;has_key&lt;/code&gt; method of the dict class: &lt;code&gt;if dic.has_key(k)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="sequences"&gt;Sequences&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lists, tuples and strings are examples of sequences&lt;/li&gt;
&lt;li&gt;Two of the main features of a sequence is the &lt;strong&gt;indexing&lt;/strong&gt; operation which allows us to fetch a particular item in the sequence directly and the &lt;strong&gt;slicing&lt;/strong&gt; operation which allows us to retrieve a slice of the sequence i.e. a part of the sequence.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The great thing about sequences is that you can access tuples, lists and strings all in the same way!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;indexing(seq can be List or Tuple or String):&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;seq&lt;code&gt;[2], seq[-1]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slicing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;seq&lt;code&gt;[1:3]&lt;/code&gt; &lt;em&gt;(from 1 to 2!)&lt;/em&gt;
&lt;code&gt;seq[:]&lt;/code&gt; &lt;em&gt;(a whole copy of the list)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What you need to remember is that if you want to make a copy of a list or such kinds of sequences or complex objects (not simple objects such as integers), then you have to use the slicing operation(&lt;code&gt;list[:]&lt;/code&gt;) to make a copy.&lt;/li&gt;
&lt;li&gt;If you just assign the variable name to another name, both of them will refer to the same object and this could lead to all sorts of trouble if you are not careful.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="string"&gt;String&lt;/h2&gt;
&lt;p&gt;methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;str.startswith('a')&lt;/code&gt; &lt;em&gt;return boolean&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.find(substr)&lt;/code&gt; &lt;em&gt;return index of subster or -1 if not found&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;substr in str&lt;/code&gt; &lt;em&gt;return boolean&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.join(strseq)&lt;/code&gt; &lt;em&gt;use str as delimiter to joint the items in strseq&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch10-problem-solving-writing-a-python-script_1"&gt;ch10. Problem Solving - Writing a Python Script&lt;/h1&gt;
&lt;p&gt;"a program which creates a backup of all my important files"&lt;/p&gt;
&lt;h2 id="1st-version"&gt;1st version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Run the command using the &lt;code&gt;os.system&lt;/code&gt; function which runs the command as if it was run from the system i.e. in the shell - it returns 0 if the command was successfully, else it returns an error number.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;source = ['/home/swaroop/byte', '/home/swaroop/bin']&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;target_dir = '/mnt/e/backup/'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;target = target_dir + time.strftime('%Y%m%d%H%M%S') + '.zip'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;zip_command = "zip -qr '%s' %s" % (target, ' '.join(source))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;if os.system(zip_command) == 0:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    print 'Successful backup to', target&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;else:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;    print 'Backup FAILED'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2nd-version"&gt;2nd version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;using the time as the name of the file within a directory with the current date as a directory within the main backup directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;if not os.path.exists(today):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    os.mkdir(today) # make directory&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;target = today + os.sep + now + '.zip'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;os.sep&lt;/code&gt; variable - this gives the directory separator according to your operating system i.e. it will be '/' in Linux, Unix, it will be '\' in Windows and ':' in Mac OS.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3rd-version"&gt;3rd version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;attaching a user-supplied comment to the name of the zip archive.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;comment = raw_input('Enter a comment --&amp;gt; ')&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;if len(comment) == 0: # check if a comment was entered&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    target = today + os.sep + now + '.zip'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;else:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;    target = today + os.sep + now + '_' + \&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;    comment.replace(' ', '_') + '.zip'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="more-refinements"&gt;More Refinements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;allow extra files and directories to be passed to the script at the command line. We will get these from the sys.argv list and we can add them to our source list using the extend method provided by the list class.&lt;/li&gt;
&lt;li&gt;use of the tar command instead of the zip command. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One advantage is that when you use the tar command along with gzip, the backup is much faster and the backup created is also much smaller. If I need to use this archive in Windows, then WinZip handles such .tar.gz files easily as well.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tar = 'tar -cvzf %s %s -X /home/swaroop/excludes.txt' % (target, ' '.join(srcdir))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The most preferred way of creating such kind of archives would be using the zipfile or tarfile module respectively.&lt;/li&gt;
&lt;li&gt;"Software is grown, not built"&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch11-object-oriented-programming_1"&gt;ch11. Object-Oriented Programming&lt;/h1&gt;
&lt;h2 id="fields-methods"&gt;fields, methods&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;class: &lt;strong&gt;fields&lt;/strong&gt;, &lt;strong&gt;methods&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Fields are of two types - they can belong to each instance/object of the class or they can belong to the class itself. They are called &lt;strong&gt;instance variables&lt;/strong&gt; and &lt;strong&gt;class variables&lt;/strong&gt; respectively.&lt;/li&gt;
&lt;li&gt;ou must refer to the variables and methods of the same object using the &lt;code&gt;self&lt;/code&gt; variable only. This is called an &lt;em&gt;attribute reference&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;we refer to the class variable as &lt;code&gt;ClassName.var&lt;/code&gt; and not as &lt;code&gt;self.var&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="self"&gt;self&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Class methods have only one specific difference from ordinary functions - &lt;em&gt;they must have an extra first name that has to be added to the beginning of the parameter list&lt;/em&gt;, but you do do not give a value for this parameter when you call the method, Python will provide it. &lt;/li&gt;
&lt;li&gt;create an object/instance of this class using the name of the class followed by a pair of parentheses.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-init-method"&gt;The &lt;strong&gt;init&lt;/strong&gt; method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;__init__()&lt;/code&gt; method is run as soon as an object of a class is instantiated. The method is useful to do any initialization you want to do with your object. &lt;/li&gt;
&lt;li&gt;analogous to a constructor in C++, C# or Java.&lt;/li&gt;
&lt;li&gt;the same, __&lt;code&gt;del__()&lt;/code&gt; method: run when the object is no longer in use and there is no guarantee when that method will be run. If you want to explicitly do this, you just have to use the del statement.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;All class members (including the data members) are &lt;strong&gt;&lt;em&gt;public&lt;/em&gt;&lt;/strong&gt; and all the methods are &lt;strong&gt;&lt;em&gt;virtual&lt;/em&gt;&lt;/strong&gt; in Python.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;One exception: If you use data members with names using the double underscore prefix such as &lt;code&gt;__privatevar&lt;/code&gt;, Python uses name-mangling to effectively make it a private variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="inheritance"&gt;Inheritance&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ex:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;class Teacher(SchoolMember)://&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    '''Represents a teacher.'''&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __init__(self, name, age, salary):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        SchoolMember.__init__(self, name, age)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.salary = salary&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        print '(Initialized Teacher: %s)' % self.name&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To use inheritance, we specify the base class names in a &lt;strong&gt;tuple&lt;/strong&gt; following the class name in the class definition. --&lt;em&gt;multiple inheritance.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;__init__&lt;/code&gt; method of the base class is explicitly called using the &lt;code&gt;self&lt;/code&gt; variable so that we can initialize the base class part of the object. This is very important to remember - &lt;em&gt;Python does not automatically call the constructor of the base class, you have to explicitly call it yourself.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch12-inputoutput_1"&gt;ch12. Input/Output&lt;/h1&gt;
&lt;h2 id="files"&gt;Files&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;open and use files for reading or writing by creating an object of the &lt;code&gt;file&lt;/code&gt; class and using its &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;readline&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; methods appropriately to read from or write to the file. Then finally, when you are finished with the file, you call the &lt;code&gt;close&lt;/code&gt; method to tell Python that we are done using the file.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;f = file('poem.txt', 'w') # open for 'w'riting&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;f.write(poem) # write text to file&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;f.close() # close the file&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;f = file('poem.txt') # if no mode is specified, 'r'ead mode is assumed by default&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;while True:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    line = f.readline()# This method returns a complete line including the newline character at the end of the line.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if len(line) == 0: # Zero length indicates EOF&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    break&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    print line, # Notice comma to avoid automatic newline added by Python&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;f.close() # close the file&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pickle"&gt;Pickle&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Python provides a standard module called &lt;/em&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;em&gt; using which you can store any Python object in a file and then get it back later intact. This is called storing the object persistently.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;There is another module called &lt;code&gt;cPickle&lt;/code&gt; which functions exactly same as the &lt;code&gt;pickle&lt;/code&gt; module except that it is written in the C language and is (upto 1000 times) faster. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pickling &amp;amp; unpickling:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cPickle&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shoplistfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shoplist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shoplistfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;storedlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;storedlist&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To store an object in a file, first we open a file object in write mode and store the object into the open file by calling the &lt;code&gt;dump&lt;/code&gt; function of the pickle module. This process is called &lt;em&gt;pickling&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Next, we retrieve the object using the &lt;code&gt;load&lt;/code&gt; function of the pickle module which returns the object. This process is called &lt;em&gt;unpickling&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch13-exceptions_1"&gt;ch13. Exceptions&lt;/h1&gt;
&lt;h2 id="tryexcept"&gt;Try..Except&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We can handle exceptions using the &lt;code&gt;try..except&lt;/code&gt; statement. We basically put our usual statements within the try-block and put all our error handlers in the except-block.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Enter something --&amp;gt; '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;EOFError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Why did you do an EOF on me?'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# exit the program&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Some error/exception occurred.'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# here, we are not exiting the program&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Done'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;except&lt;/code&gt; clause can handle a single specified error or exception, or a parenthesized list of errors/exceptions. If no names of errors or exceptions are supplied, it will handle all errors and exceptions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;If any error or exception is not handled, then the default Python handler is called which just stops the execution of the program and prints a message.&lt;/li&gt;
&lt;li&gt;You can also have an &lt;code&gt;else&lt;/code&gt; clause associated with a &lt;code&gt;try..catch&lt;/code&gt; block. The &lt;code&gt;else&lt;/code&gt; clause is executed if no exception occurs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="raising-exceptions"&gt;Raising Exceptions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;using the &lt;code&gt;raise&lt;/code&gt; statement. &lt;/li&gt;
&lt;li&gt;You also have to specify the name of the error/exception and the exception object that is to be thrown along with the exception. &lt;/li&gt;
&lt;li&gt;The error or exception that you can arise should be class which directly or indirectly is a derived class of the &lt;code&gt;Error&lt;/code&gt; or &lt;code&gt;Exception&lt;/code&gt; class respectively.&lt;/li&gt;
&lt;li&gt;ex.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ShortInputException&lt;/span&gt;(&lt;span class="nb"&gt;Exception&lt;/span&gt;):&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s"&gt;'''A user-defined exception class.'''&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;length&lt;/span&gt;, &lt;span class="n"&gt;atleast&lt;/span&gt;):&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;Exception&lt;/span&gt;.&lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;)&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;length&lt;/span&gt; = &lt;span class="n"&gt;length&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;atleast&lt;/span&gt; = &lt;span class="n"&gt;atleast&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;try:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;s&lt;/span&gt; = &lt;span class="n"&gt;raw_input&lt;/span&gt;(&lt;span class="s"&gt;'Enter something --&amp;gt; '&lt;/span&gt;)&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;(&lt;span class="o"&gt;s&lt;/span&gt;) &amp;lt; &lt;span class="mi"&gt;3&lt;/span&gt;:&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ShortInputException&lt;/span&gt;(&lt;span class="n"&gt;len&lt;/span&gt;(&lt;span class="o"&gt;s&lt;/span&gt;), &lt;span class="mi"&gt;3&lt;/span&gt;)&lt;span class="c1"&gt;#  specify the name of the error/exception and the exception object that is to be thrown&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;EOFError:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'\nWhy did you do an EOF on me?'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ShortInputException&lt;/span&gt;, &lt;span class="o"&gt;x&lt;/span&gt;:&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'ShortInputException: The input was of length %d, \&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt;                was expecting at least %d'&lt;/span&gt; % (&lt;span class="o"&gt;x&lt;/span&gt;.&lt;span class="n"&gt;length&lt;/span&gt;, &lt;span class="o"&gt;x&lt;/span&gt;.&lt;span class="n"&gt;atleast&lt;/span&gt;)&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;else:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'No exception was raised.'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tryfinally"&gt;Try..Finally&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What if you were reading a file and you wanted to close the file &lt;em&gt;whether or not an exception was raised&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;before the program exits, the finally clause is executed and the file is closed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch14-the-python-standard-library_1"&gt;ch14. The Python Standard Library&lt;/h1&gt;
&lt;h2 id="sys-module"&gt;sys module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sys.argv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;there is always at least one item in the &lt;code&gt;sys.argv&lt;/code&gt; list which is the name of the current program being run and is available as &lt;code&gt;sys.argv[0]&lt;/code&gt; . Other command line arguments follow this item.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sys.exit&lt;/code&gt; : to exit the running program.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="os-module"&gt;os module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;os.getcwd()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gets the current working directory i.e. the path of the directory from which the curent Python script is working.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;os.listdir()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.remove()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.system()&lt;/code&gt;: run a shell command.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.linesep&lt;/code&gt;: string gives the line terminator used in the current platform. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.path.split()&lt;/code&gt;: returns the directory name and file name of the path.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.path.isfile()&lt;/code&gt; and &lt;code&gt;os.path.isdir()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch15-more-python_1"&gt;ch15. More Python&lt;/h1&gt;
&lt;h2 id="special-methods"&gt;Special Methods&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generally, special methods are used to mimic certain behavior. &lt;/li&gt;
&lt;li&gt;For example, if you want to use the &lt;code&gt;x[key]&lt;/code&gt; indexing operation for your class (just like you use for lists and tuples) then just implement the &lt;code&gt;__getitem__()&lt;/code&gt; method and your job is done.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__init__(self, ...)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__del__(self)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__str__(self)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Called when we use the &lt;code&gt;print&lt;/code&gt; statement with the object or when &lt;code&gt;str()&lt;/code&gt; is used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__lt__(self, other)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Called when the &lt;em&gt;less than&lt;/em&gt; operator ( &amp;lt; ) is used. Similarly, there are special methods for all the operators (+, &amp;gt;, etc.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__getitem__(self, key)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Called when x[key] indexing operation is used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__len__(self)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Called when the built-in &lt;code&gt;len()&lt;/code&gt; function is used for the sequence object.&lt;/p&gt;
&lt;h2 id="list-comprehension"&gt;List Comprehension&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;used to derive a new list from an existing list.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;listone = [2, 3, 4]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;listtwo = [2*i for i in listone if i &amp;gt; 2]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Here, we derive a new list by specifying the manipulation to be done (2*i) when some condition is satisfied (if i &amp;gt; 2).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="receiving-tuples-and-lists-in-functions"&gt;Receiving Tuples and Lists in Functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;receiving parameters to a function as a &lt;em&gt;tuple&lt;/em&gt; or a &lt;em&gt;dictionary&lt;/em&gt; using the &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;**&lt;/code&gt; prefix respectively. &lt;/li&gt;
&lt;li&gt;This is useful when taking variable number of arguments in the function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;def powersum(power, *args):...&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Due to the * prefix on the args variable, all extra arguments passed to the function are stored in args as a tuple. If a ** prefix had been used instead, the extra parameters would be considered to be key/value pairs of a dictionary.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lambda-forms"&gt;Lambda Forms&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;lambda&lt;/code&gt; statement is used to create new function objects and then return them &lt;em&gt;at runtime&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;ex. &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def make_repeater(n):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return lambda s: s * n&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;twice = make_repeater(2)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;print twice('word')&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;print twice(5)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    $ python lambda.py&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    wordword&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    10&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;lambda&lt;/code&gt; statement is used to create &lt;em&gt;the function object&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Essentially, &lt;em&gt;the lambda takes a parameter followed by a single expression only which becomes the body of the function and the value of this expression is returned by the new function.&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;Note that even a print statement cannot be used inside a lambda form, only &lt;em&gt;expressions&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-exec-and-eval-statements"&gt;The exec and eval statements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;exec&lt;/code&gt; statement is used to execute Python statements which are stored in a string or file.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;eval&lt;/code&gt; statement is used to evaluate valid Python expressions which are stored in a string. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-assert-statement"&gt;The assert statement&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;to assert that something is true. &lt;/li&gt;
&lt;li&gt;For example, if you are very sure that you will have at least one element in a list you are using and want to check this, and raise an error if it is not true, then assert statement is ideal in this situation. &lt;/li&gt;
&lt;li&gt;When the assert statement fails, an AssertionError is raised.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-repr-function-or-backticks"&gt;The repr function or Backticks(`)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;to obtain a canonical string representation of the object.&lt;/li&gt;
&lt;li&gt;you will have &lt;code&gt;eval(repr(object)) == object&lt;/code&gt; most of the time.&lt;/li&gt;
&lt;li&gt;Basically, the repr function or the backticks are used to obtain a printable representation of the object.&lt;/li&gt;
&lt;li&gt;can control what your objects return for the repr function by defining the __&lt;code&gt;repr__&lt;/code&gt; method in your class.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category></entry><entry><title>linux下安装并使用java开发opencv的配置</title><link href="https://x-wei.github.io/tech/linux%E4%B8%8B%E5%AE%89%E8%A3%85%E5%B9%B6%E4%BD%BF%E7%94%A8java%E5%BC%80%E5%8F%91opencv%E7%9A%84%E9%85%8D%E7%BD%AE.html" rel="alternate"></link><published>2014-02-10T00:00:00+01:00</published><updated>2014-02-10T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2014-02-10:tech/linux下安装并使用java开发opencv的配置.html</id><summary type="html">&lt;p&gt;今天花了四个小时, 终于在linux下把eclipse下java开发opencv给搞定了... 至于为什么花这么久的时间... 且听我慢慢讲... &lt;/p&gt;
&lt;h2 id="linuxbian-yi-an-zhuang-opencv"&gt;linux编译安装opencv&lt;/h2&gt;
&lt;p&gt;首先, linux下安装opencv其实不麻烦的, 参考文档即可完成:
&lt;a href="http://docs.opencv.org/trunk/doc/tutorials/introduction/linux_install/linux_install.html"&gt;http://docs.opencv.org/trunk/doc/tutorials/introduction/linux_install/linux_install.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大致有以下几个步骤:&lt;/p&gt;
&lt;p&gt;1) 安装gcc以及cmake等等乱七八糟的软件(不过ubuntu下默认差不多都有了吧...)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo apt-get install build-essential python-dev cmake&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2) 下载opencv-2.4.8.zip并解压缩&lt;/p&gt;
&lt;p&gt;3) 新建一个build文件夹&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cd ~/opencv&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;mkdir build&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;cd build&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4) 在终端里输入: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;make&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;sudo make install&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;make命令会花费几十分钟时间...
然后&lt;strong&gt;理论上&lt;/strong&gt;就结束了... 如果不用java开发的话 就OK了 比如 可以运行sample文件夹下的python代码...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是&lt;/strong&gt;, 如果要使用java开发的话 需要接着这样做.....&lt;/p&gt;
&lt;h2 id="an-zhuang-opencv-java"&gt;安装opencv-java&lt;/h2&gt;
&lt;p&gt;这一步非常DT, 因为官网上还有一个文档, 专门讲怎么用java开发的...
&lt;a href="http://docs.opencv.org/doc/tutorials/introduction/desktop_java/java_dev_intro.html"&gt;http://docs.opencv.org/doc/tutorials/introduction/desktop_java/java_dev_intro.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1) 首先, 需要安装ant: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo apt-get install ant&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2) 其次 需要运行cmake, 关键是cmake的参数, 官网给的是这样的: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;export JAVA_HOME=/usr/lib/jvm/java-6-oracle#这句不加应该也可以的&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;cmake -DBUILD_SHARED_LIBS=OFF ..&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意看输出的, 如果"To be built"里面有java这一项的话, 就&lt;strong&gt;应该&lt;/strong&gt;是OK的.... 接下来只要&lt;code&gt;make -j8&lt;/code&gt; 就可以了...&lt;/p&gt;
&lt;p&gt;最坑爹的地方来了, 以这样的参数运行cmake以后, 运行&lt;code&gt;make -j8&lt;/code&gt;总是不成功, 说有错误.....&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./linux下安装并使用java开发opencv的配置/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;查了半天, 发现这是一个BUG:
&lt;a href="http://code.opencv.org/issues/2859"&gt;http://code.opencv.org/issues/2859&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那么试一试加上参数: &lt;code&gt;-DBUILD_TESTS=OFF&lt;/code&gt; 吧...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以cmake的参数要这样写才可以&lt;/strong&gt;: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -DBUILD_TESTS=OFF ..&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3) 用上面那样的参数运行cmake以后, 再: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;make -j8&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;sudo make install&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就可以成功make了...&lt;/p&gt;
&lt;h2 id="ru-he-pan-duan-shi-fou-an-zhuang-cheng-gong"&gt;如何判断是否安装成功?&lt;/h2&gt;
&lt;p&gt;以上操作结束后, 看看build文件夹, bin目录下是不是有一个&lt;code&gt;opencv-248.jar&lt;/code&gt;文件:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./linux下安装并使用java开发opencv的配置/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;如果有的话 就说明成功安装了opencv的java组件... &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;!!注意!!&lt;/strong&gt;
&lt;strong&gt;不能用windows下opencv安装目录下的那个opencv-248.jar&lt;/strong&gt;!! 
刚才生成那个jar和windows下的jar不一样的!! (我查了MD5码... 其实看文件大小也能看出来!!)&lt;/p&gt;
&lt;h2 id="eclipsexia-de-pei-zhi"&gt;Eclipse下的配置&lt;/h2&gt;
&lt;p&gt;这里有一篇非常好的帖子, 写的非常到位, 我就不重复了, 链接:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://exintopro.net/blog/2013/10/02/setting-up-eclipse-for-using-opencv-java-in-ubuntu/"&gt;http://exintopro.net/blog/2013/10/02/setting-up-eclipse-for-using-opencv-java-in-ubuntu/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个帖子虽然很好, 但是没有介绍编译的那一部分, 由于安装java组件时的编译过程和官网给的不一样, 所以才导致我废了半天的时间啊!......&lt;/p&gt;</summary><category term="eclipse"></category><category term="java"></category><category term="opencv"></category></entry><entry><title>java线程小结</title><link href="https://x-wei.github.io/tech/java%E7%BA%BF%E7%A8%8B%E5%B0%8F%E7%BB%93.html" rel="alternate"></link><published>2013-11-29T00:00:00+01:00</published><updated>2013-11-29T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2013-11-29:tech/java线程小结.html</id><summary type="html">&lt;p&gt;INF422的TD2, 这节TD是要做一个多线程筛选质数的程序, 关于java的多线程, 以前用过但是不知道啥意思, 在这里总结下. &lt;/p&gt;
&lt;h2 id="chuang-jian-jin-cheng"&gt;创建进程&lt;/h2&gt;
&lt;p&gt;为了实现多线程, 需要定义一个新的class, 有两种方法: 
&lt;strong&gt;或者继承自&lt;/strong&gt;&lt;code&gt;Thread&lt;/code&gt;&lt;strong&gt;类, 或者实现&lt;/strong&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;strong&gt;接口&lt;/strong&gt;(关键是重载run()方法). &lt;/p&gt;
&lt;h3 id="ji-cheng-zi-threadlei"&gt;继承自Thread类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;写法1: 定义一个继承自Thread的内部类--&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;class [类名] extends Thread{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;方法1;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;方法2；&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public void run(){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// …&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;属性1；&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;属性2；&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;或者用下面种&lt;strong&gt;内联(inline)&lt;/strong&gt;的写法, 不用给这个类起名字了(不过还要给这个实例取名字): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private Thread [实例名] = new Thread () {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public void run() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    // ...&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;} ;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后让进程开始, 就是: 
&lt;code&gt;t.start();&lt;/code&gt;
如果用&lt;code&gt;t.run()&lt;/code&gt;的话, 则依然是并行执行的, 可能达不到多线程效果...&lt;/p&gt;
&lt;h3 id="shi-xian-runnablejie-kou"&gt;实现Runnable接口&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方法1, 代码: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;class [类名] implements Runnable{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;方法1;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;方法2；&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public void run(){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    // other code…&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;属性1；&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;属性2；&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法2, 内联写法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private Runnable [实例名] = new Runnable() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public void run() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    //...&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt; }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="androidshang-xu-yao-zhu-yi-de-yi-dian_1"&gt;android上需要注意的一点&lt;/h2&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;"Android modifies the user interface and handles input events from &lt;strong&gt;one single&lt;/strong&gt; user interface thread. This thread is also called &lt;strong&gt;the main thread&lt;/strong&gt;."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Android collects all events in a queue and processed an instance of the Looper class.
&lt;img alt="" class="img-responsive" src="../images/./java线程小结/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;所以注意要修改用户交互的组件(View, Toast, ect.)的时候, 需要在main Thread里面操作, 否则运行时会出错!!&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;那么, 当其他线程进行计算完成以后, 要刷新屏幕的显示时, 需要告知main Thread 进行更新显示:&lt;/p&gt;
&lt;p&gt;"Ajouter un nouvel objet comportant une méthode run() mettant à jour le nombre d'entier premiers (nouvel objet implémentant l'interface Runnable). À la fin du crible, le thread de calcul devra alors envoyer un message (ce nouvel objet) au thread principal pour mettre à jour l'affichage graphique. Cette mise à jour doit être faite via un appel à la méthode post() d'une instance de la classe Handler (l'objet Handler doit être instancié dans le thread principal)."&lt;/p&gt;
&lt;p&gt;Bref, 要做到多线程计算, 计算结果显示在屏幕上, 需要:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加一个Runnable实例("一个实现了Runnable接口的类的实例"), 重载run()方法实现calcul&lt;/li&gt;
&lt;li&gt;&lt;em&gt;一个&lt;/em&gt;&lt;a href="http://developer.android.com/reference/android/os/Handler.html"&gt;Handler&lt;/a&gt;&lt;em&gt;实例, 然后调用这个Handler的post()方法.&lt;/em&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看看文档里是咋说的: &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;public final boolean post (Runnable r)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Added in API level 1
Causes the Runnable r to be added to the message queue. The runnable will be run on the thread to which this handler is attached.&lt;/p&gt;
&lt;p&gt;Parameters
r   The Runnable that will be executed.
Returns
Returns true if the Runnable was successfully placed in to the message queue. Returns false on failure, usually because the looper processing the message queue is exiting.&lt;/p&gt;
&lt;p&gt;意思是&lt;code&gt;handler.post(r)&lt;/code&gt;会把r(一个Runnable实例)加入message queue中去, &lt;em&gt;这个Runnable会在这个handler关联的Thread中执行&lt;/em&gt;. 所以只要handler关联的是main Thread, 就可以在这个Runnalbe里面写graphic的代码也不会出错了. &lt;/p&gt;
&lt;p&gt;如果在Activity类的声明里声明handler为一个属性: 
&lt;code&gt;private Handler handler = new Handler();&lt;/code&gt;
这个构造函数没有参数, 根据文档, "Default constructor associates this handler with the Looper for the current thread." 所以这个handler关联到了current thread, 也就是main Thread.....&lt;/p&gt;
&lt;h2 id="li-zi"&gt;例子&lt;/h2&gt;
&lt;p&gt;所以, 多线程计算, 计算结束后修改屏幕显示的话, 需要以下__三个步骤__(比上面的俩步骤多了一个, 不知道是否还可以简化): &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在主线程里声明handler, (声明成Activity的一个属性): &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;private Handler handler = new Handler();&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;写一个用于修改屏幕显示的Runnable r(也声明成一个属性了):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private Runnable r = new Runnable() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public void run() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;//code to update graphic display...&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再写一个进行计算的Thread t, 在计算结束后, 用handler.post(r)实现刷新显示的效果: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private final Thread t = new Thread() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public void run() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;//...code for calculating...&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;//结束计算以后, 刷新屏幕:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;handler.post(r);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后在onCreate()函数里, 让Thread t 启动起来: &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;t.start();&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要让t一直循环(监视某个flag), 当flag变为true的时候, 进行计算.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了达到这个效果, Thread t里面的run()方法需要这样写:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    public void run() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        while(true) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            if(flag){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            //...do the calculation...&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            handler.post(r);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            flag=false;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="process-threadhe-runnablede-qu-bie"&gt;Process, Thread和Runnable的区别?&lt;/h2&gt;
&lt;p&gt;线程(Thread)是指进程(Process)中的一个执行流程，一个进程中可以运行多个线程。比如java.exe进程中可以运行很多线程。线程总是属于某个进程，进程中的多个线程共享进程的内存。&lt;/p&gt;
&lt;p&gt;参考链接: 
&lt;a href="http://www.vogella.com/articles/AndroidBackgroundProcessing/article.html"&gt;http://www.vogella.com/articles/AndroidBackgroundProcessing/article.html&lt;/a&gt;
&lt;a href="http://www.cnblogs.com/rollenholt/archive/2011/08/28/2156357.html"&gt;http://www.cnblogs.com/rollenholt/archive/2011/08/28/2156357.html&lt;/a&gt;
&lt;a href="http://developer.android.com/reference/android/os/Handler.html"&gt;http://developer.android.com/reference/android/os/Handler.html&lt;/a&gt;
&lt;a href="http://lavasoft.blog.51cto.com/62575/99150"&gt;http://lavasoft.blog.51cto.com/62575/99150&lt;/a&gt;&lt;/p&gt;</summary><category term="android"></category><category term="java"></category></entry><entry><title>ADT环境搭建</title><link href="https://x-wei.github.io/tech/ADT%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html" rel="alternate"></link><published>2013-11-08T00:00:00+01:00</published><updated>2013-11-08T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2013-11-08:tech/ADT环境搭建.html</id><summary type="html">&lt;p&gt;这学期INF422, 第一节课就是android安装调试环境的搭建(居然要一节课?), 这里总结一下.&lt;/p&gt;
&lt;h3 id="di-yi-bu-xia-zai-bundle"&gt;第一步: 下载bundle&lt;/h3&gt;
&lt;p&gt;下载&lt;a href="http://developer.android.com/sdk/index.html"&gt;ADT-Bundle&lt;/a&gt;
解压缩以后啥都有了, 包含一个eclipse...&lt;/p&gt;
&lt;h3 id="di-er-bu-xiu-gai-huan-jing-bian-liang"&gt;第二步: 修改环境变量&lt;/h3&gt;
&lt;p&gt;linux下的环境变量放在&lt;code&gt;.bashrc文件&lt;/code&gt;, 加入下面一行: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;PATH=$PATH:&amp;lt;dir&amp;gt;/sdk/tools/:&amp;lt;dir&amp;gt;/sdk/platform-tools/:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt;是放置SDK的目录地址.&lt;/p&gt;
&lt;p&gt;测试一下好不好使, 在终端中输入&lt;code&gt;android&lt;/code&gt;, 看是否会弹出SDK manager&lt;/p&gt;
&lt;h3 id="di-san-bu-xin-jian-yi-ge-virtual-machine"&gt;第三步: 新建一个virtual machine&lt;/h3&gt;
&lt;p&gt;可以用eclipse的AVDmanager做, 也可以用命令行做. &lt;/p&gt;
&lt;p&gt;输入:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;android list targets&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;找到想要的target(我们要4.1.2)的那个id(一个数字), 然后, 运行命令: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;android create avd -t &amp;lt;target_id&amp;gt; -n inf422 --abi armeabi-v7a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样就生成了一个名叫"inf422"的虚拟机&lt;/p&gt;
&lt;h3 id="di-si-bu-guan-lian-dao-zi-ding-yi-de-jing-xiang"&gt;第四步: 关联到自定义的镜像&lt;/h3&gt;
&lt;p&gt;inf422这门课提供了一个修改过的android镜像, 在&lt;a href="http://www.enseignement.polytechnique.fr/informatique/INF422/ramdisk.img"&gt;这里&lt;/a&gt;和&lt;a href="http://www.enseignement.polytechnique.fr/informatique/INF422/kernel-qemu"&gt;这里&lt;/a&gt;下载, 下载到本地的目录上了以后, 运行: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;emulator @inf422 -ramdisk &amp;lt;IMAGES&amp;gt;/ramdisk.img -kernel &amp;lt;IMAGES&amp;gt;/kernel-qemu&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;images&gt;是刚刚存放那俩镜像文件的目录. &lt;/images&gt;&lt;/p&gt;
&lt;h3 id="di-wu-bu-telnetlian-jie-xu-ni-ji"&gt;第五步: telnet连接虚拟机&lt;/h3&gt;
&lt;p&gt;课程里用的emulator使用telnet服务器, 且是在虚拟机的23端口接收信息. 先重定向一下端口, 定向到localhost的4444端口:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;adb forward tcp:4444 tcp:23&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样, 以后要登录模拟器emulator的时候, 只需要输入: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;telnet localhost 4444&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(用户名是root, 不要密码)&lt;/p&gt;
&lt;h2 id="di-liu-bu-yong-liang-chong-fang-fa-jin-ru-xu-ni-ji_1"&gt;第六步: 用两种方法进入虚拟机&lt;/h2&gt;
&lt;p&gt;刚才的4444端口是进入emulator用的, 而打开虚拟机的时候, 窗口标题是一个数字再加虚拟机的名字(我的显示的是"5554:inf422"), 这个5554是另外一个端口, 用于用shell方式登陆, 登陆后可以使用shell命令查看文件或者进行一些操作. &lt;/p&gt;
&lt;p&gt;而与之对应, 从4444端口登陆, 则是进入emulator的控制console&lt;/p&gt;
&lt;p&gt;&lt;em&gt;两种方法和AVD交流:&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;console: linux命令, 命令行&lt;/li&gt;
&lt;li&gt;emulator: 发送命令产生一些事件(电话, 短信, GPS等)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第二种方式可以模拟一些手机事件, 很有用... 使用help命令查看emulator怎么使用&lt;/p&gt;</summary><category term="android"></category><category term="inf422"></category></entry><entry><title>android开发视频教程(重制版) 第一季 课程笔记</title><link href="https://x-wei.github.io/tech/android%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E7%AC%AC%E4%B8%80%E5%AD%A3%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><published>2013-07-31T00:00:00+02:00</published><updated>2013-07-31T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2013-07-31:tech/android开发教程第一季笔记.html</id><summary type="html">&lt;h1 id="s01e02-kai-fa-huan-jing-da-jian"&gt;S01E02: 开发环境搭建&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;直接去 developer.android.com/sdk/ 下载bundle解压即可, 里面包含eclipse&lt;/li&gt;
&lt;li&gt;新建一个模拟器: 内部存储一般64MB足矣:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;h1 id="s01e03-androidxiang-mu-mu-lu-jie-gou"&gt;S01E03: android项目目录结构&lt;/h1&gt;
&lt;h4 id="di-yi-ge-androidcheng-xu"&gt;第一个android程序&lt;/h4&gt;
&lt;p&gt;new--&amp;gt;android application&lt;/p&gt;
&lt;h4 id="mu-lu-jie-gou"&gt;目录结构&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;com.example.helloworld这个包名一般为网址倒着写, android是按照包名来区分不同APP的&lt;/li&gt;
&lt;li&gt;src/目录下存放java程序&lt;/li&gt;
&lt;li&gt;gen/目录下存放系统自动生成的文件, R.java里给每一个控件或变量赋予一个id, 千万__不要手动修改R,.java内容__!!&lt;/li&gt;
&lt;li&gt;assets/目录下和res/目录下都可以放各种外部文件(ex. 图片), 但是assets下的文件不会在R.java中生成id&lt;/li&gt;
&lt;li&gt;res/layout/ 存放布局文件(xml格式)&lt;/li&gt;
&lt;li&gt;AndroidManifest.xml用于统筹&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e04-ji-zhu-jie-gou_1"&gt;S01E04: 技术结构&lt;/h1&gt;
&lt;h4 id="si-ceng-jie-gou-tu"&gt;四层结构图&lt;/h4&gt;
&lt;p&gt;开发位于最上层application
&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;h4 id="ji-yu-zu-jian-de-ying-yong-cheng-xu-kai-fa"&gt;基于组件的应用程序开发&lt;/h4&gt;
&lt;p&gt;搭积木&lt;/p&gt;
&lt;h4 id="chang-jian-zu-jian"&gt;常见组件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;activity(负责用户交互); &lt;/li&gt;
&lt;li&gt;service(后台处理数据); &lt;/li&gt;
&lt;li&gt;Content Provider(对外提供数据); &lt;/li&gt;
&lt;li&gt;BroadcastReceiver(接收broadcast)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e05-activitychu-bu_1"&gt;S01E05: activity初步&lt;/h1&gt;
&lt;h4 id="activityqi-dong-ji-ben-liu-cheng"&gt;Activity启动基本流程&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AndroidManifest.xml里面指定, 程序运行后执行MainActivity.java&lt;/li&gt;
&lt;li&gt;MainActivity.java的onCreate()函数里setContentView(R.layout.activity_main); 读取activity_main.xml文件并显示&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="activityyu-bu-ju-wen-jian"&gt;Activity与布局文件&lt;/h4&gt;
&lt;p&gt;一一对应 (eclipse编辑器里有图形化预览界面)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;h4 id="zai-activitydang-zhong-huo-qu-dai-biao-kong-jian-dui-xiang"&gt;在Activity当中获取代表控件对象&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先在activity_main.xml里定义控件时, 为其指定一个id: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"@+id/textView1"&lt;/span&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"+id"&lt;/span&gt;&lt;span class="err"&gt;表示新建一个&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;→ 自动在R.java里生成一个id:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public static final class id {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        public static final int textView1=0x7f080003;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;→ 之后在MainActivity.java里, 先声明成员变量:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;private TextView tv&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;→ 在onCreate()中, 通过id获得这个控件对象:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;tv = (TextView) findViewById(R.id.textView1);//有向下转型: TextView是View的子类&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;→ 之后就可以调用tv的各种方法了,具体见SDK里的文档i(android.widget.TextView), 从而实现再java程序里动态修改控件属性.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e06-view_1"&gt;S01E06: View&lt;/h1&gt;
&lt;h4 id="viewde-ji-ben-gai-nian"&gt;View的基本概念&lt;/h4&gt;
&lt;p&gt;View是一个控件?...&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image008.png"/&gt;&lt;/p&gt;
&lt;h4 id="wei-yi-ge-viewbang-ding-jian-ting-qi"&gt;为一个View绑定监听器&lt;/h4&gt;
&lt;p&gt;(我就认为View是一个控件了)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;java程序里获取控件代表的对象: findViewById()方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bt = (Button) findViewById(R.id.button1);&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义一个&lt;strong&gt;内部类&lt;/strong&gt; 实现监听器接口:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;// **使用一个内部类定义监听器**&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// Button的监听器 实现OnClickListener接口, OnClickListener接口是处理点击事件的&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;class ButtonListener implements OnClickListener {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// 实现该接口的抽象方法onClick&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public void onClick(View v) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;//do something......&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}// end 内部类ButtonListener&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;onCreate()里生成一个监听器对象, 并为控件绑定该监听器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;ButtonListener bl = new ButtonListener();// 生成一个监听器对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;bt.setOnClickListener(bl);// **这句话把监听器和事件联系在一起了** 点击这个按钮 就会执行它的onclick方法&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个监听器可以绑定给多个控件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;另法&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以直接写在setOnClickListener参数里, 不用给内部类起名字: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    bt.setOnClickListener(new OnClickListener() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    @Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public void onClick(View v) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    //do something......&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    });&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="s01e07-bu-ju_1"&gt;S01E07: 布局&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;所谓的控件布局方法,就是指控制控件在Activity当中的位置、大小、颜色以及其他控件样式属性的方法。&lt;/li&gt;
&lt;li&gt;布局可以用xml布局文件(ex. /res/layout/activity_main.xml) 也可以在java文件里完成控件布局&lt;/li&gt;
&lt;li&gt;最常用: 线性布局LinearLayout, 相对布局RelativeLayout&lt;/li&gt;
&lt;li&gt;先暂时用线性布局LinearLayout, 最简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e08-ju-chi-dan-wei-bian-ju"&gt;S01E08: 距离单位; 边距&lt;/h1&gt;
&lt;h4 id="ju-chi-dan-wei-px-dp-sp"&gt;距离单位: px, dp, sp&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;px&lt;/strong&gt;=像素点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用px指定控件大小, 则不同分辨率手机显示结果不同, 非常麻烦.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dpi计算公式:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image009.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dp&lt;/strong&gt;=dip(Device Independent pixels) 是设备无关的像素单位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;换算公式&lt;code&gt;px = dp * (dpi / 160)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;在320*480的屏幕上, dp与px相等 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总之一般指定控件大小就用dp&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sp&lt;/strong&gt;=scaled pixels 可改变大小的像素单位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当用户修改手机显示字体时,sp会随之改变&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sp单位通常用于指定字体的大小&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id="nei-wai-bian-ju-margin-padding"&gt;内外边距: margin, padding&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;margin: 控件离其他控件的距离&lt;/li&gt;
&lt;li&gt;padding: 控件内容离控件边框的距离&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image010.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置内边距与外边距:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;layout_margin, layout_marginTop, ...
padding, paddingTop, ...&lt;/p&gt;
&lt;h2 id="s01e09-checkboxduo-xuan-kuang_1"&gt;S01E09: CheckBox多选框&lt;/h2&gt;
&lt;p&gt;效果: 
&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image011.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;布局文件里使用&lt;checkbox&gt;&lt;/checkbox&gt;标签&lt;/li&gt;
&lt;li&gt;OnClickListener与OnCheckedChangeListener监听器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; 这俩监听器是有一定区别的, OnClickListener必须是用户点击才能触发, OnCheckedChangeListener则是只要状态改变了(即使是由程序里改变的)就会触发&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以几个CheckBox绑定上同一个监听器&lt;/li&gt;
&lt;li&gt;OnClickListener接口的方法: public void onClick(View v) 有一个&lt;strong&gt;参数View v&lt;/strong&gt;, 指的是是哪个控件被点击了, &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在onClick()中要处理这个控件时, 使用:&lt;code&gt;CheckBox cb = (CheckBox) v;&lt;/code&gt;
得到这个控件对象, 或者通过其&lt;code&gt;id: v.getId()&lt;/code&gt;也可以&lt;/p&gt;
&lt;h2 id="s01e10-dan-xuan-kuang-radiobutton"&gt;S01E10: 单选框RadioButton&lt;/h2&gt;
&lt;p&gt;效果: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image013.png"/&gt;&lt;/p&gt;
&lt;h4 id="radiogroup"&gt;RadioGroup&lt;/h4&gt;
&lt;p&gt;单选按钮RadioButton需要放在一个RadioGroup中&lt;/p&gt;
&lt;p&gt;xml代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;RadioGroup&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/radioGroupId"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"0dp"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:layout_gravity=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:orientation=&lt;/span&gt;&lt;span class="s"&gt;"vertical"&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:layout_weight=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;RadioButton&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/radioButton_h"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"homme"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;RadioButton&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/radioButton_f"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"femmee"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/RadioGroup&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;&amp;lt;!-- 像RadioGroup这样写的xml标签可以拥有子标签, 而像RadioButton这种则不能 →&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="radiogroupde-oncheckedchangelistener"&gt;RadioGroup的OnCheckedChangeListener&lt;/h4&gt;
&lt;p&gt;有俩参数... (RadioGroup group, int checkedId)&lt;/p&gt;
&lt;p&gt;直接上代码吧: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RadioGroupListener&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;implements&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RadioGroup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnCheckedChangeListener&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;注意看这俩参数&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onCheckedChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RadioGroup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;group&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;checkedId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;checkedId是被选择的哪个RadioButton的Id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;而不是什么序号&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkedId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radioButton_h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;用两种方法得到想要的id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;使用R中定义的&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;tv3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"Homme!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;rb_h2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setChecked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkedId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rb_f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getId&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;使用getid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="n"&gt;方法&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;tv3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"Femme!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;rb_f2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setChecked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="s01e11-xian-shi-tu-pian-imageview_2"&gt;S01E11: 显示图片ImageView&lt;/h1&gt;
&lt;h4 id="cha-tu-de-fang-fa"&gt;插图的方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;把图片放在./res/drawable 里面(有好几个分辨率的drawable, 随便一个...), ex. 放在了./res/drawable-hdpi/pic.jpg&lt;/li&gt;
&lt;li&gt;→ 会在R.java里生成其&lt;code&gt;id: pic&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在xml中使用&lt;imageview&gt;&lt;/imageview&gt;标签&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;引用放好的图: 
&lt;code&gt;android:src="@drawable/pic"&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="scaletype"&gt;ScaleType&lt;/h4&gt;
&lt;p&gt;ScaleType属性控制图片缩放的尺寸, 有几个可选: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fitcenter等比例缩放并居中显示; &lt;/li&gt;
&lt;li&gt;fitstart靠上显示; &lt;/li&gt;
&lt;li&gt;center 若图片较大则把中央部分截取出来显示,不缩放若图片小则直接居中显示, 也不缩放 &lt;/li&gt;
&lt;li&gt;centerCrop 缩放并进行裁剪以适应ImiageView&lt;/li&gt;
&lt;li&gt;centerInside 要是图片大就缩放放进去, 图片小就不缩放直接放进去&lt;/li&gt;
&lt;li&gt;Fit_XY缩放成和ImageView一样大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;代码片段: &lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;ImageView&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    android:id="@+id/imageView1Id"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    android:layout_width="60dp"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    android:layout_height="70dp"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    android:background="#FF0000"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    android:scaleType="fitCenter"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    android:layout_weight="1"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    android:src="@drawable/pic" /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;lt;!-- "@drawable/pic"是对应于R.drawable.pic, 实际上图片也可以放在assets文件夹 或者网络上 或者SD卡上 都可以, 不过以后再用 --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="s01e12-xian-xing-bu-ju-shen-ru_1"&gt;S01E12: 线性布局深入&lt;/h1&gt;
&lt;h4 id="xian-xing-bu-ju-qian-tao"&gt;线性布局嵌套&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在LinearLayout里面再加入LinearLayout&lt;/li&gt;
&lt;li&gt;"直接父/子控件"&lt;/li&gt;
&lt;li&gt;嵌套层数没有限制&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="layout_weight"&gt;layout_weight&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;子控件并未占满父控件的所有空间时才有用&lt;/li&gt;
&lt;li&gt;layout_weight的值用于指定&lt;strong&gt;空闲空间的&lt;/strong&gt;分配__比例__: weight都是1的话--是按比例平分父控件的__剩余(!!!)__空间, 而不是整个父控件被按比例分配!&lt;/li&gt;
&lt;li&gt;如果想让父控件按比例分配: 很简单, __把宽度改为0dp__即可(那么父控件剩余空间=父控件总空间!)&lt;/li&gt;
&lt;li&gt;使用了线性布局嵌套以及weight属性, 已经可以制作一些相对较复杂的布局了&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e13-xiang-dui-bu-ju-i_1"&gt;S01E13: 相对布局-I&lt;/h1&gt;
&lt;h4 id="xiang-dui-bu-ju-def"&gt;相对布局def&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;相对布局是通过指定当前控件__与兄弟控件或者是父控件之间的相对位置__,从而达到控制控件位置的目的  &lt;/li&gt;
&lt;li&gt;实现同样界面, 用相对布局比用线性布局简单--&lt;strong&gt;UI性能&lt;/strong&gt;更好些&lt;/li&gt;
&lt;li&gt;UI性能: 布局嵌套越多, 性能越差!!...&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="ji-ben-si-lu"&gt;基本思路&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;未指定位置时: 默认往左上角放(可能会重叠!)&lt;/li&gt;
&lt;li&gt;可以先放一个控件, 然后第二个控件指定其相对位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="shi-xian-fang-fa"&gt;实现方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;android:layout_below/layout_above等等等等... 放置在其左(右)边; 属性的值都是其他控件的id&lt;/li&gt;
&lt;li&gt;android:id="@+id/tvv1"是创建一个新id; android:layout_toRightOf="@id/tvv1"则是引用已有的id(没有加号)&lt;/li&gt;
&lt;li&gt;android:layout_alignLeft/Right等等等等..... 左(右)对齐; 属性的值都是其他控件的id  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e14-xiang-dui-bu-ju-ii_1"&gt;S01E14: 相对布局II&lt;/h1&gt;
&lt;h4 id="dui-qi-dao-ji-zhun-xian"&gt;对齐到基准线&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;基准线:为了保证印刷字母的整齐而划定的线 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;第三条线就是所谓的基准线(baseline)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex. 两个TextView__的基准线__相互对齐&lt;/li&gt;
&lt;li&gt;作用: 当俩TextView的字体大小不相同时...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;h4 id="he-fu-kong-jian-dui-qi"&gt;和父控件对齐&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;android:layout_alignParentLeft/Right等等... 属性的值为true/false(因为只有一个直接父控件)&lt;/li&gt;
&lt;li&gt;android:layout_centerInParent/layout_centerHorizontal等等...&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e15-xiang-dui-bu-ju-iii_1"&gt;S01E15: 相对布局III&lt;/h1&gt;
&lt;h4 id="relativelayoutbu-ju-de-xin-shu-xing-android-42"&gt;RelativeLayout布局的新属性(Android 4.2)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;android:layout_alignStart/End等 值是其他控件的id, 头部和尾部对齐&lt;/li&gt;
&lt;li&gt;android:layout_alignParentStart/End, 值是true/false&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="xiang-dui-bu-ju-xiao-lian-xi"&gt;相对布局小练习&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image014.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码片段:&lt;/strong&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;RelativeLayout&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/RL0"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"fill_parent"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"fill_parent"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/tv1"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_centerHorizontal=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:gravity=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"login..."&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;"16sp"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nt"&gt;&amp;lt;EditText&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/editText1"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_below=&lt;/span&gt;&lt;span class="s"&gt;"@id/tv1"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_centerHorizontal=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:ems=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:hint=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="nt"&gt;&amp;lt;requestFocus&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nt"&gt;&amp;lt;/EditText&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nt"&gt;&amp;lt;EditText&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/editText2"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_below=&lt;/span&gt;&lt;span class="s"&gt;"@id/editText1"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_centerHorizontal=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:ems=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:hint=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:inputType=&lt;/span&gt;&lt;span class="s"&gt;"textPassword"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/button1"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_alignParentRight=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_below=&lt;/span&gt;&lt;span class="s"&gt;"@+id/editText2"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"login"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/button2"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_below=&lt;/span&gt;&lt;span class="s"&gt;"@+id/editText2"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_toLeftOf=&lt;/span&gt;&lt;span class="s"&gt;"@+id/button1"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"cancel"&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;](file:///%3E)&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="nt"&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="s01e16-shi-jian-he-ri-qi-timepickerdatepicker_1"&gt;S01E16: 时间和日期 TimePicker/DatePicker&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;timepicker&gt;&lt;/timepicker&gt; &lt;datepicker&gt;&lt;/datepicker&gt;标签&lt;/li&gt;
&lt;li&gt;文档: android.widget.TimePicker/android.widget.DatePicker&lt;/li&gt;
&lt;li&gt;OnTimeChangedListener的onTimeChanged函数: public void onTimeChanged(TimePicker view, int hourOfDay, int minute) 仨参数&lt;/li&gt;
&lt;li&gt;getCurrentHour(); getCurrentMinute(); getMonth(); getDayOfMonth()等函数, 同理有set函数......&lt;/li&gt;
&lt;li&gt;注意月份是从零算起!!&lt;/li&gt;
&lt;li&gt;setIs24HourView() 切换24小时显示&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e17-jin-du-tiao-progressbar"&gt;S01E17: 进度条ProgressBar&lt;/h1&gt;
&lt;h4 id="ge-chong-jin-du-tiao"&gt;各种进度条&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image015.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image016.png"/&gt;&lt;/p&gt;
&lt;h4 id="jin-du-tiao-de-shu-xing"&gt;进度条的属性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;风格Style: 转圈圈: 垂直风格(默认); 一条线的进度条: Horizontal&lt;/li&gt;
&lt;li&gt;最大值: max&lt;/li&gt;
&lt;li&gt;当前进度:progress&lt;/li&gt;
&lt;li&gt;次要进度的值:SecondaryProgress (ex.次要进度: 解压缩文件时, 在线看视频时...)&lt;/li&gt;
&lt;li&gt;isIndeterminate()断进度条时不时不明确的(打酱油的, 比如转圈圈), 同理有set方法, 不过只能对水平风格适用.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e18-seekbarhe-ratingbar_1"&gt;S01E18: SeekBar和RatingBar&lt;/h1&gt;
&lt;h4 id="seekbar"&gt;SeekBar&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image017.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性: max/progress/&lt;/li&gt;
&lt;li&gt;监听器接口OnSeekBarChangeListener有三个函数要重写: &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SeekBarListener&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;implements&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OnSeekBarChangeListener&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;* seekBar 该对象指的是触发了监听器的SeekBar对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;* progress 指的是当前SeekBar的进度&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;* fromUser 指是不是用户手动改变的进度&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onProgressChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SeekBar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SeekBar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fromUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"progress:"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;",fromUser:"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fromUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onStartTrackingTouch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SeekBar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seekBar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"onStart"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onStopTrackingTouch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SeekBar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seekBar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"onStop"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="ratingbar"&gt;RatingBar&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image018.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性: numStars(星星个数), progress, stepSize(步进)&lt;/li&gt;
&lt;li&gt;监听器代码:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RatingBarListener&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;implements&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OnRatingBarChangeListener&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onRatingChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RatingBar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ratingBar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fromUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"rating:"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rating&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;",fromUser:"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fromUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="android"></category></entry><entry><title>我的ubuntu10.04配置总结</title><link href="https://x-wei.github.io/tech/%E6%88%91%E7%9A%84ubuntu10.04%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93.html" rel="alternate"></link><published>2013-07-20T00:00:00+02:00</published><updated>2013-07-20T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2013-07-20:tech/我的ubuntu10.04配置总结.html</id><summary type="html">&lt;p&gt;ubuntu已经出到了13.04, 我之所以坚持使用ubuntu10.04的版本(到现在已经三年了, 现在10.04已经过了支持周期而我还在继续用它), 主要是因为ubuntu出的unity界面以及gnome3的界面实在是用起来不爽(吐槽不已!!)... &lt;/p&gt;
&lt;p&gt;目前我的lucid(ubuntu 10.04)经过我的配置, 在我用来已经十分顺手了.. 不过长久这么下去也不是办法...... 在换新的主力系统之前, 把我目前这个系统的配置写下来.&lt;/p&gt;
&lt;h2 id="an-zhuang-de-ruan-jian"&gt;安装的软件&lt;/h2&gt;
&lt;p&gt;写一下用起来特别爽的一些软件: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geany&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;万能IDE&lt;/strong&gt;, java/python/Cpp/matlab(octave)... 甚至tex都是用它写的, 轻巧强大. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zim桌面维基&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;神器&lt;/strong&gt;, 用来写笔记整理思路, 这篇就是在zim下写的. 自从2012年发现zim这个东西以后, 到现在写了上百条笔记了, 确实方便.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GNU octave&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;matlab的开源替代, 语法和matlab完全兼容, 毕设就是用它做的, 如果不用matlab工具箱的话, 这个是很好的选择, 而且比较小巧, 启动很快.
......不过法国人貌似比较喜欢他们自己搞出来的scilab.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;音乐播放器audacious&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;界面和简洁, 用起来蛮好, 不过可能其他播放器也差不到哪里去...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;词典goldendict&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个还不是最新的版本(我用的是0.9.0), 已经相当顺手了. 可以自己加stardict的词典文件, 从网上可以找到很多(包括法语的词典), 用起来比stardict方便, 屏幕取词什么的也很好用.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GNOME Mplayer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感觉这个界面简洁些, 可能其他播放器(VLC之类)也差不到哪里去.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QQ: wine-TM2009&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;地址在&lt;a href="http://www.mintos.org/network/wineqq.html"&gt;这里&lt;/a&gt;, 根据我的经验, 别再折腾了, 这个就是最好的解决方案...&lt;/p&gt;
&lt;h2 id="pei-zhi"&gt;配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;zip乱码解决&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之前&lt;a href="http://x-wei.github.io/zip%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3.html"&gt;介绍过&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="wai-guan"&gt;外观&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;globalmenu+windowbuttons&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装这两个插件以后, 可以真的&lt;strong&gt;最大化&lt;/strong&gt;利用屏幕空间, 很科学...(貌似是跟苹果学的?)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义的主题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Faenza图标主题; elementary窗口主题; ComixCursors鼠标主题; clearlooks控件...
总之这大概就是我觉得最舒服的外观主题了...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;边缘触发动作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;compiz的设置, 把鼠标移动到左下角会显示桌面, 很方便...(貌似是跟苹果学的?)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;compiz特效&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;立方体特效, 开四个桌面(这个其实很实用, 尤其是开十个以上窗口时......);
动画特效, "对所有事件使用随机动画"(这个开了以后效果惊艳, 而且即使老电脑开了这个一点也不会卡, 完爆win...);
其他特效还没全开...... &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;护眼背景色(gnome+chrome)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://x-wei.github.io/gnome-background.html"&gt;gnome的设置&lt;/a&gt;;
&lt;a href="http://x-wei.github.io/gnome-background.html"&gt;chrome的设置&lt;/a&gt;;&lt;/p&gt;
&lt;h3 id="kuai-jie-jian"&gt;快捷键&lt;/h3&gt;
&lt;p&gt;总结一下配置的快捷键: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示桌面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;win+D&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开浏览器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;win+B (取"&lt;strong&gt;B&lt;/strong&gt;rowser"之意)
关联的命令是&lt;code&gt;google-chrome&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开文件管理器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;win+F (取"&lt;strong&gt;F&lt;/strong&gt;ile"之意)
命令: &lt;code&gt;nautilus --browser /home/your_username&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开goldendict&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ctrl+alt+D&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;截图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;win+S
命令是: &lt;code&gt;gnome-screenshot -ia&lt;/code&gt;
这个之前也&lt;a href="http://x-wei.github.io/scrshot-shortcut.html"&gt;写过&lt;/a&gt;.&lt;/p&gt;</summary><category term="ubuntu"></category><category term="外观"></category><category term="快捷键"></category></entry><entry><title>网页图片自动适应浏览器宽度</title><link href="https://x-wei.github.io/tech/%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E9%80%82%E5%BA%94%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%BD%E5%BA%A6.html" rel="alternate"></link><published>2013-03-28T20:36:00+01:00</published><updated>2013-03-28T20:36:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2013-03-28:tech/网页图片自动适应浏览器宽度.html</id><summary type="html">&lt;p&gt;眼看三月又要结束了, blog还没有更新, 拿来以前写在zim里的一条笔记充数... &lt;/p&gt;
&lt;p&gt;有了zim以后, 几乎不再用office了, 常用它编辑一些富文本, 比如加粗, 下划线, 斜体什么的, 有快捷键操作, 很方便, 插图也很简单. zim是我认为的神器(神器=小巧+强大)之一. &lt;/p&gt;
&lt;p&gt;有时候用zim写好的笔记给别人看时, 直接按"ctrl+p"就可以打印成网页的格式了, 非常方便(而且得承认, 单论富文本的显示效果, 网页格式 &amp;gt; pdf格式 &amp;gt; doc格式). 只是有一点不太好, 就是有时插入的照片很大, 在浏览器里查看的时候显示的还是原尺寸图像, 非常方便...&lt;/p&gt;
&lt;p&gt;查了一下, 其实只要在html文件关于插入图片那一行加入&lt;code&gt;width="100%" height="100%" style="z-index:-100"&lt;/code&gt;就可以了.&lt;/p&gt;
&lt;p&gt;比如, 在zim生成的html文件里, 这样替换就可以了: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;img src="./xxx网页_files/IMG_1186.JPG" alt="" &amp;gt;&amp;lt;br&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;⇒&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;img src="./xxx网页_files/IMG_1186.JPG" alt="" width="100%" height="100%" style="z-index:-100"&amp;gt;&amp;lt;br&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即进行替换:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;" alt=""&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;⇒&lt;/p&gt;
&lt;p&gt;&lt;code&gt;" alt="" width="100%" height="100%" style="z-index:-100"&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个我倒是时常用到, 比如给家人发最近活动的照片时 , 可以用zim写上一些文字作为照片的注释, 然后生成网页文件然后打包发掉...&lt;/p&gt;
&lt;p&gt;OK, 水文结束...&lt;/p&gt;</summary></entry><entry><title>水源PPP板图片下载器</title><link href="https://x-wei.github.io/tech/%E6%B0%B4%E6%BA%90PPP%E6%9D%BF%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E5%99%A8.html" rel="alternate"></link><published>2012-06-07T20:14:00+02:00</published><updated>2012-06-07T20:14:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2012-06-07:tech/水源PPP板图片下载器.html</id><summary type="html">&lt;p&gt;这个其实是三月份的时候做的, 当时刚刚学会用urllib和正则表达式做一些爬虫, 于是结合人民群众的需要, 写了个小脚本(福利~) &lt;/p&gt;
&lt;p&gt;不过现在我还只是会照葫芦画瓢那样用urllib, 没什么长进...&lt;/p&gt;
&lt;p&gt;github地址: &lt;a href="https://github.com/X-Wei/yssy_ppp_pic_downloader"&gt;https://github.com/X-Wei/yssy_ppp_pic_downloader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;p&gt;功能就是下载水源ppperson板里帖子的图片, 并且每个帖子一个文件夹放好. 通过修改main函数可以选择下载最近一页的帖子还是下载全部帖子(或者最近几页的帖子)&lt;/p&gt;
&lt;p&gt;原理很简单, 分析网页的html代码, 用正则表达式找出图片的地址然后下载到本地. 当时我已经写了两三个简单的爬虫, 所以这个写得蛮快, 而且只用50行就搞定了...&lt;/p&gt;
&lt;p&gt;不会用多线程, 只能一张一张下载, 帖子数目实在太多了, 我让它跑了一晚上, 第二天跑完, 下载了8个G的图, 几千个文件夹(囧)......&lt;/p&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;p&gt;不过还是遇到了一些问题, 比较老的帖子会有些图片404, 这时或者这个帖子对应的文件夹为空, 或者里面的图片其实不是图片, 而是出错信息的html代码(虽然看后缀是个图片). 我需要把那些不是图片的文件删掉, 而且要删掉所有的空文件夹. &lt;/p&gt;
&lt;p&gt;删除不是图片的文件(其实应该是删除纯文本文件), 在水源发贴问, 用shell命令(perl)做到了(虽然不明白为什么这样写...):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find yssy_ppp/ -type f | perl -ne 'chomp;unlink "$_" if -T $_'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;关于删除空目录, 发现&lt;code&gt;rmdir&lt;/code&gt;命令就已经可以了, 会删除空文件夹, 非空文件夹不会删除(虽然会显示警告).&lt;/p&gt;
&lt;p&gt;python里面调用shell命令只需要:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.system("shell_command")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以, 只需要在程序的最后加上两行:
    os.system('''find yssy_ppp/ -type f | perl -ne 'chomp;unlink "$&lt;em&gt;" if -T $&lt;/em&gt;' ''')
    os.system('rmdir yssy_ppp/*')&lt;/p&gt;
&lt;p&gt;虽然终端里运行时最后会因为那个&lt;code&gt;rmdir&lt;/code&gt;命令出一堆警告, 但是既然功能实现了就懒得改了...&lt;/p&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;p&gt;还写(改写)过一个人人相册下载的脚本, 不过需要改进, 不知毕业前能不能搞定......&lt;/p&gt;</summary><category term="git"></category><category term="python"></category><category term="shell"></category></entry><entry><title>交大beamer模板</title><link href="https://x-wei.github.io/tech/beamer_template.html" rel="alternate"></link><published>2012-06-02T00:00:00+02:00</published><updated>2012-06-02T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2012-06-02:tech/beamer_template.html</id><summary type="html">&lt;p&gt;毕设完了, 把答辩时用的beamer模板拿出来分享下.&lt;/p&gt;
&lt;p&gt;github项目地址:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/X-Wei/aBeamerTemplate4SJTU"&gt;https://github.com/X-Wei/aBeamerTemplate4SJTU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我是tex菜鸟, 基本是遇见什么问题然后上网搜一通找到解决方案... 这个模板自然也是参考的别人的了...&lt;/p&gt;
&lt;p&gt;参考自&lt;a href="http://yixf.name/2011/06/21/%E4%BD%BF%E7%94%A8xetex%E7%9A%84beamer%E6%A8%A1%E7%89%88/"&gt;Yixf’s blog&lt;/a&gt;, 我只是修改了一下主题, 换了一下交大的图标, 并且做了一些常用功能的例子...&lt;/p&gt;
&lt;p&gt;效果截图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./beamer_template/Screenshot.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用xelatex编译生成, latex估计不行, xelatex的配置参考&lt;a href="http://x-wei.github.com/xelatex_zh.html"&gt;这里&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑内容直接修改beame_body.tex即可, 改变设置一般在beamer_header.tex里&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我用的是文泉驿的字体, 可以修改beamer_header.tex改变字体设置, 查看已安装的中文字体的命令为: &lt;code&gt;fc-list :lang=zh-cn&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;个人一点感觉: 用tex写ppt有时也会因为少些括号或者什么地方没注意老编译不过, 所以用tex写也不一定能比用powerpoint方便, 不论啥工具, 只要能&lt;strong&gt;get things done&lt;/strong&gt;,就是好工具~&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="tex"></category><category term="git"></category></entry></feed>