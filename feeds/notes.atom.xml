<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mx's blog</title><link href="https://x-wei.github.io/" rel="alternate"></link><link href="https://x-wei.github.io/feeds/notes.atom.xml" rel="self"></link><id>https://x-wei.github.io/</id><updated>2020-04-05T00:00:00+02:00</updated><entry><title>[XCS224N] Lecture 8 – Translation, Seq2Seq, Attention</title><link href="https://x-wei.github.io/xcs224n-lecture8.html" rel="alternate"></link><published>2020-04-05T00:00:00+02:00</published><updated>2020-04-05T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2020-04-05:xcs224n-lecture8.html</id><summary type="html">&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image.png"/&gt;&lt;/p&gt;
&lt;h2 id="background-pre-neural-machine-translation"&gt;Background (Pre-Neural Machine Translation)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;machine translation (MT): sentence from &lt;em&gt;source lang&lt;/em&gt; to &lt;em&gt;target lang&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;1950s: rule based, using bilingual dictionary.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1990s-2010s: &lt;em&gt;Statistical&lt;/em&gt; MT (&lt;strong&gt;SMT&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;using Bayes rule: &lt;code&gt;P(y|x) = P(x|y)*P(y) / P(x)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ The &lt;strong&gt;language model&lt;/strong&gt; we already learnt in prev lectures
⇒ To get the &lt;strong&gt;translation model&lt;/strong&gt;: learn from a lot of &lt;em&gt;parallel data&lt;/em&gt;, e.g.large corpus of English doc and French translations
and break it down with &lt;strong&gt;alignment&lt;/strong&gt; &lt;code&gt;a&lt;/code&gt; :&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;Examples of alignment: can be without counterparts, or one-to-many, or many-to-one, or many-to-many, &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image005.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image008.png"/&gt;&lt;/p&gt;
&lt;p&gt;"Decoding": use heuristics to search for argmax sequence&lt;/p&gt;
&lt;h2 id="seq2seq-overview"&gt;Seq2Seq Overview&lt;/h2&gt;
&lt;p&gt;2014: &lt;strong&gt;NMT&lt;/strong&gt; to do machine translation using a single neural network.
architecture: seq2seq, with 2 RNNs.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image010.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image011.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image012.png"/&gt;&lt;/p&gt;
&lt;h4 id="training-nmt"&gt;Training NMT&lt;/h4&gt;
&lt;p&gt;In decoder RNN: instead of taking argmax to gen text, &lt;em&gt;take the neg log prob of the correct translated words&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image013.png"/&gt;&lt;/p&gt;
&lt;h2 id="decoding-methods_1"&gt;Decoding Methods&lt;/h2&gt;
&lt;p&gt;"&lt;em&gt;Greedy decoding&lt;/em&gt;": 
Always take argmax &lt;em&gt;at each step&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image014.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ the final greedy sentence might not be argmax over all sentences&lt;/p&gt;
&lt;p&gt;"&lt;em&gt;Exhaustive search decoding&lt;/em&gt;": &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image015.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ complexity O(V&lt;sup&gt;T&lt;/sup&gt;) , too expensive&lt;/p&gt;
&lt;p&gt;"&lt;em&gt;Beam search decoding&lt;/em&gt;"
(not guaranteed to find optimal solution, but very efficient.)
At each step, keep track the &lt;em&gt;k-most &lt;/em&gt;probable&lt;em&gt; hypotheses &lt;/em&gt;(partial translations).
k = &lt;em&gt;beam size&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image016.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;QUESTION: logP is negative, logP1*logP2 become positive?&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="beam-search-example"&gt;Beam Search Example&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image020.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image021.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image022.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image023.png"/&gt;&lt;/p&gt;
&lt;h4 id="stopping-criterion"&gt;Stopping criterion&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;In greedy decoding: we stop right after argmax= &lt;code&gt;&amp;lt;END&amp;gt;&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;In beam search: &lt;code&gt;&amp;lt;END&amp;gt;&lt;/code&gt; can be produced at different times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;when &lt;code&gt;&amp;lt;END&amp;gt;&lt;/code&gt; is produced, that hypothese is &lt;em&gt;complete&lt;/em&gt;, continue exploring other hypotheses.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image024.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;problem&lt;/strong&gt;: &lt;em&gt;longer&lt;/em&gt; hypotheses have &lt;em&gt;lower scores ?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;⇒ normalize scores by seq length:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image025.png"/&gt;&lt;/p&gt;
&lt;h2 id="nmt-advantages-disadvantages_1"&gt;NMT Advantages &amp;amp; Disadvantages&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;An e2e system: no subsystems to be individually optimized&lt;/li&gt;
&lt;li&gt;Much less human engineering effort&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt; (w.r.t. SMT)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;less interpretable, hard to debug&lt;/li&gt;
&lt;li&gt;difficult to control: can't specify rules or guidelines&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="evaluation"&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;Eval metrics for machine translation:
&lt;strong&gt;BLEU&lt;/strong&gt; (&lt;strong&gt;B&lt;/strong&gt;i&lt;strong&gt;l&lt;/strong&gt;ingual &lt;strong&gt;E&lt;/strong&gt;valuation &lt;strong&gt;U&lt;/strong&gt;nderstudy) — compute &lt;em&gt;similarity score&lt;/em&gt; between machine translations and human translations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;based on &lt;strong&gt;ngram precision&lt;/strong&gt; (n&amp;lt;=4): how many overlaps of 1/2/3/4-grams with human translations&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;brevity penalty&lt;/strong&gt;: penalty for too-short system translations&lt;/li&gt;
&lt;li&gt;BLEU is &lt;em&gt;useful&lt;/em&gt; but &lt;em&gt;imperfect&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NMT outperformed tranditional SMT systems in 2016.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image026.png"/&gt;&lt;/p&gt;
&lt;h2 id="attention-motivation-and-overview"&gt;Attention Motivation and Overview&lt;/h2&gt;
&lt;p&gt;The bottleneck problem with vanilla seq2seq architecture:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;depend too much&lt;/em&gt; on the single vector of the &lt;em&gt;last encoder RNN hidden state&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;⇒ only the last hidden state influences decoder behavior.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image027.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attention mechanism:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On each step of the decoder, use &lt;em&gt;direct connection to the encoder&lt;/em&gt;.
Focus on a &lt;em&gt;particular part&lt;/em&gt; of the source sequence&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Compute an &lt;strong&gt;attention score&lt;/strong&gt; as &lt;em&gt;dot prod&lt;/em&gt; between the current-step &lt;em&gt;decoder hidden state&lt;/em&gt; &lt;strong&gt;H&lt;sup&gt;(k)&lt;/sup&gt;&lt;sub&gt;d&lt;/sub&gt;&lt;/strong&gt; and each-step &lt;em&gt;encoder hidden state&lt;/em&gt; &lt;strong&gt;H&lt;sup&gt;(i)&lt;/sup&gt;&lt;sub&gt;e&lt;/sub&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image028.png"/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apply softmax(attention-scores) to turn the attention scores into &lt;strong&gt;attention distribution&lt;/strong&gt;, that shows which encoder hidden state we should focus on:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image029.png"/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;take the weighted average (according to the attention-distribution) of the encoder hidden states as &lt;strong&gt;attention output&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;(this is so-called "soft alignment" as it's a distribution instead of one-hot in SMT)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image030.png"/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use the "attention output" to influence the next word prediction in decoder&lt;/p&gt;
&lt;p&gt;e.g.&lt;em&gt;concat&lt;/em&gt; attention output with decoder current hidden state, and compute the decoder's word distribution and output a word&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image031.png"/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;decoder go to the next position, and repeat&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image032.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image033.png"/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="attention-equations"&gt;Attention Equations&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image034.png"/&gt;&lt;/p&gt;
&lt;h2 id="attention-advantages"&gt;Attention Advantages&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;significantly improves NMT performance: allow decoder to focus on certain parts of the source&lt;/li&gt;
&lt;li&gt;solves the bottleneck problem&lt;/li&gt;
&lt;li&gt;helps with &lt;em&gt;vanishing gradient&lt;/em&gt; problem: have direct connections between decoder and encoder over many timesteps&lt;/li&gt;
&lt;li&gt;provides some interpretability&lt;/li&gt;
&lt;li&gt;inspecting attention distribution, we can see what the decoder was focusing on&lt;/li&gt;
&lt;li&gt;we get (soft) alignment for free!&lt;ul&gt;
&lt;li&gt;The network just learned alignment by itself&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image035.png"/&gt;&lt;/p&gt;
&lt;h2 id="generalization-and-variants"&gt;Generalization and Variants&lt;/h2&gt;
&lt;p&gt;Attention is a &lt;em&gt;general&lt;/em&gt; Deep Learning technique
You can use attention in many &lt;em&gt;architectures&lt;/em&gt; (not just seq2seq) and many &lt;em&gt;tasks&lt;/em&gt; (not just MT).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More general definition of attention:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image036.png"/&gt;&lt;/p&gt;
&lt;p&gt;"&lt;em&gt;query&lt;/em&gt; &lt;strong&gt;attend&lt;/strong&gt; to the &lt;em&gt;values&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image037.png"/&gt;&lt;/p&gt;
&lt;p&gt;Intuition:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The weighted sum is a &lt;em&gt;selective summary&lt;/em&gt; of the information contained in the &lt;strong&gt;values&lt;/strong&gt;, where the &lt;strong&gt;query&lt;/strong&gt; determines which values to focus on&lt;/li&gt;
&lt;li&gt;Attention is a way to obtain a fixed-size representation of an arbitrary set of representations (the &lt;strong&gt;values&lt;/strong&gt;), dependent on some other representation (the &lt;strong&gt;query&lt;/strong&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Attention &lt;em&gt;variants&lt;/em&gt; on how to compute attention score:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basic dot-product attention&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image039.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiplicative attention:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;use a bilinear func of query and value-i&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image038.png"/&gt;&lt;/p&gt;
&lt;p&gt;the weight matrix is &lt;em&gt;learnable&lt;/em&gt; parameter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Additive attention&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture8/pasted_image040.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;W1&lt;/code&gt; , &lt;code&gt;W2&lt;/code&gt; and weight vector &lt;code&gt;v&lt;/code&gt; are learnable, attention dimensionality d3 is hyperparam&lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[XCS224N] Lecture 7 – Vanishing Gradients and Fancy RNNs</title><link href="https://x-wei.github.io/xcs224n-lecture7.html" rel="alternate"></link><published>2020-04-04T00:00:00+02:00</published><updated>2020-04-04T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2020-04-04:xcs224n-lecture7.html</id><summary type="html">&lt;h2 id="vanishing-gradient-intuition-and-proof"&gt;Vanishing Gradient Intuition and Proof&lt;/h2&gt;
&lt;p&gt;ex: grad of loss at position 4 w.r.t.hidden state at postion 1&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;with chain rule, the grad is smaller as it backprops&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image002.png"/&gt;
 ⇒ 
&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;p&gt;If  the &lt;em&gt;largest eigenvalue&lt;/em&gt; of &lt;code&gt;Wh&lt;/code&gt; is less than 1, the gradient J_i/h_j will exponentially shrink.&lt;/p&gt;
&lt;h2 id="why-vanishing-gradient-is-a-problem"&gt;Why Vanishing Gradient is a Problem&lt;/h2&gt;
&lt;p&gt;J2/h1 is bigger than J4/h1&lt;/p&gt;
&lt;p&gt;Model weights are only updated only with respect to &lt;em&gt;near effects&lt;/em&gt;, not &lt;em&gt;long-term effects&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Gradient can be viewed as a measure of the &lt;em&gt;effect of the past on the future&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;example:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;p&gt;RNN models leans better &lt;em&gt;sequential&lt;/em&gt; recency than &lt;em&gt;syntactic&lt;/em&gt; recency.&lt;/p&gt;
&lt;h2 id="exploding-gradients"&gt;Exploding Gradients&lt;/h2&gt;
&lt;p&gt;If the gradient is too big, &lt;em&gt;SGD update step&lt;/em&gt; is too big ⇒ this will result in Inf or NaN in your network.&lt;/p&gt;
&lt;p&gt;solution: &lt;strong&gt;gradient clipping&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;h2 id="lstm-overview"&gt;LSTM Overview&lt;/h2&gt;
&lt;p&gt;How to fix vanishing gradient:&lt;/p&gt;
&lt;p&gt;In a vanilla RNN, the hidden state is &lt;em&gt;constantly being rewritten&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image008.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ can we have an RNN with &lt;em&gt;separate memory&lt;/em&gt; ?&lt;/p&gt;
&lt;p&gt;⇒ &lt;strong&gt;LSTM&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Idea:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;at step &lt;code&gt;t&lt;/code&gt; , in addition to the hidden state &lt;code&gt;h_t&lt;/code&gt; , have a &lt;em&gt;cell state&lt;/em&gt; &lt;code&gt;c_t&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;both &lt;code&gt;h_t&lt;/code&gt; and &lt;code&gt;c_t&lt;/code&gt; are of length &lt;code&gt;n&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;cell states store long-term information&lt;/li&gt;
&lt;li&gt;the LSTM can &lt;em&gt;erase&lt;/em&gt;, &lt;em&gt;write&lt;/em&gt; and &lt;em&gt;read&lt;/em&gt; information from the cell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ the selection of &lt;em&gt;erase/write/read&lt;/em&gt; action is controlled by the corresponding &lt;strong&gt;gates:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;each gate is also vec of length &lt;code&gt;n&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;each timestep, each element of the gates can be &lt;em&gt;open&lt;/em&gt; (1), &lt;em&gt;closed&lt;/em&gt; (0), or somewhere in-between.&lt;/li&gt;
&lt;li&gt;open: info being passed through&lt;/li&gt;
&lt;li&gt;closed: info don't pass&lt;/li&gt;
&lt;li&gt;gates are dynamic: their value is computed based on the current context 
  i.e.gate = sigmoid(W&lt;sub&gt;h&lt;/sub&gt;&lt;em&gt;h&lt;sub&gt;t-1&lt;/sub&gt; + W&lt;sub&gt;x&lt;/sub&gt;&lt;/em&gt;x&lt;sub&gt;t&lt;/sub&gt; + b)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The three gates: &lt;strong&gt;f&lt;/strong&gt;, &lt;strong&gt;i&lt;/strong&gt;, &lt;strong&gt;o&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image010.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image011.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image012.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image013.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LSTM architecture makes it easier for the RNN to &lt;em&gt;preserve information over many timesteps&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;if forget gate &lt;strong&gt;f&lt;/strong&gt; is always 1, the info in the cell is preserved indefinitely&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LSTM doesn’t &lt;em&gt;guarantee&lt;/em&gt; that there is no vanishing/exploding gradient, but it does provide an easier way for the model to learn long-distance dependencies.&lt;/li&gt;
&lt;li&gt;Became successful in 2013-2015&lt;/li&gt;
&lt;li&gt;in 2019: other approaches (e.g.&lt;em&gt;Transformers&lt;/em&gt;) have become more dominant for certain tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="gated-recurrent-units"&gt;Gated Recurrent Units&lt;/h2&gt;
&lt;p&gt;Simpler alternative to the LSTM proposed in 2014.&lt;/p&gt;
&lt;p&gt;Main idea: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;remove the cell state&lt;/em&gt; c&lt;sub&gt;t&lt;/sub&gt;, only use hidden state h&lt;sub&gt;t&lt;/sub&gt;.&lt;/li&gt;
&lt;li&gt;still using gates to control flow of information&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gates:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image015.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image016.png"/&gt;&lt;/p&gt;
&lt;p&gt;GRU makes it easier to retain info long-term (e.g. by setting update gate &lt;strong&gt;u&lt;/strong&gt; to 0)&lt;/p&gt;
&lt;h2 id="lstm-vs-gru"&gt;LSTM vs GRU&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LSTM and GRU are most widely used RNN variants&lt;/li&gt;
&lt;li&gt;more robust to vanishing gradient problem&lt;/li&gt;
&lt;li&gt;GRU is &lt;em&gt;quicker&lt;/em&gt; to compute and has &lt;em&gt;less params&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;no conclusive evidence that one consistently performs better than the other&lt;/li&gt;
&lt;li&gt;LSTM is a &lt;em&gt;good default choice&lt;/em&gt; (especially if your data has particularly long dependencies, or you have lots of training data)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rule of thumb&lt;/strong&gt;: start with LSTM, but switch to GRU if you want something more efficient&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="vanishing-and-exploding-gradients-in-other-architectures"&gt;Vanishing and Exploding Gradients in Other Architectures&lt;/h2&gt;
&lt;p&gt;Vanishing/exploding gradient is &lt;strong&gt;NOT&lt;/strong&gt; just a RNN problem: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's a common pb for all &lt;em&gt;deep&lt;/em&gt; NN architectures.&lt;/li&gt;
&lt;li&gt;But RNNs are particularly unstable due to the &lt;em&gt;repeated multiplication by the same weight matrix&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;The lower layers are learnt very slowly (hard to train).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ solutoin: add more &lt;em&gt;direct connections&lt;/em&gt; (thus allowing the gradient to flow) &lt;/p&gt;
&lt;p&gt;ex1. "ResNet": residual connections (or skip-connections)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image017.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ makes &lt;em&gt;deep&lt;/em&gt; networks much easier to train&lt;/p&gt;
&lt;p&gt;ex2."DenseNet"
Directly connect everything to everything! (from all layers to all layers)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image018.png"/&gt;&lt;/p&gt;
&lt;p&gt;ex3."Highway connections"
Similar to residual connections, but the identity connection vs the transformation layer is &lt;em&gt;controlled by a dynamic gate&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="bidirectional-rnns"&gt;Bidirectional RNNs&lt;/h2&gt;
&lt;p&gt;task: sentiment classification
using: RNN, and using elementwise max to get sentence encoding&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image020.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ &lt;strong&gt;Bidir RNN&lt;/strong&gt;: two separate RNNs, concat&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image021.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image022.png"/&gt;&lt;/p&gt;
&lt;p&gt;If you do have &lt;em&gt;entire&lt;/em&gt; input sequence, bidirectionality is powerful (you should use it &lt;em&gt;by default&lt;/em&gt;)&lt;/p&gt;
&lt;h2 id="multi-layer-rnns"&gt;Multi-layer RNNs&lt;/h2&gt;
&lt;p&gt;Apply RNN in multiple layers&lt;/p&gt;
&lt;p&gt;⇒ allows the network to compute more complex representations&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture7/pasted_image023.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(2017 paper): 2 to 4 layers is best for the encoder RNN, and 4 layers is best for the decoder RNN&lt;/li&gt;
&lt;li&gt;skip-connections/dense-connections are needed to train &lt;em&gt;deeper&lt;/em&gt; RNNs (e.g. 8 layers)&lt;/li&gt;
&lt;li&gt;Transformer-based networks (e.g. BERT) can be up to 24 layers&lt;/li&gt;
&lt;/ul&gt;</summary><category term="deep learning"></category></entry><entry><title>[XCS224N] Lecture 6 – Language Models and RNNs</title><link href="https://x-wei.github.io/xcs224n-lecture6.html" rel="alternate"></link><published>2020-03-28T00:00:00+01:00</published><updated>2020-03-28T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2020-03-28:xcs224n-lecture6.html</id><summary type="html">&lt;h2 id="language-modeling"&gt;Language Modeling&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Language Modeling&lt;/strong&gt;: task of predicting what words come next.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;i.e.compute the conditional probability distribution&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image.png"/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a language model can also be viewed as a system to give probability to a piece of text.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="n-gram-language-models"&gt;n-gram Language Models&lt;/h2&gt;
&lt;p&gt;n-gram Language Model: &lt;em&gt;pre-deep learning&lt;/em&gt; solution for language modelling.&lt;/p&gt;
&lt;p&gt;idea: Collect statistics on &lt;em&gt;frequency of n-grams&lt;/em&gt;, and use these to predict next word&lt;/p&gt;
&lt;p&gt;(assumption: current word only dep on previous n-1 words)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image002.png"/&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image003.png"/&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;p&gt;sparsity problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;some ngrams never appear in training data&lt;/li&gt;
&lt;li&gt;partial solution: &lt;em&gt;smoothing&lt;/em&gt;, i.e. add small delta to all words in Vocab&lt;/li&gt;
&lt;li&gt;or the context n-1 gram is never in training data &lt;/li&gt;
&lt;li&gt;partial solution: &lt;em&gt;back-off&lt;/em&gt;, i.e. just condition on the n-2 gram&lt;/li&gt;
&lt;li&gt;storage problem: need to store counts for all ngrams&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;language model to &lt;em&gt;generate&lt;/em&gt; text:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image005.png"/&gt;&lt;/p&gt;
&lt;h2 id="neural-language-models"&gt;Neural Language Models&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;window-based&lt;/em&gt; neural model: use a fixed window&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ compared to ngram model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no sparsity problem&lt;/li&gt;
&lt;li&gt;no storage problem&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;remaining problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;window too small&lt;/li&gt;
&lt;li&gt;words at different positions use different weights, &lt;em&gt;no symmetry&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ need a NN model that can process &lt;em&gt;any length input&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="rnn-overview"&gt;RNN Overview&lt;/h2&gt;
&lt;p&gt;A new family of NN: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hidden state = function of prev hidden state and curr input vector&lt;/li&gt;
&lt;li&gt;apply the same weights &lt;code&gt;W&lt;/code&gt; &lt;em&gt;repeatedly&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image009.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image010.png"/&gt;&lt;/p&gt;
&lt;h2 id="rnn-advantages-and-disadvantages"&gt;RNN Advantages and Disadvantages&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;pros:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;any length input&lt;/li&gt;
&lt;li&gt;Computation for step &lt;code&gt;t&lt;/code&gt; can (&lt;em&gt;in theory&lt;/em&gt;) use information from many steps back&lt;/li&gt;
&lt;li&gt;Model size doesn’t increase for longer input&lt;/li&gt;
&lt;li&gt;symmetry in how inputs are processed: apply the same weights Wh and We&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;cons:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slow&lt;/li&gt;
&lt;li&gt;difficult to access information from many steps back &lt;em&gt;in practice&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="training-rnn-models"&gt;Training RNN Models&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;get text corpus&lt;/li&gt;
&lt;li&gt;feed text to RNN language model, compute &lt;code&gt;y_t&lt;/code&gt; &lt;em&gt;for every step&lt;/em&gt; &lt;code&gt;t&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;loss function: cross entropy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image011.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;averaged for all steps t:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image012.png"/&gt;&lt;/p&gt;
&lt;p&gt;in practice: compute t for entire corpus is too expensive&lt;/p&gt;
&lt;p&gt;⇒ only compute for a sentence or a document&lt;/p&gt;
&lt;p&gt;SGD: only compute loss for a batch of sentences&lt;/p&gt;
&lt;h4 id="backprop"&gt;backprop&lt;/h4&gt;
&lt;p&gt;pb: the weights W is repeatedly applied, how to compute the grad?&lt;/p&gt;
&lt;p&gt;⇒&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image013.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multivariable Chain Rule&lt;/strong&gt;:
&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image014.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image015.png"/&gt;&lt;/p&gt;
&lt;h4 id="backprop-through-time"&gt;backprop through time&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image016.png"/&gt;&lt;/p&gt;
&lt;h2 id="rnn-text-generation_1"&gt;RNN Text Generation&lt;/h2&gt;
&lt;p&gt;use the RNN LM to gen text: sampled output is next step’s input.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image017.png"/&gt;&lt;/p&gt;
&lt;h2 id="evaluating-language-models"&gt;Evaluating Language Models&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Perplexity&lt;/strong&gt;: standard eval metrics of language models.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image021.png"/&gt;&lt;/p&gt;
&lt;p&gt;Perplexity equals &lt;code&gt;exp(J(theta))&lt;/code&gt; where J is cross-entropy loss ⇒ &lt;strong&gt;the smaller the better&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image022.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why should we care about Language Modeling?&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LM is a &lt;em&gt;benchmark task&lt;/em&gt; that helps us measure our progress on understanding language&lt;/li&gt;
&lt;li&gt;LM is a subcomponent of many NLP tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="recap"&gt;Recap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Language model&lt;/strong&gt;:  system that predicts the next word&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recurrent Neural Network:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;seq input of any length&lt;/li&gt;
&lt;li&gt;same weight on each step&lt;/li&gt;
&lt;li&gt;optionally produce output on each step&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RNN can be used for LM, but can be used for other taskes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RNN for POS tagging:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image023.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RNN for sentiment classification:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image024.png"/&gt;
&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image025.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RNN as an &lt;em&gt;encoder module&lt;/em&gt;: e.g.question answering, machine translation, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image026.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RNN used to gen text: e.g.speech recognition, machine translation, summarization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image028.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;terminology&lt;/strong&gt;: vanilla RNN, GRU, LSTM, etc.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture6/pasted_image027.png"/&gt;&lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[XCS224N] Lecture 5 – Dependency Parsing</title><link href="https://x-wei.github.io/xcs224n-lecture5.html" rel="alternate"></link><published>2020-03-23T00:00:00+01:00</published><updated>2020-03-23T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2020-03-23:xcs224n-lecture5.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Phrase structure&lt;/strong&gt;: organize words into nested constituents.&lt;/p&gt;
&lt;h2 id="context-free-grammars"&gt;Context-Free Grammars&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;context-free grammars (CFGs)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start with &lt;em&gt;words&lt;/em&gt;, words are given a category (part of speech = POS):&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;words combine into &lt;em&gt;phrases&lt;/em&gt; with categories like &lt;em&gt;NP&lt;/em&gt;(noun phrase) and &lt;em&gt;PP&lt;/em&gt;(prep.phrase):&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Phrases can combine into bigger phrases recursively:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ forms a tree structure:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image005.png"/&gt;&lt;/p&gt;
&lt;h2 id="dependency-structure"&gt;Dependency Structure&lt;/h2&gt;
&lt;p&gt;Different from CFGs, instead of having concepts of NP/PP/etc, &lt;strong&gt;dependency structure&lt;/strong&gt; shows which word &lt;em&gt;depend&lt;/em&gt; on which other word.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;h2 id="prepositional-phrase-attachment-ambiguity"&gt;Prepositional Phrase Attachment Ambiguity&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;example of ambiguties:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image008.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;multiplied ambiguities: &lt;/strong&gt;many PPs in a row&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image009.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image010.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ exp number of possible dep trees, &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image012.png"/&gt;&lt;/p&gt;
&lt;h2 id="dependency-grammar-structure-and-parsing"&gt;Dependency Grammar - Structure and Parsing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dependency syntax&lt;/strong&gt;: syntactic structure consists of &lt;em&gt;relations between lexical items&lt;/em&gt;, normally binary asymmetric relations (“arrows”) called &lt;strong&gt;dependencies&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The arrows are commonly &lt;em&gt;typed &lt;/em&gt;with the name of grammatical relations (subject, prepositional object, apposition, etc.)&lt;/li&gt;
&lt;li&gt;Usually, dependencies form a &lt;em&gt;tree&lt;/em&gt; (connected, acyclic, single-rooted graph)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image013.png"/&gt;&lt;/p&gt;
&lt;h2 id="treebanks"&gt;Treebanks&lt;/h2&gt;
&lt;p&gt;Universal Dependencies treebanks: human-annotated dep trees&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image014.png"/&gt;&lt;/p&gt;
&lt;p&gt;treebank vs.grammar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cons:&lt;/li&gt;
&lt;li&gt;slow&lt;/li&gt;
&lt;li&gt;pros:&lt;/li&gt;
&lt;li&gt;Reusability of the labor&lt;/li&gt;
&lt;li&gt;Broad coverage, not just a few intuitions&lt;/li&gt;
&lt;li&gt;Frequencies and distributional information&lt;/li&gt;
&lt;li&gt;A way to evaluate systems&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="more-on-dependency-parsing"&gt;More on Dependency Parsing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Dep parsing&lt;/strong&gt;: A sentence is parsed by &lt;em&gt;choosing for each word what other word&lt;/em&gt; (including ROOT) is it a dependent of.
constraints:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only one word is a dependent of &lt;code&gt;ROOT&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;no cycle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pb: whether arrows can cross (&lt;em&gt;non-projective&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image016.png"/&gt;&lt;/p&gt;
&lt;h2 id="transition-based-dependency-parsing"&gt;Transition-based Dependency Parsing&lt;/h2&gt;
&lt;p&gt;greedy discriminative dependency parser, a seq of bottom up actions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image018.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;States:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stack &lt;code&gt;alpha&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;buffer &lt;code&gt;beta&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;dependencies &lt;code&gt;A&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Possible actions&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SHIFT&lt;/code&gt; : removes the first word from the buffer and pushes it onto the stack.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LEFT-ARC&lt;/code&gt; : marks the second (second most recently added) item on the stack as a dependent of&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the first item and removes the second item from the stack.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RIGHT-ARC&lt;/code&gt; : marks the first (most recently added) item on the stack as a dependent of the second&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;item and removes the first item from the stack.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image024.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image017.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image019.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pb: how to choose the actions (shift/left-arc/right-arc) ?&lt;/strong&gt;
searching all possible actions or DP → cubical complexity❌️
⇒ &lt;em&gt;use ML to predict actions✔️&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;classes: 3 actions (for untyped choices)&lt;/li&gt;
&lt;li&gt;features: stack word, buffer word, POS&lt;/li&gt;
&lt;li&gt;can also do beam search:  keep &lt;em&gt;k&lt;/em&gt; good parse prefixes at each time step.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒  provides very fast &lt;em&gt;linear time parsing&lt;/em&gt;, with great performance
&lt;strong&gt;QUESTION: what creteria to select best path?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Conventional features: hand-engineered, &lt;strong&gt;binary (indicator) features&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image020.png"/&gt;&lt;/p&gt;
&lt;p&gt;(from assignement)
&lt;strong&gt;Four types of parsing errors&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prepositional Phrase&lt;/strong&gt; Attachment Error: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.
wrong: &lt;em&gt;Moscow sent [troops into Afghanistan]&lt;/em&gt; 
right: &lt;em&gt;Moscow sent [troops] [into Afghanistan]&lt;/em&gt;
⇒ prep phrase="&lt;em&gt;into Afghanistan&lt;/em&gt;", correct head word = "&lt;em&gt;sent&lt;/em&gt;", wrong head word = "&lt;em&gt;troops&lt;/em&gt;"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Verb Phrase&lt;/strong&gt; Attachment Error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;em&gt;[Leaving the store unattended], I went outside to watch the parade&lt;/em&gt;
⇒ verb phrase = "&lt;em&gt;Leaving the store unattended&lt;/em&gt;", head word="&lt;em&gt;went&lt;/em&gt;"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Modifier&lt;/strong&gt; Attachment Error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;em&gt;I am [extremely] short&lt;/em&gt;
⇒ modifier="&lt;em&gt;extremely&lt;/em&gt;", head word="&lt;em&gt;short&lt;/em&gt;"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Coordination&lt;/strong&gt; Attachment Error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;em&gt;Would you like brown rice or garlic naan?&lt;/em&gt;
⇒ conjuncts="&lt;em&gt;rown rice&lt;/em&gt;" and "&lt;em&gt;garlic naan&lt;/em&gt;", coordinating conjunction="&lt;em&gt;or&lt;/em&gt;"
The second conjunct (here "&lt;em&gt;garlic naan"&lt;/em&gt;) should be attached to the first conjunct (here "&lt;em&gt;brown rice"&lt;/em&gt;).&lt;/p&gt;
&lt;h2 id="evaluation-of-dependency-parsing"&gt;Evaluation of Dependency Parsing&lt;/h2&gt;
&lt;p&gt;eval metrics: &lt;em&gt;dependecy accuracy&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image022.png"/&gt;&lt;/p&gt;
&lt;h2 id="neural-dependency-parsing"&gt;Neural Dependency Parsing&lt;/h2&gt;
&lt;p&gt;problem with indicator features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sparse&lt;/li&gt;
&lt;li&gt;incomplete&lt;/li&gt;
&lt;li&gt;expensive computation: most time are wasted computing the features&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒  &lt;strong&gt;neural dependency parser&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;represent each word as a &lt;code&gt;d&lt;/code&gt; -dimensional &lt;em&gt;dense&lt;/em&gt; vector (word vectors)&lt;/li&gt;
&lt;li&gt;POS and dependency labels are also represented as dense vectors&lt;/li&gt;
&lt;li&gt;rational: some POS tags are similar, &lt;/li&gt;
&lt;li&gt;e.g. NNS(plural nouns) is similar to NN(singular noun), NUM(numbers) similar to AMOD(adj. modifier).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ concat the embeddings of features, feed into a feed forward NN:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture5/pasted_image023.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ The dense representations let it outperform other greedy parsers in both accuracy and speed&lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[XCS224N] Lecture 3 – Neural Networks</title><link href="https://x-wei.github.io/xcs224n-lecture3.html" rel="alternate"></link><published>2020-03-21T00:00:00+01:00</published><updated>2020-03-21T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2020-03-21:xcs224n-lecture3.html</id><summary type="html">&lt;p&gt;This week: neural net fundamentals&lt;/p&gt;
&lt;h2 id="classification-setup-and-notation"&gt;Classification Setup and Notation&lt;/h2&gt;
&lt;p&gt;training data:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image.png"/&gt;&lt;/p&gt;
&lt;h3 id="softmax-classifier"&gt;softmax classifier&lt;/h3&gt;
&lt;p&gt;(linear classifier — hyperplane): &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;ith row of the param W: weight vector for class i to compute logits: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;prediction = softmax of f_y:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;h3 id="cross-entropy"&gt;cross-entropy&lt;/h3&gt;
&lt;p&gt;goal: for (x, y), maximize p(y|x)
⇒ loss for (x, y) = -log p(y|x)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image005.png"/&gt;&lt;/p&gt;
&lt;p&gt;in our case, the truth distribution is &lt;code&gt;one-hot&lt;/code&gt; , i.e.p = [0, 0, ... , 1, ... 0]
⇒ cross entropy H = - sum{log q(y|x), for all x, y}&lt;/p&gt;
&lt;p&gt;loss for all training data = averaging the losses:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;p&gt;where the logits vector &lt;code&gt;f&lt;/code&gt; is:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;h2 id="neural-network-classifier_1"&gt;Neural Network Classifier&lt;/h2&gt;
&lt;p&gt;softmax or SVM or other linear models are not powerful enough
⇒ NN to learn nonlinear decision boundaries&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image008.png"/&gt;&lt;/p&gt;
&lt;p&gt;in NLP:
learn both &lt;em&gt;model parameters&lt;/em&gt; ( &lt;code&gt;W&lt;/code&gt; ) and &lt;em&gt;representations&lt;/em&gt; (wordvecs &lt;code&gt;x&lt;/code&gt; )&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image010.png"/&gt;&lt;/p&gt;
&lt;p&gt;artificial neuron: &lt;code&gt;y=f(Wx)&lt;/code&gt; , where f is nonlinear activation func.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image011.png"/&gt;&lt;/p&gt;
&lt;p&gt;when f = sigmoid = &lt;code&gt;1/(1+exp(-x))&lt;/code&gt; , the neuron is binary logistic regression unit.&lt;/p&gt;
&lt;p&gt;A neural network = running &lt;em&gt;several logistic regressions&lt;/em&gt; at the same time&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image013.png"/&gt;&lt;/p&gt;
&lt;p&gt;matrix notation: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image014.png"/&gt;&lt;/p&gt;
&lt;p&gt;Without non-linearities &lt;em&gt;f()&lt;/em&gt;, deep neural networks can’t do anything more than a linear transform.&lt;/p&gt;
&lt;h2 id="named-entity-recognition-ner"&gt;Named Entity Recognition (NER)&lt;/h2&gt;
&lt;p&gt;task: find and classify names in text&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image015.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;BIO encoding&lt;/em&gt;: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image016.png"/&gt;&lt;/p&gt;
&lt;h2 id="binary-word-window-classification"&gt;Binary Word Window Classification&lt;/h2&gt;
&lt;p&gt;Classify a word in its &lt;em&gt;context&lt;/em&gt; window of neighboring words.
simple idea: concat all context words&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image017.png"/&gt;&lt;/p&gt;
&lt;p&gt;Binary classification with unnormalized scores(2008&amp;amp;2011): 
build &lt;em&gt;true window&lt;/em&gt; and &lt;em&gt;corrupted windows&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image020.png"/&gt;&lt;/p&gt;
&lt;p&gt;feed-forward computation:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image021.png"/&gt;&lt;/p&gt;
&lt;p&gt;intuition: middle layer learns &lt;em&gt;non-linear interactions&lt;/em&gt; between words:
example: only if “&lt;em&gt;museums&lt;/em&gt;” is first vector should it matter that “&lt;em&gt;in&lt;/em&gt;” is in the second position.&lt;/p&gt;
&lt;p&gt;max-margin loss: let true window score be larger (by at leaset delta=1)than the corrupted window score.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image022.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;QUESTION: why we can use SGD when continuous?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SGD:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image023.png"/&gt;&lt;/p&gt;
&lt;h2 id="computing-gradients-by-hand"&gt;Computing Gradients by Hand&lt;/h2&gt;
&lt;p&gt;multivariable derivatives / matrix calculus&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;*when f is from Rn → R1, &lt;strong&gt;*Gradient&lt;/strong&gt;=vector of partial derivatives &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image024.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;when f is from Rn → Rm, &lt;em&gt;&lt;strong&gt;Jacobian&lt;/strong&gt; is an &lt;/em&gt;m x n&lt;/em&gt; matrix of partial derivatives &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image025.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;chain rule&lt;/strong&gt;: multiply the Jacobians&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image026.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ the nonlinear (activation) function &lt;strong&gt;h&lt;/strong&gt; is &lt;em&gt;element-wise&lt;/em&gt;, Jacobian of &lt;strong&gt;h&lt;/strong&gt; is &lt;em&gt;diagonal:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image028.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ other Jacobians:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image029.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image030.png"/&gt;&lt;/p&gt;
&lt;h2 id="gradients-in-neural-network"&gt;Gradients in Neural Network&lt;/h2&gt;
&lt;p&gt;notation:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image033.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ Apply the chain rule with Jacobian/grad formulars from last section:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image031.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image032.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image034.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ extract the common part, call it &lt;strong&gt;local error signal&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image035.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture3/pasted_image036.png"/&gt;&lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[XCS224N] Lecture 4 – Backpropagation</title><link href="https://x-wei.github.io/xcs224n-lecture4.html" rel="alternate"></link><published>2020-03-21T00:00:00+01:00</published><updated>2020-03-21T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2020-03-21:xcs224n-lecture4.html</id><summary type="html">&lt;h2 id="more-matrix-gradients"&gt;More Matrix Gradients&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image002.png"/&gt;
 ⇒ 
&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;h2 id="deriving-gradients-wrt-words"&gt;Deriving Gradients wrt Words&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image005.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pitfall&lt;/strong&gt; in tetraining word vectors: 
if some word is not in training data, but other synonyms are present ⇒ only the synonyms word vectors are moved&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;p&gt;takeaway: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;h2 id="backpropagation"&gt;Backpropagation&lt;/h2&gt;
&lt;p&gt;backprop:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apply (generalized) chain rule&lt;/li&gt;
&lt;li&gt;re-use shared stuff&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="computation-graph"&gt;computation graph&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image009.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ Go backwards along edges, pass along &lt;strong&gt;gradients&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image010.png"/&gt;&lt;/p&gt;
&lt;p&gt;receive upstream grad =&amp;gt; compute downstream grad&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image012.png"/&gt;&lt;/p&gt;
&lt;p&gt;for node with multiple inputs:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image027.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image014.png"/&gt;&lt;/p&gt;
&lt;h2 id="more-on-backpropagation_1"&gt;More on Backpropagation&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image015.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;intuition:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plus( &lt;code&gt;+&lt;/code&gt; ) &lt;em&gt;distributes&lt;/em&gt; upstream grad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image016.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;max&lt;/code&gt;&lt;em&gt;routes&lt;/em&gt; upstream grad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image017.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;multiply( &lt;code&gt;*&lt;/code&gt; ) &lt;em&gt;switches&lt;/em&gt; the upstream grad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image018.png"/&gt;&lt;/p&gt;
&lt;p&gt;efficency: compute shared part once&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image019.png"/&gt;&lt;/p&gt;
&lt;h3 id="backprop-in-general-computation-graph"&gt;Backprop in general computation graph&lt;/h3&gt;
&lt;p&gt;comput-graph is a DAG  ⇒ topological sort&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fprop&lt;/strong&gt;: visit nodes in topological&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bprop&lt;/strong&gt;: in reverse topological order&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image020.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image022.png"/&gt;&lt;/p&gt;
&lt;p&gt;Complexity = &lt;strong&gt;O(n)&lt;/strong&gt;
Automatic Differentiation: symbolic computation on the symbolic expression of Fprop.
Moden DL framework: must provide the Fprop/Bprop formular for each node.&lt;/p&gt;
&lt;h2 id="backprop-implementations_1"&gt;Backprop Implementations&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image023.png"/&gt;&lt;/p&gt;
&lt;p&gt;for each gate, impl the forward/backward API:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image025.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Numeric Gradient&lt;/strong&gt;
For checking if the forward/backward impl is correct
e.g.check&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image026.png"/&gt;&lt;/p&gt;
&lt;p&gt;(note: use &lt;em&gt;two-sided&lt;/em&gt; gradient checks)&lt;/p&gt;
&lt;h2 id="regularization"&gt;Regularization&lt;/h2&gt;
&lt;p&gt;Regularization term added to loss func to prevent overfitting:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image028.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image029.png"/&gt;&lt;/p&gt;
&lt;h2 id="vectorizationtensorization"&gt;Vectorization/tensorization&lt;/h2&gt;
&lt;p&gt;avoid forloops, use matrix multiplication instead.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image030.png"/&gt;&lt;/p&gt;
&lt;h2 id="nonlinearities"&gt;Nonlinearities&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image031.png"/&gt;&lt;/p&gt;
&lt;p&gt;tanh is recaled and shifted of sigmoid:
&lt;code&gt;tanh(x) = 2 * sigmoid(2x) - 1&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;new world activation func:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image032.png"/&gt;&lt;/p&gt;
&lt;h2 id="parameter-initialization"&gt;Parameter Initialization&lt;/h2&gt;
&lt;p&gt;Initialize the weights to &lt;em&gt;small, random&lt;/em&gt; values ⇒ &lt;strong&gt;break the symmetry.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Init bias to 0&lt;/li&gt;
&lt;li&gt;Init all other weights to Uniform(-r, r).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Xavier initialization&lt;/strong&gt;: &lt;em&gt;variance inverse-proportional to sum of prev&amp;amp;next layer size&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image033.png"/&gt;&lt;/p&gt;
&lt;h2 id="optimizers-and-learning-rates"&gt;Optimizers and Learning Rates&lt;/h2&gt;
&lt;p&gt;Usually simple SGD works fine, but needs to tune the learningrate (&lt;em&gt;lr&lt;/em&gt;).
&lt;strong&gt;adaptive optimizers&lt;/strong&gt;: &lt;em&gt;per-parameter&lt;/em&gt; learning rate.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image034.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;learning rate:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;try with powers of 10&lt;/li&gt;
&lt;li&gt;learningrate-decay: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture4/pasted_image035.png"/&gt;&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;epoch&lt;/em&gt; = full pass over the training data)&lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[XCS224N] Lecture 2 – Word Vectors and Word Senses</title><link href="https://x-wei.github.io/xcs224n-lecture2.html" rel="alternate"></link><published>2020-03-17T00:00:00+01:00</published><updated>2020-03-17T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2020-03-17:xcs224n-lecture2.html</id><summary type="html">&lt;h2 id="more-on-word2vec"&gt;More on Word2Vec&lt;/h2&gt;
&lt;p&gt;parameters &lt;code&gt;θ&lt;/code&gt; : matrix &lt;code&gt;U&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; (&lt;strong&gt;each word vec is a row&lt;/strong&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;and the predictions don't take into account the &lt;em&gt;distance&lt;/em&gt; between center word &lt;strong&gt;c&lt;/strong&gt; and outside word &lt;strong&gt;o&lt;/strong&gt;.
⇒ all word vecs predict high for the stopwords.&lt;/p&gt;
&lt;h2 id="optimization-basics"&gt;Optimization Basics&lt;/h2&gt;
&lt;p&gt;min loss function: &lt;code&gt;J(θ)&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="gradient-descent"&gt;gradient descent&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;direction of the gradient  = direction where J(θ) &lt;strong&gt;&lt;em&gt;increases&lt;/em&gt;&lt;/strong&gt; the most.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;h4 id="sgd"&gt;SGD&lt;/h4&gt;
&lt;p&gt;pb: &lt;code&gt;J(θ)&lt;/code&gt; is for all words/positions in the corpus, &lt;code&gt;grad J(θ)&lt;/code&gt; is very expensive to compute.
⇒ use &lt;em&gt;random samples&lt;/em&gt; each time 
⇒ each time we only sample one window of &lt;code&gt;2m+1&lt;/code&gt; words&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;p&gt;I.e.each time we compute the grad only on a &lt;strong&gt;minibatch&lt;/strong&gt;&lt;em&gt;.&lt;/em&gt;
&lt;em&gt;⇒ &lt;/em&gt;each time we only update the &lt;em&gt;wordvecs that appear&lt;/em&gt; in the minibatch.&lt;/p&gt;
&lt;h2 id="word2vec-model-variants_2"&gt;Word2Vec: Model Variants&lt;/h2&gt;
&lt;p&gt;final embedding of a word = &lt;em&gt;average&lt;/em&gt; of &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt; 
⇒ we can also do only one vec per word, not much difference&lt;/p&gt;
&lt;p&gt;2 main varaints of w2v family:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;skip-grams(&lt;strong&gt;SG&lt;/strong&gt;): predict outside word &lt;strong&gt;o&lt;/strong&gt; with center word &lt;strong&gt;c&lt;/strong&gt;: &lt;code&gt;P(o|c)&lt;/code&gt; .← presented in the class.&lt;/li&gt;
&lt;li&gt;continuous bag-of-words (&lt;strong&gt;CBOW&lt;/strong&gt;): predict center word &lt;strong&gt;c&lt;/strong&gt; using outside words &lt;strong&gt;o&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="negative-sampling"&gt;negative sampling&lt;/h2&gt;
&lt;p&gt;So far: naive sotfmax, i.e.sum over &lt;em&gt;all&lt;/em&gt; words in vocab — &lt;em&gt;expensive&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image005.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ &lt;strong&gt;negative sampling&lt;/strong&gt;.
Use several &lt;em&gt;binary logistic regressions&lt;/em&gt; on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;true pair&lt;/strong&gt; (center word and a true context word )&lt;/li&gt;
&lt;li&gt;several &lt;strong&gt;nois pairs&lt;/strong&gt; (center word and a &lt;em&gt;random&lt;/em&gt; word) ← &lt;em&gt;random negative pair&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;logistic regression &lt;/strong&gt;&lt;em&gt;= softmax with vocab size=2&lt;/em&gt;
sigmoid function: from inner-product value to probability score&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image008.png"/&gt; &lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image009.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ objective funcion (to maximize):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image010.png"/&gt;&lt;/p&gt;
&lt;p&gt;where &lt;code&gt;P(w)&lt;/code&gt; is the distribution of negative sampling.
in practice: &lt;code&gt;P(w)=U(w)^(3/4)&lt;/code&gt; i.e.3/4 power of the uniform distribution → makes &lt;em&gt;rare words appear more often&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;⇒  loss function (to minimize):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image011.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;QUESTION: why put the minus inside the logit?&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="alternative-methods-cooccurrence-counts"&gt;Alternative Methods: cooccurrence counts&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Why not using co-occurrence counts matrix?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;co-occurrence in windows&lt;/li&gt;
&lt;li&gt;co-occurrence in document&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image012.png"/&gt;&lt;/p&gt;
&lt;p&gt;problems with co-occurrence matrix:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;matrix size increase with vocab size&lt;/li&gt;
&lt;li&gt;high dimensional, expensive storage&lt;/li&gt;
&lt;li&gt;Subsequent classification models have sparsity issues&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ &lt;em&gt;model less robust&lt;/em&gt;&lt;/p&gt;
&lt;h4 id="solution1-low-dimensional-vectors"&gt;solution1: low-dimensional vectors&lt;/h4&gt;
&lt;p&gt;(signular value decomposition for k-largest eigen values)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image014.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ popular in the year 2000.&lt;/p&gt;
&lt;h4 id="solution2-hacks-to-co-occurrence-matrix"&gt;solution2: hacks to co-occurrence matrix&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;trim stopwords&lt;/li&gt;
&lt;li&gt;counter more on closer words&lt;/li&gt;
&lt;li&gt;Pearson correlations to replace counts&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="comparison"&gt;comparison&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image015.png"/&gt;&lt;/p&gt;
&lt;h4 id="encode-meanings"&gt;encode meanings&lt;/h4&gt;
&lt;p&gt;insight: &lt;strong&gt;ratios&lt;/strong&gt; of co-occurrence probabilities can encode meaning.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image017.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ &lt;strong&gt;make dot-products equal to the &lt;strong&gt;&lt;em&gt;log&lt;/em&gt;&lt;/strong&gt; of co-occurence prabability&lt;/strong&gt;&lt;em&gt; ⇒ vector diff &lt;/em&gt;gives the ratio of co-occur proba&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image018.png"/&gt;&lt;/p&gt;
&lt;h2 id="glove_1"&gt;GloVe&lt;/h2&gt;
&lt;p&gt;Combine the best of both worlds: count method and prediction method.&lt;/p&gt;
&lt;p&gt;log-bilinear: &lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image019.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image020.png"/&gt;&lt;/p&gt;
&lt;p&gt;Where the weight ter f(Xij) is capped:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image021.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fast training&lt;/li&gt;
&lt;li&gt;Scalable to huge corpora&lt;/li&gt;
&lt;li&gt;Good performance even with small corpus and small vectors&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="evaluating-word-vectors"&gt;Evaluating Word Vectors&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Intrinsic vs extrinsic&lt;/em&gt; in NLP-eval: 
&lt;strong&gt;Intrinsic&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eval on a specific/intermediate &lt;em&gt;subtask&lt;/em&gt;: e.g.word similarity, POS tag, etc.&lt;/li&gt;
&lt;li&gt;Fast to compute&lt;/li&gt;
&lt;li&gt;Not clear if really helpful unless correlation to real task is established&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Extrinsic&lt;/strong&gt;&lt;em&gt;:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eval on &lt;em&gt;real&lt;/em&gt; task: e.g.web search / question-answering / phone dialog&lt;/li&gt;
&lt;li&gt;Hard to run&lt;/li&gt;
&lt;li&gt;Hard to diagnois&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ today: focus on intrinsic word vector evaluation&lt;/p&gt;
&lt;h3 id="eval-on-word-analogies"&gt;Eval on word Analogies&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image022.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Semantic&lt;/strong&gt; eval: city-in-state  (e.g.&lt;em&gt;"Chicago Illinois Houston Texas"&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Syntactic&lt;/strong&gt; eval: gram4-superlative (e.g.&lt;em&gt;"bad worst big biggest"&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hyperparameters:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image023.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image024.png"/&gt;&lt;/p&gt;
&lt;h3 id="eval-on-word-similarities"&gt;Eval on word Similarities&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image025.png"/&gt;&lt;/p&gt;
&lt;h2 id="word-senses_1"&gt;Word Senses&lt;/h2&gt;
&lt;p&gt;sense &lt;em&gt;ambiguity&lt;/em&gt;: words have lots of meanings&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;crude solution(2012): for each common word, find clusters of context that it occurs, split the word into pesudowords.&lt;/li&gt;
&lt;li&gt;Linear Algebraic Structure solution (2018):&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;word sense is a linear superposition:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture2/pasted_image026.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ result: Because of ideas from &lt;em&gt;sparse coding&lt;/em&gt; you can actually separate out the senses (providing they are relatively common)
actual word/sense are very sparse &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Extrinsic&lt;/strong&gt; word vector evaluation: e.g. NER (finding person/organization/location)&lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[XCS224N] Lecture 1 – Introduction and Word Vectors</title><link href="https://x-wei.github.io/xcs224n-lecture1.html" rel="alternate"></link><published>2020-03-09T00:00:00+01:00</published><updated>2020-03-09T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2020-03-09:xcs224n-lecture1.html</id><summary type="html">&lt;h3 id="course-intro"&gt;Course intro&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture1/pasted_image.png"/&gt;&lt;/p&gt;
&lt;h3 id="word-meaning-and-representation"&gt;Word Meaning and Representation&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;denotational semantics&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;wordnet (nltk)&lt;/strong&gt;: word meanings, synonym, relationships, hierarchical&lt;/p&gt;
&lt;p&gt;pb: missing nuance, missing new meanings, required human labor, &lt;em&gt;can't compute word similarity&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Traditional NLP (untill 2012): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;each words are &lt;em&gt;discrete&lt;/em&gt; symbols — "&lt;strong&gt;localist representation&lt;/strong&gt;"&lt;/li&gt;
&lt;li&gt;use &lt;em&gt;one-hot vectors for encoding&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture1/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pbs with one-hot vecotrs: &lt;/li&gt;
&lt;li&gt;large dimension size&lt;/li&gt;
&lt;li&gt;each two words are &lt;em&gt;orthogonal&lt;/em&gt;, no relationships between them&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;distributional semantics&lt;/strong&gt;: A word’s meaning is given by the &lt;em&gt;words that frequently appear close-by&lt;/em&gt;.
⇒ Use the many &lt;em&gt;contexts of w&lt;/em&gt; to build up a representation of &lt;em&gt;w&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture1/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;"&lt;strong&gt;distributed representation&lt;/strong&gt;": 
use &lt;em&gt;dense vectors&lt;/em&gt; for each word, &lt;em&gt;so that it is similar to vectors of words that appear in similar contexts.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="word2vec-introduction"&gt;Word2Vec Introduction&lt;/h3&gt;
&lt;p&gt;word2vec algo: for learning word embeddings.&lt;/p&gt;
&lt;h4 id="idea"&gt;idea&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;start with large text corpus&lt;/li&gt;
&lt;li&gt;each word from the (&lt;em&gt;fixed&lt;/em&gt;) vocab has a vector &lt;em&gt;v — &lt;/em&gt;start with rand vectors&lt;/li&gt;
&lt;li&gt;for each center word &lt;code&gt;c&lt;/code&gt; and context(outside) word &lt;code&gt;o&lt;/code&gt; :&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;sim(c,o)&lt;/code&gt; to compute &lt;code&gt;P(o|c)&lt;/code&gt; or &lt;code&gt;P(c|o)&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;update the vecs to maximize the probability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture1/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture1/pasted_image005.png"/&gt;&lt;/p&gt;
&lt;h4 id="likelihood"&gt;likelihood&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Likelihood&lt;/strong&gt; := product of all predicted probabilities for all window words (fixed window sz= &lt;code&gt;m&lt;/code&gt; ), for all positions &lt;code&gt;t&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture1/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;h4 id="loss-function"&gt;Loss function&lt;/h4&gt;
&lt;p&gt;⇒ take negative log likelihood as &lt;strong&gt;loss function&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture1/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;h4 id="prediction-function"&gt;Prediction function&lt;/h4&gt;
&lt;p&gt;⇒ probability prediction &lt;code&gt;P(o|c)&lt;/code&gt; is a function of the word vectors: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;we use two vectors per word:&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;use &lt;code&gt;v_w&lt;/code&gt; when word &lt;em&gt;w&lt;/em&gt; is the center word&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;u_w&lt;/code&gt; when &lt;em&gt;w&lt;/em&gt; is context word.&lt;/li&gt;
&lt;li&gt;proba = &lt;em&gt;softmax&lt;/em&gt; of the dot products &lt;code&gt;dot(v,u)&lt;/code&gt; for all context word u in Vocab.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture1/pasted_image009.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture1/pasted_image011.png"/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="optimization"&gt;optimization&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;θ&lt;/code&gt; :=all parameters in the model, i.e. &lt;code&gt;2*V&lt;/code&gt; vectors (u/v), each of dimension &lt;code&gt;d&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture1/pasted_image012.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gradient descent&lt;/strong&gt;: compute all gradients of &lt;code&gt;θ&lt;/code&gt; w.r.t.loss function &lt;code&gt;J(θ)&lt;/code&gt; .
I.e.compute dJ(θ)/dθ, which is &lt;code&gt;2*d*V&lt;/code&gt; dimension.&lt;/p&gt;
&lt;h2 id="word2vec-derivations-of-gradient_2"&gt;Word2vec Derivations of Gradient&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture1/pasted_image015.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture1/pasted_image013.png"/&gt; &lt;/p&gt;
&lt;p&gt;using chain rule and multi-var derivative:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture1/pasted_image014.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ slope of the vector &lt;code&gt;v_c&lt;/code&gt; w.r.t. &lt;code&gt;J_c,o&lt;/code&gt; 
equals the current vector &lt;code&gt;u_o&lt;/code&gt; minus the weighted average of context word &lt;code&gt;u_w&lt;/code&gt; , i.e.&lt;em&gt;"expected context word"&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="gensim-word-vector-visualization"&gt;Gensim Word Vector Visualization&lt;/h2&gt;
&lt;p&gt;gensim: word similarity package&lt;/p&gt;
&lt;p&gt;word composition&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/xcs224n-lecture1/pasted_image016.png"/&gt;&lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[Sequential Models] week3. Sequence models &amp; Attention mechanism</title><link href="https://x-wei.github.io/Ng_DLMooc_c5wk3.html" rel="alternate"></link><published>2018-02-28T00:00:00+01:00</published><updated>2018-02-28T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2018-02-28:Ng_DLMooc_c5wk3.html</id><summary type="html">&lt;p&gt;This week: seq2seq.  &lt;/p&gt;
&lt;h2 id="i-various-sequence-to-sequence-architectures"&gt;I-Various sequence to sequence architectures&lt;/h2&gt;
&lt;h3 id="basic-models"&gt;Basic Models&lt;/h3&gt;
&lt;p&gt;e.g. Machine translation&lt;br/&gt;
&lt;strong&gt;encoder network&lt;/strong&gt;: many-to-one RNN&lt;br/&gt;
&lt;strong&gt;decoder network&lt;/strong&gt;: one-to-many RNN&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image001.png"/&gt;&lt;br/&gt;
This architecture also works for image captioning: &lt;em&gt;use ConvNet as encoder&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image002.png"/&gt;&lt;br/&gt;
Difference between seq2seq and generating new text with language model: seq2seq don't &lt;em&gt;randomly&lt;/em&gt; choose a translation, but choose &lt;em&gt;most likely&lt;/em&gt; output sequence.  &lt;/p&gt;
&lt;h3 id="picking-the-most-likely-sentence"&gt;Picking the most likely sentence&lt;/h3&gt;
&lt;p&gt;Machine translation (or seq2seq in general): a &lt;em&gt;conditional&lt;/em&gt; language model.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;language model: &lt;code&gt;P(y&amp;lt;1&amp;gt;,...,y&amp;lt;T&amp;gt;)&lt;/code&gt;, &lt;code&gt;x&amp;lt;i&amp;gt; = y&amp;lt;i-1&amp;gt;&lt;/code&gt;, initial activation = &lt;code&gt;a&amp;lt;0&amp;gt;&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;seq2seq: feed encoder output as initial activation → &lt;code&gt;P(y&amp;lt;1&amp;gt;...y&amp;lt;T&amp;gt;|x=input seq)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image003.png"/&gt;&lt;br/&gt;
Want to sample most likely output sequence (instead of random sampling) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For output sequence of length L, there are |V|^L possiblilities.  &lt;/li&gt;
&lt;li&gt;greedy search: pick most likely word at each step → doesn't work well  &lt;/li&gt;
&lt;li&gt;→ &lt;em&gt;approximate(not guaranteed)&lt;/em&gt; search algo: beam search (next section).  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="beam-search"&gt;Beam Search&lt;/h3&gt;
&lt;p&gt;Approximately find most likely output sequence.&lt;br/&gt;
&lt;strong&gt;algo&lt;/strong&gt;&lt;br/&gt;
parameter: beam width &lt;code&gt;B&lt;/code&gt; = 3 (beam serach = greedy for B=1)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;step 1: find &lt;code&gt;B&lt;/code&gt; most likely choices for first word argmax &lt;code&gt;P(y&amp;lt;1&amp;gt;|x)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;step 2: for each of &lt;code&gt;B&lt;/code&gt; previous choices → compute second word probabilities  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ compuate &lt;code&gt;P(y&amp;lt;1&amp;gt;, y&amp;lt;2&amp;gt;|x)&lt;/code&gt; by Bayes&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image005.png"/&gt;&lt;br/&gt;
initialize &lt;strong&gt;B&lt;/strong&gt; copies of the network, hardwiring each of the B choices of first word from last step&lt;br/&gt;
⇒ keep top &lt;code&gt;B&lt;/code&gt; most likely first 2 words {y&amp;lt;1&amp;gt;,y&amp;lt;2&amp;gt;}&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;step 3: similar  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;h3 id="refinements-to-beam-search"&gt;Refinements to Beam Search&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Length normalization&lt;/strong&gt;&lt;br/&gt;
original object to optimize: &lt;br/&gt;
P(y&amp;lt;1&amp;gt;...y&lt;t&gt;) = product of conditional proba: P(y&amp;lt;1&amp;gt;|x)&lt;em&gt;P(y&amp;lt;2&amp;gt;|y&amp;lt;1&amp;gt;,x)&lt;/em&gt;...&lt;br/&gt;
(in practice: taking log → sum of log-probas, more numerically stable)&lt;br/&gt;
with original object function, tends to prefer shorter output sequences&lt;br/&gt;
⇒ normalize the probability by output length, i.e. average proba of each word&lt;br/&gt;
"&lt;strong&gt;normlized log-likelihood&lt;/strong&gt;"&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image010.png"/&gt;&lt;br/&gt;
In practice: use a softer normalization: normalize by &lt;code&gt;T^alpha&lt;/code&gt; (typical value: alpha=0.7)  &lt;/t&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alpha=1: fully normalizing by length  &lt;/li&gt;
&lt;li&gt;alpha=0: no normalization  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Beam width choice&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;large B: better approximation, better result, slower  &lt;/li&gt;
&lt;li&gt;small B: worse result, but faster  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In production: B=10&lt;br/&gt;
In research: B=~1000  &lt;/p&gt;
&lt;h3 id="error-analysis-in-beam-search"&gt;Error analysis in beam search&lt;/h3&gt;
&lt;p&gt;When error occurs: figure out whether it's due to beam search or RNN model.&lt;br/&gt;
Given &lt;code&gt;yhat&lt;/code&gt; and &lt;code&gt;y*&lt;/code&gt;(human result):&lt;br/&gt;
→ feed &lt;code&gt;yhat&lt;/code&gt; and &lt;code&gt;y*&lt;/code&gt; to RNN language model, compute the &lt;em&gt;probability of each sequence&lt;/em&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;P(y*)&amp;gt;P(yhat)&lt;/code&gt;⇒ beam seach needs improvement  &lt;/li&gt;
&lt;li&gt;If &lt;code&gt;P(y*)&amp;lt;P(yhat)&lt;/code&gt; ⇒ RNN needs improvement  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bleu-score-optional"&gt;Bleu Score (optional)&lt;/h3&gt;
&lt;p&gt;How to evaluate machine translation systems (multiple correct answers).&lt;br/&gt;
→ &lt;strong&gt;BLEU &lt;/strong&gt;(bilingual evaluation understudy): pretty good single-number eval metrics.&lt;br/&gt;
&lt;strong&gt;Precision&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(word-level) Precision: fraction of words in MT output that appears in reference translation  &lt;/li&gt;
&lt;li&gt;Modified precision: each word has a &lt;em&gt;credit&lt;/em&gt;: max number of appearance in reference sentences (i.e. clip the count of a word)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image012.png"/&gt;&lt;br/&gt;
&lt;strong&gt;Precision on bigrams&lt;/strong&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image013.png"/&gt;&lt;br/&gt;
For n-grams:&lt;br/&gt;
&lt;code&gt;Pn = sum(count_clip of ngram in yhat) / sum(count of ngram in yhat)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bleu score&lt;/strong&gt;&lt;br/&gt;
Combined Bleu score: exp of avearged precision.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image015.png"/&gt;&lt;br/&gt;
&lt;strong&gt;BP&lt;/strong&gt;: brevety penalty (penalize short translations)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image014.png"/&gt; &lt;/p&gt;
&lt;h3 id="attention-model-intuition"&gt;Attention Model Intuition&lt;/h3&gt;
&lt;p&gt;Human translator: generate translation one part after another, instead of memorize (encode) whole sentence before translate.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image016.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Input: run B-RNN to get hidden features for each word &lt;code&gt;a&amp;lt;t&amp;gt;&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Output: also an RNN,   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;at each step, using &lt;strong&gt;context&lt;/strong&gt; with &lt;strong&gt;attention weights&lt;/strong&gt; &lt;code&gt;alpha&lt;/code&gt; to focus on only parts of input features.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image017.png"/&gt;&lt;br/&gt;
Attention &lt;code&gt;alpha&amp;lt;t,t'&amp;gt;&lt;/code&gt;: how much attention to pay to &lt;code&gt;t&lt;/code&gt;'th input word when generating &lt;code&gt;t&lt;/code&gt;th output word: depends on previous output &lt;code&gt;s&amp;lt;t-1&amp;gt;&lt;/code&gt;, and RNN input feature &lt;code&gt;a&amp;lt;t'&amp;gt;&lt;/code&gt;.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image018.png"/&gt; &lt;/p&gt;
&lt;h3 id="attention-model"&gt;Attention Model&lt;/h3&gt;
&lt;p&gt;Recap of attention model:&lt;br/&gt;
Feature vector at &lt;code&gt;t&lt;/code&gt;'th input word: &lt;code&gt;a&amp;lt;t'&amp;gt;&lt;/code&gt;&lt;br/&gt;
&lt;em&gt;context&lt;/em&gt;: input features, weighted by attention weights&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image019.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Computing attention alpha&lt;t,t'&gt;&lt;/t,t'&gt;&lt;/strong&gt;&lt;br/&gt;
Use &lt;code&gt;a&amp;lt;t,t'&amp;gt;=softmax(e&amp;lt;t,t'&amp;gt;)&lt;/code&gt; to ensure attention is normalized (over all &lt;code&gt;t&lt;/code&gt;'s) to one.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image020.png"/&gt;&lt;br/&gt;
⇒ The mapping function from &lt;code&gt;a&amp;lt;t'&amp;gt;&lt;/code&gt; and &lt;code&gt;s&amp;lt;t-1&amp;gt;&lt;/code&gt; to attention logits &lt;code&gt;e&amp;lt;t,t'&amp;gt;&lt;/code&gt; is unknown&lt;br/&gt;
→ plug in a NN: &lt;code&gt;e&amp;lt;t,t'&amp;gt; = W * (s&amp;lt;t-1&amp;gt;, a&amp;lt;t'&amp;gt;)&lt;/code&gt;— and trust backprop !  &lt;/p&gt;
&lt;p&gt;downside: quadratique time complexity (&lt;code&gt;Tx * Ty&lt;/code&gt;) → acceptable in MT, since input/output seqs are not that long...&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image021.png"/&gt; &lt;/p&gt;
&lt;h2 id="ii-speech-recognition-audio-data_1"&gt;II-Speech recognition - Audio data&lt;/h2&gt;
&lt;h3 id="speech-recognition"&gt;Speech recognition&lt;/h3&gt;
&lt;p&gt;seq2seq, where x = audio clip / spectrum gram, y=transcript&lt;br/&gt;
pre-DL era: phonemes (hand-engineered basic unit of sound) → no longer necessary with end-to-end learning on large dataset.&lt;br/&gt;
Dataset: 300~3000 hours  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CTC cost&lt;/strong&gt; : "Connectionist temporal classification".&lt;br/&gt;
Pb in speech recogintion with many-to-many RNN: number of input timesteps are &lt;em&gt;much longer&lt;/em&gt; than output.&lt;br/&gt;
→ blank and repeated characters are considered correct (collapse repeated characters afterwards)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image023.png"/&gt; &lt;/p&gt;
&lt;h3 id="trigger-word-detection"&gt;Trigger Word Detection&lt;/h3&gt;
&lt;p&gt;Train with an RNN.&lt;br/&gt;
Data: audio clips&lt;br/&gt;
→ set label 1 right after the trigger word.&lt;br/&gt;
pb: unbalanced dataset (a lot of 0s) → label = 1 for several timesteps after trigger word.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image025.png"/&gt; &lt;/p&gt;
&lt;h2 id="conclusion-and-thank-you_1"&gt;Conclusion and thank you&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Deep learning is a super power.&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk3/pasted_image026.png"/&gt; &lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[Sequential Models] week2. Natural Language Processing &amp; Word Embeddings</title><link href="https://x-wei.github.io/Ng_DLMooc_c5wk2.html" rel="alternate"></link><published>2018-02-26T00:00:00+01:00</published><updated>2018-02-26T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2018-02-26:Ng_DLMooc_c5wk2.html</id><summary type="html">&lt;h2 id="i-introduction-to-word-embeddings"&gt;I - Introduction to Word Embeddings&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Word representation&lt;/strong&gt;&lt;br/&gt;
So far: representing words with one-hot encoding → word relationships are not generalized.&lt;br/&gt;
⇒ want to  learn a &lt;em&gt;featurized representatin&lt;/em&gt; for each word as a high-dim vector&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk2/pasted_image.png"/&gt;&lt;br/&gt;
→ visualize word embeddings in 2-dim space, e.g. via &lt;em&gt;t-SNE&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk2/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;h3 id="using-word-embeddings"&gt;Using word embeddings&lt;/h3&gt;
&lt;p&gt;example: NER&lt;br/&gt;
transfer learning: using pretrained embeddings  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;learn word embeddings from large text corpus (or download pre-trained embeddings)  &lt;/li&gt;
&lt;li&gt;transfter embedding to new task with smaller training set  &lt;/li&gt;
&lt;li&gt;(optional) fine-tune word embeddings with new data  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Word embedding ~ face encoding(embedding) in previous words.  &lt;/p&gt;
&lt;h3 id="properties-of-word-embeddings"&gt;Properties of word embeddings&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Analogy reasoning&lt;/em&gt; of word embeddings.&lt;br/&gt;
e.g. man-&amp;gt;woman as king-&amp;gt;?&lt;br/&gt;
Embedding vectors have the relationship: &lt;code&gt;e_man - e_woman ~= e_king - e_queen&lt;/code&gt;&lt;br/&gt;
Finding nearest neighbor (according to cosine-similarity).&lt;br/&gt;
examples:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk2/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;h3 id="embedding-matrix"&gt;Embedding matrix&lt;/h3&gt;
&lt;p&gt;learning an embedding matrix &lt;code&gt;E&lt;/code&gt; of shape &lt;code&gt;(embed_dim, vocab_size)&lt;/code&gt;&lt;br/&gt;
e.g. embed_dim=300, vocab_size=10000&lt;br/&gt;
notataion: &lt;br/&gt;
&lt;code&gt;o_w&lt;/code&gt; = one-hot encoding of a word &lt;code&gt;w&lt;/code&gt;, dim=(10000,1)&lt;br/&gt;
→ &lt;code&gt;e_w = E * o_w&lt;/code&gt;, dim=(300,1)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk2/pasted_image003.png"/&gt;&lt;br/&gt;
→ Learn &lt;code&gt;E&lt;/code&gt; by random-init &amp;amp; gradient descent.&lt;br/&gt;
(In practice: use lookup function instead of matrix multiplication.)  &lt;/p&gt;
&lt;h2 id="ii-learning-word-embeddings-word2vec-glove_1"&gt;II - Learning Word Embeddings: Word2vec &amp;amp; GloVe&lt;/h2&gt;
&lt;h3 id="learning-word-embeddings"&gt;Learning word embeddings&lt;/h3&gt;
&lt;p&gt;Some concrete algos to learn embedding matrix E. Start with complex algos and show simpler algos with good result.&lt;br/&gt;
e.g. Neural language model, i.e. &lt;em&gt;predict next word in the sequence&lt;/em&gt;.&lt;br/&gt;
with fixed window size(e.g. =4), predict next word. Context=last 4 words, target=next word.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk2/pasted_image004.png"/&gt;&lt;br/&gt;
→ Using gradient-descent to update params (&lt;code&gt;E, W, b&lt;/code&gt;).  &lt;/p&gt;
&lt;p&gt;Other kinds of (simpler) context/targets:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;context=4 words to the left &amp;amp; right,  target=the word in the middle  &lt;/li&gt;
&lt;li&gt;context=previous word, target=next word  &lt;/li&gt;
&lt;li&gt;context=nearby 1 word (skip-gram model)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="word2vec"&gt;Word2Vec&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Skip-grams&lt;/strong&gt;&lt;br/&gt;
supervised problem: context/target pairs, given context word, predict target word &lt;br/&gt;
(|v| classes in total) → softmax  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;context &lt;code&gt;c&lt;/code&gt;: &lt;em&gt;randomly&lt;/em&gt; pick a context word  &lt;/li&gt;
&lt;li&gt;target &lt;code&gt;t&lt;/code&gt;: &lt;em&gt;randomly&lt;/em&gt; pick a target word in +/- 4 word window.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk2/pasted_image005.png"/&gt;&lt;br/&gt;
&lt;strong&gt;Skip-gram Model&lt;/strong&gt;&lt;br/&gt;
model: context &lt;code&gt;c&lt;/code&gt; -&amp;gt; onehot &lt;code&gt;o_c&lt;/code&gt; -(&lt;code&gt;E&lt;/code&gt;)-&amp;gt; embedding &lt;code&gt;e_c&lt;/code&gt; → softmax → prediction &lt;code&gt;yhat&lt;/code&gt;&lt;br/&gt;
→ target word &lt;code&gt;y&lt;/code&gt;&lt;br/&gt;
loss = cross-entropy(y, yhat) / log-loss(y, yhat)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk2/pasted_image006.png"/&gt;&lt;br/&gt;
&lt;strong&gt;how to sample context c&lt;/strong&gt;&lt;br/&gt;
uniform sampling for &lt;code&gt;c&lt;/code&gt;: frequent words might dominant the training set.&lt;br/&gt;
→ heuristics to sample less common words via &lt;code&gt;P(c)&lt;/code&gt;.p  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;problem with skip-gram model&lt;/strong&gt;&lt;br/&gt;
&lt;em&gt;slow speed&lt;/em&gt;: to compute &lt;code&gt;p(t|c)&lt;/code&gt; with softmax → involves &lt;em&gt;summing up all 10000(vocab_size) logits&lt;/em&gt; in denominator of sotmax:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk2/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;method 1: using hierachical softmax: split all vocabs into buckets/binary trees — &lt;code&gt;log(|v|)&lt;/code&gt; instea of &lt;code&gt;O(|v|)&lt;/code&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk2/pasted_image008.png"/&gt; &lt;/li&gt;
&lt;li&gt;method 2: &lt;em&gt;negative sampling&lt;/em&gt;, modify training objective  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="negative-sampling"&gt;Negative Sampling&lt;/h3&gt;
&lt;p&gt;To simplify the computation of softmax denominator: a different learning problem.&lt;br/&gt;
&lt;strong&gt;new learning problem&lt;/strong&gt;&lt;br/&gt;
given a pair of word → predict &lt;em&gt;if this pair is a context/target pair&lt;/em&gt;. &lt;br/&gt;
— binary classification instead of |v| classes.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;positive examples: sampled as before (sample context word &lt;code&gt;c&lt;/code&gt;, then sample target word &lt;code&gt;t&lt;/code&gt; in word window)  &lt;/li&gt;
&lt;li&gt;negative examples: sample context word &lt;code&gt;c&lt;/code&gt;, then &lt;em&gt;pick rand word &lt;/em&gt;&lt;code&gt;t&lt;/code&gt;&lt;em&gt; from dictionary&lt;/em&gt;. Sample &lt;em&gt;k=5~20&lt;/em&gt; negative examples for each context word &lt;code&gt;c&lt;/code&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk2/pasted_image010.png"/&gt;&lt;br/&gt;
Model: &lt;em&gt;logistic regression&lt;/em&gt;&lt;br/&gt;
For context word c, there are &lt;em&gt;|v|=10000 potential binary classification problems&lt;/em&gt; to train&lt;br/&gt;
→ &lt;em&gt;and we train only (k+1) of them&lt;/em&gt;.&lt;br/&gt;
&lt;strong&gt;negative sampling&lt;/strong&gt;: trun 10000-way softmax problem into 10000 binary classification problems, and each iteration only train k+1 of them.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk2/pasted_image011.png"/&gt;&lt;br/&gt;
&lt;strong&gt;How to sampling negative examples&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sample according to empirical word frequence P(w) ~= tf(w) → might have a lot stop words sampled  &lt;/li&gt;
&lt;li&gt;sample uniformly: P(w)  = 1/|v|  &lt;/li&gt;
&lt;li&gt;empirical best-choice: P(w) = tf(w)^0.75 / sum(tf(w')^0.75)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="glove-word-vectors"&gt;GloVe word vectors&lt;/h3&gt;
&lt;p&gt;GloVe(Global Vectors for word representation): even simpler than negative sampling.&lt;br/&gt;
previously: sampling skip-grams, i.e. pairs of words (&lt;code&gt;c&lt;/code&gt;,&lt;code&gt;t&lt;/code&gt;)&lt;br/&gt;
glove: Count appearance of co-occurrence, &lt;code&gt;X_ij = #(i in the context of j)&lt;/code&gt;.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk2/pasted_image012.png"/&gt;&lt;br/&gt;
&lt;strong&gt;GloVe Model&lt;/strong&gt;&lt;br/&gt;
Trying to approximate &lt;code&gt;theta_i*e_j&lt;/code&gt; to &lt;code&gt;-logX_ij&lt;/code&gt;, by solving &lt;code&gt;theta_i&lt;/code&gt; and &lt;code&gt;e_j&lt;/code&gt;.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add weighting term &lt;code&gt;f(X_ij) = 0&lt;/code&gt; if &lt;code&gt;X_ij=0&lt;/code&gt;, (0*log0 = 0), and f gives more weight to less frequent words  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;theta_i&lt;/code&gt; and &lt;code&gt;e_i&lt;/code&gt; are &lt;em&gt;symmetric&lt;/em&gt; in optimization ⇒ final embedding &lt;code&gt;e_i = (e_i+theta_i)/2&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk2/pasted_image013.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Featurization view of word embeddings&lt;/strong&gt;&lt;br/&gt;
Learning embeddings are not guaranteed to align with featurized components in each axis.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk2/pasted_image014.png"/&gt; &lt;/p&gt;
&lt;h2 id="iii-applications-using-word-embeddings_1"&gt;III-Applications using Word Embeddings&lt;/h2&gt;
&lt;h3 id="sentiment-classification"&gt;Sentiment Classification&lt;/h3&gt;
&lt;p&gt;mapping a piece of text into a rating&lt;br/&gt;
&lt;strong&gt;simple model&lt;/strong&gt;&lt;br/&gt;
sum/average all word embedding vectors as feature vector → pass to softmax clf.&lt;br/&gt;
pb: ignoring all word order  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RNN model&lt;/strong&gt;&lt;br/&gt;
take embedding vectors → sequence embedding matrix → feed to RNN&lt;br/&gt;
→ using last step output and feed to softmax.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk2/pasted_image015.png"/&gt; &lt;/p&gt;
&lt;h3 id="debiasing-word-embeddings"&gt;Debiasing word embeddings&lt;/h3&gt;
&lt;p&gt;Eliminate biases in word embeddings, e.g. gender bias, due to biases in training text.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk2/pasted_image016.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dentify bias direction: e.g. gender bias  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;take differences of vectors: e.g. &lt;code&gt;e_he - e_she&lt;/code&gt;, &lt;code&gt;e_male - e_female&lt;/code&gt;&lt;br/&gt;
→ find bias and non-bias directions  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Neutralization: project embeddings (of &lt;em&gt;non-definitional words&lt;/em&gt;) to non-bias directions  &lt;/li&gt;
&lt;li&gt;Equalize pairs: for definitional words(e.g. grandmother/grandfather, boy/girl), let them be equally-distant to axis  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ How to find defnitional words: train a classifier.  &lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[Sequential Models] week1. Recurrent Neural Networks</title><link href="https://x-wei.github.io/Ng_DLMooc_c5wk1.html" rel="alternate"></link><published>2018-02-02T00:00:00+01:00</published><updated>2018-02-02T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2018-02-02:Ng_DLMooc_c5wk1.html</id><summary type="html">&lt;h1 id="week1"&gt;week1&lt;/h1&gt;
&lt;p&gt;Created Friday 02 February 2018  &lt;/p&gt;
&lt;h3 id="why-sequence-models"&gt;Why sequence models&lt;/h3&gt;
&lt;p&gt;examples of seq data (&lt;em&gt;either input or output&lt;/em&gt;):  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;speech recognition  &lt;/li&gt;
&lt;li&gt;music generation  &lt;/li&gt;
&lt;li&gt;sentiment classification  &lt;/li&gt;
&lt;li&gt;DNA seq analysis  &lt;/li&gt;
&lt;li&gt;Machine translation  &lt;/li&gt;
&lt;li&gt;video activity recognition  &lt;/li&gt;
&lt;li&gt;name entity recognition (&lt;strong&gt;NER&lt;/strong&gt;)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ in this course: learn models applicable to these different settings.  &lt;/p&gt;
&lt;h3 id="notation"&gt;Notation&lt;/h3&gt;
&lt;p&gt;motivating example: NER (Each word: whether the word is part of a person's name.)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x^&amp;lt;t&amp;gt;&lt;/code&gt; / &lt;code&gt;y^&amp;lt;t&amp;gt;&lt;/code&gt;: t-th element in input/output sequence.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;X^(i)&lt;/code&gt;: i-th training example  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;T_x^(i)&lt;/code&gt;: length of i-th training example sequence  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image001.png"/&gt;&lt;br/&gt;
&lt;strong&gt;how to repr each words in a sentences (x&lt;i&gt;)&lt;/i&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;vocabulary&lt;/em&gt;: list of ~10k possible tokens (+"&lt;unk&gt;" for unknown words)  &lt;/unk&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;one-hot&lt;/em&gt; repr for each word   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;h3 id="recurrent-neural-network-model"&gt;Recurrent Neural Network Model&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;why not a standard NN&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input/output are of different length (padding might not be a good representation)  &lt;/li&gt;
&lt;li&gt;doesn't share features learned across different positions in text  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ using a better representation helps to reduce number of parameters.  &lt;/p&gt;
&lt;h4 id="rnn"&gt;RNN&lt;/h4&gt;
&lt;p&gt;motivation example: output length = input length  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for each input &lt;code&gt;x&amp;lt;t&amp;gt;&lt;/code&gt;, → feed to RNN → compute  &lt;em&gt;activation&lt;/em&gt;(hidden state) &lt;code&gt;a&amp;lt;t&amp;gt;&lt;/code&gt;, and output &lt;code&gt;y&amp;lt;t&amp;gt;&lt;/code&gt;,  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&amp;lt;t&amp;gt;=f(a&amp;lt;t&amp;gt;)&lt;/code&gt;, &lt;code&gt;a&amp;lt;t&amp;gt;=f(x&amp;lt;t&amp;gt;, a&amp;lt;t-1&amp;gt;)&lt;/code&gt;,  i.e. a&lt;t&gt; depends on previous state and current input.  &lt;/t&gt;&lt;/li&gt;
&lt;li&gt;parameters &lt;code&gt;W_ax&lt;/code&gt; / &lt;code&gt;W_aa&lt;/code&gt; / &lt;code&gt;W_ya&lt;/code&gt; are shared across all time steps.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ &lt;code&gt;y&amp;lt;t&amp;gt;&lt;/code&gt; depends on &lt;code&gt;x&amp;lt;1&amp;gt;...x&amp;lt;t&amp;gt;&lt;/code&gt;, limit: only depend on &lt;em&gt;previous&lt;/em&gt; words ("unidirectional").  &lt;/p&gt;
&lt;p&gt;Unrolled diagram:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image006.png"/&gt;&lt;br/&gt;
Or drawing a recurrent loop (harder to understand than unrolled version):&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;h4 id="rnn-forward-prop"&gt;RNN Forward prop&lt;/h4&gt;
&lt;p&gt;formula to calculate &lt;code&gt;a&amp;lt;t&amp;gt;&lt;/code&gt; and &lt;code&gt;y&amp;lt;t&amp;gt;&lt;/code&gt;:&lt;br/&gt;
    a&lt;t&gt; = g(W_aa * a&lt;t-1&gt; + W_ax * x&lt;t&gt; + b_a)&lt;br/&gt;
    y&lt;t&gt; = g(W_ya * a&lt;t&gt; + b_y)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image008.png"/&gt;&lt;br/&gt;
Simplified annotation: stack &lt;code&gt;a&amp;lt;t-1&amp;gt;&lt;/code&gt; and &lt;code&gt;x&amp;lt;t&amp;gt;&lt;/code&gt;, &lt;code&gt;W_a = [W_aa, W_ax]&lt;/code&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image009.png"/&gt; &lt;/t&gt;&lt;/t&gt;&lt;/t&gt;&lt;/t-1&gt;&lt;/t&gt;&lt;/p&gt;
&lt;h3 id="backpropagation-through-time_1"&gt;Backpropagation through time&lt;/h3&gt;
&lt;p&gt;Parameters: &lt;code&gt;W_y&lt;/code&gt; and &lt;code&gt;W_a&lt;/code&gt;&lt;br/&gt;
loss function: log loss at each timestep (assume predictions y&lt;t&gt; are binary)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image011.png"/&gt;&lt;br/&gt;
→ backporp through the computation graph:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image012.png"/&gt; &lt;/t&gt;&lt;/p&gt;
&lt;h3 id="different-types-of-rnns"&gt;Different types of RNNs&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;many-to-many&lt;/strong&gt;:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;T_x = T_y, one prediction per timestep.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image013.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;T_x != T_y, e.g. machine translation  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;having a &lt;em&gt;encoder&lt;/em&gt; and a &lt;em&gt;decoder&lt;/em&gt;:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image017.png"/&gt;&lt;br/&gt;
&lt;strong&gt;many-to-one&lt;/strong&gt;:&lt;br/&gt;
e.g. sentence classification&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image014.png"/&gt;&lt;br/&gt;
&lt;strong&gt;one-to-many&lt;/strong&gt;:&lt;br/&gt;
e.g. music generation&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image015.png"/&gt; &lt;/p&gt;
&lt;h3 id="language-model-and-sequence-generation"&gt;Language model and sequence generation&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Language model&lt;/strong&gt;&lt;br/&gt;
motivation example: speech recognition, &lt;br/&gt;
&lt;em&gt;"The apple and the pear salad" &lt;/em&gt;VS&lt;em&gt; "The apple and the pair salad"&lt;/em&gt;&lt;br/&gt;
language model: &lt;em&gt;give probability of a sentence&lt;/em&gt; P(sentence).  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Building language model with RNN&lt;/strong&gt;&lt;br/&gt;
Training set: large corpus of text.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tokenize  &lt;/li&gt;
&lt;li&gt;vocabulary size  &lt;/li&gt;
&lt;li&gt;unknow word "&lt;unk&gt;".  &lt;/unk&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;RNN for seq generation&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;output &lt;code&gt;y&amp;lt;t&amp;gt;&lt;/code&gt;: softmax of &lt;em&gt;probability for each word&lt;/em&gt;.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&amp;lt;t+1&amp;gt;&lt;/code&gt;: make prediction &lt;em&gt;given the correct previous word&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;like this predict one word at a time.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image019.png"/&gt;&lt;br/&gt;
Loss function: cross entropy (&lt;em&gt;actual word VS probability of this word&lt;/em&gt;) at each timestep.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image020.png"/&gt; &lt;/p&gt;
&lt;h3 id="sampling-novel-sequences"&gt;Sampling novel sequences&lt;/h3&gt;
&lt;p&gt;Get a sense of what's learned: sample nouvel seqs.&lt;br/&gt;
From training, the RNN has a distribution of sequences &lt;code&gt;P(y&amp;lt;t&amp;gt; | y&amp;lt;1...t-1&amp;gt;)&lt;/code&gt;.&lt;br/&gt;
In sample: let the model generate sequences  (&lt;code&gt;np.random.choice&lt;/code&gt;):  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feed previously gen word as input to next step  &lt;/li&gt;
&lt;li&gt;include &lt;eos&gt; token in vocab to finish  &lt;/eos&gt;&lt;/li&gt;
&lt;li&gt;reject &lt;unk&gt; tokens  &lt;/unk&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;char-level language model&lt;/strong&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image021.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pro: no &lt;unk&gt; token  &lt;/unk&gt;&lt;/li&gt;
&lt;li&gt;con: much longer sequences, more expensive to train.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="vanishing-gradients-with-rnns"&gt;Vanishing gradients with RNNs&lt;/h3&gt;
&lt;p&gt;long-range dependencies are hard to capture: &lt;br/&gt;
e.g. "&lt;em&gt;the cat ........ was full&lt;/em&gt;" VS "&lt;em&gt;the cats ...... were full&lt;/em&gt;"  &lt;/p&gt;
&lt;p&gt;this is due to vanishing gradients:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image022.png"/&gt; &lt;/p&gt;
&lt;p&gt;For exploding gradients: apply &lt;em&gt;gradient clipping&lt;/em&gt; (restrict gradient norm).  &lt;/p&gt;
&lt;h3 id="gated-recurrent-unit-gru"&gt;Gated Recurrent Unit (GRU)&lt;/h3&gt;
&lt;p&gt;Modification of RNN to capture long range dependencies.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Visualization of a RNN unit:&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image023.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(simplified) GRU&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extra &lt;em&gt;memory cell&lt;/em&gt;: &lt;code&gt;c&amp;lt;t&amp;gt;=a&amp;lt;t&amp;gt;&lt;/code&gt;, (replaces output activation).  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Candidate&lt;/em&gt; value of c&lt;t&gt;: &lt;code&gt;c_tilde&amp;lt;t&amp;gt;=tanh(Wc * [c&amp;lt;t-1&amp;gt;, x&amp;lt;t&amp;gt;] + b_c)&lt;/code&gt; &lt;/t&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gate&lt;/strong&gt;&lt;em&gt; (between 0 and 1, conceptually consider it as binary)&lt;/em&gt;:   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Gamme_u = sigmoid(W_u * [c&amp;lt;t-1&amp;gt;, x&amp;lt;t&amp;gt;] + b_u)&lt;/code&gt;&lt;br/&gt;
subscript "&lt;em&gt;u&lt;/em&gt;" stands for "&lt;em&gt;update&lt;/em&gt;", i.e. whether we want to update current memory cell  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actual value of &lt;code&gt;c&amp;lt;t&amp;gt; = Gamme_u * c_tilde&amp;lt;t&amp;gt; + (1-Gamma_u) * c&amp;lt;t-1&amp;gt;&lt;/code&gt; (&lt;code&gt;*&lt;/code&gt; is element-wise multiplication)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;i.e. &lt;code&gt;c&amp;lt;t&amp;gt;&lt;/code&gt; can be conserved for long range before being updated&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image024.png"/&gt;&lt;br/&gt;
Visualization of GRU unit (maybe equations are more understandable...):&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image025.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;full GRU&lt;/strong&gt;&lt;br/&gt;
for candidate &lt;code&gt;c_tilde&amp;lt;t&amp;gt;&lt;/code&gt;, add one more gate &lt;code&gt;Gamme_r&lt;/code&gt;: controlling how much &lt;code&gt;c&amp;lt;t-1&amp;gt;&lt;/code&gt; contributes to &lt;code&gt;c_tilde&amp;lt;t&amp;gt;&lt;/code&gt;("&lt;em&gt;r&lt;/em&gt;" for "&lt;em&gt;relevance&lt;/em&gt;", i.e. how relevant &lt;code&gt;c&amp;lt;t-1&amp;gt;&lt;/code&gt; is for &lt;code&gt;c_tilde&amp;lt;t&amp;gt;&lt;/code&gt;)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image026.png"/&gt; &lt;/p&gt;
&lt;h3 id="long-short-term-memory-lstm"&gt;Long Short Term Memory (LSTM)&lt;/h3&gt;
&lt;p&gt;More powerful and general version of GRU.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;output &lt;code&gt;a&amp;lt;t&amp;gt;&lt;/code&gt; no longer equals to memory cell &lt;code&gt;c&amp;lt;t&amp;gt;&lt;/code&gt; (but a &lt;em&gt;gated&lt;/em&gt; version of it, see below)  &lt;/li&gt;
&lt;li&gt;candidate &lt;code&gt;c_tilde&amp;lt;t&amp;gt;&lt;/code&gt; depends on &lt;code&gt;a&amp;lt;t-1&amp;gt;&lt;/code&gt; instead of &lt;code&gt;c&amp;lt;t-1&amp;gt;&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;em&gt;two update gates&lt;/em&gt;: &lt;code&gt;Gamma_u&lt;/code&gt; (&lt;em&gt;update gate&lt;/em&gt;) and &lt;code&gt;Gamma_f&lt;/code&gt; (&lt;em&gt;forget gate&lt;/em&gt;)  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;output gate&lt;/em&gt;: &lt;code&gt;Gamma_o&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;value of &lt;code&gt;c&amp;lt;t&amp;gt; = Gamma_u * c_tilde&amp;lt;t&amp;gt; + Gamma_f  * c&amp;lt;t-1&amp;gt;&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;value of &lt;code&gt;a&amp;lt;t&amp;gt; = Gamma_o * c&amp;lt;t&amp;gt;&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image027.png"/&gt;&lt;br/&gt;
Visualization:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image028.png"/&gt;&lt;br/&gt;
Intuition: c&lt;t&gt; can be kept for long time if gates are set properly.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image029.png"/&gt; &lt;/t&gt;&lt;/p&gt;
&lt;p&gt;Variant: let the gates depend on c&lt;t-1&gt; as well ("&lt;em&gt;peephole connection&lt;/em&gt;")&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image030.png"/&gt; &lt;/t-1&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GRU vs LSTM&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LSTM is proposed earlier  &lt;/li&gt;
&lt;li&gt;GRU as a simplified version of LSTM  &lt;/li&gt;
&lt;li&gt;GRU easier to train larger NN (2 gates instead of 3)  &lt;/li&gt;
&lt;li&gt;LSTM more powerful, recommended default choice to try  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bidirectional-rnn"&gt;Bidirectional RNN&lt;/h3&gt;
&lt;p&gt;Getting information from the future.&lt;br/&gt;
motivation example: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image031.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bidirectional RNN (BRNN)&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;forward and backword&lt;/em&gt; recurrent components  &lt;/li&gt;
&lt;li&gt;computation graph is still acyclic  &lt;/li&gt;
&lt;li&gt;at t, both information from the past and the future are passed in  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;BRNN with LSTM blocks&lt;/em&gt; are typically the first thing to try in NLP problems  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image032.png"/&gt; &lt;/p&gt;
&lt;h3 id="deep-rnns"&gt;Deep RNNs&lt;/h3&gt;
&lt;p&gt;Complex NN: stack multiple RNNs (having 3 RNN layers is already a lot).0&lt;br/&gt;
notation: &lt;code&gt;a[l]&amp;lt;t&amp;gt;&lt;/code&gt; for activation in layer &lt;code&gt;l&lt;/code&gt; and time &lt;code&gt;t&lt;/code&gt;.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c5wk1/pasted_image033.png"/&gt; &lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[Convolutional Neural Networks] week4. Special applications: Face recognition &amp; Neural style transfer</title><link href="https://x-wei.github.io/Ng_DLMooc_c4wk4.html" rel="alternate"></link><published>2017-11-30T00:00:00+01:00</published><updated>2017-11-30T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-11-30:Ng_DLMooc_c4wk4.html</id><summary type="html">&lt;p&gt;This week: two special application of ConvNet.  &lt;/p&gt;
&lt;h2 id="i-face-recognition"&gt;I-Face Recognition&lt;/h2&gt;
&lt;h3 id="what-is-face-recognition"&gt;What is face recognition&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Face verification &amp;amp; face recognition&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;verification: input = image and ID → output whether the image and ID are the same.  &lt;/li&gt;
&lt;li&gt;recognition: database = K persons, input = image → output = ID of the image among the K person or "not recognized".  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ the verification system's precision needs to be very high in order to be used in face recognition.  &lt;/p&gt;
&lt;h3 id="one-shot-learning"&gt;One Shot Learning&lt;/h3&gt;
&lt;p&gt;"one shot": learn from just &lt;em&gt;one&lt;/em&gt; example, and able to recognize the person again.&lt;br/&gt;
A CNN+softmax is not practical, e.g. when new images are added to database, output_dim will change...  &lt;/p&gt;
&lt;p&gt;⇒ instead, learn a &lt;em&gt;similarity&lt;/em&gt; function.&lt;br/&gt;
&lt;code&gt;d(img1, img2)&lt;/code&gt; = degree of difference between images. + threshold &lt;code&gt;tau&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="siamese-network"&gt;Siamese Network&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image.png"/&gt;&lt;br/&gt;
To learn a disimilarity function: &lt;em&gt;Siamese Network&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;Use CNN+FC to &lt;strong&gt;encode&lt;/strong&gt;&lt;em&gt; a pic &lt;/em&gt;&lt;code&gt;x&lt;/code&gt;&lt;em&gt; into vector &lt;/em&gt;&lt;code&gt;f(x)&lt;/code&gt;&lt;em&gt;.&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image001.png"/&gt;&lt;br/&gt;
⇒ define disimilarity function d(x1, x2) as distance between encoded vectors.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;More formally:&lt;br/&gt;
want to learn NN params for the encoding f(x) such that:&lt;br/&gt;
when x1 and x2 are same person, dist(f(x1), f(x2)) is small, otherwise large.  &lt;/p&gt;
&lt;h3 id="triplet-loss"&gt;Triplet Loss&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image005.png"/&gt;&lt;br/&gt;
triplet: (&lt;em&gt;anchor, positive, negative)&lt;/em&gt;.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image004.png"/&gt;&lt;br/&gt;
want f(A) similar to f(P) and different from f(N):&lt;br/&gt;
i.e. want &lt;code&gt;d(A, P) - d(A, N) &amp;lt;= 0&lt;/code&gt;&lt;br/&gt;
⇒ to avoid NN from learning a trival output (i.e. all encodings are identical, d(A, P)=d(A, N)=0), &lt;em&gt;add margin &lt;/em&gt;&lt;code&gt;alpha&lt;/code&gt;.&lt;br/&gt;
want &lt;code&gt;d(A, P) - d(A, N) + alpha&amp;lt;= 0&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Loss function definition&lt;/strong&gt;:&lt;br/&gt;
similar to hinge loss: &lt;code&gt;L = max(0, d(A,P)-d(A,N) + alpha)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image007.png"/&gt;&lt;br/&gt;
→ Generate triplets from dataset, and feed to the NN.&lt;br/&gt;
note: here we do need &amp;gt;1 pics of the same person (Anchor and Positive).  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Choosing triplets A, P, N&lt;/strong&gt;&lt;br/&gt;
If A,P,N are &lt;em&gt;randomly&lt;/em&gt; chosen, the constraint is easily satisfied → NN won't learn much.&lt;br/&gt;
→ &lt;em&gt;choose A,P,N that are "hard" to train on. &lt;/em&gt;Computation efficiency of learning is improved.&lt;br/&gt;
(&lt;em&gt;details presented in the FaceNet paper&lt;/em&gt;)  &lt;/p&gt;
&lt;p&gt;in practice: better download pretrained model.  &lt;/p&gt;
&lt;h3 id="face-verification-and-binary-classification"&gt;Face Verification and Binary Classification&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image.png"/&gt;&lt;br/&gt;
Triplet loss is one way of doing face verification.&lt;br/&gt;
another way that works as well: treat as a binary classification problem.  &lt;/p&gt;
&lt;p&gt;Given input image x1 and x2 → feed f(x1) and f(x2) to a logistic regression unit.&lt;br/&gt;
→ feed the &lt;em&gt;difference in encodings&lt;/em&gt; and feed to logistic regression.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;p&gt;computation trick: precompute encodings of imgs in database at inference time.  &lt;/p&gt;
&lt;h2 id="ii-neural-style-transfer_1"&gt;II-Neural Style Transfer&lt;/h2&gt;
&lt;h3 id="what-is-neural-style-transfer"&gt;What is neural style transfer?&lt;/h3&gt;
&lt;p&gt;content image &lt;code&gt;C&lt;/code&gt;+ style image &lt;code&gt;S&lt;/code&gt; → generated image &lt;code&gt;G&lt;/code&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;h3 id="what-are-deep-convnets-learning"&gt;What are deep ConvNets learning?&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image011.png"/&gt;&lt;br/&gt;
&lt;strong&gt;visualize hidden units of different layers&lt;/strong&gt;&lt;br/&gt;
Pick &lt;em&gt;one unit&lt;/em&gt; in 1st layer → find the &lt;em&gt;nine image patches that maximize the unit's activation&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;In deeper layers: units can see larger image patches → gather nine argmax image patchs as before.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;p&gt;deeper layers can detect higher level shapes:&lt;br/&gt;
layer 3:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image013.png"/&gt;&lt;br/&gt;
layer 4:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image014.png"/&gt; &lt;/p&gt;
&lt;h3 id="cost-function"&gt;Cost Function&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image015.png"/&gt;&lt;br/&gt;
Define a cost function &lt;em&gt;for the generated image&lt;/em&gt;.&lt;br/&gt;
&lt;code&gt;J(G)&lt;/code&gt; measure how good is an image, contains two parts:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;J_content(C, G)&lt;/code&gt;: how similar is G to C  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;J_style(S, G)&lt;/code&gt;: how similar is G to S.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image016.png"/&gt;&lt;br/&gt;
&lt;strong&gt;Find generated image G&lt;/strong&gt;&lt;br/&gt;
(similar to embedding?)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initialize G randomly  &lt;/li&gt;
&lt;li&gt;Use gradient-descent to minimized J(G)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image017.png"/&gt; &lt;/p&gt;
&lt;h3 id="content-cost-function"&gt;Content Cost Function&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;J_content(C, G)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Given a pre-trained CNN&lt;/em&gt;, use &lt;em&gt;hidden layer l&lt;/em&gt; to compute J_content. The depth of &lt;em&gt;l&lt;/em&gt; controls the level of details focuses on.  &lt;/p&gt;
&lt;p&gt;Define J_content(C, G) = difference (e.g. L2-norm) between the activation of layer l of image C and image G.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image019.png"/&gt; &lt;/p&gt;
&lt;h3 id="style-cost-function"&gt;Style Cost Function&lt;/h3&gt;
&lt;p&gt;Use layer &lt;code&gt;l&lt;/code&gt; to measure "style".&lt;br/&gt;
→ &lt;strong&gt;style&lt;/strong&gt; defined as &lt;em&gt;correlation between activations across channels&lt;/em&gt;.&lt;br/&gt;
e.g. &lt;code&gt;n_C=5&lt;/code&gt; channels of slices &lt;code&gt;n_W * n_H&lt;/code&gt;.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image020.png"/&gt;&lt;br/&gt;
correlation between 2 channel ~= &lt;em&gt;which high-level features tend to occur / not occur together in an image.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;style matrix&lt;/strong&gt;&lt;br/&gt;
notation:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a_ijk&lt;/code&gt; = (scalar)activation at hight=&lt;code&gt;i&lt;/code&gt;, width=&lt;code&gt;j&lt;/code&gt;, channel=&lt;code&gt;k&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;"Style matrix) &lt;code&gt;G[l]&lt;/code&gt;, (G for "Gram matrix") shape = &lt;code&gt;n_C * n_C&lt;/code&gt;, measures &lt;em&gt;how correlated any two channels are. &lt;/em&gt;(i.e. G[l] measures the degree to which the activations of different feature detectors in layer l vary (or correlate) together with each other.)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;G_kk&lt;/code&gt;' = correlation between kth and k'th channel.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:= sum_over_i_j( a_ijk * a_ijk')  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image021.png"/&gt;&lt;br/&gt;
mathematically, this "correlation" is unnormalized cross-covariance (without substracting the mean).  &lt;/p&gt;
&lt;p&gt;Compute &lt;code&gt;G&lt;/code&gt; for both the style image and generated image.&lt;br/&gt;
→ J_style(Gen_img, Sty_img) = difference (Frobenius norm) between G(gen) and G(sty)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image022.png"/&gt;&lt;br/&gt;
In practice, take J_style for multiple layers:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image023.png"/&gt; &lt;/p&gt;
&lt;h3 id="1d-and-3d-generalizations"&gt;1D and 3D Generalizations&lt;/h3&gt;
&lt;p&gt;images: 2D data.&lt;br/&gt;
→ &lt;em&gt;generalize convolution to 1D and 3D data.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1D data&lt;/strong&gt;&lt;br/&gt;
e.g. EKG data (heart voltage).&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image024.png"/&gt; &lt;/p&gt;
&lt;p&gt;(note: most 1D data use RNN...)  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3D data&lt;/strong&gt;&lt;br/&gt;
have height width and depth,&lt;br/&gt;
e.g. C.T. data; movie date (frame by frame)&lt;br/&gt;
→ generalized from 2D&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk4/pasted_image025.png"/&gt; &lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[Convolutional Neural Networks] week3. Object detection</title><link href="https://x-wei.github.io/Ng_DLMooc_c4wk3.html" rel="alternate"></link><published>2017-11-27T00:00:00+01:00</published><updated>2017-11-27T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-11-27:Ng_DLMooc_c4wk3.html</id><summary type="html">&lt;h3 id="object-localization"&gt;Object Localization&lt;/h3&gt;
&lt;p&gt;Classification VS. Localization VS. Detection&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;classification with localization&lt;/strong&gt;&lt;br/&gt;
Apart from softmax output (for classification), &lt;em&gt;add 4 more outputs of bounding box&lt;/em&gt;: &lt;code&gt;b_x, b_y, b_h, b_w&lt;/code&gt;.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Defining target label y in localization&lt;/strong&gt;&lt;br/&gt;
label format:&lt;br/&gt;
&lt;code&gt;P_c&lt;/code&gt; indicating if there's any object&lt;br/&gt;
bounding box: &lt;code&gt;b_x, b_y, b_h, b_w&lt;/code&gt;&lt;br/&gt;
class proba: &lt;code&gt;c_1, c_2, c_3&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Loss function: squared error&lt;br/&gt;
if y_1=P_c=1: loss = square error (y, y_hat)&lt;br/&gt;
if y_1=P_c=0: loss = (y_1 - y_1_hat)^2&lt;br/&gt;
can use different loss function for different components, but sq-loss works in practice.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;h3 id="landmark-detection"&gt;Landmark Detection&lt;/h3&gt;
&lt;p&gt;"landmark": important points in image. → let NN output their coords.  &lt;/p&gt;
&lt;p&gt;e.g. recognize coord of eye's corner or points along the eye/nose/mouth&lt;br/&gt;
→ specify a number of landmarks&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;h3 id="object-detection"&gt;Object Detection&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;sliding windows detection&lt;/strong&gt;&lt;br/&gt;
example: car detection.&lt;br/&gt;
training image: &lt;em&gt;closely-croped&lt;/em&gt; image&lt;br/&gt;
in prediciton: use sliding window and pass to ConvNet; use window of different size.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image007.png"/&gt;&lt;br/&gt;
Sliding window is OK with pre-DL algos.&lt;br/&gt;
disadvantage: computation cost too high — each window's crop ran &lt;em&gt;independently&lt;/em&gt; through ConvNet.&lt;br/&gt;
→ sliding window also can be implemented "convolutionally" — some computation can be cached.  &lt;/p&gt;
&lt;h3 id="convolutional-implementation-of-sliding-windows"&gt;Convolutional Implementation of Sliding Windows&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Turning FC layer into conv layers&lt;/strong&gt;&lt;br/&gt;
example: last conv/maxpool layer: size=5&lt;em&gt;5&lt;br/&gt;
→ &lt;/em&gt;replace FC(output_dim=400) by 400 5&lt;em&gt;5 filters&lt;/em&gt;&lt;br/&gt;
→ replace next FC layer by 1&lt;em&gt;1 filters&lt;br/&gt;
→ replace softmax layer by 1&lt;/em&gt;1 filters and activation.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;conv implementation of sliding window&lt;/strong&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image009.png"/&gt;&lt;br/&gt;
example: training image 14&lt;em&gt;14&lt;/em&gt;3, testing image 16&lt;em&gt;16&lt;/em&gt;3&lt;br/&gt;
instead of corping image to 14&lt;em&gt;14 and feed to ConvNet, &lt;/em&gt;feed the larger picture directly to ConvNet*.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;p&gt;→ &lt;em&gt;output contains results of all patches&lt;/em&gt;!&lt;br/&gt;
⇒ instead of computing each sliding window sequentially, can get all results with a single pass of the full image!!&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image012.png"/&gt;&lt;br/&gt;
problem: bounding box position is not accurate.  &lt;/p&gt;
&lt;h3 id="bounding-box-predictions"&gt;Bounding Box Predictions&lt;/h3&gt;
&lt;p&gt;To output more accurate bounding boxes: aspect-ration no longer 1:1.&lt;br/&gt;
&lt;strong&gt;YOLO algorithm&lt;/strong&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image013.png"/&gt;&lt;br/&gt;
"You Only Look Once"&lt;br/&gt;
For each grid cell: apply image classification with bouding boxes (described in 1st section, 8 outputs).&lt;br/&gt;
needs labelled data: assign each obj to the grid where its center is in.&lt;br/&gt;
&lt;em&gt;output volume: 3&lt;/em&gt;3&lt;em&gt;8&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image014.png"/&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image015.png"/&gt; &lt;/p&gt;
&lt;p&gt;Also: a lot of computation shared, efficient ⇒ possible to do real-time.  &lt;/p&gt;
&lt;p&gt;note: bounding box annotation in YOLO &lt;em&gt;can be out of [0,1] range.&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image016.png"/&gt; &lt;/p&gt;
&lt;h3 id="intersection-over-union"&gt;Intersection Over Union&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Evaluating&lt;/strong&gt; object localization:&lt;br/&gt;
→  intersection over union (IoU) function = size(intesection) / size(union) = &lt;em&gt;measure of overlap of two bounding boxes.&lt;/em&gt;&lt;br/&gt;
"correct" if IoU &amp;gt;= 0.5&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image017.png"/&gt; &lt;/p&gt;
&lt;h3 id="non-max-suppression"&gt;Non-max Suppression&lt;/h3&gt;
&lt;p&gt;Problem: algo might detect the same obj multiple times.&lt;br/&gt;
example:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image018.png"/&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image019.png"/&gt;&lt;br/&gt;
each bouding box has a confidence score — keep the max bouding box, suppress the overlapping ones.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image020.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image021.png"/&gt; &lt;/p&gt;
&lt;h3 id="anchor-boxes"&gt;Anchor Boxes&lt;/h3&gt;
&lt;p&gt;Problem: each grid detects only one obj → can a grid &lt;em&gt;detect multiple obj&lt;/em&gt; ? → use anchor boxes.  &lt;/p&gt;
&lt;p&gt;In data labeling: predefine 2 shapes (anchor boxes); use 8 sets of 8 outputs for each anchor box.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image022.png"/&gt; &lt;/p&gt;
&lt;p&gt;Compare with previous:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;previous: each obj assigned to the grid which contains its mid point  &lt;/li&gt;
&lt;li&gt;now each obj assigned to (cell, anchorbox): cell=the grid which contains its mid point; anchor_box=&lt;em&gt; the anchorbox that has highest IoU with the labelled bounding box&lt;/em&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image023.png"/&gt; &lt;/p&gt;
&lt;p&gt;In practice: choose 5~10 anchor boxes by hand; or use Kmeans on object's shapes.  &lt;/p&gt;
&lt;h3 id="yolo-algorithm"&gt;YOLO Algorithm&lt;/h3&gt;
&lt;p&gt;Put all components together.&lt;br/&gt;
example:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;detecting pedestrian/car/motercycle. (4 classes)  &lt;/li&gt;
&lt;li&gt;grid: 3*3  &lt;/li&gt;
&lt;li&gt;2 anchor boxes  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ &lt;strong&gt;Preparing training set&lt;/strong&gt;&lt;br/&gt;
y shape = 3*3*2*8&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image024.png"/&gt; &lt;/p&gt;
&lt;p&gt;train a ConvNet on this with output_dim = 3&lt;em&gt;3&lt;/em&gt;16&lt;br/&gt;
→ &lt;strong&gt;making predictions&lt;/strong&gt;&lt;br/&gt;
2*8 outputs for each of the 9 grids&lt;br/&gt;
→ &lt;strong&gt;nonmax supression for each class&lt;/strong&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image025.png"/&gt; &lt;/p&gt;
&lt;h3 id="optional-region-proposals"&gt;(Optional) Region Proposals&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image026.png"/&gt;&lt;br/&gt;
Region proposal algo (R-CNN): less often than YOLO.&lt;br/&gt;
Sliding window disadvantage: many regions are not interesting.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image027.png"/&gt;&lt;br/&gt;
⇒ select just a few windows&lt;br/&gt;
first run segmentation algo, then run CNN on bounding box of blobs.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image028.png"/&gt;&lt;br/&gt;
→ still quite slow&lt;br/&gt;
faster variants:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk3/pasted_image029.png"/&gt; &lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[Convolutional Neural Networks] week2. Deep convolutional models: case studies</title><link href="https://x-wei.github.io/Ng_DLMooc_c4wk2.html" rel="alternate"></link><published>2017-11-22T00:00:00+01:00</published><updated>2017-11-22T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-11-22:Ng_DLMooc_c4wk2.html</id><summary type="html">&lt;h2 id="i-case-studies"&gt;I-Case studies&lt;/h2&gt;
&lt;h3 id="why-look-at-case-studies"&gt;Why look at case studies?&lt;/h3&gt;
&lt;p&gt;Good way to get intuition of different component of CNN: case study &amp;amp; reading paper.&lt;br/&gt;
&lt;strong&gt;Outline&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;classic networks:  &lt;ul&gt;
&lt;li&gt;LeNet-5  &lt;/li&gt;
&lt;li&gt;AlexNet  &lt;/li&gt;
&lt;li&gt;VGG  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ResNet (152-layer NN)  &lt;/li&gt;
&lt;li&gt;Inception  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="classic-networks"&gt;Classic Networks&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;LeNet-5&lt;/strong&gt;(1998)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image002.png"/&gt;&lt;br/&gt;
Goal: recognize hand-written digits.&lt;br/&gt;
image → 2 CONV-MEANPOOL layers, all CONV are valid (without padding) → 2 FC → softmax&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image.png"/&gt;&lt;br/&gt;
takeaway (patterns still used today):  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;as go deeper, n_H, n_W goes down, n_C goes up  &lt;/li&gt;
&lt;li&gt;conv-pool repeated some times, then FC-FC-output  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sidenote:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;used sigmoid/tanh as activation, instead of ReLU.  &lt;/li&gt;
&lt;li&gt;has non-linearity after pooling  &lt;/li&gt;
&lt;li&gt;orignial paper hard to read  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;AlexNet&lt;/strong&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image006.png"/&gt;&lt;br/&gt;
Same pattern: conv-maxpool layers → FC layers → softmax&lt;br/&gt;
but much more params.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image004.png"/&gt;&lt;br/&gt;
sidenote:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use ReLU as activation  &lt;/li&gt;
&lt;li&gt;multi-GPU training  &lt;/li&gt;
&lt;li&gt;"local response normalization" (LRN): normalize across all channels (not widely used today).  &lt;/li&gt;
&lt;li&gt;a lot hparams to pick  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;VGG-16&lt;/strong&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image007.png"/&gt;&lt;br/&gt;
Much less hparams:&lt;br/&gt;
All &lt;strong&gt;CONV: 3&lt;em&gt;3,s=1,padding=same, MAXPOOL: 2&lt;/em&gt;2,s=2&lt;/strong&gt;&lt;br/&gt;
→ e.g. "(CONV 64) * 2" meaning 2 conv layers (3*3,s=1,padding=same) of 64 channels.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;p&gt;note:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pretty large even by modern standard: 138M params  &lt;/li&gt;
&lt;li&gt;simplicity in architecture: POOL reduce n_H/n_W by 2 each time; CONV n_C=64-&amp;gt;128-&amp;gt;256-&amp;gt;512 (increase by 2), very systematic.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resnets"&gt;ResNets&lt;/h3&gt;
&lt;p&gt;Very deep NN are hard to train → ResNet: &lt;em&gt;skip connections&lt;/em&gt;, to be able to train ~100 layers NN.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Residual block&lt;/strong&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image012.png"/&gt;&lt;br/&gt;
Normal NN: from a[l] to a[l+2], two linear &amp;amp; ReLU operations. &lt;em&gt;"main path"&lt;/em&gt;.&lt;br/&gt;
ResNet: a[l] taks shortcut and &lt;em&gt;goes directly to a[l+2]'s non-linearity&lt;/em&gt;. "&lt;em&gt;shortcut&lt;/em&gt;" / "&lt;em&gt;skip connection&lt;/em&gt;".&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image010.png"/&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image009.png"/&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image039.png"/&gt; &lt;/p&gt;
&lt;p&gt;Using residual block allows training &lt;em&gt;very deep&lt;/em&gt; NN:&lt;br/&gt;
stack them to get ResNet (i.e. add shortcuts to "plain" NN).  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image013.png"/&gt; &lt;/p&gt;
&lt;p&gt;Problem of training  plain NN: &lt;em&gt;training error goes up (in practice) when having deeper NN&lt;/em&gt;.&lt;br/&gt;
Because deeper NN are harder to train (vanishing/exploding gradients, etc.)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image016.png"/&gt;&lt;br/&gt;
With ResNet: training error goes down even with deeper layers.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image015.png"/&gt; &lt;/p&gt;
&lt;h3 id="why-resnets-work"&gt;Why ResNets Work&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l+2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l+2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;→ note: when applying weight decay, w can be small (w~=0, b~=0)&lt;br/&gt;
⇒ a[l+2] ~= g(a[l]) = a[l] (assume g=ReLU)&lt;br/&gt;
⇒ it's easy to get a[l+2]=a[l], i.e. &lt;em&gt;identity function from a[l] to a[l+2] is easily learned&lt;/em&gt;&lt;br/&gt;
→ whereas in plain NN, it's difficult to learn an identity function between layers, thus more layers make result &lt;em&gt;worse&lt;/em&gt;&lt;br/&gt;
→ adding 2 layers doesn't hurt the network to learn a shallower NN's function, i.e. performance is not hurt when increasing #layers.&lt;br/&gt;
→ when necessary can do even better than learning identity function&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image017.png"/&gt; &lt;/p&gt;
&lt;p&gt;Side note:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;z[l+2]&lt;/code&gt; and &lt;code&gt;a[l]&lt;/code&gt; have the same dimension (so that they can be added in g) → i.e. many "same" padding are used to preserve dimension.  &lt;/li&gt;
&lt;li&gt;If  their dimensions are not matched (e.g. for pooling layers) → add extra &lt;code&gt;w_s&lt;/code&gt; to be applied on &lt;code&gt;a[l]&lt;/code&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image018.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image019.png"/&gt; &lt;/p&gt;
&lt;h3 id="networks-in-networks-and-1x1-convolutions"&gt;Networks in Networks and 1x1 Convolutions&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image021.png"/&gt;&lt;br/&gt;
Using 1*1 conv: for one single channel, just multiply the input image(slice) by a constant...&lt;br/&gt;
But for &amp;gt;1 channels: each output number is inner prod of input channel "slice" and conv filter.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image020.png"/&gt; &lt;/p&gt;
&lt;p&gt;1&lt;em&gt;1 conv: ~= fully-connected layer applied to each of n_H&lt;/em&gt;n_W slices, adds non-linearity to NN.&lt;br/&gt;
→ 1&lt;em&gt;1 conv also called "&lt;/em&gt;network in network*"  &lt;/p&gt;
&lt;p&gt;example:&lt;br/&gt;
To &lt;em&gt;shrink&lt;/em&gt; #channels via 1*1 conv.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image022.png"/&gt; &lt;/p&gt;
&lt;h3 id="inception-network-motivation"&gt;Inception Network Motivation&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image023.png"/&gt;&lt;br/&gt;
Instead of choosing filter size, &lt;em&gt;do them all in parallel.&lt;/em&gt;&lt;br/&gt;
note: use SAME padding &amp;amp; stride=1 to have the same n_H, n_W&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image024.png"/&gt; &lt;/p&gt;
&lt;p&gt;Problem: computation cost.&lt;br/&gt;
example: input shape = 28&lt;em&gt;28&lt;/em&gt;192, filter 5&lt;em&gt;5&lt;/em&gt;192, 32 filters, output shape = 28&lt;em&gt;28&lt;/em&gt;32&lt;br/&gt;
totoal #multiplication = 28 * 28 * 32 * 5 * 5 * 192 = 120M&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image025.png"/&gt;&lt;br/&gt;
→ &lt;strong&gt;reduce #computation with 1*1 conv&lt;/strong&gt;&lt;br/&gt;
Reduce n_C of input by 1&lt;em&gt;1 conv ("bottleneck-layer") before doing the 5&lt;/em&gt;5 conv.  &lt;/p&gt;
&lt;h1 id="computation-11192-282816-5516-282832-124m_2"&gt;computation = 1&lt;em&gt;1&lt;/em&gt;192 * 28&lt;em&gt;28&lt;/em&gt;16 + 5&lt;em&gt;5&lt;/em&gt;16 * 28&lt;em&gt;28&lt;/em&gt;32 = 12.4M&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image027.png"/&gt;&lt;br/&gt;
Does bottleneck layer hurt model performance ? → no.  &lt;/p&gt;
&lt;h3 id="inception-network"&gt;Inception Network&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Inception module&lt;/strong&gt;:&lt;br/&gt;
For max pooling layer, out n_C equals input n_C → &lt;em&gt;use a 1&lt;/em&gt;1 conv to shrink n_C*.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image028.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inception network:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Putting inception modules together.  &lt;/li&gt;
&lt;li&gt;Have &lt;em&gt;side branches&lt;/em&gt;: taking hidden layer and feed to FC for output.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;— ensure features from hidden units at intermediate layers are not too bad for prediction — kind of regularization&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image030.png"/&gt; &lt;/p&gt;
&lt;p&gt;The name "inception" come from: a meme...&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image031.png"/&gt; &lt;/p&gt;
&lt;h2 id="ii-practical-advice-for-using-convnets_1"&gt;II-Practical advice for using ConvNets&lt;/h2&gt;
&lt;p&gt;Advices on how to use these classical CNN models.  &lt;/p&gt;
&lt;h3 id="using-open-source-implementation"&gt;Using Open-Source Implementation&lt;/h3&gt;
&lt;p&gt;Difficult to replicate the work just from paper: a lot of details&amp;amp;hparams&lt;br/&gt;
→ use open-sourced version.  &lt;/p&gt;
&lt;h3 id="transfer-learning"&gt;Transfer Learning&lt;/h3&gt;
&lt;p&gt;Download weights of other's NN as pretrained params.&lt;br/&gt;
→ pretrained params are trained on huge datasets, and takes weeks to train on multiple GPUs.&lt;br/&gt;
example: cat detector  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3 class: tigger/misty/neither  &lt;/li&gt;
&lt;li&gt;training set at hand is small  &lt;/li&gt;
&lt;li&gt;→ download both code and weights online  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g. ImageNet NN&lt;br/&gt;
→ change last layer's softmax&lt;br/&gt;
→ all Conv/Pool layers set &lt;em&gt;frozen&lt;/em&gt; (not trainable)&lt;br/&gt;
→ only training softmax layer's weight with training set.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image032.png"/&gt;&lt;br/&gt;
OR:&lt;br/&gt;
&lt;em&gt;Precompute&lt;/em&gt; the hidden layer (fixed function mapping from x to feature vector) and save to disk.&lt;br/&gt;
→ train a shallow model on top. → save computation.  &lt;/p&gt;
&lt;p&gt;If have a large training set at hand ⇒ freeze a few layers and train the rest.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image033.png"/&gt; &lt;/p&gt;
&lt;p&gt;If have a &lt;em&gt;huge&lt;/em&gt;  dataset: train the whole NN.  &lt;/p&gt;
&lt;h3 id="data-augmentation"&gt;Data Augmentation&lt;/h3&gt;
&lt;p&gt;More data are alway welcome.&lt;br/&gt;
&lt;strong&gt;Common augmentation method&lt;/strong&gt;:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mirroring  &lt;/li&gt;
&lt;li&gt;Randome cropping  &lt;/li&gt;
&lt;li&gt;Rotation/Shearing/Local warping: used a bit less in practice  &lt;/li&gt;
&lt;li&gt;Color shifting  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image035.png"/&gt;&lt;br/&gt;
In practice: shifts drawn from some random distribution.&lt;br/&gt;
e.g. PCA-color-augmentation (details in AlexNet paper): ~keep overall color the same.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementaing distortions during training&lt;/strong&gt;&lt;br/&gt;
If data is huge → CPU thread to get &lt;em&gt;stream&lt;/em&gt; of images → add distortion for each image → form minibatch of data → pass to training.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image036.png"/&gt; &lt;/p&gt;
&lt;h3 id="state-of-computer-vision"&gt;State of Computer Vision&lt;/h3&gt;
&lt;p&gt;Observations for DL for CV.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data VS. hand-engineering&lt;/strong&gt;&lt;br/&gt;
As more data are available → simpler algo, less hand-engineering.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image037.png"/&gt;&lt;br/&gt;
Learing algo has 2 sources of knowledge:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;labeled data  &lt;/li&gt;
&lt;li&gt;hand engineered features / network architecture / specialized components  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Transfer learning can help when dataset is small.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tips for doing well on benchmarks/winning competitions&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensembling:  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Train several(3~15) NN independently, then &lt;em&gt;average their outputs&lt;/em&gt;.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Multi-crop at test time&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Predict on multiple versions of test images and average results.&lt;br/&gt;
e.g. 10-crop at test time&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk2/pasted_image038.png"/&gt; &lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[Convolutional Neural Networks] week1. Foundations of Convolutional Neural Networks</title><link href="https://x-wei.github.io/Ng_DLMooc_c4wk1.html" rel="alternate"></link><published>2017-11-19T00:00:00+01:00</published><updated>2017-11-19T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-11-19:Ng_DLMooc_c4wk1.html</id><summary type="html">&lt;h3 id="computer-vision"&gt;Computer Vision&lt;/h3&gt;
&lt;p&gt;CV with DL: rapid progress in past two years.  &lt;/p&gt;
&lt;p&gt;CV problems:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;image classification  &lt;/li&gt;
&lt;li&gt;object detection: bounding box of objects  &lt;/li&gt;
&lt;li&gt;neural style transfer  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;input features could be very high dimension: e.g. 1000x1000 image → 3 million dim input ⇒ if 1st layer has 1000 hidden units → &lt;em&gt;3 billion params for first layer...&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;foundamental operation: convolution.  &lt;/p&gt;
&lt;h3 id="edge-detection-example"&gt;Edge Detection Example&lt;/h3&gt;
&lt;p&gt;Motivating example for convolution operation: detecting vertical edges.  &lt;/p&gt;
&lt;p&gt;Convolve image with a &lt;strong&gt;filter(kernel) &lt;/strong&gt;matrix:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk1/pasted_image001.png"/&gt;&lt;br/&gt;
Each element in resulting matrix: sum(element-wise multiplication of filter and input image).  &lt;/p&gt;
&lt;p&gt;Why the filter can detect vertical edge?&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk1/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;h3 id="more-edge-detection"&gt;More Edge Detection&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Positive V.S. negative edges&lt;/strong&gt;:&lt;br/&gt;
dark to light V.S. light to dark&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk1/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;p&gt;Instead of picking filter by hand, the actual parameters can be &lt;em&gt;learned&lt;/em&gt; by ML.&lt;br/&gt;
Next: discuss some building blocks of CNN, padding/striding/pooling...  &lt;/p&gt;
&lt;h3 id="padding"&gt;Padding&lt;/h3&gt;
&lt;p&gt;Earlier: image &lt;em&gt;shrinks&lt;/em&gt; after convolution.&lt;br/&gt;
Input &lt;code&gt;n*n&lt;/code&gt; image, convolve with &lt;code&gt;f*f&lt;/code&gt; filter ⇒ output shape = &lt;code&gt;(n-f+1) * (n-f+1)&lt;/code&gt;&lt;br/&gt;
downside:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;image shrinks on every step (if 100 layer → shrinks to very small images)  &lt;/li&gt;
&lt;li&gt;pixels &lt;em&gt;at corner&lt;/em&gt; are less used in the output  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ &lt;em&gt;pad the image&lt;/em&gt; so that output shape is invariant.  &lt;/p&gt;
&lt;p&gt;if &lt;code&gt;p&lt;/code&gt; = padding amount (width of padded border)&lt;br/&gt;
→ output shape = &lt;code&gt;(n+2p-f+1) * (n+2p-f+1)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Terminology: &lt;em&gt;valid&lt;/em&gt; and &lt;em&gt;same&lt;/em&gt; convolutions:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;valid&lt;/strong&gt; convolution: no padding, output shape = (n-f+1) * (n-f+1)  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;same&lt;/strong&gt; convolution: output size equals input size. i.e. filter width &lt;code&gt;p = (f-1) / 2&lt;/code&gt; (only works &lt;em&gt;when f is odd — &lt;/em&gt;this is also a convention in CV, partially because this way there'll be a central filter)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="strided-convolutions"&gt;Strided Convolutions&lt;/h3&gt;
&lt;p&gt;Example &lt;code&gt;stride = 2&lt;/code&gt; in convolution:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk1/pasted_image005.png"/&gt;&lt;br/&gt;
(convention: stop moving if filter goes out of image border.)  &lt;/p&gt;
&lt;p&gt;if input image &lt;code&gt;n*n&lt;/code&gt;, filter size &lt;code&gt;f*f&lt;/code&gt;, padding = &lt;code&gt;f&lt;/code&gt;, stride = &lt;code&gt;s&lt;/code&gt;&lt;br/&gt;
⇒ output shape = &lt;code&gt;(floor((n+2p-f)/s) + 1) * (floor((n+2p-f)/s) + 1)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk1/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note on cross-correlation v.s. convolution&lt;/strong&gt;&lt;br/&gt;
In math books, "convolution" involves &lt;em&gt;flip filter in both direction&lt;/em&gt; before doing "convolution" operation.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk1/pasted_image007.png"/&gt;&lt;br/&gt;
The operation discribed before is called "cross-correlation".  &lt;/p&gt;
&lt;p&gt;(Why doing the flipping in math: to ensure assosative law for convolution — (A&lt;em&gt;B)&lt;/em&gt;C=A&lt;em&gt;(B&lt;/em&gt;C).)  &lt;/p&gt;
&lt;h3 id="convolutions-over-volume"&gt;Convolutions Over Volume&lt;/h3&gt;
&lt;p&gt;example: convolutions on RGB image&lt;br/&gt;
image size = 6&lt;em&gt;6&lt;/em&gt;3 = height * width * #channels&lt;br/&gt;
filter size = 3&lt;em&gt;3&lt;/em&gt;3, (convention: &lt;em&gt;filter's #channels matches the image&lt;/em&gt;)&lt;br/&gt;
output size = 4&lt;em&gt;4 (&lt;/em&gt;1)  —  &lt;strong&gt;output is 2D for each filter&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk1/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multiple filters:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;take &amp;gt;1 filters  &lt;/li&gt;
&lt;li&gt;stack outputs together to form an &lt;em&gt;output volume&lt;/em&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk1/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary of dimensions&lt;/strong&gt;:&lt;br/&gt;
input shape = &lt;code&gt;n*n*n_c&lt;/code&gt;&lt;br/&gt;
filter shape = &lt;code&gt;f*f*n_c&lt;/code&gt; &lt;/p&gt;
&lt;h1 id="filters-n_c_1"&gt;filters = &lt;code&gt;n_c&lt;/code&gt;'&lt;/h1&gt;
&lt;p&gt;⇒ output shape = &lt;code&gt;(n-f+1) * (n-f+1) * n_c&lt;/code&gt;'  &lt;/p&gt;
&lt;h3 id="one-layer-of-a-convolutional-network"&gt;One Layer of a Convolutional Network&lt;/h3&gt;
&lt;p&gt;For each filter's output: &lt;em&gt;add bias b, then apply nonlinear activation function.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;One layer of a CNN:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk1/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;p&gt;with analogy to normall NN:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linear operation (matrix mul V.S. convolution)  &lt;/li&gt;
&lt;li&gt;bias  &lt;/li&gt;
&lt;li&gt;nonlinear activation  &lt;/li&gt;
&lt;li&gt;difference: Number of parameters &lt;em&gt;doesn't depend on input dimension&lt;/em&gt;: even for very large images.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Notation summary:&lt;/strong&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk1/pasted_image014.png"/&gt;&lt;br/&gt;
note: &lt;em&gt;ordering&lt;/em&gt; of dimensions: example index, height, width, #channel.  &lt;/p&gt;
&lt;h3 id="simple-convolutional-network-example"&gt;Simple Convolutional Network Example&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk1/pasted_image015.png"/&gt; &lt;/p&gt;
&lt;p&gt;general trend: as going to later layers, &lt;em&gt;image size shrinks, #channels increases&lt;/em&gt;.  &lt;/p&gt;
&lt;h3 id="pooling-layers"&gt;Pooling Layers&lt;/h3&gt;
&lt;p&gt;Pooling layers makes CNN more robust.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Max pooling&lt;/strong&gt;&lt;br/&gt;
divide input into regions, take max of each region.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hyperparams:  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(common choice) &lt;em&gt;filter size f=2 or 3, strid size s=2, padding p=0.&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;note: &lt;em&gt;no params to learn&lt;/em&gt; for max pooling layer, pooling layer not counted in #layers (conv-pool as a single layer)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk1/pasted_image017.png"/&gt;&lt;br/&gt;
Intuition: a large number indicats a detected feature in that region → preseved after pooling.  &lt;/p&gt;
&lt;p&gt;Formula of dimension &lt;code&gt;floor((n+2p-f+1)/s + 1)&lt;/code&gt; holds for POOL layer as well.  &lt;/p&gt;
&lt;p&gt;Output of max pooling: the same #channels as input (i.e. do maxpooling on each channel).  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Average pooling&lt;/strong&gt;&lt;br/&gt;
Less often used than max pooling.&lt;br/&gt;
Typical usecase: collapse 7&lt;em&gt;7&lt;/em&gt;1000 activation into 1&lt;em&gt;1&lt;/em&gt;1000.  &lt;/p&gt;
&lt;h3 id="cnn-example"&gt;CNN Example&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;LeNet-5&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk1/pasted_image018.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c4wk1/pasted_image020.png"/&gt; &lt;/p&gt;
&lt;h3 id="why-convolutions"&gt;Why Convolutions?&lt;/h3&gt;
&lt;p&gt;2 main advantages of CONV over FC: &lt;em&gt;param sharing; sparsity of connections.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameter sharing&lt;/strong&gt;:&lt;br/&gt;
A feature detector useful in one part of img is probably useful in another part as well.&lt;br/&gt;
→ no need to learn separate feature detectors in different parts.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sparsity of connections&lt;/strong&gt;:&lt;br/&gt;
For each output value depends only on a small number of inputs (the pixels near that position)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Invarance to translation...  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="deep learning"></category></entry><entry><title>[Structuring Machine Learning Projects] week2. ML Strategy (2)</title><link href="https://x-wei.github.io/Ng_DLMooc_c3wk2.html" rel="alternate"></link><published>2017-11-17T00:00:00+01:00</published><updated>2017-11-17T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-11-17:Ng_DLMooc_c3wk2.html</id><summary type="html">&lt;h2 id="i-error-analysis"&gt;I-Error Analysis&lt;/h2&gt;
&lt;h3 id="carrying-out-error-analysis"&gt;Carrying out error analysis&lt;/h3&gt;
&lt;p&gt;"&lt;strong&gt;Error analysis&lt;/strong&gt;": manually examine the mistakes → get insight of what's next.  &lt;/p&gt;
&lt;p&gt;"&lt;em&gt;ceiling on performance&lt;/em&gt;"  &lt;/p&gt;
&lt;p&gt;example:&lt;br/&gt;
cat classification, found some false-positives of dog pictures. → should you try to make ML system better on dog or not ?&lt;br/&gt;
→ error analysis:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get ~100 false positive examples  &lt;/li&gt;
&lt;li&gt;count how many are dogs  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ if only 5% of errors are dogs → performance can improve by &amp;lt;=5% even if totaly solved dog problem.&lt;br/&gt;
→ if 50% are dos → might need to improve on dogs.  &lt;/p&gt;
&lt;p&gt;example2 (evaluate multiple ideas in parallel):&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image.png"/&gt;&lt;br/&gt;
Pick one idea to iterate on: &lt;em&gt;use a spreadsheet&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;h3 id="cleaning-up-incorrectly-labeled-data"&gt;Cleaning up incorrectly labeled data&lt;/h3&gt;
&lt;p&gt;What to do if there are &lt;em&gt;incorrect labels&lt;/em&gt; in data ?  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In training set:  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;DL algos are quite robust to random errors in training set.&lt;/em&gt;&lt;br/&gt;
  → if incorrect labels is close to random errors (percentage not too high), it's OK to train.&lt;br/&gt;
  caveat: Robust to &lt;em&gt;random&lt;/em&gt; errors, not &lt;em&gt;systematic&lt;/em&gt; errors. E.g. all white dogs are labeled as cats.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In dev/test set:  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In error analysis, count cases of incorrect labels.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image002.png"/&gt;&lt;br/&gt;
  If #incorrect labels makes a significent different for evaluating, then fix it.&lt;br/&gt;
  example:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image004.png"/&gt;&lt;br/&gt;
  Remember: goal of dev set is to help selecting between two models.  &lt;/p&gt;
&lt;p&gt;Correcting labels in dev/test sets:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apply the same process to test set — dev/test sets have the same distribution.  &lt;/li&gt;
&lt;li&gt;consider both false positive and false negatives. → to make estimate of performance unbiased. (might take longer time)  &lt;/li&gt;
&lt;li&gt;less important to correct training set: training set can come from slight different distribution, but important dev/test come from the same distribution.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="build-your-first-system-quickly-then-iterate"&gt;Build your first system quickly, then iterate&lt;/h3&gt;
&lt;p&gt;example: speech recognition&lt;br/&gt;
many directions to go → which direction to pick ?  &lt;/p&gt;
&lt;p&gt;Build system quickly and iterate.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set up dev/test set, set metric  &lt;/li&gt;
&lt;li&gt;build intitial system &lt;em&gt;quickly&lt;/em&gt;: build something quick &amp;amp; dirty that works.  &lt;/li&gt;
&lt;li&gt;Bias/Variance analysis &amp;amp; Error analysis → prioritize next steps  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ii-mistmatched-training-and-devtest-set_1"&gt;II-Mistmatched training and dev/test set&lt;/h2&gt;
&lt;h3 id="training-and-testing-on-different-distributions"&gt;Training and testing on different distributions&lt;/h3&gt;
&lt;p&gt;When distribution of train and dev/test sets are different.  &lt;/p&gt;
&lt;p&gt;example: cat app&lt;br/&gt;
Two sources:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;webpages (high resolution, a lot of data)  &lt;/li&gt;
&lt;li&gt;user uploaded (blury, relatively small amount).  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image005.png"/&gt;&lt;br/&gt;
&lt;strong&gt;option1&lt;/strong&gt;. put both data together, randomly shuffle &amp;amp; split train/dev/test&lt;br/&gt;
&lt;em&gt;advantage&lt;/em&gt;: train/dev/test come from distribution&lt;br/&gt;
&lt;em&gt;disadvantage&lt;/em&gt;: many examples in dev/test set come from webpages — but cares more about performance on  user-uploaded examples → not recommended, target is not really what we care about  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;option2&lt;/strong&gt;. training set mostly from web, for dev/test all from user-uploaded.&lt;br/&gt;
&lt;em&gt;advantage&lt;/em&gt;: Err_dev/Err_test really reflects what the target is.  &lt;/p&gt;
&lt;p&gt;example2: speech recognition (speech activated rearview mirror)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;training data: many data coming from different sources of speech recognition.  &lt;/li&gt;
&lt;li&gt;dev/test: small amount, coming from speech activated rearview mirror.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;takeaway:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use large training set, even if distribution is different from dev/test set  &lt;/li&gt;
&lt;li&gt;dev/test data should reflect what to expect from the system.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bias-and-variance-with-mismatched-data-distributions"&gt;Bias and Variance with mismatched data distributions&lt;/h3&gt;
&lt;p&gt;B&amp;amp;V analysis changes when training set distribution is different from dev/test set.  &lt;/p&gt;
&lt;p&gt;When distr(train)!=distr(dev/test):&lt;br/&gt;
&lt;em&gt;No longer can say system has large variance problem when seeing Err_train &amp;lt; Err_dev&lt;/em&gt;. (Poor performance on dev set may not come from overfitting, but may also from change of distrubtion in data).&lt;br/&gt;
⇒ introduce &lt;strong&gt;training-dev set&lt;/strong&gt;: &lt;em&gt;same distrubution as training set, but not used in training&lt;/em&gt;.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image007.png"/&gt;&lt;br/&gt;
Now can look at Err_traindev and see if model has variance/bias problem or data-mismatch problem:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;General principles&lt;/strong&gt;:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image011.png"/&gt;&lt;br/&gt;
(also possible to have Err_dev/Err_test &amp;lt; Err_train/Err_traindev, because of data mismatch)  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More general formulation&lt;/strong&gt; (example: rearview mirror):&lt;br/&gt;
include Err_human &lt;em&gt;on dev/test data&lt;/em&gt;.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;h3 id="addressing-data-mismatch"&gt;Addressing data mismatch&lt;/h3&gt;
&lt;p&gt;How to address data-mismatch problem? → no systematic solution.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;manual error analysis: understand difference between train and dev sets.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g. noise in car  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make training data more similar / collect more data similar to dev/test set.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g. simulate noisy in-car data (&lt;em&gt;artificial data synthesis&lt;/em&gt;)  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Artificial data synthesis&lt;/strong&gt;&lt;br/&gt;
caution: avoid synthesise only a small part of all possible examples.&lt;br/&gt;
car noise example:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image014.png"/&gt;&lt;br/&gt;
car recognition example:&lt;br/&gt;
synthesis car pictures from a video game&lt;br/&gt;
problem: if there're only 20 different cars in video cars → overfit  &lt;/p&gt;
&lt;h2 id="iii-learning-from-multiple-tasks_1"&gt;III-Learning from multiple tasks&lt;/h2&gt;
&lt;h3 id="transfer-learning"&gt;Transfer learning&lt;/h3&gt;
&lt;p&gt;Learned knowledge from one task applied to a second task.&lt;br/&gt;
reason: some low-level features can be shared for different tasks.  &lt;/p&gt;
&lt;p&gt;example 1. cat classifier applied to X-ray scans diagnosis.&lt;br/&gt;
&lt;em&gt;change last output layer of original model&lt;/em&gt;, initial w[L]/b[L] of last layer and retrain the params.&lt;br/&gt;
if dataset small: only retrain last layer params (&lt;em&gt;pre-training&lt;/em&gt;)&lt;br/&gt;
else: retrain all params (&lt;em&gt;fine-tuning&lt;/em&gt;)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image017.png"/&gt;&lt;br/&gt;
example 2. speech recognition transfer to trigger word detection&lt;br/&gt;
also possilbe to create more layers to NN&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image018.png"/&gt;&lt;br/&gt;
&lt;strong&gt;When to use transfer learning:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;task A ans B have the same input  &lt;/li&gt;
&lt;li&gt;a lot of data for task A, relatively small amount of data for task B  &lt;/li&gt;
&lt;li&gt;low level feature of task A could be helpful for task B  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="multi-task-learning"&gt;Multi-task learning&lt;/h3&gt;
&lt;p&gt;transfer learning: task A and B are sequential&lt;br/&gt;
multi-task learning: &lt;em&gt;in parallel&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;example: self-driving car&lt;br/&gt;
multiple kind of objects to detect&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image019.png"/&gt;&lt;br/&gt;
multi-label problem (&lt;em&gt;each example can have multiple labels&lt;/em&gt;):&lt;br/&gt;
→ output layer should no longer be softmax&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image020.png"/&gt; &lt;/p&gt;
&lt;p&gt;Training on NN for 4 tasks instead of 4 separate NNs: early-layer features can be shared.  &lt;/p&gt;
&lt;p&gt;With missing entries are in labels:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image021.png"/&gt;&lt;br/&gt;
⇒ in loss function, sum only on labeled entries.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image022.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When to use multi-task learning&lt;/strong&gt;:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lower-level features can be shared  &lt;/li&gt;
&lt;li&gt;similar amount of data for each task — data for other tasks could help learning of main task  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image023.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can train a &lt;em&gt;big enough&lt;/em&gt; NN to do well on all tasks.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in practice: multi-task learning is &lt;em&gt;much less common&lt;/em&gt; than transfer learning.  &lt;/p&gt;
&lt;h2 id="iv-end-to-end-deep-learning_1"&gt;IV-End-to-end deep learning&lt;/h2&gt;
&lt;h3 id="what-is-end-to-end-deep-learning"&gt;What is end-to-end deep learning?&lt;/h3&gt;
&lt;p&gt;E2E: omit multiple stages in pipeline by a single NN.  &lt;/p&gt;
&lt;p&gt;example: speech recognition.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image024.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: E2E can work well only when have &lt;em&gt;really large dataset&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;example2: face recognition from camera.&lt;br/&gt;
2-stage works better than E2E:&lt;br/&gt;
image → face detection → face recognition.&lt;br/&gt;
reason: a lot of data for each of the 2 tasks, but much less data for E2E.  &lt;/p&gt;
&lt;p&gt;exapmle3: machine translation.&lt;br/&gt;
E2E works well because of large amount of training data.  &lt;/p&gt;
&lt;p&gt;example4: estimating child's age from X-ray img.&lt;br/&gt;
separate stages works better.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image026.png"/&gt; &lt;/p&gt;
&lt;h3 id="whether-to-use-end-to-end-deep-learning"&gt;Whether to use end-to-end deep learning&lt;/h3&gt;
&lt;p&gt;Pros and cons of E2E learning.&lt;br/&gt;
&lt;strong&gt;Pros&lt;/strong&gt;:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;let the data speak, avoid intermediate values (e.g. phonemes in speech recognition)  &lt;/li&gt;
&lt;li&gt;less hand-designing of components needed  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Need large amount of data (X, Y)  &lt;/li&gt;
&lt;li&gt;Excludes potentially useful hand-designed components  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Key question for applying E2E learning: &lt;em&gt;sufficient&lt;/em&gt; data available to learn a function of the &lt;em&gt;complexity&lt;/em&gt; needed to map from x to y?  &lt;/p&gt;
&lt;p&gt;example: self-driving cars&lt;br/&gt;
in practice: multi-stage system&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk2/pasted_image027.png"/&gt; &lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[Structuring Machine Learning Projects] week1. ML Strategy (1)</title><link href="https://x-wei.github.io/Ng_DLMooc_c3wk1.html" rel="alternate"></link><published>2017-11-15T00:00:00+01:00</published><updated>2017-11-15T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-11-15:Ng_DLMooc_c3wk1.html</id><summary type="html">&lt;h2 id="i-introduction-to-ml-strategy"&gt;I-Introduction to ML Strategy&lt;/h2&gt;
&lt;h3 id="why-ml-strategy"&gt;Why ML Strategy&lt;/h3&gt;
&lt;p&gt;A lot of ideas of improving ML performance: &lt;em&gt;strategy on how to choose&lt;/em&gt;.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;→ how to figure out which ones to pursue and which ones to discard ?  &lt;/p&gt;
&lt;h3 id="orthogonalization"&gt;Orthogonalization&lt;/h3&gt;
&lt;p&gt;How to tune hyperparams &amp;amp; what to expect.  &lt;/p&gt;
&lt;p&gt;TV tuning example: each knob does only one thing.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chain of assumptions in ML&lt;/strong&gt;:&lt;br/&gt;
training set performance → dev set → test set → real world  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"one knob for each chain"  &lt;/li&gt;
&lt;li&gt;Will go through these "knobs" in this course.  &lt;/li&gt;
&lt;li&gt;Don't use early stopping: this is not orthogonalized enough  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;h2 id="ii-setting-up-your-goal_1"&gt;II-Setting up your goal&lt;/h2&gt;
&lt;h3 id="single-number-evaluation-metric"&gt;Single number evaluation metric&lt;/h3&gt;
&lt;p&gt;Faster progress if only have &lt;em&gt;one single real number evaluation metric&lt;/em&gt;. → more efficient in making decisions.  &lt;/p&gt;
&lt;p&gt;example:&lt;br/&gt;
Using both percision and recall as metric is not good → &lt;em&gt;difficule to pick the best model to keep on iterating from.&lt;/em&gt;&lt;br/&gt;
→ Use F1 score instead.  &lt;/p&gt;
&lt;h3 id="satisficing-and-optimizing-metric"&gt;Satisficing and Optimizing metric&lt;/h3&gt;
&lt;p&gt;When it's difficult to pick a single real number eval metric → &lt;em&gt;set up satisficing and optimizing metrics.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;example: accuracy &amp;amp; running time trade-off&lt;br/&gt;
Instead of doing a linear combination of the two, use this:&lt;br/&gt;
    maximize accuracy&lt;br/&gt;
    subject to running time &amp;lt;= 100 ms&lt;br/&gt;
In this case: accuracy is &lt;em&gt;optimizing metric&lt;/em&gt;, running time is &lt;em&gt;satisficing metric&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;In general:&lt;br/&gt;
if having N metrics → &lt;em&gt;pick 1 as optimizing metric, the N-1 rest as satisficing metric&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;example: assistant wake-up word accuracy VS false positive.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;h3 id="train-dev-test-distributions"&gt;Train-dev-test distributions&lt;/h3&gt;
&lt;p&gt;How to setup dev/test sets.&lt;br/&gt;
Idea: dev/test sets come from the same distribution.  &lt;/p&gt;
&lt;p&gt;example: cat classification in different regions.&lt;br/&gt;
This is bad dev/test setup:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image007.png"/&gt;&lt;br/&gt;
Good practice: random shuffle data and split into dev/test sets.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;h3 id="size-of-the-dev-and-test-sets"&gt;Size of the dev and test sets&lt;/h3&gt;
&lt;p&gt;Pre-DL era, old way of splitting data: 70/30 or 60/30/10 split.&lt;br/&gt;
→ resonable when datasets are small. (100~10k examples)  &lt;/p&gt;
&lt;p&gt;In DL era: much more training (~1M) examples.&lt;br/&gt;
⇒  98/1/1 split is more resonable.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Size of test/dev set&lt;/strong&gt;: &lt;em&gt;big enough to give high confidence in system's performance&lt;/em&gt;.  &lt;/li&gt;
&lt;li&gt;OK to not have a test set, but not recommended.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="when-to-change-devtest-sets-and-metrics"&gt;When to change dev/test sets and metrics&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;example 1&lt;/strong&gt;&lt;br/&gt;
cat classification: algo A has pornographic false positives.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image009.png"/&gt;&lt;br/&gt;
→ change metric to penalize heavily pornographic FPs.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image011.png"/&gt;&lt;br/&gt;
to implement this weighting, need to go through dev/test sets.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;example 2&lt;/strong&gt;&lt;br/&gt;
Cat classification: user's upload is blury while trained on high quality images.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;h2 id="iii-comparing-to-human-level-performance_1"&gt;III-Comparing to human-level performance&lt;/h2&gt;
&lt;h3 id="why-human-level-performance"&gt;Why human-level performance?&lt;/h3&gt;
&lt;p&gt;Workflow ML can be more efficient when trying to match human level performance.  &lt;/p&gt;
&lt;p&gt;Bayes optional error: best possible error, &lt;em&gt;theoritical optimal&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image013.png"/&gt;&lt;br/&gt;
ML progress usually slows down after surpassing human-level performance:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;usually human-level is not far from Bayes optimal  &lt;/li&gt;
&lt;li&gt;as long as ML performace &amp;lt; human, there are tools to improve performance.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image014.png"/&gt; &lt;/p&gt;
&lt;h3 id="avoidable-bias"&gt;Avoidable bias&lt;/h3&gt;
&lt;p&gt;Using human rating can prevent overfitting on training set.&lt;br/&gt;
exapmle: compare training set error with human performance.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;err_train &amp;gt; err_human ⇒ focus on reducing bias (e.g. bigger NN)  &lt;/li&gt;
&lt;li&gt;err_train ~= err_human ⇒ focus on reducing variance (e.g. regularize, more training data)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image015.png"/&gt;&lt;br/&gt;
→ Use human-level error as a proxy for Bayes error.  &lt;/p&gt;
&lt;p&gt;Terminology:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoidable bias&lt;/strong&gt; is the &lt;em&gt;gap&lt;/em&gt; between training err and Bayes err.&lt;br/&gt;
  (interpretataion: some errors are inavoidable because &lt;em&gt;Bayes err is not 0&lt;/em&gt;.)  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Variance&lt;/strong&gt;: gap between training err and dev err.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="understanding-human-level-performance"&gt;Understanding human-level performance&lt;/h3&gt;
&lt;p&gt;"&lt;em&gt;Human level error as proxy for Bayes error&lt;/em&gt;"  &lt;/p&gt;
&lt;p&gt;example: Medical image classification.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image016.png"/&gt;&lt;br/&gt;
⇒ Should pick lowest human error as an estimate (upper bound) of Bayes error.  &lt;/p&gt;
&lt;p&gt;Error analysis example (which human-err to pick to estimate avoidable bias):&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image018.png"/&gt; &lt;/p&gt;
&lt;h3 id="surpassing-human-level-performance"&gt;Surpassing human-level performance&lt;/h3&gt;
&lt;p&gt;What's the avoidable bias when err_train and err_dev are smaller than err_human ?&lt;br/&gt;
→ less clear in choosing directions.  &lt;/p&gt;
&lt;p&gt;examples of tasks where ML &amp;gt;&amp;gt; human performance:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image019.png"/&gt;&lt;br/&gt;
⇒ all these tasks are:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;learned from structured data  &lt;/li&gt;
&lt;li&gt;are not natural perception tasks  &lt;/li&gt;
&lt;li&gt;have processed huge amount of data  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="improving-your-model-performance"&gt;Improving your model performance&lt;/h3&gt;
&lt;p&gt;Recall: two fundamental assumptions of supervised learning:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can fit training set well (achieve to ~= avoidable bias)  &lt;/li&gt;
&lt;li&gt;The performance on training set generalize well to dev/test sets. (achieve low variance)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The big roadmap:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c3wk1/pasted_image020.png"/&gt; &lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[Improving Deep Neural Networks] week2. Optimization algorithms</title><link href="https://x-wei.github.io/Ng_DLMooc_c2wk2.html" rel="alternate"></link><published>2017-10-23T00:00:00+02:00</published><updated>2017-10-23T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-10-23:Ng_DLMooc_c2wk2.html</id><summary type="html">&lt;p&gt;This week: optimization algos to faster train NN, on large dataset.  &lt;/p&gt;
&lt;h2 id="mini-batch-gradient-descent"&gt;Mini-batch gradient descent&lt;/h2&gt;
&lt;h3 id="batch-vs-mini-batch-gd"&gt;batch v.s. mini-batch GD&lt;/h3&gt;
&lt;p&gt;Compute J on &lt;code&gt;m&lt;/code&gt; examples: vectorization, i.e. stacking x(i) y(i) horizontally.&lt;br/&gt;
&lt;code&gt;X = [x(1), ..., x(m)]&lt;/code&gt;&lt;br/&gt;
&lt;code&gt;Y = [y(1), ..., y(m)]&lt;/code&gt;&lt;br/&gt;
→ still slow or impossible with large &lt;code&gt;m&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;⇒ split all m examples into &lt;em&gt;mini-batches&lt;/em&gt;. X^t^, Y^t^&lt;br/&gt;
e.g. mini batch size = 1000.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;p&gt;Minibatch GD:&lt;br/&gt;
each step, run one iteration of GD using X{t}, Y{t} instead of doing with full X, Y.&lt;br/&gt;
one "&lt;strong&gt;epoch&lt;/strong&gt;": one pass through all training set&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;h2 id="understanding-mini-batch-gradient-descent_1"&gt;Understanding mini-batch gradient descent&lt;/h2&gt;
&lt;p&gt;with batch-GD: each iteration will decrease cost function.&lt;br/&gt;
in mini-batch: cost J^t^ is computed on different dataset — noisy.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;p&gt;How to choose minibatch size  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;extreme 1: minibatch size = m → batch GD  &lt;/p&gt;
&lt;p&gt;coverge fastest in each iter (&lt;em&gt;but too long time or impossible per iter&lt;/em&gt;)  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;extreme 2: minibatch size = 1 → &lt;em&gt;stochastic GD&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;noisy, never coverge, (&lt;em&gt;but loose all vectorization speedup)&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Guidelines on choosing batch size&lt;/strong&gt;:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;small training set (m&amp;lt;2000) → just batch size  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;otherwise:   &lt;/p&gt;
&lt;p&gt;typical minibatch size = 64/128/256/512 (make sure minibatch size fits in CPU/GPU memory)  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="exponentially-weighted-moveing-averages"&gt;Exponentially weighted (moveing) averages&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;In fact, exp-weighted-avg is an non-parametric estimator/smoother of a series of vlaues.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;example: Temperature over the year&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image007.png"/&gt;&lt;br/&gt;
→ use a &lt;em&gt;exp-weighted moving average&lt;/em&gt; to model this:&lt;br/&gt;
&lt;code&gt;theta[t]&lt;/code&gt; = temperature at day t, t = 1,2,3,...&lt;br/&gt;
&lt;code&gt;v[t]&lt;/code&gt; = averaged(smoothed) estimate of theta, t = &lt;strong&gt;0&lt;/strong&gt;,1,2,3,...&lt;br/&gt;
&lt;strong&gt;exp-weighted average&lt;/strong&gt;: &lt;em&gt;recursivly compute v[t].&lt;/em&gt;&lt;br/&gt;
&lt;code&gt;v[0] = 0, v[t] = 0.9 * v[t-1] + 0.1 * theta[t]&lt;/code&gt;&lt;br/&gt;
(param: beta = 0.9)&lt;br/&gt;
⇒ v[t] ~= &lt;em&gt;average of theta[t] over the last 1/(1-beta) days&lt;/em&gt;. (c.f. next section)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image009.png"/&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;h2 id="understanding-exponentially-weighted-averages"&gt;Understanding exponentially weighted averages&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image010.png"/&gt;&lt;br/&gt;
Understanding the math of exp-weighted-average:&lt;br/&gt;
→ unroll the recursive formula:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;p&gt;⇔ v[100] = &lt;em&gt;a convolution of theta[t-100:t] and a exp-decaying function:&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;p&gt;A small trick on &lt;em&gt;estimating exps&lt;/em&gt;: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image013.png"/&gt;&lt;br/&gt;
That's why in previous section, we say this formula ~= averaging over last 1/(1-beta) (=1/epslon) days' theta.&lt;br/&gt;
e.g. theta[t-10]'s weight is 0.9 ^ 10 ~= 1/e ~= 0.35, i.e. after 10 days, the weight of theta[t-10] is decayed to ~&amp;lt; 1/3.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantage&lt;/strong&gt; to just computing moving window averages:  in implementation, only keep updating a single variable v_theta — very small memory usage.  &lt;/p&gt;
&lt;h2 id="bias-correction-in-exponentially-weighted-averages"&gt;Bias correction in exponentially weighted averages&lt;/h2&gt;
&lt;p&gt;To make exp-weighted averages more accurate by &lt;em&gt;bias correction.&lt;/em&gt;&lt;br/&gt;
Problem with previous implementation in initial phase:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v[0] = 0, beta = 0.98  &lt;/li&gt;
&lt;li&gt;v[1] = 0.98&lt;em&gt;0 + 0.02 * theta[1] ⇒ &lt;/em&gt;v[t] starts lower than theta. *(purple curve VS green curve)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image014.png"/&gt;&lt;br/&gt;
⇒ &lt;strong&gt;Correction&lt;/strong&gt;:&lt;br/&gt;
take &lt;code&gt;v[t] / (1 - beta^t)&lt;/code&gt; instead of v[t].&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image015.png"/&gt; &lt;/p&gt;
&lt;p&gt;In practice: &lt;em&gt;most people don't bother to implement bias correction&lt;/em&gt; — just wait for the initial phase to warm up...  &lt;/p&gt;
&lt;h2 id="gradient-descent-with-momentum"&gt;Gradient descent with momentum&lt;/h2&gt;
&lt;p&gt;GD with momentum:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;almost always faster than normal GD  &lt;/li&gt;
&lt;li&gt;in short: &lt;em&gt;compute exp-weighted-avg of the gradients as gradient to use&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example:  if contour of loss is an ellipse, can't use too large step in GD, and oscillate. → average of steps will be faster.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image018.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GD momentum&lt;/strong&gt;:&lt;br/&gt;
Use exp-weighted-avg of dW (V_dW) and of db (V_db). — smooth out oscillation steps of normal GD.&lt;br/&gt;
update params with the averaged value V_dW, V_db.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image017.png"/&gt; &lt;/p&gt;
&lt;p&gt;Why the name "momentum": &lt;em&gt;rolling down a ball in a bowl&lt;/em&gt;&lt;br/&gt;
dW/db: ~accelation&lt;br/&gt;
V_dW/B_db: ~velocity at current time (&lt;em&gt;this is why the smoothing average is called 'v'&lt;/em&gt;)&lt;br/&gt;
beta: ~friction  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image019.png"/&gt; &lt;/p&gt;
&lt;p&gt;in practice:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;beta=0.9 works well for most cases  &lt;/li&gt;
&lt;li&gt;no bias correction implemented  &lt;/li&gt;
&lt;li&gt;can use beta = 0 →  ~V_dW is scaled by 1/(1-beta) → use a scaled alpha then.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ less intuitive, and couples the tuning of alpha and beta  &lt;/p&gt;
&lt;h2 id="rmsprop"&gt;RMSprop&lt;/h2&gt;
&lt;p&gt;"Root-Mean-Square-prop".  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;also for speedup GD  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;in short:   &lt;/p&gt;
&lt;p&gt;&lt;em&gt;S =&lt;/em&gt; exp-weighted-avg of gradient &lt;em&gt;squared&lt;/em&gt; &lt;em&gt;(that's why call param beta2);&lt;/em&gt;&lt;br/&gt;
when updating params(W,b)&lt;em&gt;, scale dW,db by &lt;strong&gt;&lt;em&gt;sqrt of S&lt;/em&gt;&lt;/strong&gt;. &lt;/em&gt;&lt;code&gt;dW / sqrt(S_dW)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image022.png"/&gt; &lt;/p&gt;
&lt;p&gt;example: ellipse contour, want slow rate in &lt;code&gt;b&lt;/code&gt; directrion and fast rate in &lt;code&gt;w&lt;/code&gt; direction.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image023.png"/&gt; &lt;/p&gt;
&lt;p&gt;⇒ for each step (dW, db) = gradient of current minibatch:  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;db &lt;em&gt;large&lt;/em&gt;, dW &lt;em&gt;small&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;→ update w by dW/sqrt(S_dW), ⇔ &lt;em&gt;larger&lt;/em&gt; step in W direction&lt;br/&gt;
→ db/sqrt(S_db) ⇔ &lt;em&gt;smaller&lt;/em&gt; step in b direction → damping out oscillations in b direction  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="adam-optimization-algorithm"&gt;Adam optimization algorithm&lt;/h2&gt;
&lt;p&gt;"Adaptive Moment-estimation"  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;combination&lt;/em&gt; of RMSprop and momentum.  &lt;/li&gt;
&lt;li&gt;Proved to work well for a varity of problems.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Algo:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maintain both V_dW, V_db (hyper-param=beta1) and S_dW, S_db (hyper-param=beta2)  &lt;/li&gt;
&lt;li&gt;implement bias correction: V_corrected, S_corrected — divid by (1-beta^t)  &lt;/li&gt;
&lt;li&gt;param update (W, b): &lt;code&gt;V / sqrt(S)&lt;/code&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image024.png"/&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hyperparameters:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alpha: learning rate, &lt;em&gt;needs tuning&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;beta1: usually 0.9  &lt;/li&gt;
&lt;li&gt;beta2: usually 0.999  &lt;/li&gt;
&lt;li&gt;epsilon: 10e-8 (not important)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="learning-rate-decay"&gt;Learning rate decay&lt;/h2&gt;
&lt;p&gt;slowly reduce learning rate.  &lt;/p&gt;
&lt;p&gt;In minibatch with fixed learning rate: &lt;em&gt;will never converge&lt;/em&gt;.&lt;br/&gt;
⇒ decay learning rate → oscillating around a smaller region of optima.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image026.png"/&gt; &lt;/p&gt;
&lt;p&gt;Implementation:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &lt;em&gt;epoch&lt;/em&gt; = 1 pass through whole data.  &lt;/li&gt;
&lt;li&gt;decay learning rate alpha after each epoch (hyper-param &lt;em&gt;decay-rate&lt;/em&gt;):&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image028.png"/&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;other decay method:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exponentially decay alpha:   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image029.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sqrt of epoch_num:  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image030.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;discrete staircase:  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image031.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;manual decay: when training takes &lt;em&gt;long time&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-problem-of-local-optima"&gt;The problem of local optima&lt;/h2&gt;
&lt;p&gt;low-dimention optimas: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image032.png"/&gt; &lt;/p&gt;
&lt;p&gt;This gives &lt;em&gt;wrong&lt;/em&gt; intuition, in practice (high-dim), most 0-gradient points are &lt;em&gt;saddle points.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image034.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;plateau&lt;/strong&gt;: region where gradient close to 0 for long time.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk2/pasted_image035.png"/&gt; &lt;/p&gt;
&lt;p&gt;take-away:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;unlikely&lt;/em&gt; to stuck in bad local optima: D dimentional → ~2^(-D) of chance.  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;plateaus&lt;/em&gt; can make learning slow → use momentum/RMSprop/Adam to speedup training.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="assignment"&gt;assignment&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;implementing mini-batch GD&lt;/strong&gt;:&lt;br/&gt;
shuffle data (note: X and Y's columns are sync-ed!):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;permutation = list(np.random.permutation(m))  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        shuffled_X = X[:, permutation]  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        shuffled_Y = Y[:, permutation].reshape((1,m))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;→ partition data:&lt;br/&gt;
kth mini batch:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;mini_batch_X = shuffled_X[:, k*mini_batch_size:(k+1)*mini_batch_size]  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;     mini_batch_Y = shuffled_Y[:, k*mini_batch_size:(k+1)*mini_batch_size]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;detail: when m % minibatch_size != 0: handle last batch (smaller than a regular batch)  &lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[Improving Deep Neural Networks] week3. Hyperparameter tuning, Batch Normalization and Programming Frameworks</title><link href="https://x-wei.github.io/Ng_DLMooc_c2wk3.html" rel="alternate"></link><published>2017-10-23T00:00:00+02:00</published><updated>2017-10-23T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-10-23:Ng_DLMooc_c2wk3.html</id><summary type="html">&lt;h2 id="hyperparameter-parameters"&gt;Hyperparameter parameters&lt;/h2&gt;
&lt;p&gt;Tips for hyperparam-tuning.  &lt;/p&gt;
&lt;h3 id="tuning-process"&gt;Tuning process&lt;/h3&gt;
&lt;p&gt;Many hyperparams to tune, mark importance by colors (red &amp;gt; yellow &amp;gt; purple):&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;How to select set of values to explore ?  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do &lt;strong&gt;NOT&lt;/strong&gt; use grid search (grid of n * n)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;— this was OK in pre-DL era.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;try random values.&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;reason: difficule to know which hyperparam is most important, by randomization, &lt;em&gt;can try out n&lt;/em&gt;n distinct values for each hyperparam.*&lt;br/&gt;
In extreme case, one is &lt;code&gt;alpha&lt;/code&gt;, the other is &lt;code&gt;epislon&lt;/code&gt;.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in grid search: only n distinct values of alpha are tried  &lt;/li&gt;
&lt;li&gt;in random choice: can have n*n distinct values of alpha  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Coarse to fine&lt;/strong&gt; sample scheme: zoom in to smaller regions of hyperparam space and re-sample more densely.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;h3 id="using-an-appropriate-scale-to-pick-hyperparameters"&gt;Using an appropriate scale to pick hyperparameters&lt;/h3&gt;
&lt;p&gt;"Sampling at random", but at &lt;em&gt;appropriate scale, not uniformly.&lt;/em&gt;&lt;br/&gt;
example: choice of alpha in [0.001, 1]&lt;br/&gt;
→ &lt;em&gt;sample uniformly at log scale&lt;/em&gt; is more resonable: equal resources are used to search at each scale.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;p&gt;implementation:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;r = -4 * np.random.rand()  # -4 &amp;lt;= r &amp;lt;= 0, uniformly at randome  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;alpha = np.exp(10, r) # 10e-4 &amp;lt;= alpha &amp;lt;= 1.0&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;sampling beta for exp-weighted-avg: &lt;/em&gt;sample in the range of [0.9, 0.999]&lt;br/&gt;
→ convert to sampling 1-beta, which is in range [0.0001, 0.1]  &lt;/p&gt;
&lt;h3 id="hyperparameters-tuning-in-practice-pandas-vs-caviar"&gt;Hyperparameters tuning in practice: Pandas vs. Caviar&lt;/h3&gt;
&lt;p&gt;Tricks on how to &lt;em&gt;organize&lt;/em&gt; hyper-param-tuning process.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;re-test hyperparams occasionally:&lt;/em&gt; intuitions get stale, re-evaluate hyperparams every several months.  &lt;/p&gt;
&lt;p&gt;Two major schools of training  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Panda approach&lt;/strong&gt;: &lt;em&gt;babysitting one model&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Huge dataset, limited computing resources, can only train one model → babysit the model as it's training. Watch learning curve, try changing hyparams once a day.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Caviar approach&lt;/strong&gt;: &lt;em&gt;train many models in parallel&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have enough computation power.&lt;br/&gt;
  Different model/hyperparams being trained at the same time in parallel, pick the best one.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;h2 id="batch-normalization_1"&gt;Batch Normalization&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Batch normalization&lt;/strong&gt;:&lt;br/&gt;
(in some cases) &lt;em&gt;makes NN much more robust, and DNN much easier to train.&lt;/em&gt; &lt;/p&gt;
&lt;h3 id="normalizing-activations-in-a-network"&gt;Normalizing activations in a network&lt;/h3&gt;
&lt;p&gt;In pre-DL: normalize inputs to speedup learning. "make contours round"&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image007.png"/&gt;&lt;br/&gt;
In NN: normalize the activation &lt;code&gt;a[l-1]&lt;/code&gt; from previous layer could help (in practice, usually normalize &lt;code&gt;z[l-1]&lt;/code&gt;.)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BatchNorm algo&lt;/strong&gt;:&lt;br/&gt;
intermediate values at each layer: &lt;code&gt;z[l]&lt;/code&gt;&lt;br/&gt;
→ compute mean &amp;amp; variance&lt;br/&gt;
⇒ get normalized &lt;code&gt;z[l]_normed&lt;/code&gt;. (mean=0, std=1)&lt;br/&gt;
→ &lt;strong&gt;trasform&lt;/strong&gt; &lt;code&gt;z[l]_normed&lt;/code&gt; to &lt;code&gt;z_tilde[l]&lt;/code&gt; (mean=&lt;code&gt;beta&lt;/code&gt;, std=&lt;code&gt;gamma&lt;/code&gt;, &lt;em&gt;beta and gamma are learnable params&lt;/em&gt;),&lt;br/&gt;
reason: for hidden units, want to move/stretch the support of hidden inputs, so as to profit from non-linearity of activation function.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;h3 id="fitting-batch-norm-into-a-neural-network"&gt;Fitting Batch Norm into a neural network&lt;/h3&gt;
&lt;p&gt;Add batchnorm to NN: replace z[l] to z_tilde[l] at each layer before activation g[l].&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;p&gt;Extra params to learn: &lt;code&gt;gamma[l]&lt;/code&gt; and &lt;code&gt;beta[l]&lt;/code&gt; at each layer.  &lt;/p&gt;
&lt;p&gt;In practice: no need to implement all details of BN, use DL framework.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No bias term (b) in BN&lt;/strong&gt;:&lt;br/&gt;
z[l] = W[l] * a[l-1] + b[l]&lt;br/&gt;
but z[l] will be centered anyway → &lt;code&gt;b[l]&lt;/code&gt; is not useful.&lt;br/&gt;
→ &lt;code&gt;b[l]&lt;/code&gt; is replaced by &lt;code&gt;beta[l]&lt;/code&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image014.png"/&gt;&lt;br/&gt;
Dimension of beta[l], gamma[l]: the same as b[l] ( = n[l] * 1).  &lt;/p&gt;
&lt;h3 id="why-does-batch-norm-work"&gt;Why does Batch Norm work?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;intuition 1&lt;/strong&gt;: similar to normalizing input ("make contours round")  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;intuition 2&lt;/strong&gt;: weights in deeper layers are more robust to changes in ealier layer weights.&lt;br/&gt;
i.e. Robost to &lt;em&gt;data distribution changing&lt;/em&gt;. ("&lt;strong&gt;covariant shift&lt;/strong&gt;")  &lt;/p&gt;
&lt;p&gt;motivating example:&lt;br/&gt;
cat-classification, &lt;em&gt;trained all with black cats, but applied to colored cats&lt;/em&gt;.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image016.png"/&gt; &lt;/p&gt;
&lt;p&gt;For NN, consider the 3rd layer's units:&lt;br/&gt;
input features: a[2],&lt;br/&gt;
if cover the first 2 layers, this is a NN to map from a[2] to y_hat&lt;br/&gt;
⇒ but when weights w[2],b[2] are updated in GD, &lt;em&gt;a[2]'s distribution is always changing&lt;/em&gt;.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image017.png"/&gt;&lt;br/&gt;
&lt;strong&gt;intuition&lt;/strong&gt;: With BN, a[2] are ensured to &lt;em&gt;always have the same mean/variance&lt;/em&gt;&lt;br/&gt;
  → "data distribution" is unchanged → later layers can learn more easily, independent of previous layer's weights' change.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;intuition 2&lt;/strong&gt;: BN as &lt;em&gt;regularization&lt;/em&gt;&lt;br/&gt;
  each minibatch is scaled by mean/var of just that minibatch&lt;br/&gt;
  → &lt;em&gt;add noise&lt;/em&gt; to the transformation from z[l] to z_tilde[l].&lt;br/&gt;
  ⇒ similar to dropout, add noise to each layer's activations.&lt;br/&gt;
  therefore BN have (&lt;em&gt;slight&lt;/em&gt;) regularization effect (thie regularization effect gets smaller as minibatch size grows).&lt;br/&gt;
  (This is an unintended side effect.)  &lt;/p&gt;
&lt;h3 id="batch-norm-at-test-time"&gt;Batch Norm at test time&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;At training time&lt;/em&gt;, z[l] is standarlized &lt;em&gt;over each minibatch&lt;/em&gt;.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image018.png"/&gt;&lt;br/&gt;
⇒ But at test time needs to treat examples one at a time.&lt;br/&gt;
→ estimate the value of meu/sigma2&lt;br/&gt;
⇒ using&lt;em&gt; exp-weighted-avg&lt;/em&gt; estimator across minibatchs (with beta close to 1 → ~running average).&lt;br/&gt;
at test time, just use the latest value of this exp-weighted-avg estimation as meu/sigma2.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image019.png"/&gt; &lt;/p&gt;
&lt;h2 id="multiclass-classification_1"&gt;Multiclass classification&lt;/h2&gt;
&lt;h3 id="softmax-regression"&gt;Softmax Regression&lt;/h3&gt;
&lt;p&gt;So far: only binary classification&lt;br/&gt;
generalize logistic regression to &amp;gt;2 classes ⇒ &lt;em&gt;softmax regression&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;C&lt;/code&gt; = #classes, = #units in output layer&lt;br/&gt;
each component in y_hat is probability of one class, y_hat is normalized.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image021.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;softmax layer&lt;/strong&gt;:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;z[L] = W[L] * a[l-1] + b[L] — same as before  &lt;/li&gt;
&lt;li&gt;a[L] = y_hat = g(z[L])  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;activation function: &lt;em&gt;softmax&lt;/em&gt;&lt;br/&gt;
take exp(z[L]) --element-wise, and then normalize:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image023.png"/&gt; &lt;/p&gt;
&lt;p&gt;The softmax activation function is unusual because it takes a &lt;em&gt;vector&lt;/em&gt; instead of scalar.&lt;br/&gt;
Softmax is generalization of logistic regression: decision boundary of a &lt;em&gt;single-layer (no hidden layer)&lt;/em&gt; softmax is also &lt;em&gt;linear&lt;/em&gt;:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image025.png"/&gt; &lt;/p&gt;
&lt;h3 id="training-a-softmax-classifier"&gt;Training a softmax classifier&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;understanding softmax&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"softmax" is in contrast to "&lt;em&gt;hardmax&lt;/em&gt;":  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hardmax[i]= 1 if z_i=max else 0.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image026.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When C = 2, softmax reduces to logistic regression.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;softmax(C=2) = [logistic-reg(), 1-logistic-reg]  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;loss function&lt;/strong&gt;&lt;br/&gt;
recall: loss function in logistic regression&lt;br/&gt;
L(y, y_hat) = -1 * sum( y_i * log yhat_i + (1-y_i) * log(yhat_i) )&lt;br/&gt;
→ want y_hat big when y_i=1, small when y_i=0  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;training label y: one-hot encoding.  &lt;/li&gt;
&lt;li&gt;prediciton y_hat: probability vector  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;loss function:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if y_k=1, want to make yhat_k big  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image027.png"/&gt;&lt;br/&gt;
→ max-likelihood estimation.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GD with softmax&lt;/strong&gt;&lt;br/&gt;
fwdprop:&lt;br/&gt;
Z[L] --(softmax)--&amp;gt; a[L]=y_hat → L(y_hat, y)&lt;br/&gt;
backprop:&lt;br/&gt;
&lt;em&gt;dZ[L] = y_hat - y&lt;/em&gt; &lt;/p&gt;
&lt;h2 id="introduction-to-programming-frameworks_1"&gt;Introduction to programming frameworks&lt;/h2&gt;
&lt;h3 id="deep-learning-frameworks"&gt;Deep learning frameworks&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image029.png"/&gt; &lt;/p&gt;
&lt;h3 id="tensorflow"&gt;TensorFlow&lt;/h3&gt;
&lt;p&gt;motivating problem: minimize cost function &lt;code&gt;J(w) = (w-5)^2&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import tensorflow as tf&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;define &lt;em&gt;parameter&lt;/em&gt; to optimize:&lt;br/&gt;
&lt;code&gt;w = tf.Variable(0, dtype=tf.float32)&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;define cost function:&lt;br/&gt;
&lt;code&gt;cost = tf.add(tf.add(w**2), tf.multiply(-10., w)), 25)  # w^2 - 10w + 25  
  # also possible to use tf-reloaded operators:  
  cost = w**2 - 10 * w + 25&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tells tf to minimize the cost with GD optimizer:  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;train = tf.train.GradientDescentOptimizer(0.01).minimize(cost)&lt;/code&gt;&lt;br/&gt;
till now the &lt;em&gt;computation graph&lt;/em&gt; is defined → backward derivatives are auto-computed.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk3/pasted_image030.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start the training  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quite idiomatic process:&lt;br/&gt;
initialize vars → create session → run operations in session  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;init = tf.global_variables_initializer()  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;session = tf.Session()  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;session.run(init)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;session.run(train) # run 1 iteration of training&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;alternative format:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;with tf.Session() as session:  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  session.run(init)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  session.run(train)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;To inspect the value of a parameter: &lt;code&gt;print(session.run(w))&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run 1000 iters of GD:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;for i in range(1000):  
  session.run(train)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Let loss function depends on training data:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;define training data as &lt;em&gt;placer holder&lt;/em&gt;.&lt;br/&gt;
  a placerholder is a variable whose value will be assigned later.&lt;br/&gt;
&lt;code&gt;x = tf.placeholder(tf.float32, [3,1])  
    cost = x[0][0] * w**2 + x[1][0] * w + x[2][0]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;feed actual data value to placerholder: use &lt;em&gt;feed_dict&lt;/em&gt; in session.run()  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;data = np.array([1., -10., 25.]).reshape((3,1)  
session.run(train, feed_dict={x: data})&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="deep learning"></category></entry><entry><title>[Improving Deep Neural Networks] week1. Practical aspects of Deep Learning</title><link href="https://x-wei.github.io/Ng_DLMooc_c2wk1.html" rel="alternate"></link><published>2017-10-21T00:00:00+02:00</published><updated>2017-10-21T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-10-21:Ng_DLMooc_c2wk1.html</id><summary type="html">&lt;h1 id="setting-up-your-maching-learning-application"&gt;Setting up your Maching Learning Application&lt;/h1&gt;
&lt;h2 id="train-dev-test-sets"&gt;Train / Dev / Test sets&lt;/h2&gt;
&lt;p&gt;Applied ML: highly iterative process. &lt;em&gt;idea-code-exp loop&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;splitting data&lt;/strong&gt;&lt;br/&gt;
splitting data in order to speed up the idea-code-exp loop:  &lt;br/&gt;
*training set / dev(hold-out/cross-validataion) set / test set *  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;split ratio&lt;/strong&gt;:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;with 100~10000 examples: 70/30 or 60/20/20  &lt;/li&gt;
&lt;li&gt;with ~1M examples: dev/test set can have much smaller ratio, e.g. 98/1/1  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;mismatched train/test distribution&lt;/strong&gt;&lt;br/&gt;
training and test set don't come from the same dist.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rule of thumb: &lt;strong&gt;make sure&lt;/strong&gt; &lt;strong&gt;dev and test set come from the same distribution.&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;might be OK to only have dev set. — thought  in this case no longer have unbiased estimate of performance.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bias-variance"&gt;Bias / Variance&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;high variance: &lt;em&gt;overfitting&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;high bias: &lt;em&gt;underfitting&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image001.png"/&gt;&lt;br/&gt;
high base and high variance (worse case): high bias in some region and high variance elsewhere&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image004.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;how to estimate bias&amp;amp;variance&lt;/strong&gt;&lt;br/&gt;
→ &lt;em&gt;look at train and dev set error&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;high variance: Err_train &amp;lt;&amp;lt; Err_dev — not generalize well  &lt;/li&gt;
&lt;li&gt;high bias: Err_train ~= Err_dev, and Err_train &amp;gt;&amp;gt; Err_human — not learning well even on training set  &lt;/li&gt;
&lt;li&gt;high bias &lt;em&gt;and&lt;/em&gt; high variance (worse): Err_train &amp;gt;&amp;gt; Err_human, Err_train &amp;gt;&amp;gt; Err_dev  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image003.png"/&gt; &lt;/p&gt;
&lt;h2 id="basic-recipe-for-machine-learning"&gt;Basic Recipe for Machine Learning&lt;/h2&gt;
&lt;p&gt;basic recipe:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;does algo have high bias ? (look at Err_train)  &lt;ul&gt;
&lt;li&gt;if yes → try bigger nn / other architecture  &lt;/li&gt;
&lt;li&gt;until having low bias (fit well training set)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;high variance ? (look at Err_dev)  &lt;ul&gt;
&lt;li&gt;if yes → get more data / regularization / other architecture  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image005.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bias-variance tradeoff&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in pre-DL era, bias and variance are tradeoff (decrease one → increase the other)  &lt;/li&gt;
&lt;li&gt;in DL era: &lt;em&gt;if getting bigger nn and more data always possible&lt;/em&gt;, &lt;em&gt;both can be reduced&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(when well regularized,) &lt;em&gt;"training a bigger NN almost never hurts."&lt;/em&gt; &lt;/p&gt;
&lt;h1 id="regularizing-your-neural-network_1"&gt;Regularizing your neural network&lt;/h1&gt;
&lt;p&gt;2 ways to reduce variance: regularize, or get more data.  &lt;/p&gt;
&lt;h2 id="regularization"&gt;Regularization&lt;/h2&gt;
&lt;h3 id="example-logistic-regression"&gt;example: logistic regression&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;params: &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;cost function &lt;code&gt;J(w,b) = 1/m * L(yhat_i, yi)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ add one more term to cost &lt;code&gt;J&lt;/code&gt;: adding L2 norm of &lt;code&gt;w&lt;/code&gt;(&lt;em&gt;L2 regularization&lt;/em&gt;)&lt;br/&gt;
(lambda: regularization param)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image006.png"/&gt;&lt;br/&gt;
&lt;em&gt;just omit regularizing b&lt;/em&gt;: &lt;code&gt;w&lt;/code&gt; is high dim, &lt;code&gt;b&lt;/code&gt; is single number.  &lt;/p&gt;
&lt;p&gt;L1 regularization: L1 norm of &lt;code&gt;w&lt;/code&gt; → &lt;em&gt;w will be sparse → &lt;/em&gt;compressing the model (just a little bit)&lt;br/&gt;
⇒ &lt;em&gt;L2-reg is much often used&lt;/em&gt; &lt;/p&gt;
&lt;h3 id="example-nn"&gt;example: NN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;params: &lt;code&gt;w[l]&lt;/code&gt;, &lt;code&gt;b[l]&lt;/code&gt; for l = 1..N  &lt;/li&gt;
&lt;li&gt;sum of the norms of each &lt;code&gt;w[l]&lt;/code&gt; matrix.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ &lt;em&gt;"Frobenius norm"&lt;/em&gt; of a matrix: sum (each element squared)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image007.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gradient descent&lt;/strong&gt;: adding one more term from backprop&lt;br/&gt;
d(1/2m * ||w||) = lambda / m &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image008.png"/&gt; &lt;/p&gt;
&lt;p&gt;L2-reg also called "&lt;strong&gt;weight decay&lt;/strong&gt;": &lt;br/&gt;
with L2-reg, looks as if doing the backprop updating, with w being w' = (1-alpha*lambda/m) * w (decayed w)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image009.png"/&gt; &lt;/p&gt;
&lt;h2 id="why-regularization-reduces-overfitting_1"&gt;Why regularization reduces overfitting?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;why imposing small params prevents overfitting?&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;intuition 1&lt;/strong&gt;&lt;br/&gt;
→ heavy regularization &lt;br/&gt;
→ weight ~= 0 &lt;br/&gt;
→ many hidden units' impact are "&lt;em&gt;zeroed-out"&lt;/em&gt;&lt;br/&gt;
→ simpler NN&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image010.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;intuition 2&lt;/strong&gt;&lt;br/&gt;
e.g. activation g(z) = tanh(z)&lt;br/&gt;
small z → g(z) ~= linear, &lt;br/&gt;
large z → g(z) flattend&lt;br/&gt;
⇒ large lambda → small w &lt;br/&gt;
→ z small &lt;br/&gt;
→ every layer ~linear&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image011.png"/&gt; &lt;/p&gt;
&lt;h2 id="dropout-regularization"&gt;Dropout Regularization&lt;/h2&gt;
&lt;p&gt;another powerful method of regularization&lt;br/&gt;
&lt;strong&gt;dropout&lt;/strong&gt;: &lt;em&gt;For each training example&lt;/em&gt;, in each layer, &lt;em&gt;eliminate randomly some of its output values.&lt;/em&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image012.png"/&gt; &lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image013.png"/&gt; &lt;/p&gt;
&lt;h3 id="dropout-implementation-inverted-dropout"&gt;dropout implementation: "inverted dropout"&lt;/h3&gt;
&lt;p&gt;example: dropout of &lt;em&gt;layer 3&lt;/em&gt;, keep_prob = 0.8 (prob of keeping hidden unit)&lt;br/&gt;
→ generate a rand matrix of shape the same shape as activation &lt;code&gt;a[3]&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;d3 = np.random.rand(a3.shape[0], a3.shape[1]) &amp;lt; keep_prob  # d3 is bool matrix  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;a3 = np.multiply(a3, d3)  # element-wise multiply  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;a3 /= keep_prob  # ****"inverted dropout"****&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;"inverted dropout": why a3 /= keep_prob (i.e. make a3 larger)?&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;let's say layer 3 has 50 units, keep_prob = 0.8   &lt;/li&gt;
&lt;li&gt;→ ~10 units shut off  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;z[4] = w[4] * a[3] + b[4]&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ a[3] have random 20% units shut off &lt;br/&gt;
→ &lt;em&gt;w[4]&lt;/em&gt;a[3] will be reduced by 20% in expection*  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inverted dropout: a3 /= keep_prob, to &lt;em&gt;keep expected value a3 remains unchanged&lt;/em&gt;.  &lt;/li&gt;
&lt;li&gt;(No dropout at test time) → inverted dropout &lt;em&gt;avoids scaling problem at test time&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;making predictions at test time&lt;/strong&gt;&lt;br/&gt;
NOT use dropout at test time ⇒ don't want output to be random at test time...  &lt;/p&gt;
&lt;h2 id="understanding-dropout_1"&gt;Understanding Dropout&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;why randomly shut units prevents overfitting ?&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intuition: can't rely on any one input feature → have to spread out weight&lt;/strong&gt;&lt;br/&gt;
spread weights ~→ smaller L2 norm (shrink weights)&lt;br/&gt;
Can be formally proven: dropout is equal to &lt;em&gt;adaptive&lt;/em&gt; L2-reg, with penalty of different weight being different.  &lt;/p&gt;
&lt;p&gt;For one hidden unit: any of it input features (from prev layer) can go out at random&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image014.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation details&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vary keep_prob for different layer   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ &lt;em&gt;smaller keep_prob for larger layer&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;usually no dropout (or very small dropout) for input layer...  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image016.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Downside of dropout&lt;/strong&gt;&lt;br/&gt;
cost function J &lt;em&gt;no longer well-defined &lt;/em&gt;(because output yhat is random)&lt;br/&gt;
→ can no longer plot cost-iter curve&lt;br/&gt;
→ turn off dropout before plotting the curve  &lt;/p&gt;
&lt;h2 id="other-regularization-methods"&gt;Other regularization methods&lt;/h2&gt;
&lt;h3 id="data-augmentation"&gt;data augmentation&lt;/h3&gt;
&lt;p&gt;adding more training example is expensive &lt;br/&gt;
→ vary existing training data (e.g. flipping/rand-distortions of training image for cats)  &lt;/p&gt;
&lt;h3 id="early-stopping"&gt;early stopping&lt;/h3&gt;
&lt;p&gt;plot Err or J to #iterations &lt;em&gt;for both train and dev set.&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image017.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Downside of early-stopping&lt;/strong&gt;: &lt;br/&gt;
&lt;em&gt;optimization cost J&lt;/em&gt; and &lt;em&gt;not overfitting&lt;/em&gt; should be separated task ("Orthogonalization")&lt;br/&gt;
→ early-stopping couples the two jobs.  &lt;/p&gt;
&lt;p&gt;upside of early stopping: no need to try different values of regularization param (lambda) → finds "mid-size w" at once.  &lt;/p&gt;
&lt;h1 id="setting-up-your-optimization-problem_2"&gt;Setting up your optimization problem&lt;/h1&gt;
&lt;p&gt;How to speed up training (i.e. optimize J)  &lt;/p&gt;
&lt;h2 id="normalizing-inputs"&gt;Normalizing inputs&lt;/h2&gt;
&lt;p&gt;normalize input:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;substract mean   &lt;/li&gt;
&lt;li&gt;normalize variance  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image018.png"/&gt;&lt;br/&gt;
detail: in data splitting, &lt;em&gt;use the same meu/sigma to normalize test set !&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;why normalizing input ?&lt;/strong&gt;&lt;br/&gt;
if features x1 x2 are on different scales → w1 and w2 not same scale&lt;br/&gt;
J is more symmetric, easier to optimize&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image019.png"/&gt; &lt;/p&gt;
&lt;h3 id="vanishing-exploding-gradients"&gt;Vanishing / Exploding gradients&lt;/h3&gt;
&lt;p&gt;One problem in training very deep NN: vanishing/exploding gradients.  &lt;/p&gt;
&lt;p&gt;example: a very deep NN, each layer 2 units, linear activation g(z)=z, ignore bias b[l] = 0.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image021.png"/&gt;&lt;br/&gt;
linear activations → y is just a linear transformation of x&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image022.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;assuming each w[l] = 1.5 * Identity_matrix ⇒ activations increase exponentially  &lt;/li&gt;
&lt;li&gt;assuming each w[l] = 0.5 * Id ⇒ activations decrease exponentially  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image023.png"/&gt;&lt;br/&gt;
yhat too large or too small → hard to train  &lt;/p&gt;
&lt;h2 id="weight-initialization-for-deep-networks_1"&gt;Weight Initialization for Deep Networks&lt;/h2&gt;
&lt;p&gt;A partial solution of vanishing/exploding gradient problem: &lt;em&gt;carefully initialize weights&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;single neuron example:&lt;/strong&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image024.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;y = g(w*x), g = relu  &lt;/li&gt;
&lt;li&gt;n = # inputs for   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;z = w1&lt;em&gt;x1 + ... + wn&lt;/em&gt;xn, &lt;br/&gt;
if wi are initzed randomly&lt;br/&gt;
→ large ns ⇒ z will be large ! &lt;br/&gt;
⇒ &lt;strong&gt;set var(wi) = 1/n&lt;/strong&gt; (2/n in practice) to keep z in similar scale for diffent #inputs&lt;br/&gt;
initialization code: &lt;br/&gt;
&lt;code&gt;w[l] = np.random.randn(shape[l]) * np.sqrt( 2 / n[l-1] )  # n[l-1] = #inputs for layer-l&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;other variants&lt;/strong&gt;&lt;br/&gt;
when activation function g = tanh &lt;br/&gt;
⇒ use var(wi) = 1/n ("&lt;strong&gt;Xavier initialization&lt;/strong&gt;")&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image025.png"/&gt; &lt;/p&gt;
&lt;h2 id="numerical-approximation-of-gradients"&gt;Numerical approximation of gradients&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;checking the derivative computation&lt;/strong&gt;&lt;br/&gt;
example: f(x) = x ^ 3&lt;br/&gt;
→ &lt;em&gt;vary x by epsilon&lt;/em&gt; to approximate f'(x), &lt;em&gt;use 2-sided difference&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image026.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image027.png"/&gt; &lt;/p&gt;
&lt;p&gt;error order = O(epsilon^2) for 2-sided difference&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image028.png"/&gt; &lt;/p&gt;
&lt;h2 id="gradient-checking"&gt;Gradient checking&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Verify&lt;/strong&gt; that your implementation is correct. — help finding out bugs in implementation early.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;concat all params into a big vector &lt;code&gt;theta&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;concat all dW[l] db[l] into big vector &lt;code&gt;d_theta&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;to &lt;strong&gt;check if d_theta is correct&lt;/strong&gt;: construct a &lt;code&gt;d_theta_approx&lt;/code&gt; vector  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image029.png"/&gt;&lt;br/&gt;
⇒ &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image030.png"/&gt; &lt;/p&gt;
&lt;p&gt;How to check "approximate":&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c2wk1//pasted_image031.png"/&gt; &lt;/p&gt;
&lt;h2 id="gradient-checking-implementation-notes"&gt;Gradient Checking Implementation Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dont' use checking in training: constructing d_theta_approx is slow  &lt;/li&gt;
&lt;li&gt;When check fails: look at components to try to find bug  &lt;/li&gt;
&lt;li&gt;Remember regularization: J contains reg term as well  &lt;/li&gt;
&lt;li&gt;Doesn't work with dropout: J not well defined (random variable), turn dropout off before checking.  &lt;/li&gt;
&lt;li&gt;Run check at random initialization (w,b~=0), then again after some training(w,b~&amp;gt;0)  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="deep learning"></category></entry><entry><title>[Neural Networks and Deep Learning] week4. Deep Neural Network</title><link href="https://x-wei.github.io/Ng_DLMooc_c1wk4.html" rel="alternate"></link><published>2017-09-28T00:00:00+02:00</published><updated>2017-09-28T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-09-28:Ng_DLMooc_c1wk4.html</id><summary type="html">&lt;h2 id="deep-l-layer-neural-network"&gt;Deep L-layer neural network&lt;/h2&gt;
&lt;p&gt;Layer counting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input layer is not counted as a layer, "layer 0"&lt;/li&gt;
&lt;li&gt;last layer (layer L, output layer) is counted.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;notation:
layer 0 = input layer
&lt;code&gt;L&lt;/code&gt; = number of layers
&lt;code&gt;n^[l]&lt;/code&gt; = size of layer l
&lt;code&gt;a^[l]&lt;/code&gt; = activation of layer l = &lt;code&gt;g[l]( z[l] )&lt;/code&gt; → a[L] = yhat, a[0] = x&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;h2 id="forward-propagation-in-a-deep-network"&gt;Forward Propagation in a Deep Network&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ general rule:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image004.png"/&gt;&lt;br/&gt;
vectorization over all training examples: 
Z = [z(1),...,z(m)] one column per example ⇒ &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;L&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l-1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;Yhat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="getting-your-matrix-dimensions-right"&gt;Getting your matrix dimensions right&lt;/h2&gt;
&lt;p&gt;Debug: walk through matrix dimensions of NN, &lt;code&gt;W[l]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Single training example dimension:&lt;br/&gt;
&lt;code&gt;a[l-1].shape = (n[l-1], 1)&lt;/code&gt;&lt;br/&gt;
&lt;code&gt;z[l].shape = (n[l], 1)&lt;/code&gt;&lt;br/&gt;
⇒ &lt;code&gt;z[l] = W[l] * a[l-1] + b[l], shape = (n[l],1)&lt;/code&gt;&lt;br/&gt;
⇒ &lt;strong&gt;W[l].shape = (n[l], n[l-1]), b[l].shape = (n[l],1)&lt;/strong&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;p&gt;Vectorized (m examples) dimension:&lt;br/&gt;
Z = [z(1),...,z(m)] &lt;em&gt;stacking columns&lt;/em&gt;.&lt;br/&gt;
&lt;code&gt;Z[l].shape = (n[l], m)&lt;/code&gt;&lt;br/&gt;
Z[l] = W[l] * A[l-1] + b[l]&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image007.png"/&gt;&lt;br/&gt;
&lt;strong&gt;Z[l].shape = A[l].shape = (n[l], m)&lt;/strong&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;h2 id="why-deep-representations"&gt;Why deep representations?&lt;/h2&gt;
&lt;p&gt;intuition: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image010.png"/&gt;&lt;/p&gt;
&lt;p&gt;as layers grow: simple to complex representation / low to high level of abstraction.&lt;/p&gt;
&lt;p&gt;Circuit theory: small deep NN is better than big shallow NN.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image011.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: representation of a XOR.join(x1..xn) function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using deep NN ⇒ build an XOR binary tree&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image012.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using shallow NN: one single layer → enumerate all 2^n configurations of inputs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image013.png"/&gt;&lt;/p&gt;
&lt;h2 id="building-blocks-of-deep-neural-networks"&gt;Building blocks of deep neural networks&lt;/h2&gt;
&lt;p&gt;Fwdprop and backprop, for layer l.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fwdprop: &lt;/strong&gt;from a[l-1] to a[l]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;note: &lt;em&gt;cache z[l] for backprop.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Backprop: &lt;/strong&gt;from da[l] to da[l-1], dw[l] and db[l]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image014.png"/&gt;&lt;/p&gt;
&lt;p&gt;Once the fwd and back functions are implemented, put layers together:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image015.png"/&gt;&lt;/p&gt;
&lt;h2 id="forward-and-backward-propagation"&gt;Forward and Backward Propagation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Fwd prop&lt;/strong&gt;&lt;br/&gt;
input = a[l-1], output = a[l], cache = z[l]  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l-1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Back prop&lt;/strong&gt;
input = da[l], output = da[l-1], dW[1], db[l]&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image016.png"/&gt;&lt;br/&gt;
note: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;remember &lt;/em&gt;&lt;code&gt;da = dL/da&lt;/code&gt;&lt;em&gt;, so here &lt;/em&gt;&lt;code&gt;da&lt;/code&gt;&lt;em&gt;~='1/da' mathematically.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;derivate of matrix multiplication = transposed matrix derivative: (A*B)' = B^T' * A^T'&lt;/li&gt;
&lt;li&gt;&lt;em&gt;initial paule&lt;/em&gt; of backprop: da[L] = dL/dyhat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image018.png"/&gt;&lt;br/&gt;
Vectorized version:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image017.png"/&gt;&lt;/p&gt;
&lt;h2 id="parameters-vs-hyperparameters"&gt;Parameters vs Hyperparameters&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;parameters: W[l] and b[l] → trained from data&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hyperparams&lt;/strong&gt;: &lt;ul&gt;
&lt;li&gt;alpha (learning_rate), number of iterations, L, n[l] size of each layer, g[l] at each layer...&lt;/li&gt;
&lt;li&gt;momentum, minibatch, regularization...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ finally decides what params will be.&lt;/p&gt;
&lt;p&gt;empirical: try out different hyperparams.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image019.png"/&gt;&lt;/p&gt;
&lt;h2 id="what-does-this-have-to-do-with-the-brain"&gt;What does this have to do with the brain?&lt;/h2&gt;
&lt;p&gt;logistic regression unit ~~~&amp;gt; neuron in brain&lt;/p&gt;
&lt;h2 id="assignment-implementing-a-l-layer-nn"&gt;assignment: implementing a L-layer NN&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;params initialization:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;note: different signature for &lt;code&gt;np.random.randn&lt;/code&gt; and &lt;code&gt;np.zeros&lt;/code&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;W = np.random.randn(d0, d1) * 0.01&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;b = np.zeros((d0, d1)) # Needs putting dims in a tuple!&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;function activation:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;np.maximum&lt;/code&gt; is element-wise comparison, whereas &lt;code&gt;np.max&lt;/code&gt; will apply on certain axis.
so &lt;code&gt;ReLU(x) = np.maximum(0, x)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fwd prop:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image023.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cost:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image022.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;backprop formula:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image020.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initial paulse of backprop dA[L]: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk4/pasted_image021.png"/&gt;&lt;br/&gt;
&lt;code&gt;dAL = - (np.divide(Y, AL) - np.divide(1 - Y, 1 - AL))&lt;/code&gt;&lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[Neural Networks and Deep Learning] week3. Shallow Neural Network</title><link href="https://x-wei.github.io/Ng_DLMooc_c1wk3.html" rel="alternate"></link><published>2017-09-19T00:00:00+02:00</published><updated>2017-09-19T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-09-19:Ng_DLMooc_c1wk3.html</id><summary type="html">&lt;h2 id="neural-networks-overview"&gt;Neural Networks Overview&lt;/h2&gt;
&lt;p&gt;new notation: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;superscript &lt;code&gt;[i]&lt;/code&gt; for quantities in layer i. (compared to superscript &lt;code&gt;(i)&lt;/code&gt; for ith training example).&lt;/li&gt;
&lt;li&gt;subscript &lt;code&gt;i&lt;/code&gt; for ith unit in a layer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="neural-network-representation"&gt;Neural Network Representation&lt;/h2&gt;
&lt;p&gt;notation: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a^[i]&lt;/code&gt;: activation at layer i.&lt;/li&gt;
&lt;li&gt;input layer: x, layer 0.&lt;/li&gt;
&lt;li&gt;hidden layer&lt;/li&gt;
&lt;li&gt;output layer: prediction (yhat)&lt;/li&gt;
&lt;li&gt;don't count input layer as a layer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a 2 layer NN:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image.png"/&gt;&lt;/p&gt;
&lt;h2 id="computing-a-neural-networks-output"&gt;Computing a Neural Network's Output&lt;/h2&gt;
&lt;p&gt;each node in NN: 2 step computation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;z = wx + b&lt;/li&gt;
&lt;li&gt;a = sigmoid(z)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image002.png"/&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;z^[1]&lt;/code&gt; = stacking &lt;code&gt;z[1]_i&lt;/code&gt;s vertically
&lt;code&gt;a^[1]&lt;/code&gt; = sigmoid(&lt;code&gt;z^[1]&lt;/code&gt;)
vectorize computing &lt;code&gt;z^[1]&lt;/code&gt;: W = &lt;em&gt;stacking rows of wi.T&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image005.png"/&gt;&lt;br/&gt;
W.shape = (4,3)
b.shape = (4,1)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input at layer i = &lt;code&gt;a^[i-1]&lt;/code&gt; (&lt;code&gt;x = a[0]&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;output of each layer: &lt;code&gt;a[i] = sigmoid(W[i] a^[i-1] + b[i])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;h2 id="vectorizing-across-multiple-examples"&gt;Vectorizing across multiple examples&lt;/h2&gt;
&lt;p&gt;vectorize the computation acrosse m examples.
training examples: x^(1)...x^(m)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image007.png"/&gt;&lt;br/&gt;
computing all yhat(i) using forloop:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image008.png"/&gt;&lt;/p&gt;
&lt;p&gt;X = &lt;em&gt;stacking columns of x(i)&lt;/em&gt;, &lt;code&gt;X = [x(1)...x(m)]&lt;/code&gt;
Z[1] = stacking columns of z&lt;a href="i"&gt;1&lt;/a&gt; = [z&lt;a href="1"&gt;1&lt;/a&gt;...z&lt;a href="m"&gt;1&lt;/a&gt;]
A = stacking columns of a(i)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image010.png"/&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image009.png"/&gt;&lt;br/&gt;
&lt;strong&gt;horizontal index = training example&lt;/strong&gt; &lt;code&gt;^(i)&lt;/code&gt;&lt;br/&gt;
&lt;strong&gt;vertical index = nodes in layer &lt;/strong&gt;&lt;code&gt;_i&lt;/code&gt;&lt;strong&gt;/ input feature&lt;/strong&gt;&lt;code&gt;x_i&lt;/code&gt;
⇒ &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Z[1] = W[1] * X + b[1]&lt;/li&gt;
&lt;li&gt;A[1] = sigmoid(Z[1])&lt;/li&gt;
&lt;li&gt;Z[2] = W[2] * A[1] + b[2]&lt;/li&gt;
&lt;li&gt;A[2] = sigmoid(Z[2]) = Yhat&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="explanation-for-vectorized-implementation"&gt;Explanation for Vectorized Implementation&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image012.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recap&lt;/strong&gt;:
stacking columns of training examples &lt;code&gt;x(i)&lt;/code&gt; and activations &lt;code&gt;a[l](i)&lt;/code&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image013.png"/&gt;&lt;br/&gt;
⇒ &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image014.png"/&gt; &lt;/p&gt;
&lt;h2 id="activation-functions"&gt;Activation functions&lt;/h2&gt;
&lt;p&gt;general case: &lt;code&gt;a = g(z)&lt;/code&gt;, where g() is a nonlinear function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sigmoid: &lt;code&gt;a = 1 / (1 + exp(-z))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image018.png"/&gt;&lt;br/&gt;
  a ∈ [0,1]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tanh: &lt;code&gt;a = (exp(z) - exp(-z)) / (exp(z) + exp(-z))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image019.png"/&gt;&lt;br/&gt;
  a ∈ [-1, 1] — shifted sigmoid function 
  ⇒ data is &lt;em&gt;centered, learning for next layer easier&lt;/em&gt;
&lt;em&gt;almost always better than sigmoid&lt;/em&gt;, except for output layer (yhat = probability ∈[0,1])&lt;/p&gt;
&lt;p&gt;downside of sigmoid and tanh: &lt;em&gt;slope very small when |z| is large&lt;/em&gt; — GD slow.
⇒ ReLU&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ReLU &lt;code&gt;a = max(0, z)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;da/dz = 1 or 0
  NN learns faster because slope is constant when |z| large
  disadvantage: da/dz = 0 when z&amp;lt;0
  → leaky ReLU: small slope when z&amp;lt;0&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image020.png"/&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image021.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rules of thumb&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;output layer: sigmoid for binary classification (output probability), &lt;em&gt;otherwise never use sigmoid&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;hidden layer: use ReLU activation by default&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-do-you-need-non-linear-activation-functions"&gt;Why do you need non-linear activation functions?&lt;/h2&gt;
&lt;p&gt;use a linear activation function g(z) = z ?
⇒ &lt;code&gt;yhat&lt;/code&gt; will just be a &lt;em&gt;linear function&lt;/em&gt; of &lt;code&gt;x&lt;/code&gt;. &lt;code&gt;yhat = Wx+b&lt;/code&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image022.png"/&gt;&lt;br/&gt;
one single place when using linear activation: in output layer ( y∈R )when doing regression&lt;/p&gt;
&lt;h2 id="derivatives-of-activation-functions"&gt;Derivatives of activation functions&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;formulas for g'(z)&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="g-sigmoid"&gt;g = sigmoid&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image023.png"/&gt;&lt;br/&gt;
⇒ &lt;code&gt;g'(z) = g(z) * (1 - g(z)) = a * (1-a)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when z = +inf, g(z) = 1, g'(z) = 1*(1-1) = 0&lt;/li&gt;
&lt;li&gt;when z = -inf, g(z) = 0, g'(z) = 0&lt;/li&gt;
&lt;li&gt;when z = 0, g(z) = 0.5, g'(z) = 0.25&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="g-tanh"&gt;g = tanh&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image024.png"/&gt;&lt;br/&gt;
⇒ &lt;code&gt;g'(z) = 1 - tanh(z)^2 = 1 - a^2&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when z = +inf, tanh(z) = 1, g' = 0&lt;/li&gt;
&lt;li&gt;when z = -inf, tanh(z) = -1, g' = 0&lt;/li&gt;
&lt;li&gt;when z = 0, tanh(z) = 0, g' = 1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="g-relu-leaky-relu"&gt;g = ReLU / Leaky ReLU&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ReLU&lt;/strong&gt;:
g(z) = max(0, z)
g' is &lt;em&gt;subgradient:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;g' = 0 when z&amp;lt;0&lt;/li&gt;
&lt;li&gt;g' = 1 when z&amp;gt;=0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Leaky ReLU&lt;/strong&gt;:
g(z) = max(0.01z, z)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;g' = 0.01 when z&amp;lt;0&lt;/li&gt;
&lt;li&gt;g' = 1 when z&amp;gt;=0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="gradient-descent-for-neural-networks_1"&gt;Gradient descent for Neural Networks&lt;/h2&gt;
&lt;p&gt;NN with single hidden layer: n[0] = nx, n[1] = hidden layer size, n[2] = 1
params: w[1], b[1], w[2], b[2]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;w[1].shape=(n[1], n[0]), b[1].shape=(n[1], 1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w[2].shape=(n[2], n[1]) , b[2].shape=(n[2],1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;output: yhat = a[2]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cost function J(w[1],b[1],w[2],b[2]) = 1/m * sum(L(yhat, y))&lt;/p&gt;
&lt;p&gt;Gradient descent:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;random initialization&lt;/li&gt;
&lt;li&gt;repeat:&lt;ul&gt;
&lt;li&gt;compute dw[1], db[1], dw[2], db[2]&lt;/li&gt;
&lt;li&gt;w[1] := w[1] - alpha*dw[1], ...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fwd prop:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image026.png"/&gt;&lt;br/&gt;
general formular for &lt;code&gt;l&lt;/code&gt;th layer:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image034.png"/&gt; &lt;/p&gt;
&lt;p&gt;Bck prop: 
computing derivatives &lt;code&gt;dw&lt;/code&gt;, &lt;code&gt;db&lt;/code&gt;
note: use &lt;code&gt;keepdims = True&lt;/code&gt; or  &lt;code&gt;.rehape()&lt;/code&gt; to avoid rank-1 arraies.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image027.png"/&gt;&lt;/p&gt;
&lt;h2 id="backpropagation-intuition-optional"&gt;Backpropagation intuition (optional)&lt;/h2&gt;
&lt;p&gt;Derive the formulas using computation graph + chain rule.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image028.png"/&gt;&lt;/p&gt;
&lt;p&gt;gradient for a single example &lt;code&gt;x=x(i), y=y(i)&lt;/code&gt;:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image029.png"/&gt;&lt;/p&gt;
&lt;p&gt;vectorized implementation for i=1,..,m:
&lt;strong&gt;stacking columns&lt;/strong&gt;:&lt;code&gt;X = [x(1),..,x(m)]&lt;/code&gt;, &lt;code&gt;Z = [z(1)...z(m)]&lt;/code&gt;, &lt;code&gt;Y = [y(1)..y(m)]&lt;/code&gt;, 
→ &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image031.png"/&gt; &lt;/p&gt;
&lt;h2 id="random-initialization"&gt;Random Initialization&lt;/h2&gt;
&lt;p&gt;Unlike logistic regression, needs init params randomly.&lt;/p&gt;
&lt;p&gt;If we init all &lt;code&gt;w&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; to zeros: all activations &lt;code&gt;a_i&lt;/code&gt; and &lt;code&gt;a_j&lt;/code&gt; will be equal → &lt;code&gt;dz_i = dz_j&lt;/code&gt; → &lt;em&gt;all hidden units completely identical&lt;/em&gt;
⇒ needs to init all params &lt;em&gt;random, small&lt;/em&gt; number (small because we want have larger derivatives for sigmoid, which is at small values, to speed up gd).
when w is init to small rand, b don't need random init.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk3/pasted_image033.png"/&gt;&lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[Neural Networks and Deep Learning] week2. Neural Networks Basics</title><link href="https://x-wei.github.io/Ng_DLMooc_c1wk2.html" rel="alternate"></link><published>2017-09-13T00:00:00+02:00</published><updated>2017-09-13T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-09-13:Ng_DLMooc_c1wk2.html</id><summary type="html">&lt;p&gt;This week: &lt;strong&gt;logistic regression&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="binary-classification-notation"&gt;Binary Classification &amp;amp; notation&lt;/h2&gt;
&lt;p&gt;ex. cat classifier from image
image pixels: 64x64x3 
⇒ unroll(flatten) to a feature vector &lt;code&gt;x&lt;/code&gt; dim=64x64x3=12288:=&lt;code&gt;n&lt;/code&gt; (input dimension)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;notation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;superscript &lt;code&gt;(i)&lt;/code&gt; for ith example, e.g. &lt;code&gt;x^(i)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;superscript &lt;code&gt;[l]&lt;/code&gt; for lth layer, e.g. &lt;code&gt;w^[l]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt;: number of data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n_x&lt;/code&gt;: input dimension, &lt;code&gt;n_y&lt;/code&gt;: output dimension.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n_h^[l]&lt;/code&gt;: number of hidden units for layer l.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;L&lt;/code&gt;: number of layers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;X&lt;/code&gt;: dim=(&lt;code&gt;n_x&lt;/code&gt;,&lt;code&gt;m&lt;/code&gt;), each &lt;em&gt;column&lt;/em&gt; is a training example x^(i).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Y&lt;/code&gt;: dim=(&lt;code&gt;1&lt;/code&gt;,&lt;code&gt;m&lt;/code&gt;), one single &lt;code&gt;row&lt;/code&gt; matrix.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image.png"/&gt;&lt;/p&gt;
&lt;h1 id="logistic-regression-as-a-nueral-network_1"&gt;Logistic Regression as a Nueral Network&lt;/h1&gt;
&lt;h2 id="logistic-regression"&gt;Logistic Regression&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image009.png"/&gt;&lt;br/&gt;
dim(x) = n_x
parameters: w (dim=n_x) , b (dim=1)
(alternative notation: adding b to w → add x_0 = 1 to feature x. → will NOT use this notation here
keeping w and b separate make implementation easier )&lt;/p&gt;
&lt;p&gt;linear regression: &lt;code&gt;y_hat = w^T*x + b&lt;/code&gt;
logistic regssion: &lt;code&gt;y_hat = sigmoid(w^T*x + b)&lt;/code&gt;
sigmoid function: S-shaped function 
&lt;code&gt;sigmoid(z) = 1 / ( 1 + e^-z)&lt;/code&gt;
z large → sigmoid(z) ~= 1
z small → sigmoid(z) ~= 0&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image025.png"/&gt;&lt;/p&gt;
&lt;h2 id="logistic-regression-cost-function"&gt;Logistic Regression Cost Function&lt;/h2&gt;
&lt;p&gt;To train model for best parameters (w, b), need to define loss function.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image010.png"/&gt; &lt;br/&gt;
y_hat: between (0,1)
training set: {(x^(i), y^(i)))), i = 1..m}
want: y_hat(i) ~= y(i)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Loss function&lt;/strong&gt; &lt;code&gt;L(y_hat, y)&lt;/code&gt;: on a &lt;em&gt;single&lt;/em&gt; training example (x, y)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;square error: &lt;code&gt;L(y_hat, y) = (y_hat - y)^2/2&lt;/code&gt; &lt;ul&gt;
&lt;li&gt;⇒ &lt;em&gt;not convex&lt;/em&gt;, GD not work well, uneasy to optimize&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;loss function used in logistic regression: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;L(y_hat, y) = -[ylog(y_hat) + (1-y)log(1-y_hat)]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;convex w.r.t. w and b&lt;/li&gt;
&lt;li&gt;when y = 1, loss = -log(y_hat)  → want y_hat large → y_hat ~=1&lt;/li&gt;
&lt;li&gt;when y = 0, loss = -log(1-y_hat) → want y_hat small → y_hat ~=0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cost function&lt;/strong&gt; &lt;code&gt;J(w,b)&lt;/code&gt;: average on all training sets, only depends on parameters w, b&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image003.png"/&gt; &lt;/p&gt;
&lt;h2 id="gradient-descent"&gt;Gradient Descent&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image005.png"/&gt;&lt;br/&gt;
⇒ minimize &lt;code&gt;J(w,b)&lt;/code&gt; wrt. w and b&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;J(w,b)&lt;/code&gt; is convex ⇒ gradient descent&lt;/li&gt;
&lt;li&gt;Initialization: for logistic regression, any init works because of convexity of J, usually init as 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gradient descent: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alpha&lt;/code&gt; = learning rate&lt;/li&gt;
&lt;li&gt;derivative &lt;code&gt;dJ(w)/dw&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;~= slope of function &lt;code&gt;J&lt;/code&gt; at point &lt;code&gt;w&lt;/code&gt; 
~= direction where &lt;code&gt;J&lt;/code&gt; &lt;em&gt;grows&lt;/em&gt; fastest at point &lt;code&gt;w&lt;/code&gt;
&lt;em&gt;denote this as '&lt;/em&gt;&lt;code&gt;dw&lt;/code&gt;&lt;em&gt;' in code&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;algo: 'take steepest descent'&lt;ul&gt;
&lt;li&gt;from an init value of w_0&lt;/li&gt;
&lt;li&gt;repeatedly update w until converge &lt;code&gt;w := w - alpha*dw&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image006.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image007.png"/&gt; &lt;/p&gt;
&lt;p&gt;In the case of logistic regression, &amp;gt;1 params (&lt;code&gt;w&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;) to update:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image008.png"/&gt; &lt;/p&gt;
&lt;p&gt;Intuitions about derivatives: &lt;code&gt;f'(a)&lt;/code&gt; = slope of function &lt;code&gt;f&lt;/code&gt; at &lt;code&gt;a&lt;/code&gt; .&lt;/p&gt;
&lt;h2 id="computation-graph"&gt;Computation Graph&lt;/h2&gt;
&lt;p&gt;example: function &lt;code&gt;J(a,b,c) = 3(a+b*c)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Forward propagation&lt;/strong&gt;: compute J(a,b,c) value:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;internal u := b*c&lt;/li&gt;
&lt;li&gt;internal v := a+u&lt;/li&gt;
&lt;li&gt;J = 3 * v&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image011.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Backward propagation&lt;/strong&gt;: compute derivatives dJ/da, dJ/db, dJ/dc:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;J = 3*v → compute dJ/dv&lt;/li&gt;
&lt;li&gt;v = a + u → compute dv/da, dv/du&lt;/li&gt;
&lt;li&gt;u = bc → compute du/db, du/dc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ chain rule&lt;em&gt;: dJ/da is multiplying the derivatives along the path from J back to a&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dJ/da = dJ/dv * dv/da&lt;/li&gt;
&lt;li&gt;dJ/db = dJ/dv * dv/du * du/db&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dJ/dc = dJ/dv * dv/du * du/dc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In code: &lt;em&gt;denote '&lt;/em&gt;&lt;code&gt;dvar&lt;/code&gt;&lt;em&gt;' as d(FinalOutput)/d(var) for simplicity. i.e. da = dJ/da, dv = dJ/dv, etc.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image014.png"/&gt;&lt;/p&gt;
&lt;h2 id="logistic-regression-gradient-descent-computation-graph"&gt;Logistic Regression Gradient Descent (&amp;amp;computation graph)&lt;/h2&gt;
&lt;p&gt;logistic regression loss(on a single training example x,y) L.
as computation graph:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;z = wx + b&lt;/li&gt;
&lt;li&gt;a := sigmoid(z) (=y_hat, 'logit'?)&lt;/li&gt;
&lt;li&gt;loss function L(a,y) = - [y(loga) + (1-y)log(1-a)]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image015.png"/&gt;&lt;/p&gt;
&lt;h2 id="gradient-descent-on-m-examples"&gt;Gradient Descent on m Examples&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;cost function&lt;/em&gt;, i.e. on all training sets.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image016.png"/&gt;&lt;br/&gt;
J(w,b) = avg{L(x,y), for all m examples}
→ by linearity  of derivative: dJ/dw = avg(dL/dw), just average dw^(i) over all indices i.&lt;/p&gt;
&lt;p&gt;In implementation: use &lt;strong&gt;vectorization&lt;/strong&gt; as much as possible, get rid of for loops.&lt;/p&gt;
&lt;h1 id="python-and-vectorization_1"&gt;Python and Vectorization&lt;/h1&gt;
&lt;h2 id="vectorization"&gt;Vectorization&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;avoid explicit for-loops whenever possible&lt;/em&gt;
e.g. z = w^T * x + b
in numpy:
&lt;code&gt;z = np.dot(w, x) + b&lt;/code&gt;
&lt;em&gt;~300 times faster than explicit for loop&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;more examples:
u = A*v matrix multiplication
→ &lt;code&gt;u =&lt;/code&gt; &lt;code&gt;np.dot(A, v)&lt;/code&gt;
note: &lt;code&gt;A * v&lt;/code&gt; would element-wise multiply
u = exp(v) element-wise operation: exponential/log/abs/...
→ &lt;code&gt;u = np.exp(v)&lt;/code&gt; &lt;code&gt;/ np.log(v) / np.abs(v) / v**2 / 1/v&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="vectorizing-logistic-regression"&gt;Vectorizing Logistic Regression&lt;/h2&gt;
&lt;p&gt;implementation before: two for-loops( 1 for each training set, 1 for each feature vector).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;training input &lt;code&gt;X = [x(1), ... , x(m)]&lt;/code&gt;, X.dim = (n_x, m)&lt;/li&gt;
&lt;li&gt;weight &lt;code&gt;w^T = [w_1, ... , w_nx]&lt;/code&gt;, w.dim = (n_x, 1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Fwd propagation&lt;/strong&gt;&lt;br/&gt;
z(i) = w^T * x(i) + b, i = 1..m,
→ Z := [z(1)...z(m)] = w^T * X + [b...b], Z.dim = (1, m), stack horizentally
→ &lt;code&gt;Z = np.dot(w.T, X) + b&lt;/code&gt; (scalar b &lt;em&gt;auto broadcasted&lt;/em&gt; to a row vector)
a(i) = sigmoid( z(i) ) = y_hat(i)
→ A := [a(1)...a(m)] = sigmoid(Z), sigmoid is vectorized&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bkwd propagation: gradient computation&lt;/strong&gt;&lt;br/&gt;
&lt;code&gt;dz(i)  = a(i) - y(i)&lt;/code&gt;
→ stack horizentally:
Y = [y(1)...y(m)]
dZ := [dz(1)...dz(m)] = A - Y
graidents:
&lt;code&gt;dw = sum( x(i) * dz(i) ) / m&lt;/code&gt;, dw.dim = (nx, 1)
&lt;code&gt;db = sum( dz(i) ) / m&lt;/code&gt;
→ 
db = 1/m * np.sum(dZ)
dw = 1/m * X*dz^T&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image017.png"/&gt;&lt;/p&gt;
&lt;p&gt;efficient back-prop implementation:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image018.png"/&gt;&lt;/p&gt;
&lt;h2 id="broadcasting-in-python"&gt;Broadcasting in Python&lt;/h2&gt;
&lt;p&gt;example: calculate percentage of calories from carb/protein/fat for each food — without fooloop&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image019.png"/&gt;&lt;br/&gt;
two lines of numpy code:
    A = np.array([[...]..]) # A.dim = (3,4)
    cal = A.sum(axis=0) # total calories
    percentage = 100 * A / cal.reshape(1,4) # percentage.dim = (1,4)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;axis=0&lt;/code&gt;→ sum &lt;em&gt;vertically, &lt;/em&gt;&lt;code&gt;axis=1&lt;/code&gt;&lt;em&gt; → sum horizentally&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image020.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reshape(a,b)&lt;/code&gt; → redundant here, just to make sure shape correct, &lt;em&gt;reshape call is cheap&lt;/em&gt;. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;A / cal&lt;/code&gt; → (3&lt;em&gt;4 matrix) / (1&lt;/em&gt;4 matrix) → &lt;strong&gt;broadcasting&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;more broadcasting examples:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image021.png"/&gt;&lt;br/&gt;
General principle: computing (m,n) matrix with (1,n) matrix 
⇒ the (1,n) matrix is &lt;em&gt;auto expanded to a (m,n) matrix&lt;/em&gt; by copying the row m times, to match the shape, calculate element-wise&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image022.png"/&gt;&lt;/p&gt;
&lt;h2 id="a-note-on-python-numpy-vectors"&gt;A note on python numpy vectors&lt;/h2&gt;
&lt;p&gt;flexibility of broadcasting: both advantage and &lt;em&gt;weakness&lt;/em&gt;.
example: adding column vec and a row vec → get a matrix instead of throwing exceptions.
    &amp;gt;&amp;gt;&amp;gt; a
    array([1, 2, 3])
    &amp;gt;&amp;gt;&amp;gt; b
    array([[1],
           [2]])
    &amp;gt;&amp;gt;&amp;gt; a + b
    array([[2, 3, 4],
           [3, 4, 5]])&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tips and trick to eliminate bugs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;avoid&lt;/strong&gt; &lt;strong&gt;rank-1 array&lt;/strong&gt;: &lt;br/&gt;
&lt;code&gt;a.shape = (x,)&lt;/code&gt;
this is &lt;em&gt;neither row nor column vector&lt;/em&gt;, have non-intuitive effects.
    &amp;gt;&amp;gt;&amp;gt; a = np.array([1,2,3])
    &amp;gt;&amp;gt;&amp;gt; a.shape
    (3,)  # NOT (3,1)
    &amp;gt;&amp;gt;&amp;gt; a.T
    array([1, 2, 3])
    &amp;gt;&amp;gt;&amp;gt; np.dot(a, a.T)  # Mathematically would expact a matrix, if a is column vec
    14
    &amp;gt;&amp;gt;&amp;gt; a.T.shape
    (3,)&lt;/p&gt;
&lt;p&gt;⇒ &lt;em&gt;do &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; use rank-1 arraies, use column/row vectors&lt;/em&gt;
    &amp;gt;&amp;gt;&amp;gt; a2 = a.reshape((-1, 1))  # A column vector -- (5,1) matrix.
    &amp;gt;&amp;gt;&amp;gt; a2
    array([[1],
           [2],
           [3]])
    &amp;gt;&amp;gt;&amp;gt; a2.T
    array([[1, 2, 3]])  # Note: two brackets!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;add assertions&lt;/strong&gt;&lt;br/&gt;
&lt;code&gt;assert(a.shape == (3,1))&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="explanation-of-logistic-regression-cost-function-optional"&gt;Explanation of logistic regression cost function (optional)&lt;/h2&gt;
&lt;p&gt;Justisfy why we use this form of cost function:
y_hat ~= chance of y==1 given x
want to express P(y|x) using y_hat and y
P(y|x) as func(y, y_hat) at different values of y:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if y = 1: P(y|x) = P(y=1|x) = y_hat&lt;/li&gt;
&lt;li&gt;if y = 0: P(y|x) = P(y=0|x) = 1 - y_hat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ wrap the two cases &lt;em&gt;in one single formula&lt;/em&gt;: using exponent of y and (1-y)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image023.png"/&gt;&lt;br/&gt;
⇒ take log of P(y|x) ⇒ loss function (for a single training example)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image024.png"/&gt;&lt;br/&gt;
⇒ aggregate over all training examples i = 1..m:
(assume: data are iid)
P(labels in training set) = multiply( P(y(i)|x(i) )
take log → log(P(labels in training set)) = sum( log P(y(i)|x(i) ) = - J
&lt;strong&gt;maximizing likelihood = minimizing cost function&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="assignments_1"&gt;Assignments&lt;/h1&gt;
&lt;h2 id="python-numpy-basics"&gt;python / numpy basics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;np.reshape() / np.shape&lt;/li&gt;
&lt;li&gt;calculate norm: &lt;code&gt;np.linalg.norm()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image026.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;keepdims=True&lt;/code&gt;: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;axes that are reduced will be &lt;em&gt;kept&lt;/em&gt; (with size=1)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;  &amp;gt;&amp;gt;&amp;gt; a&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  array([[ 0.01014617,  0.08222027, -0.59608242],&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        [-0.18495204, -1.50409531, -1.03853663],&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        [ 0.03995499, -0.67679544,  0.11513247]])&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  &amp;gt;&amp;gt;&amp;gt; a.sum(keepdims=1)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  array([[-3.75300795]])&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  &amp;gt;&amp;gt;&amp;gt; a.sum()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  -3.7530079538833663&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html"&gt;broadcasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;softmax: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;softmax for row vec:
  x.shape = (1,n), x = [x1,...xn]
  y = softmax(x), y.shape = (1,n), &lt;code&gt;yi = exp(xi) / sum( exp(xi) )&lt;/code&gt;
  softmax for matrix
  X.shape = (m,n)
  Y = softmax(X) = [softmax(row-i of X)], Y.shape = (m, 1)&lt;/p&gt;
&lt;h2 id="logistic-regression-with-a-neural-network-mindset"&gt;Logistic Regression with a Neural Network mindset&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;input preprocessing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;input dataset shape = (m, num_px, num_px, 3)
  → &lt;em&gt;reshape&lt;/em&gt; to one column per example, shape = (num_px&lt;em&gt;num_px&lt;/em&gt;3, ~~m~~)
  → &lt;em&gt;center &amp;amp; standardize&lt;/em&gt; data: &lt;code&gt;x' = (xi - x_mean) / std(x)&lt;/code&gt;, 
  but &lt;em&gt;for images:&lt;/em&gt; just divide by 255.0 (max pixel value), convenient and works almost as well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;params initialization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For logistic regression (cost function convex), just init to zeros is OK. 
    w = np.zeros((dim,1))
    b = 0.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fwd prop: compute cost function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image027.png"/&gt;&lt;br/&gt;
  input &lt;code&gt;X&lt;/code&gt; (shape = nx*m, one column per example)→ logits &lt;code&gt;Z&lt;/code&gt; → activations &lt;code&gt;A=sigmoid(Z)&lt;/code&gt;→ cost &lt;code&gt;J&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bkwd prop&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk2//pasted_image028.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gradient descent: w := w - alpha*dw&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Predict: using learned params&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yhat = A = sigmoid(wT * X + b)&lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[Neural Networks and Deep Learning] week1. Introduction to deep learning</title><link href="https://x-wei.github.io/Ng_DLMooc_c1wk1.html" rel="alternate"></link><published>2017-09-11T00:00:00+02:00</published><updated>2017-09-11T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-09-11:Ng_DLMooc_c1wk1.html</id><summary type="html">&lt;h2 id="what-is-a-neural-network"&gt;What is a neural network?&lt;/h2&gt;
&lt;p&gt;Example: housing price prediciton. &lt;/p&gt;
&lt;p&gt;Each neuron: ReLU function&lt;/p&gt;
&lt;p&gt;Stacking multiple layers of neurons: hidden layers are concepts more general than input layer — found automatically by NN.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk1/pasted_image.png"/&gt;&lt;/p&gt;
&lt;h2 id="supervised-learning-with-neural-networks"&gt;Supervised Learning with Neural Networks&lt;/h2&gt;
&lt;p&gt;supervised learning: during training, always have output corresponding to input.&lt;/p&gt;
&lt;p&gt;Different NN types are used for different problems:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk1/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk1/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;structured data: database, each feature/column has a well-defined meaning.
unstructured data: audio/image/text, no well-defined meaning for pixels/tokens&lt;/p&gt;
&lt;h2 id="why-is-deep-learning-taking-off"&gt;Why is Deep Learning taking off?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;scale&lt;/strong&gt; drives deep learning progress.
(scale: both of NN and of data)&lt;/p&gt;
&lt;p&gt;trandition methods: pleateaus as amount of data grows further. 
NN: grows with data.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk1/pasted_image005.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data scales up &lt;/li&gt;
&lt;li&gt;computation faster&lt;/li&gt;
&lt;li&gt;new algorithms, e.g. from sigmoid to ReLU, which in turn speeds up computation too. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="about-this-course"&gt;About this course&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk1/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;p&gt;This course: &lt;strong&gt;implementing&lt;/strong&gt; NN.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/Ng_DLMooc_c1wk1/pasted_image006.png"/&gt;&lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[Android Dev] 2.2 Preference</title><link href="https://x-wei.github.io/andev_p2e2_pref.html" rel="alternate"></link><published>2017-02-12T00:00:00+01:00</published><updated>2017-02-12T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-02-12:andev_p2e2_pref.html</id><summary type="html">&lt;p&gt;Save settings and configurations. &lt;/p&gt;
&lt;h2 id="data-persistance"&gt;Data Persistance&lt;/h2&gt;
&lt;p&gt;5 different ways of data persistance: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onSavedInstanceState()&lt;/code&gt;: store state of views in k-v pairs (Bundles), used when screen rotates / app killed by system, &lt;strong&gt;temperary.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SharedPreferences&lt;/code&gt;: save k-v pairs to a file, can save &lt;strong&gt;primitive types&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;SQLite database: complicated data types&lt;/li&gt;
&lt;li&gt;Internal / External Storage: save large files to local phone, ex. podcast app / camera app.&lt;/li&gt;
&lt;li&gt;Server: ex. leaderboard for a game (Firebase)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p2e2_pref/pasted_image.png"/&gt;&lt;/p&gt;
&lt;h2 id="preferencefragments"&gt;PreferenceFragments&lt;/h2&gt;
&lt;p&gt;PreferenceFragment is a class to handle the storing of user preferences. &lt;/p&gt;
&lt;h3 id="fragment"&gt;Fragment&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Fragment&lt;/code&gt; is a class that represents a modular and reusable piece of an &lt;code&gt;Activity&lt;/code&gt;. 
ex. a booklist-bookdetail app, for tablets want both screens (list/detail) on the same screen ⇒ put the 2 screens into &lt;code&gt;Fragment&lt;/code&gt;s, and re-use them. &lt;/p&gt;
&lt;h3 id="preferencefragment"&gt;PreferenceFragment&lt;/h3&gt;
&lt;p&gt;populated with preferences defined in an XML, 
and (automatically) update k-v pairs in a sharedpref file. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p2e2_pref/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;in the pref XML file: define what are in the preferences, keys(names) and default values, and summary of a pref item. &lt;/p&gt;
&lt;h2 id="adding-a-settings-screen-from-a-pref-xml-file-recipe_1"&gt;Adding a settings screen from a pref-xml file Recipe&lt;/h2&gt;
&lt;h3 id="1-create-a-settings-activity"&gt;1. create a settings activity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;add a menu xml, in the xml, add a menu item&lt;/li&gt;
&lt;li&gt;show menu in mian activity&lt;/li&gt;
&lt;li&gt;when "settings" item is clicked: open settings activity&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-create-a-preferences-xml"&gt;2. create a preferences xml&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;setup gradle dependency (build.gradle):&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;compile 'com.android.support:preference-v7:25.1.0&lt;/code&gt;'&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;create a xml file in &lt;code&gt;res/xml&lt;/code&gt; folder, add CheckBoxPreference. &lt;/p&gt;
&lt;p&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
&lt;preferencescreen xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto"&gt;
&lt;checkboxpreference android:defaultvalue="true" android:key="show_base" android:summaryoff="not shown" android:summaryon="shown" app:title="@string/show_base"&gt;&lt;/checkboxpreference&gt;
&lt;/preferencescreen&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3-create-a-class-that-extends-preferencefragment"&gt;3. create a class that extends PreferenceFragment&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;// TODO (2) Create a class called SettingsFragment that extends PreferenceFragmentCompat&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public class SettingsFragment extends PreferenceFragmentCompat{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// TODO (5) In SettingsFragment's onCreatePreferences method add the preference file using the&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// addPreferencesFromResource method&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    @Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        addPreferencesFromResource(R.xml.pref_visualizer);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4-change-root-element-of-settings-activity-to-a-fragment"&gt;4. change root element of settings activity to a fragment&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;fragment&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;xmlns:tools=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/tools"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/activity_settings"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.example.com.visualizerpreferences.SettingsFragment"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/fragment&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="5-add-a-preferencetheme"&gt;5. add a preferenceTheme&lt;/h3&gt;
&lt;p&gt;in &lt;code&gt;res/values/styles.xml&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;item name="preferenceTheme"&amp;gt;@style/PreferenceThemeOverlay&amp;lt;/item&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="6-read-from-sharedpreferences-and-update"&gt;6. read from SharedPreferences and update&lt;/h3&gt;
&lt;p&gt;in &lt;code&gt;onStart&lt;/code&gt; or &lt;code&gt;onResume&lt;/code&gt; of main activity: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;Get&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;reference&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;shared&lt;/span&gt; &lt;span class="n"&gt;preferences&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;PreferenceManager&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;SharedPreferences&lt;/span&gt; &lt;span class="n"&gt;pref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PreferenceManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getDefaultSharedPreferences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;Get&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;show_bass&lt;/span&gt; &lt;span class="n"&gt;checkbox&lt;/span&gt; &lt;span class="n"&gt;preference&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="n"&gt;setShowBass&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;mVisualizerView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setShowBass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getBoolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"show_bass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="best-practice-using-resources-instead-of-using-constant-iterals-everywhere"&gt;best practice: using resources instead of using constant iterals everywhere.&lt;/h3&gt;
&lt;p&gt;i.e. extract strings/bools into strings.xml or bools.xml: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_show_bass_title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Show Bass&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_show_bass_key"&lt;/span&gt; &lt;span class="na"&gt;translatable=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;show_bass&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_show_bass_summaryon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Shown&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_show_bass_summaryoff"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hidden&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;bool&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_show_bass_default"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/bool&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in other xml files: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;CheckBoxPreference&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        android:defaultValue="@bool/pref_show_bass_default"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        android:key="@string/pref_show_bass_key"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        android:summaryOff="@string/pref_show_bass_summaryoff"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        android:summaryOn="@string/pref_show_bass_summaryon"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        android:title="@string/perf_show_bass_title" /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in java files: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;mVisualizerView.setShowBass(perf.getBoolean(getString(R.string.pref_show_bass_key),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                    getResources().getBoolean(R.bool.pref_show_bass_default)));&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="preferencechangelistener_1"&gt;PreferenceChangeListener&lt;/h2&gt;
&lt;p&gt;instead of updating preferences in onStart/onResume of main activity, use &lt;code&gt;onPreferenceChangeListener&lt;/code&gt;, this is called whenever a sharedpref is changed.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/andev_p2e2_pref/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;h3 id="reciept"&gt;Reciept&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;step 1&lt;/strong&gt;: determine the activity who's UI needs to be changed when pref changes 
— in our case, is the main activity&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;step 2&lt;/strong&gt;: let this activity implement &lt;code&gt;OnSharedPreferenceChangeListener&lt;/code&gt; and override the &lt;code&gt;onSharedPreferenceChanged&lt;/code&gt; method&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Preference pref = findPreference(key);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if (!(pref instanceof CheckBoxPreference)) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        String value = sharedPreferences.getString(key, "");&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        setPreferenceSummary(pref, value);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;step 3&lt;/strong&gt;: link this Listener to the SharedPreference object that it listens to, using &lt;code&gt;registerOnSharedPreferenceChangeListener&lt;/code&gt;
in onCreate(): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;sharedPreferences.registerOnSharedPreferenceChangeListener(this);&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;step 4&lt;/strong&gt;: unregister the Listener when activity is shut down
in onDestroy(): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;protected void onDestroy() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    super.onDestroy();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    PreferenceManager.getDefaultSharedPreferences(this)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            .unregisterOnSharedPreferenceChangeListener(this);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="list-preference_1"&gt;List Preference&lt;/h2&gt;
&lt;p&gt;Compared to &lt;code&gt;CheckBoxPreference&lt;/code&gt;, &lt;code&gt;ListPreference&lt;/code&gt; offers an array of possible choices. &lt;/p&gt;
&lt;h3 id="listpreference-recipe"&gt;ListPreference Recipe&lt;/h3&gt;
&lt;p&gt;define options labels/values in &lt;code&gt;res/values/strings.xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_key"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;pref_color&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Pick a color&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_red_label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Red&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_blue_label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blue&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_green_label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Green&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_red_value"&lt;/span&gt; &lt;span class="na"&gt;translatable=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;color_red&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_blue_value"&lt;/span&gt; &lt;span class="na"&gt;translatable=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;color_blue&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_green_value"&lt;/span&gt; &lt;span class="na"&gt;translatable=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;color_green&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(note: &lt;code&gt;xx_value&lt;/code&gt; is for internal usage, &lt;code&gt;xx_lablel&lt;/code&gt; is what is shown on screen to users)&lt;/p&gt;
&lt;p&gt;create &lt;code&gt;res/values/arrays.xml&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;&amp;lt;!-- TODO (3) Add a res-&amp;gt;values-&amp;gt;arrays.xml file which contains two arrays, one for&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;        labels and one for values. The arrays should contain strings found in this file--&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;array&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_option_labels"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;@string/pref_color_red_label&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;@string/pref_color_blue_label&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;@string/pref_color_green_label&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;array&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_option_values"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;@string/pref_color_red_value&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;@string/pref_color_blue_value&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;@string/pref_color_green_value&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in preference xml: add a ListPreference element&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;ListPreference&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        android:defaultValue="@string/pref_color_red_value"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        android:entries="@array/pref_color_option_labels"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        android:entryValues="@array/pref_color_option_values"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        android:key="@string/pref_color_key"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        android:title="@string/pref_color_title"/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;finally in main activity: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;String default_color_value = getString(R.string.pref_color_red_value);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;mVisualizerView.setColor(sharedPreferences.getString(getString(R.string.pref_color_key),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                default_color_value) );&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="add-summary-for-list-preference"&gt;add summary for list preference&lt;/h3&gt;
&lt;p&gt;we have to this programatically in the java code. &lt;/p&gt;
&lt;p&gt;Here is the recipe: &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;step 1&lt;/strong&gt;: let the SettingsFragment class implement OnSharedPreferenceChangeListener:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;// TODO (1) Implement OnSharedPreferenceChangeListener&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public class SettingsFragment extends PreferenceFragmentCompat implements OnSharedPreferenceChangeListener&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;step 2&lt;/strong&gt;:set preference's summary by &lt;code&gt;setSummary()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;setPreferenceSummary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;takes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Preference&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;method&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;check&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;preference&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ListPreference&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;associated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;You&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;findIndexOfValue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getEntries&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Preference&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;setPreferenceSummary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Preference&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sharedPref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sharedPref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;instanceof&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ListPreference&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;ListPreference&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listPref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListPreference&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sharedPref&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listPref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findIndexOfValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;listPref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setSummary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listPref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getEntries&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;step 3&lt;/strong&gt;: set pref summary in onCreatePreferences: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onCreatePreferences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bundle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;visualizer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;preferences&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;defined&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;XML&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;xml&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pref_visualizer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;addPreferencesFromResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pref_visualizer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;preference&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;preferences&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;iterate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;through&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;preferences&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;checkbox&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;preference&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;setSummary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;method&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;passing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;preference&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;preference&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;PreferenceScreen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prefScreen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getPreferenceScreen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nPrefs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prefScreen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPreferenceCount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;nPrefs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Preference&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prefScreen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPreference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;instanceof&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CheckBoxPreference&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prefScreen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getSharedPreferences&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getKey&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;setPreferenceSummary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;step 4&lt;/strong&gt;: implement onSharedPreferenceChanged listener: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onSharedPreferenceChanged&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;checkbox&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;preference&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;setPreferenceSummary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;changed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;preference&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onSharedPreferenceChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SharedPreferences&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sharedPreferences&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sharedPreferences&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;instanceof&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CheckBoxPreference&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Preference&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;findPreference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sharedPreferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;setPreferenceSummary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;step 5&lt;/strong&gt;: finally register/unregister the listener in oncreate/ondestroy: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unregister&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OnSharedPreferenceChange&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onCreate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onDestroy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;respectively&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bundle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;getPreferenceScreen&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getSharedPreferences&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;registerOnSharedPreferenceChangeListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;getPreferenceScreen&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getSharedPreferences&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregisterOnSharedPreferenceChangeListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="android"></category></entry><entry><title>[Android Dev] 2.1 Lifecycles</title><link href="https://x-wei.github.io/andev_p2e1_lifecycle.html" rel="alternate"></link><published>2017-02-11T00:00:00+01:00</published><updated>2017-02-11T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-02-11:andev_p2e1_lifecycle.html</id><summary type="html">&lt;p&gt;Android kills background apps !! &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p2e1_lifecycle/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;→ &lt;code&gt;onCreate()&lt;/code&gt; → &lt;strong&gt;Created&lt;/strong&gt; →&lt;code&gt;onStart()&lt;/code&gt; →  &lt;strong&gt;Visible(&lt;/strong&gt;can be seen on screen) → &lt;code&gt;onResume()&lt;/code&gt; → &lt;strong&gt;Active&lt;/strong&gt;(get focus, can interact with)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Active&lt;/strong&gt; → &lt;code&gt;onPause()&lt;/code&gt; → &lt;strong&gt;Paused&lt;/strong&gt;(lose focus — same thing as Visible?) → &lt;code&gt;onStop()&lt;/code&gt; → &lt;strong&gt;Stopped&lt;/strong&gt;(disappeared) → &lt;code&gt;onDestroy()&lt;/code&gt; → &lt;strong&gt;Destroyed&lt;/strong&gt;(lifecycle ends)&lt;/p&gt;
&lt;p&gt;when rotate screen, the function calling is: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;onPause --&amp;gt; onStop --&amp;gt; onDestroy --&amp;gt; onCreate --&amp;gt; onStart --&amp;gt; onResume&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;note: activity will be &lt;strong&gt;destroyed&lt;/strong&gt; when device configuration is changed ! &lt;/p&gt;
&lt;h2 id="onsavedinstancestate"&gt;onSavedInstanceState()&lt;/h2&gt;
&lt;p&gt;so that the app states can be saved when device configuration changes (ex. rotate). &lt;/p&gt;
&lt;p&gt;parameter: a &lt;code&gt;Bundle&lt;/code&gt; to keep state into key-value pairs. 
to pass objects via Bundle: implement the &lt;code&gt;Parcelble&lt;/code&gt; interface. &lt;/p&gt;
&lt;p&gt;Override this &lt;code&gt;onSavedInstanceState()&lt;/code&gt; function → put useful objects into the bundle parameter. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onSaveInstanceState&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;persist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;across&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Activity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recreation&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;following&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;within&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onSaveInstanceState&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Make&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onSaveInstanceState&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;called&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;before&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;anything&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TextView&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;contains&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;our&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;variable&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;outState&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bundle&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TextView&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;contains&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;our&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;search&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;variable&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;search&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;search&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;outState&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bundle&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onSaveInstanceState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bundle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;outState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onSaveInstanceState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;outState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QUERYURL_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mUrlDisplayTextView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getText&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;outState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RAW_JSON_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mSearchResultsTextView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getText&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in &lt;code&gt;onCreate&lt;/code&gt;: try to extract objects form bundle &lt;code&gt;savedInstanceState&lt;/code&gt; (if it's not null). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;protected void onCreate(Bundle savedInstanceState) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    super.onCreate(savedInstanceState);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    setContentView(R.layout.activity_main);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    mSearchBoxEditText = (EditText) findViewById(R.id.et_search_box);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    mUrlDisplayTextView = (TextView) findViewById(R.id.tv_url_display);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    mSearchResultsTextView = (TextView) findViewById(R.id.tv_github_search_results_json);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    mErrorMessageDisplay = (TextView) findViewById(R.id.tv_error_message_display);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    mLoadingIndicator = (ProgressBar) findViewById(R.id.pb_loading_indicator);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    // TODO (9) If the savedInstanceState bundle is not null, set the text of the URL and search results TextView respectively&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(savedInstanceState!=null &amp;amp;&amp;amp; savedInstanceState.containsKey(QUERYURL_KEY))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        mUrlDisplayTextView.setText(savedInstanceState.getString(QUERYURL_KEY));&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(savedInstanceState!=null &amp;amp;&amp;amp; savedInstanceState.containsKey(RAW_JSON_KEY))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        mSearchResultsTextView.setText(savedInstanceState.getString(RAW_JSON_KEY));&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="asynctasks-and-loader"&gt;AsyncTasks and Loader&lt;/h2&gt;
&lt;p&gt;edgecase: rotate when async task is performing → asynctask runs on separate thread → the zombie activities will not be killed !!
⇒ &lt;code&gt;Loader&lt;/code&gt;
Loader is identified by a loader ID, thus preventing several loaders running in the same time. 
&lt;img alt="" class="img-responsive" src="../images/andev_p2e1_lifecycle/pasted_image002.png"/&gt;
&lt;code&gt;AsyncTaskLoader&lt;/code&gt; lifecycle: 
it is bounded to an Activity instead of an async task ⇒ when device rotates, the loader will feed the results of tasks to the right activity. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p2e1_lifecycle/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;h2 id="using-loaders"&gt;Using Loaders&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;create loader id: &lt;code&gt;private static final GITHUB_SEARCH_LOADER = 22;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;implement &lt;code&gt;LoaderCallbacks&lt;/code&gt; interface functions in &lt;code&gt;MainActivity&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;init loader with a &lt;code&gt;LoaderManager&lt;/code&gt;, and start the loader&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;let &lt;code&gt;MainActivty&lt;/code&gt; implement &lt;code&gt;LoaderManager.LoaderCallbacks&amp;lt;String&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="implement-oncreateloader-onpreexecute-and-ondoinbackground-for-asynctask"&gt;implement onCreateLoader — onPreExecute and onDoInBackground for AsyncTask&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onCreateLoader&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Loader&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onCreateLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bundle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;below&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AsyncTaskLoader&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;anonymous&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;inner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="s1"&gt;'s parameter&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;    return new AsyncTaskLoader&amp;lt;String&amp;gt;(this) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;        @Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;        public String loadInBackground() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;            return null;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;        // TODO (5) Override onStartLoading&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;        @Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;        protected void onStartLoading() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;            super.onStartLoading();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;            // TODO (6) If bundle is null, return.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;            if (bundle==null) return;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;            // TODO (7) move the content of onPrecuter in the AsyncTask class&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;            mLoadingIndicator.setVisibility(View.VISIBLE);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;            // TODO (8) Force a load&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;            forceLoad();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;        // TODO (9) Override loadInBackground&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;        @Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;        protected String onLoadInBackground() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;            // TODO (10) Get the String for our URL from the bundle passed to onCreateLoader&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;            String searchUrlstr= bundle.getString(SEARCH_QUERY_URL_EXTRA);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;            // TODO (11) If the URL is null or empty, return null&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;            if(searchUrlstr==null || TextUtils.isEmpty(searchUrlstr)) return null;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;            // TODO (12) Copy the try / catch block from the AsyncTask'&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doInBackground&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;method&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;githubSearchResults&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;githubSearchResults&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NetworkUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getResponseFromHttpUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;searchUrlstr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;githubSearchResults&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="implement-onloadfinished-onpostexecute-for-asynctask"&gt;implement onLoadFinished — onPostExecute for AsyncTask&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onLoadFinished&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onLoadFinished&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Loader&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;githubSearchResults&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;same&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onPostExecute&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;mLoadingIndicator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setVisibility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;View&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INVISIBLE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;githubSearchResults&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;githubSearchResults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;showJsonDataView&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;mSearchResultsTextView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;githubSearchResults&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;showErrorMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onLoaderReset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;implement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;but&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;don&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;anything&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;method&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onLoaderReset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Loader&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="in-makegithubsearchquery-create-bundle-create-a-loder-start-it"&gt;in makeGithubSearchQuery(): create bundle, create a loder, start it&lt;/h3&gt;
&lt;p&gt;instead of staring an &lt;code&gt;AsyncTask&lt;/code&gt;, we get a Loader and re-run it via a loader manager. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;// TODO (19) Create a bundle called queryBundle&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;Bundle queryBundle = new Bundle();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// TODO (20) Use putString with SEARCH_QUERY_URL_EXTRA as the key and the String value of the URL as the value&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;queryBundle.putString(SEARCH_QUERY_URL_EXTRA, githubSearchUrl.toString());&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// TODO (21) Call getSupportLoaderManager and store it in a LoaderManager variable&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;LoaderManager loaderManager = getSupportLoaderManager();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// TODO (22) Get our Loader by calling getLoader and passing the ID we specified&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;Loader loader = loaderManager.getLoader(GITHUB_SEARCH_LOADER);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// TODO (23) If the Loader was null, initialize it. Else, restart it.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;if(loader==null) loader = loaderManager.initLoader(GITHUB_SEARCH_LOADER, queryBundle, this);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;else loaderManager.restartLoader(GITHUB_SEARCH_LOADER, queryBundle, this);&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="caching-with-loaders_1"&gt;Caching with loaders&lt;/h2&gt;
&lt;p&gt;Loaders will reload if activity is destroyed and re-created. This overhead can be avoided by caching the results in the &lt;code&gt;AsyncTaskLoader&lt;/code&gt; (created in &lt;code&gt;onCreateLoader()&lt;/code&gt;). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;member&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;variable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;called&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mGithubJson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mGithubJson&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cached&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;protected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onStartLoading&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* If no arguments were passed, we don't have a query to perform. Simply return. */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;        * When we initially begin loading in the background, we want to display the&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;        * loading indicator to the user&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;        */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;mLoadingIndicator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setVisibility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;View&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VISIBLE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mGithubJson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deliver&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Otherwise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;load&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mGithubJson&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deliverResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mGithubJson&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;forceLoad&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deliverResult&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mGithubJson&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deliverResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;mGithubJson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deliverResult&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;after&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;storing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deliverResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="android"></category></entry><entry><title>[Android Dev] 1.2 Connect to the Internet</title><link href="https://x-wei.github.io/andev_p1e2_internet.html" rel="alternate"></link><published>2017-02-07T00:00:00+01:00</published><updated>2017-02-07T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-02-07:andev_p1e2_internet.html</id><summary type="html">&lt;h2 id="logging"&gt;logging&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://developer.android.com/reference/android/util/Log.html"&gt;https://developer.android.com/reference/android/util/Log.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 log levels: &lt;code&gt;error/warning/info/debug/verbose&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;error/warning/info are preserved in the release of app&lt;/li&gt;
&lt;li&gt;use class name as tag: &lt;code&gt;MyClass.class.getSimpleName()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e2_internet//pasted_image.png"/&gt;&lt;/p&gt;
&lt;h2 id="the-resources-folder"&gt;the Resources folder&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://developer.android.com/guide/topics/resources/providing-resources.html"&gt;https://developer.android.com/guide/topics/resources/providing-resources.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e2_internet//pasted_image001.png"/&gt;&lt;/p&gt;
&lt;h3 id="working-with-resvaluesstringsxml"&gt;working with res/values/strings.xml&lt;/h3&gt;
&lt;p&gt;the strings defined in this xml file can be got from java activity using &lt;code&gt;getString(R.string._the_id)&lt;/code&gt; method. &lt;/p&gt;
&lt;p&gt;example:&lt;/p&gt;
&lt;p&gt;in string.xml: &lt;code&gt;&amp;lt;string name="today"&amp;gt;Today&amp;lt;/string&amp;gt;&lt;/code&gt;&lt;br/&gt;
in java: &lt;code&gt;String myString = getString(R.string.today)&lt;/code&gt;&lt;br/&gt;
in other xmls files: use &lt;code&gt;@string/today&lt;/code&gt; to access it.  &lt;/p&gt;
&lt;p&gt;ref: &lt;a href="https://developer.android.com/guide/topics/resources/string-resource.html"&gt;https://developer.android.com/guide/topics/resources/string-resource.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="menu-and-actionbar_1"&gt;Menu and ActionBar&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e2_internet//pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;a menu item in the xml file (res folder→ create new android resource directory → menu): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (2) Create a menu in res/menu called main.xml&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (3) Add one menu item to your menu&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (4) Give the menu item an id of @+id/action_search&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (5) Set the orderInCategory to 1&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (6) Show this item if there is room (use app:showAsAction, NOT android:showAsAction)&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (7) Set the title to the search string ("Search") from strings.xml&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;menu&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;xmlns:app=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/action_search"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:orderInCategory=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:title=&lt;/span&gt;&lt;span class="s"&gt;"@string/search"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;app:showAsAction=&lt;/span&gt;&lt;span class="s"&gt;"ifRoom"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/menu&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;shoule also set MainActivity as singleTop mode: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;activity android:name=".MainActivity"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;          android:launchMode="singleTop"&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create menu: override &lt;code&gt;onCreateMenu&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// &lt;span class="n"&gt;TODO&lt;/span&gt; (&lt;span class="mi"&gt;8&lt;/span&gt;) &lt;span class="n"&gt;Override&lt;/span&gt; &lt;span class="n"&gt;onCreateOptionsMenu&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// &lt;span class="n"&gt;TODO&lt;/span&gt; (&lt;span class="mi"&gt;9&lt;/span&gt;) &lt;span class="n"&gt;Within&lt;/span&gt; &lt;span class="n"&gt;onCreateOptionsMenu&lt;/span&gt;, &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="n"&gt;getMenuInflater&lt;/span&gt;().&lt;span class="n"&gt;inflate&lt;/span&gt; &lt;span class="nb"&gt;to&lt;/span&gt; &lt;span class="n"&gt;inflate&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;menu&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// &lt;span class="n"&gt;TODO&lt;/span&gt; (&lt;span class="mi"&gt;10&lt;/span&gt;) &lt;span class="n"&gt;Return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nb"&gt;to&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;menu&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;onCreateOptionsMenu&lt;/span&gt;(&lt;span class="n"&gt;Menu&lt;/span&gt; &lt;span class="n"&gt;menu&lt;/span&gt;) {&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;getMenuInflater&lt;/span&gt;().&lt;span class="n"&gt;inflate&lt;/span&gt;(&lt;span class="n"&gt;R&lt;/span&gt;.&lt;span class="n"&gt;menu&lt;/span&gt;.&lt;span class="n"&gt;main&lt;/span&gt;, &lt;span class="n"&gt;menu&lt;/span&gt;);&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To handle menu item clicks: &lt;code&gt;onOptionsItemSelected&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;// TODO (11) Override onOptionsItemSelected&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// TODO (12) Within onOptionsItemSelected, get the ID of the item that was selected&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// TODO (13) If the item's ID is R.id.action_search, show a Toast and return true to tell droid that you've handled this menu click&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// TODO (14) Don't forgot to call .show() on your Toast&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// TODO (15) If you do NOT handle the menu click, return super.onOptionsItemSelected to let droid handle the menu click&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public boolean onOptionsItemSelected(MenuItem item) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int itemid = item.getItemId();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(itemid==R.id.action_search) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// use MainActivity.this as context, instead of using just this&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        Toast.makeText(MainActivity.this, "search action selected!", Toast.LENGTH_SHORT).show(); &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return true;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return super.onOptionsItemSelected(item);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another way to set menuitem action: &lt;code&gt;menuitem.setIntent&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public boolean onCreateOptionsMenu(Menu menu) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    getMenuInflater().inflate(R.menu.detail, menu);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    MenuItem menuitem = menu.findItem(R.id.action_share);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Intent intent = ShareCompat.IntentBuilder.from(this)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            .setType("text/plain")&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            .setChooserTitle("choose which app to share")&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            .setText(mForecast)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            .getIntent();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    menuitem.setIntent(intent);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return true;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="build-the-query-url"&gt;Build the query URL&lt;/h2&gt;
&lt;p&gt;the request url for github repo search: &lt;code&gt;https://api.github.com/search/repositories?q=android&amp;amp;sort=stars&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;use Uri Builder:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/andev_p1e2_internet//pasted_image007.png"/&gt;&lt;/p&gt;
&lt;p&gt;convert Uri to java URL: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/andev_p1e2_internet//pasted_image008.png"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public static URL buildUrl(String githubSearchQuery) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Uri.Builder uribuilder = Uri.parse(GITHUB_BASE_URL).buildUpon();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    uribuilder = uribuilder.appendQueryParameter(PARAM_QUERY, githubSearchQuery);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    uribuilder = uribuilder.appendQueryParameter(PARAM_SORT, sortBy);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Uri uri = uribuilder.build();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    URL url = null;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    try{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        url = new URL(uri.toString());&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    } catch (MalformedURLException e) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        e.printStackTrace();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return url;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="fetching-http-request"&gt;Fetching http request&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/309424/read-convert-an-inputstream-to-a-string"&gt;http://stackoverflow.com/questions/309424/read-convert-an-inputstream-to-a-string&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;getResponseFromHttpUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;HttpURLConnection&lt;/span&gt; &lt;span class="n"&gt;urlConnection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpURLConnection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;openConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;try&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;InputStream&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInputStream&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Scanner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useDelimiter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"\\A"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;hasInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasNext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hasInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="n"&gt;finally&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;urlConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or use external library: &lt;a href="http://square.github.io/okhttp/"&gt;http://square.github.io/okhttp/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="permission"&gt;Permission&lt;/h2&gt;
&lt;p&gt;declear permissions required in android manifest.xml&lt;br/&gt;
&lt;a href="https://developer.android.com/guide/topics/permissions/index.html"&gt;https://developer.android.com/guide/topics/permissions/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in AndroidManifest.xml, under the manifest root: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;uses-permission android:name="android.permission.INTERNET"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="networkonmainthread-exception"&gt;NetworkOnMainThread exception&lt;/h2&gt;
&lt;p&gt;android has a &lt;strong&gt;single&lt;/strong&gt; user interface thread responsible for user interaction: 60FPS — want to &lt;em&gt;do as little as possible on this main thread&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;⇒ run the network on a secondary execusion thread, when finished, modify the user interface on UI thread. &lt;/p&gt;
&lt;p&gt;⇒ &lt;strong&gt;AsyncTask&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="asynctask"&gt;AsyncTask&lt;/h2&gt;
&lt;p&gt;allows running a task on background thread while publishing results to the UI thread. 
The UI thread has a &lt;strong&gt;message queue&lt;/strong&gt; and a &lt;strong&gt;handler&lt;/strong&gt;: to process messages from other threads. — AsyncTask wraps this into a simpler interface. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;AsyncTask&lt;/code&gt; is generic, the &lt;strong&gt;type parameters&lt;/strong&gt; include: &lt;code&gt;AsyncTask&amp;lt;Params, Progress, Result&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e2_internet//pasted_image010.png"/&gt;&lt;/p&gt;
&lt;p&gt;These 3 type parameters correspond to 4 function to override: &lt;code&gt;doInBackgroud, onProgressUpdate, onPostExecute, onPreEcecute&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e2_internet//pasted_image013.png"/&gt;&lt;/p&gt;
&lt;p&gt;Once this (sub)class is defined, on UI thread, just create an &lt;code&gt;AysncTask task&lt;/code&gt;, and use &lt;code&gt;task.execute(params..)&lt;/code&gt; to make it run on background thread. &lt;/p&gt;
&lt;p&gt;ref: &lt;a href="https://developer.android.com/reference/android/os/AsyncTask.html"&gt;https://developer.android.com/reference/android/os/AsyncTask.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="asynctask-example-code"&gt;AsyncTask Example code&lt;/h2&gt;
&lt;p&gt;First create an inner class that extends AyncTask&amp;lt;&amp;gt; class, and add the job to do here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;called&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GithubQueryTask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AsyncTask&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GithubQueryTask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AsyncTask&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doInBackground&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;method&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;protected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doInBackground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NetworkUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getResponseFromHttpUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onPostExecute&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TextView&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;protected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onPostExecute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;mSearchResultsTextView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onPostExecute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in UI thread, create a such class object, call execute method on it: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private void makeGithubSearchQuery() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    String githubQuery = mSearchBoxEditText.getText().toString();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    URL githubSearchUrl = NetworkUtils.buildUrl(githubQuery);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    mUrlDisplayTextView.setText(githubSearchUrl.toString());&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    // TODO (4) Create a new GithubQueryTask and call its execute method, passing in the url to query&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    GithubQueryTask task = new GithubQueryTask();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    task.execute(githubSearchUrl);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To show a progress bar when running in background ? 
⇒ put textview and progressbar into the same &lt;code&gt;FrameLayout&lt;/code&gt;, when running, make the progressbar visible, when finished, make it invisible. &lt;/p&gt;
&lt;h2 id="parsing-json"&gt;Parsing JSON&lt;/h2&gt;
&lt;p&gt;json file content: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    "temp": {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        "min":"11.34",&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        "max":"19.01"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    "weather": {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        "id":"801",&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        "condition":"Clouds",&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        "description":"few clouds"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    "pressure":"1023.51",&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    "humidity":"87"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the funtion to get the condition from the above json:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;String getCondition(String JSONString) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    JSONObject forecast = new JSONObject(JSONString);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    JSONObject weather = forecast.getJSONObject("weather");&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return weather.getString("condition");&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="android"></category></entry><entry><title>[Android Dev] 1.3 RecyclerView</title><link href="https://x-wei.github.io/andev_p1e3_recyclerview.html" rel="alternate"></link><published>2017-02-07T00:00:00+01:00</published><updated>2017-02-07T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-02-07:andev_p1e3_recyclerview.html</id><summary type="html">&lt;h2 id="recycler-view-adaper-viewholder"&gt;Recycler View, Adaper, ViewHolder&lt;/h2&gt;
&lt;p&gt;rather than creating list items as we scroll, keep them in a queue (recycling bin)
→ when scrolling, the list items are &lt;em&gt;recycled and re-bind&lt;/em&gt; to new content. RecyclerView is better version of ListView. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adaper&lt;/strong&gt;: bind data from data source, and provide the RecyclerView with new views when needed. 
Adapter uses a &lt;strong&gt;ViewHolder&lt;/strong&gt; to send views to RecyclerView. — each &lt;code&gt;findViewById&lt;/code&gt; wil be only called once, and &lt;em&gt;cached&lt;/em&gt; in the ViewHolder. 
And the RecyclerView uses a &lt;strong&gt;LayoutManager&lt;/strong&gt; to manage the appearance of the items. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e3_recyclerview/pasted_image.png"/&gt;&lt;/p&gt;
&lt;h2 id="recyclerview-code-example-a-list-of-numbers"&gt;RecyclerView code example: a list of numbers&lt;/h2&gt;
&lt;h3 id="1-add-gradle-dependency"&gt;1. add gradle dependency&lt;/h3&gt;
&lt;p&gt;in build.gradle file, add in dependencies: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;compile 'com.android.support:recyclerview-v7:25.1.0&lt;/code&gt;'&lt;/p&gt;
&lt;p&gt;and re-sync project, now we can use &lt;code&gt;android.support.v7.widget.RecyclerView&lt;/code&gt; in the layout files. &lt;/p&gt;
&lt;h3 id="2-create-item-layout"&gt;2. create item layout&lt;/h3&gt;
&lt;p&gt;This is what each of the items in RecyclerView should like. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;FrameLayout&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:padding=&lt;/span&gt;&lt;span class="s"&gt;"16dp"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:orientation=&lt;/span&gt;&lt;span class="s"&gt;"vertical"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c"&gt;&amp;lt;!--// TODO (8) Align the TextView to the start of the parent--&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c"&gt;&amp;lt;!--// TODO (9) Center the TextView vertically in the layout--&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/tv_item"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"@style/TextAppearance.AppCompat.Caption"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:fontFamily=&lt;/span&gt;&lt;span class="s"&gt;"monospace"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;"42sp"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:layout_gravity=&lt;/span&gt;&lt;span class="s"&gt;"center_vertical|start"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/FrameLayout&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3-subclass-recyclerviewviewholder"&gt;3. subclass RecyclerView.ViewHolder&lt;/h3&gt;
&lt;p&gt;Create an inner class (&lt;strong&gt;inside the Adapter class&lt;/strong&gt;), define class variables, override the &lt;strong&gt;constructor&lt;/strong&gt;(takes a &lt;code&gt;View&lt;/code&gt; as parameter), and add functions.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="k"&gt;called&lt;/span&gt; &lt;span class="n"&gt;NumberViewHolder&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;RecyclerView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ViewHolder&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;NumberViewHolder&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;RecyclerView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ViewHolder&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Within&lt;/span&gt; &lt;span class="n"&gt;NumberViewHolder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;TextView&lt;/span&gt; &lt;span class="k"&gt;variable&lt;/span&gt; &lt;span class="k"&gt;called&lt;/span&gt; &lt;span class="n"&gt;listItemNumberView&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;TextView&lt;/span&gt; &lt;span class="n"&gt;listItemNumverView&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;constructor&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;NumberViewHolder&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;accepts&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;View&lt;/span&gt; &lt;span class="k"&gt;called&lt;/span&gt; &lt;span class="n"&gt;itemView&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Within&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;listItemNumberView&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;NumberViewHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;View&lt;/span&gt; &lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;listItemNumverView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;cached&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ViewHolder&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Within&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;NumberViewHolder&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="k"&gt;method&lt;/span&gt; &lt;span class="k"&gt;called&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;accepts&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="k"&gt;called&lt;/span&gt; &lt;span class="n"&gt;listIndex&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Within&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;listItemNumberView&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;listIndex&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Be&lt;/span&gt; &lt;span class="n"&gt;careful&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;representation&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;listIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;setText&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="n"&gt;different&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;calling&lt;/span&gt; &lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;listIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;listItemNumverView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listIndex&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4-subclass-recyclerviewadapter"&gt;4. subclass RecyclerView.Adapter&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Adapter&lt;/code&gt; will&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a viewholder for each recycler view item (&lt;code&gt;onCreateViewHolder&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;inflat each item that will be displayed (&lt;code&gt;onCreateViewHolder&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;bind data from data source to each item (&lt;code&gt;getItemCount&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;return the number of items in data source (&lt;code&gt;onBindViewHolder)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ create a class that extends &lt;code&gt;RecyclerView.Adapter&amp;lt;MyViewHolder&amp;gt;&lt;/code&gt;, and implement methods.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GreenAdapter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RecyclerView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Adapter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GreenAdapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NumberViewHolder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mNumberItems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GreenAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nitems&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mNumberItems&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nitems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onCreateViewHolder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;method&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NumberViewHolder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;within&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;method&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NumberViewHolder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onCreateViewHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ViewGroup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;viewType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;LayoutInflater&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inflater&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LayoutInflater&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shouldAttachToParentImmediatelly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;View&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;view&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inflater&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inflate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number_list_item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shouldAttachToParentImmediatelly&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NumberViewHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;view&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onBindViewHolder&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Within&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onBindViewHolder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;onBindViewHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NumberViewHolder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getItemCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getItemCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mNumberItems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;        * Cache of the children views for a list item.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;        */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NumberViewHolder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RecyclerView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ViewHolder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ie&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;through&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getItemCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;TextView&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listItemNumberView&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;            * Constructor for our ViewHolder. Within this constructor, we get a reference to our&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;            * TextViews and set an onClickListener to listen for clicks. Those will be handled in the&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;            * onClick method below.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;            * @param itemView The View that you inflated in&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;            *                 {@link GreenAdapter#onCreateViewHolder(ViewGroup, int)}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;            */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NumberViewHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;View&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;listItemNumberView&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_item_number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;            * A method we wrote for convenience. This method will take an integer as input and&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;            * use that integer to display the appropriate text within a list item.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;            * @param listIndex Position of the item in the list&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;            */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;listIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;listItemNumberView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listIndex&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ns3WC8HFx90"&gt;https://www.youtube.com/watch?v=ns3WC8HFx90&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/udacity/ud851-Exercises/blob/student/Lesson03-Green-Recycler-View/T03.03-Solution-RecyclerViewAdapter/app/src/main/java/com/example/android/recyclerview/GreenAdapter.java"&gt;https://github.com/udacity/ud851-Exercises/blob/student/Lesson03-Green-Recycler-View/T03.03-Solution-RecyclerViewAdapter/app/src/main/java/com/example/android/recyclerview/GreenAdapter.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e3_recyclerview/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;h3 id="5-use-layoutmanager-putting-things-together"&gt;5. use LayoutManager, putting things together&lt;/h3&gt;
&lt;p&gt;layoutmanager determines when an item is recycled. &lt;/p&gt;
&lt;p&gt;3 implementation of LayoutManager: &lt;code&gt;LinearLayoutManager, GridLayoutManager, StaggeredGridLayoutManager&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;In the MainActivity, create a LinearLayoutManager, and set the recycler view's manager to it. Then create an Adapter, and set recycler's adapter to it. &lt;/p&gt;
&lt;p&gt;In the onCreate method: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mNumbersList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RecyclerView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rv_numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;LinearLayoutManager&lt;/span&gt; &lt;span class="k"&gt;variable&lt;/span&gt; &lt;span class="k"&gt;called&lt;/span&gt; &lt;span class="n"&gt;layoutManager&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;setLayoutManager&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;mNumbersList&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;LinearLayoutManager&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="n"&gt;above&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;LinearLayoutManager&lt;/span&gt; &lt;span class="n"&gt;layoutManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LinearLayoutManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;mNumbersList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayoutManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layoutManager&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;setHasFixedSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;designate&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;RecyclerView&lt;/span&gt; &lt;span class="n"&gt;won&lt;/span&gt;&lt;span class="s1"&gt;'t change an item'&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="k"&gt;size&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;mNumbersList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setHasFixedSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Store&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GreenAdapter&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mAdapter&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;NUM_LIST_ITEMS&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;mAdapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GreenAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NUM_LIST_ITEMS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;Set&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;GreenAdapter&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;mNumbersList&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;mNumbersList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mAdapter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="6-handle-item-click-reciept"&gt;6. handle item click reciept&lt;/h3&gt;
&lt;p&gt;To handle the click on items: &lt;/p&gt;
&lt;p&gt;a. define a Listener interface&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;// TODO (1) Add an interface called ListItemClickListener&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;// TODO (2) Within that interface, define a void method called onListItemClick that takes an int as a parameter&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;interface ListItemClickListener{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    void onListItemClick(int index);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;b. make this Listener a private meber of the &lt;code&gt;Adapter&lt;/code&gt; class, passed as constructor parameter. 
c. make the &lt;code&gt;Adapter&lt;/code&gt;'s inner &lt;code&gt;ViewHolder&lt;/code&gt; to implement &lt;code&gt;View.OnClickListener&lt;/code&gt; interface, and override the onClick method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;// TODO (6) Override onClick, passing the clicked item's position (getAdapterPosition()) to mOnClickListener via its onListItemClick method&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public void onClick(View v) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int pos = this.getAdapterPosition();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    mOnClickListener.onListItemClick(pos);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;d. in the inner &lt;code&gt;ViewHolder&lt;/code&gt; class' constructor, set onclicklistner of the passed item to the viewholder itself: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public NumberViewHolder(View itemView) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    super(itemView);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    listItemNumberView = (TextView) itemView.findViewById(R.id.tv_item_number);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    viewHolderIndex = (TextView) itemView.findViewById(R.id.tv_view_holder_instance);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    // TODO (7) Call setOnClickListener on the View passed into the constructor (use 'this' as the OnClickListener)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    itemView.setOnClickListener(this);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e. make &lt;code&gt;MainActivity&lt;/code&gt; implments the Adapter.ItemClickListener, and provide the onclick method: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class MainActivity extends AppCompatActivity implements GreenAdapter.ListItemClickListener {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    //...&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    // TODO (10) Override ListItemClickListener's onListItemClick method&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    // TODO (11) In the beginning of the method, cancel the Toast if it isn't null&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    // TODO (12) Show a Toast when an item is clicked, displaying that item number that was clicked&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    @Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public void onListItemClick(int index) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if(mToast!=null) mToast.cancel();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        mToast.setText(String.format("item %d is clicked!", index));&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        mToast.show();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;f. when creating Adapter in MainActivity, pass this as second constructor parameter&lt;/p&gt;</summary><category term="android"></category></entry><entry><title>[Android Dev] 1.4 Intents</title><link href="https://x-wei.github.io/andev_p1e4_intents.html" rel="alternate"></link><published>2017-02-07T00:00:00+01:00</published><updated>2017-02-07T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-02-07:andev_p1e4_intents.html</id><summary type="html">&lt;p&gt;So far: single screen with a single activity. &lt;/p&gt;
&lt;p&gt;start activity from another activity: use &lt;code&gt;Intent&lt;/code&gt;s. &lt;/p&gt;
&lt;h2 id="explicit-intent-start-a-new-activity"&gt;Explicit intent: start a new activity&lt;/h2&gt;
&lt;p&gt;toy app: type some text, press button, and a new activity will appear with the typed words.&lt;/p&gt;
&lt;p&gt;create activity in android studio: new → activity&lt;/p&gt;
&lt;p&gt;call &lt;code&gt;startActivity&lt;/code&gt; with an intent as parameter. &lt;/p&gt;
&lt;p&gt;Explicit intent constructor: a context (every &lt;code&gt;Acitivity&lt;/code&gt; is a &lt;code&gt;Context&lt;/code&gt;), and a destination activity class. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;Intent ineten = new Intent(MainActivity.this, ChildActivity.class);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;startActivity(intent);&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is called &lt;strong&gt;explicit&lt;/strong&gt; intent as we know exactly which activity to start. &lt;/p&gt;
&lt;p&gt;in AndroidManifest.xml file, configure child activity having a back buttom to return to parent activity: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;".MainActivity"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:label=&lt;/span&gt;&lt;span class="s"&gt;"@string/app_name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;&amp;lt;action&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.intent.action.MAIN"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;&amp;lt;category&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.intent.category.LAUNCHER"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;&amp;lt;!-- TODO (4) Configure DetailActivity's up button functionality --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;".DetailActivity"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:parentActivityName=&lt;/span&gt;&lt;span class="s"&gt;".MainActivity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;meta-data&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.suport.PARENT_ACTIVITY"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:value=&lt;/span&gt;&lt;span class="s"&gt;".MainActivity"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="passing-data-between-activities"&gt;Passing data between activities&lt;/h2&gt;
&lt;p&gt;in main activity: 
&lt;code&gt;Intent.putExtra(String name, String value)&lt;/code&gt;
put data (&lt;em&gt;k-v pairs&lt;/em&gt;) into the intent (some constant string names exists in Intent class, like &lt;code&gt;Intent.EXTRA_TEXT&lt;/code&gt;)
then start new activity with this intent. &lt;/p&gt;
&lt;p&gt;in child activity: 
use &lt;code&gt;getIntent()&lt;/code&gt; to get the comming intent, then use &lt;code&gt;intent.getStringExtra(String name)&lt;/code&gt;, 
before getting extra data: use &lt;code&gt;intent.hasExtra(name)&lt;/code&gt; to check if the extra stuff exists. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;Intent commingIntent = getIntent();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;if(commingIntent.hasExtra(Intent.EXTRA_TEXT)){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    String txt = commingIntent.getStringExtra(Intent.EXTRA_TEXT);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    mDisplayText.setText(txt);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="implicit-intent-opening-a-link"&gt;Implicit Intent: opening a link&lt;/h2&gt;
&lt;p&gt;when don't know/care which activity to start. 
example: want to visit a link or dial a number. &lt;/p&gt;
&lt;p&gt;ref of common intents: &lt;a href="https://developer.android.com/guide/components/intents-common.html"&gt;https://developer.android.com/guide/components/intents-common.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;most implicit intent contains 2 parameters: an action and the associated data (&lt;code&gt;Uri&lt;/code&gt;). Or use &lt;code&gt;intent.setData&lt;/code&gt; to add uri to intent. 
To test if there is any application that can handle the intent: use &lt;code&gt;intent.resolveActivity(getPackageManager())&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private void openWebPage(String url) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    // TODO (2) Use Uri.parse to parse the String into a Uri&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Uri uri = Uri.parse(url);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    // TODO (3) Create an Intent with Intent.ACTION_VIEW and the webpage Uri as parameters&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Intent intent = new Intent(Intent.ACTION_VIEW, uri);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    // TODO (4) Verify that this Intent can be launched and then call startActivity&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(intent.resolveActivity(getPackageManager()) != null){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        startActivity(intent);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="uris"&gt;URIs&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;URI&lt;/strong&gt;: uniform resource identifier, a string that identifies resources. &lt;/p&gt;
&lt;p&gt;full format of an URI: 
&lt;img alt="" class="img-responsive" src="../images/andev_p1e4_intents/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;components: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scheme: ex. &lt;code&gt;geo, http&lt;/code&gt;...&lt;/li&gt;
&lt;li&gt;host&lt;/li&gt;
&lt;li&gt;path&lt;/li&gt;
&lt;li&gt;query&lt;/li&gt;
&lt;li&gt;fragment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example of URI: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;uri1 = https://archive.org/web&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;uri2 = geo:0,0?q=Montreal,Canada&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="construct-a-geo-uri"&gt;construct a geo URI&lt;/h2&gt;
&lt;p&gt;now: want to open a location on maps. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/maps/documentation/android-api/intents"&gt;https://developers.google.com/maps/documentation/android-api/intents&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;Uri.Builder&lt;/code&gt; to create complex URIs. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public void onClickOpenAddressButton(View v) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        String address = "Boulvard des Marechaux";&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        // TODO (6) Use Uri.Builder with the appropriate scheme and query to form the Uri for the address&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        Uri.Builder builder = new Uri.Builder();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        builder.scheme("geo").path("0,0").query(address);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        Uri uri = builder.build();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        showMap(uri); // constructs an intent and starts activity&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="share-intent"&gt;Share Intent&lt;/h2&gt;
&lt;p&gt;When mutilple apps that can handle this intent ⇒ a chooser will pop up. 
Example: open an image / share a piece of text / share link ... 
 → &lt;code&gt;ShareCompat.IntentBuilder&lt;/code&gt;  gives helper functionality for sharing data between activities.
Media type (MIME):
format: &lt;code&gt;toplevel_type_name/subtype_name[; parameters]&lt;/code&gt;
example: &lt;code&gt;text/html;charset=UTF-8, image/png&lt;/code&gt;, &lt;code&gt;text/plain&lt;/code&gt;, &lt;code&gt;text/rtf, video/mp4&lt;/code&gt;,...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private void shareText(String txt) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        String mimeType = "text/plain";&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        String title = "title of chooser window";&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        ShareCompat.IntentBuilder.from(this)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                .setType(mimeType)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                .setChooserTitle(title)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                .setText(txt).startChooser();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="android"></category></entry><entry><title>[Android Dev] 1.1 Create Project Sunshine</title><link href="https://x-wei.github.io/andev_p1e1_basics.html" rel="alternate"></link><published>2017-02-06T00:00:00+01:00</published><updated>2017-02-06T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2017-02-06:andev_p1e1_basics.html</id><summary type="html">&lt;h1 id="1-create-project-sunshine"&gt;1 create project sunshine&lt;/h1&gt;
&lt;p&gt;Created 星期一 06 二月 2017&lt;/p&gt;
&lt;h2 id="minsdk-vs-targetsdk"&gt;minSDK vs targetSDK&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;minSDK&lt;/code&gt; is the lowest SDK level that your app can run on. You can choose what level of devices to support. &lt;/p&gt;
&lt;p&gt;By comparison, the &lt;code&gt;targetSDK&lt;/code&gt; is NOT a high pass filter -- it’s used only to declare which platform version you've tested your app on. &lt;/p&gt;
&lt;h2 id="enable-vt-x-and-installing-kvm"&gt;Enable VT-x and installing kvm&lt;/h2&gt;
&lt;p&gt;this is necessary for running AVD devices. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/37087365/how-to-enable-vt-x-in-bios-and-kvm-modules-on-linux"&gt;http://stackoverflow.com/questions/37087365/how-to-enable-vt-x-in-bios-and-kvm-modules-on-linux&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="components-of-an-android-app"&gt;Components of an android app&lt;/h2&gt;
&lt;p&gt;4 main components of an app: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Activity&lt;/code&gt;: responsible for most user interaction&lt;/li&gt;
&lt;li&gt;Service&lt;/li&gt;
&lt;li&gt;ContentProvider&lt;/li&gt;
&lt;li&gt;BroadcaseReceiver&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="activity"&gt;Activity&lt;/h2&gt;
&lt;p&gt;Android keeps the activities in a stack, when press back button → stack pops. 
Define the launcher of the activity in &lt;code&gt;manifests/AndroidManifest.xml&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;application → activity → intent-filter&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e1_basics//pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;res&lt;/code&gt; folder contains layouts/images/values
in &lt;code&gt;res/layout/activity_main.xml&lt;/code&gt;: xml file that defines the layout view&lt;/p&gt;
&lt;h2 id="activities-and-layouts"&gt;Activities and Layouts&lt;/h2&gt;
&lt;p&gt;An &lt;strong&gt;activity&lt;/strong&gt; is a single focused thing that the user can do. Activities are responsible for creating the window that your application uses to draw and receive events from the system. Activities are written in Java, extending from the &lt;code&gt;Activity&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;An activity creates &lt;strong&gt;views&lt;/strong&gt; to show the user information, and to let the user interact with the activity. &lt;code&gt;View&lt;/code&gt;s are a class in the Android UI framework. &lt;em&gt;They occupy a rectangular area on the screen and are responsible for drawing and handling events.&lt;/em&gt; An activity determines what views to create (and where to put them), by reading an XML layout file. These XML files, are stored in the res folder inside the folder labeled &lt;code&gt;layouts&lt;/code&gt;. &lt;/p&gt;
&lt;h2 id="2-types-of-views"&gt;2 types of views&lt;/h2&gt;
&lt;h3 id="type1-ui-components-widgets"&gt;type1: UI components (widgets)&lt;/h3&gt;
&lt;p&gt;UI components that are often interactive elements. &lt;/p&gt;
&lt;p&gt;example: &lt;code&gt;TextView, EditView, Buttom, ImageView,&lt;/code&gt;... 
most of UI view classes: in android.widgets package &lt;a href="https://developer.android.com/reference/android/widget/package-summary.html"&gt;https://developer.android.com/reference/android/widget/package-summary.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="type2-container-view"&gt;type2: container view&lt;/h3&gt;
&lt;p&gt;The second are views called "Layout" or "Container" views. They extend from a class called &lt;a href="https://developer.android.com/reference/android/view/ViewGroup.html"&gt;ViewGroup&lt;/a&gt;. They are primarily responsible for containing a group of views and determining where they are on screen. Layout views can be nested in one another. &lt;/p&gt;
&lt;p&gt;example: &lt;code&gt;LinearLayout, RelativeLayout, ConstraintLayout,&lt;/code&gt; ...&lt;/p&gt;
&lt;h2 id="relate-xml-layout-to-java-activities_1"&gt;relate XML layout to java activities&lt;/h2&gt;
&lt;h3 id="use-xml-layout-in-java-activity"&gt;use xml layout in java activity&lt;/h3&gt;
&lt;p&gt;in &lt;code&gt;onCreate&lt;/code&gt; method of an activity, using the &lt;code&gt;setContentView(R.layout.name_of_layout)&lt;/code&gt;
the setContentView method: Android reads your XML file and generates Java objects for each of the tags in your layout file. You can then edit these objects in the Java code by calling methods on the Java objects.&lt;/p&gt;
&lt;h3 id="refer-to-widgets-defined-in-xml-in-java"&gt;refer to widgets defined in xml in java&lt;/h3&gt;
&lt;p&gt;in the xml file, give an id to the view:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e1_basics//pasted_image001.png"/&gt;&lt;/p&gt;</summary><category term="android"></category></entry><entry><title>[OCaml MOOC] week6: MODULES AND DATA ABSTRACTION</title><link href="https://x-wei.github.io/ocamlMOOC_wk6_modules.html" rel="alternate"></link><published>2016-11-26T00:00:00+01:00</published><updated>2016-11-26T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-11-26:ocamlMOOC_wk6_modules.html</id><summary type="html">&lt;p&gt;this week: programming-in-the-large using the module system of OCaml.  &lt;/p&gt;
&lt;h1 id="1-structuring-software-with-modules"&gt;1. STRUCTURING SOFTWARE WITH MODULES&lt;/h1&gt;
&lt;p&gt;in large project: mangage high number of definitions → abstractions built on top of other abstractions.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;layers of abstractions: hide information  &lt;/li&gt;
&lt;li&gt;divide program into components  &lt;/li&gt;
&lt;li&gt;identifiers organised to avoid naming conflicts  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="module-as-namespace"&gt;module as namespace&lt;/h3&gt;
&lt;p&gt;dot-notation: access module component.   &lt;/p&gt;
&lt;p&gt;ex. &lt;code&gt;List.length&lt;/code&gt; &lt;br/&gt;
or first &lt;code&gt;open List&lt;/code&gt; then just call &lt;code&gt;length&lt;/code&gt; &lt;br/&gt;
if open 2 modules having identical identifiers, the last opened module will be used.   &lt;/p&gt;
&lt;p&gt;to define a module:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;SomeModuleIdentifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="c"&gt;(* a seq of definitions *)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;module name: start with an upper case  &lt;/li&gt;
&lt;li&gt;to alias a module: &lt;code&gt;module SomeModuleIdentifier = SomeOtherModuleIdentifier&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;  &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;              &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Stack&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;sig&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;end&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="nn"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="hierachical-module-structure"&gt;hierachical module structure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;a module can contain other module definitions  &lt;/li&gt;
&lt;li&gt;a signature can also contain module signatures  &lt;/li&gt;
&lt;li&gt;if module &lt;code&gt;B&lt;/code&gt; is inside &lt;code&gt;A&lt;/code&gt;, use &lt;code&gt;A.B&lt;/code&gt; to get its namespace  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Forest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;forest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nc"&gt;Leaf&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="n"&gt;forest&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;end&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Forest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Tree&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Leaf&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="2-information-hiding_1"&gt;2. INFORMATION HIDING&lt;/h1&gt;
&lt;p&gt;a module should come with some user manual ("contract") to indicate to clients:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;function preconditions that must be verified  &lt;/li&gt;
&lt;li&gt;data invariants that must be preserved  &lt;/li&gt;
&lt;li&gt;definitions that user must not rely on (cause they'll change in the future)  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;a module signature represents this contract, &lt;em&gt;the type checker will enforce point 2 and 3&lt;/em&gt;.   &lt;/p&gt;
&lt;h3 id="module-signatures"&gt;module signatures&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;a module's type is called &lt;strong&gt;signature&lt;/strong&gt; or &lt;strong&gt;interface&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;programmer &lt;em&gt;can&lt;/em&gt; force a module to have a specific signature  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;to define a signature:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;sig&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="c"&gt;(* a seq of declarations of following form:*)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;some_identifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;some_type&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;some_type_identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;some_type_definition&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;exception&lt;/span&gt; &lt;span class="nc"&gt;SomeException&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;some_type&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to construct a module with a specific signature:   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;module M: sig ... end = struct ... end&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;to name a signature:   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;module type S = sig ... end&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;then use this name to annotate module:   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;module M:S = struct ... end&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;example: natural numbers  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Naturals&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;sig&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="c"&gt;(* Invariant: A value of type t is a positive integer *)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;succ&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;succ&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;max_int&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="abstract-types"&gt;abstract types&lt;/h3&gt;
&lt;p&gt;we can use the module normally:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Naturals&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;succ&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but the invariant can be easily broken:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;i_break_the_abstraction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="o"&gt;(-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This don't have compiler error, as the type of pred is &lt;code&gt;int&lt;/code&gt;, we can pass any &lt;code&gt;int&lt;/code&gt; to it.   &lt;/p&gt;
&lt;p&gt;⇒ use &lt;strong&gt;abstract types&lt;/strong&gt; that will give no choice to the client but to respect the rule.   &lt;/p&gt;
&lt;p&gt;in the signature:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Naturals&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;sig&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="c"&gt;(* Invariant: A value of type t is a positive integer *)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="c"&gt;(* remove the type value of t in the signature *)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;succ&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then calling pred (-1) will cause an error.   &lt;/p&gt;
&lt;p&gt;→ we have hiddent the definition of the type t&lt;br/&gt;
the sig don't publish t's implementation anymore, so the checker ensures clients can't use that fact&lt;br/&gt;
t is called an &lt;strong&gt;abstract type&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;With abstract type, users can't do pattern matching, to allow pattern matching while forbidding the direct application of data constructors, OCaml provides a mechanism called &lt;strong&gt;private types&lt;/strong&gt;. see &lt;a href="http://caml.inria.fr/pub/docs/manual-ocaml-400/manual021.html#toc76"&gt;here&lt;/a&gt;.  &lt;/p&gt;
&lt;h1 id="3-case-study-a-module-for-dictionaries_1"&gt;3. CASE STUDY: A MODULE FOR DICTIONARIES&lt;/h1&gt;
&lt;p&gt;An example of using abstract types to increase the modularity of programs.   &lt;/p&gt;
&lt;p&gt;Define a dictionary signature:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;DictSig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sig&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;'value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="c"&gt;(* internal repr of the dict is exposed@ *)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;exception&lt;/span&gt; &lt;span class="nc"&gt;NotFound&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Dict&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DictSig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;'value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="c"&gt;(*......implementation *)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then a client can use this module:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;ForceArchive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="s2"&gt;"luke"&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="s2"&gt;"yoda"&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;force_of_luke&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lookup&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="s2"&gt;"luke"&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;all_jedis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="c"&gt;(* here client knows that dict is a list!*)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not very good if the internal implemtation of Dict is changed into   &lt;/p&gt;
&lt;p&gt;For instance, change the implemention into a BST:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Empty&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;→ change the signature of module to abstract type.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk6_modules/pasted_image.png"/&gt; &lt;/p&gt;
&lt;h1 id="4-functors"&gt;4. FUNCTORS&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Functors are functions from modules to modules. In other words, a functor is a module parameterized by another module.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Continue the last example, we want to choose a Dict implementation externally. → &lt;strong&gt;module functor&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;To declear a functor, add the Dict module in the parameter  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;ForceArchive&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Dict&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DictSig&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="s2"&gt;"luke"&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="s2"&gt;"yoda"&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;force_of_luke&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lookup&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="s2"&gt;"luke"&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we can call the explicit implementation in the client:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Dict_list&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DictSig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;...&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Dict_bst&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DictSig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;...&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Client1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ForceArchieve&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Dict_list&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Client2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ForceArchieve&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Dict_bst&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;a functor is a module waiting for another module  &lt;/li&gt;
&lt;li&gt;syntax:   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;module SomeModuleIdentifier (SomeModuleIdentifier: SomeSignature) = struct ... end;;&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to apply a functor to a module: &lt;code&gt;SomeModuleIdentifier (SomeModule)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;signature of a functor:  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;functor (ModuleIdentifier: SomeSignature) -&amp;gt; sig ... end&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="example-set-and-map"&gt;example: Set and Map&lt;/h3&gt;
&lt;p&gt;They expects a module satisfying the following signature:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;OrderedType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sig&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once a module &lt;code&gt;E&lt;/code&gt; has this signature,   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Set.Make (E)&lt;/code&gt; offers over sets of &lt;code&gt;E.t&lt;/code&gt; elements  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Map.Make (E)&lt;/code&gt; ....  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;type parameterization of exception can be done using functor.   &lt;/p&gt;
&lt;p&gt;In signature declaration:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;DictSig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sig&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="c"&gt;(* before: type ('key, 'value) t *)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="c"&gt;(* make the key not polymorphic *)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;exception&lt;/span&gt; &lt;span class="nc"&gt;NotFound&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="c"&gt;(* parameterize exception type in signature *)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'value&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the implementation make the module a &lt;em&gt;functor&lt;/em&gt;: add the Key module as argument  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Dict&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;sig&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DictSig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="c"&gt;(* key is the type of the Key module *)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;...&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(... don't quite get it......)  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;type constraint&lt;/em&gt;: &lt;code&gt;DictSig with key=string&lt;/code&gt; &lt;/p&gt;</summary><category term="OCaml"></category></entry><entry><title>[OCaml MOOC] week5: EXCEPTIONS, INPUT OUTPUT AND IMPERATIVE CONSTRUCTS</title><link href="https://x-wei.github.io/ocamlMOOC_wk5_imperative.html" rel="alternate"></link><published>2016-11-23T00:00:00+01:00</published><updated>2016-11-23T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-11-23:ocamlMOOC_wk5_imperative.html</id><summary type="html">&lt;h1 id="1-imperative-features-in-ocaml"&gt;1. IMPERATIVE FEATURES IN OCAML&lt;/h1&gt;
&lt;p&gt;functional language:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;immutable data structure  &lt;/li&gt;
&lt;li&gt;identifiers instead of variables  &lt;/li&gt;
&lt;li&gt;pure functions  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;but imperative features are useful:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exceptions to alter control flow  &lt;/li&gt;
&lt;li&gt;ops to consume input and output  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;mutable&lt;/em&gt; data structures  &lt;/li&gt;
&lt;li&gt;for and while loop for iterations  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="2-getting-and-handling-your-exceptions"&gt;2. GETTING AND HANDLING YOUR EXCEPTIONS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;exceptions in ocaml are just constructors of a special sum type  &lt;code&gt;exn&lt;/code&gt;.  &lt;/li&gt;
&lt;li&gt;the constructors can have arguments  &lt;/li&gt;
&lt;li&gt;new exception can be defined &lt;em&gt;at any time&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;unlike usual sum types, &lt;code&gt;exn&lt;/code&gt; can be extended  &lt;/li&gt;
&lt;li&gt;but exception &lt;em&gt;can't&lt;/em&gt; be polymorphic  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="raise-exception"&gt;raise exception&lt;/h3&gt;
&lt;p&gt;to define an exception sum type: &lt;code&gt;exception E;;&lt;/code&gt;&lt;br/&gt;
to raise exceptions: &lt;code&gt;raise E;;&lt;/code&gt;&lt;br/&gt;
when an exception is raise, &lt;em&gt;any computation is immediately stopped&lt;/em&gt;: &lt;code&gt;let _ = raise E in [1;2;];;&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;example:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;exception&lt;/span&gt; &lt;span class="nc"&gt;EmptyList&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;span class="c"&gt;(*define an exn value*)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nc"&gt;EmptyList&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;];;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="handling-exceptions"&gt;handling exceptions&lt;/h3&gt;
&lt;p&gt;using &lt;code&gt;try-with&lt;/code&gt; to capture exceptions  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;expr&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;with&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expr&lt;/code&gt; is evaluated,  &lt;/li&gt;
&lt;li&gt;if during evaluation of &lt;code&gt;expr&lt;/code&gt;, any &lt;code&gt;E&lt;/code&gt; is raised, then it's matched with patterns in the &lt;code&gt;with&lt;/code&gt; clause  &lt;/li&gt;
&lt;li&gt;if E matches &lt;code&gt;pi&lt;/code&gt;, then evaluate expression &lt;code&gt;ei&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;note: all the &lt;code&gt;ei&lt;/code&gt;s must have the same type as &lt;code&gt;expr&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example: mul elements of a list, once encountered a 0, stop the computation.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;multl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*(&lt;/span&gt;&lt;span class="n"&gt;multl&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;(*the above implementation is not efficient: if 0 is at the end, then have to   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;pop the whole stack and get 0 at the end *)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;(*using exceptions to directly return as soon as we get a 0   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;(and throw away the stack) *)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;exception&lt;/span&gt; &lt;span class="nc"&gt;Zero&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;mullexc&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nc"&gt;Zero&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*(&lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;in&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;try&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Zero&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="runtime-errors"&gt;runtime errors&lt;/h3&gt;
&lt;p&gt;runtime errors can be:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;div by 0  &lt;/li&gt;
&lt;li&gt;incomplete pattern matching  &lt;/li&gt;
&lt;li&gt;out-of-bound  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In these cases, ocaml raise an exception.   &lt;/p&gt;
&lt;h1 id="3-getting-information-in-and-out_1"&gt;3. GETTING INFORMATION IN AND OUT&lt;/h1&gt;
&lt;h3 id="the-unit-type"&gt;the unit type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;has only 1 value: &lt;code&gt;()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;often used as input/output type for funcitons with side effects  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="simple-inputoutput"&gt;Simple input/output&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;print_int&lt;/code&gt;: print out an integer  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;read_line&lt;/code&gt;: read one line of string  &lt;/li&gt;
&lt;li&gt;other similar funs...   &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;print_int&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;print_int&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;read_line&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;read_line&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;span class="c"&gt;(* give the func a parameter *)&lt;/span&gt;       &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;hello&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"hello"&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="4-sequences-and-iterations_1"&gt;4. SEQUENCES AND ITERATIONS&lt;/h1&gt;
&lt;h3 id="sequences-of-expressions"&gt;sequences of expressions&lt;/h3&gt;
&lt;p&gt;ex. print several values.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="o"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;print_int&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="o"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;print_int&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="o"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;print_int&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;cleaner way: separate such expressions just by single semi-colon:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;print_int&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;print_int&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;print_int&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;expression sequence: &lt;code&gt;e1; e2; ...; en&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;eval ei in turn  &lt;/li&gt;
&lt;li&gt;drops all internal results, return the last expression  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;all&lt;/em&gt; intermediate exprs should be of type &lt;code&gt;unit&lt;/code&gt; (otherwise warning)  &lt;/li&gt;
&lt;li&gt;note: precedence of &lt;code&gt;;&lt;/code&gt;:  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;if true then print_int 1; print_int 2;;&lt;/code&gt;&lt;br/&gt;
either use parentheses or use begin-end: &lt;br/&gt;
&lt;code&gt;(e1; ...; en)&lt;/code&gt;&lt;br/&gt;
or: &lt;code&gt;begin e1; e2;... en end&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="iterations"&gt;iterations&lt;/h3&gt;
&lt;p&gt;ex. print all integers from 1 to 10   &lt;/p&gt;
&lt;p&gt;can define a recursive &lt;code&gt;foreach&lt;/code&gt; function:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;foreach&lt;/span&gt; &lt;span class="n"&gt;starti&lt;/span&gt; &lt;span class="n"&gt;endi&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;endi&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="n"&gt;starti&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;foreach&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;foreach&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;print_int&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;12345678910&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;for loop&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;an easier way: &lt;code&gt;for&lt;/code&gt; loop  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;print_int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;12345678910&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for id = e1 to e2 do e3 done&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;the &lt;code&gt;id&lt;/code&gt; cannot be altered  &lt;/li&gt;
&lt;li&gt;loop body &lt;code&gt;e3&lt;/code&gt; is evaluated for each value of &lt;code&gt;id&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;type of the for loop is &lt;code&gt;unit&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;loop body e3 is expected to be &lt;code&gt;unit&lt;/code&gt; (warning otherwise)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;alternative: backward for-loop  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;downto&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;print_int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;while loop&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;while e1 do e2 done&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;condition &lt;code&gt;e1&lt;/code&gt; is evaluated, if true, the body &lt;code&gt;e2&lt;/code&gt; is evaluated  &lt;/li&gt;
&lt;li&gt;type of the while loop is &lt;code&gt;unit&lt;/code&gt;, body &lt;code&gt;e2&lt;/code&gt; expected to be &lt;code&gt;unit&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;to ignore the warning when loop body is not unit: use &lt;code&gt;ignore :'a -&amp;gt; unit&lt;/code&gt; function  &lt;/p&gt;
&lt;h1 id="5-mutable-arrays_1"&gt;5. MUTABLE ARRAYS&lt;/h1&gt;
&lt;p&gt;the (immutable) array:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fixed size  &lt;/li&gt;
&lt;li&gt;access to elements via index  &lt;/li&gt;
&lt;li&gt;constant time for accessing element  &lt;/li&gt;
&lt;li&gt;well-adapted to loop constructs   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example: find cubes which are also squares:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cubes&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;sqrti&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;truncate&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="c"&gt;(*get sqrt of an integer*)&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;issquare&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrti&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;squaresubes&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cubes&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;issquare&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;print_int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;print_string&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ocaml arrays are &lt;em&gt;real&lt;/em&gt; arrays: each cell can be modified in place using &lt;code&gt;&amp;lt;-&lt;/code&gt; operator  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in-place modification: &lt;code&gt;e1 &amp;lt;- e2&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;e1&lt;/code&gt; denotes a mutable value  &lt;/li&gt;
&lt;li&gt;type of the opeartion is &lt;code&gt;unit&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;|];;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;example: rotate array   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="6-mutable-record-fields"&gt;6. MUTABLE RECORD FIELDS&lt;/h1&gt;
&lt;p&gt;records: tuples with distinct name components.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;some_type_identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;field_name_1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;some_type1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;...;&lt;/span&gt; &lt;span class="n"&gt;filed_name_n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;some_typen&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;field_name_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;...;&lt;/span&gt; &lt;span class="n"&gt;field_name_n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;point2D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;offset_h&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;};;&lt;/span&gt; &lt;span class="c"&gt;(*create a new point*)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;offset_v&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="o"&gt;};;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;we can define some fields of a record to be mutable: &lt;br/&gt;
&lt;code&gt;type some_type_identifier = {...; mutable field_name_i: some_type_i;...}&lt;/code&gt;&lt;br/&gt;
these mutable fields can be modified in place using &lt;code&gt;&amp;lt;-&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;point2D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;mutable&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;mutable&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;span class="c"&gt;(* modify p in place*)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="7-variables-aka-references"&gt;7. VARIABLES, AKA REFERENCES&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk5_imperative/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;more consise way:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the predefined &lt;code&gt;ref&lt;/code&gt; type (that wraps the above): '&lt;code&gt;a ref = {mutable contents: 'a)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;the &lt;code&gt;ref&lt;/code&gt; function: '&lt;code&gt;a -&amp;gt; 'a ref&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;!r&lt;/code&gt;: prefix operator to read the contents of the reference &lt;code&gt;r&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;r:=v&lt;/code&gt;: update the content of the reference  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;        &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;example: log2 of an integer  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;log2int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;log2int&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;example 2: read int list from stdin  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;read_int&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;in_of_string&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_line&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;read_intlist&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;doread&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;try&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_int&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="o"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doread&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;read_intlist&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;1&lt;/span&gt;                                                                               &lt;span class="mi"&gt;2&lt;/span&gt;                                                                               &lt;span class="mi"&gt;3&lt;/span&gt;                                                                                 &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;4&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;5&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;6&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="OCaml"></category></entry><entry><title>[OCaml MOOC] week4: HIGHER ORDER FUNCTIONS</title><link href="https://x-wei.github.io/ocamlMOOC_wk4_higher_order_fun.html" rel="alternate"></link><published>2016-11-22T00:00:00+01:00</published><updated>2016-11-22T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-11-22:ocamlMOOC_wk4_higher_order_fun.html</id><summary type="html">&lt;h1 id="1-functional-expressions"&gt;1. FUNCTIONAL EXPRESSIONS&lt;/h1&gt;
&lt;p&gt;syntax for functional expr: &lt;code&gt;function some_identifier -&amp;gt; some_expr&lt;/code&gt;&lt;br/&gt;
the type of the functional expr is &lt;code&gt;t1 -&amp;gt; t2&lt;/code&gt; where t1 is the type of some_identifier, t2 is type of some_expr  &lt;/p&gt;
&lt;p&gt;ex.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;span class="c"&gt;(*annonymous function*)&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the previous way of defining function:   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;let f x = e&lt;/code&gt;,   &lt;/p&gt;
&lt;p&gt;is just an abbreviation for common let-binding:   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;let f = function x -&amp;gt; e&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;In fact, the most general form of a function definitoin contains a seq of pattern matching:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;pattern_1&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;expr_1&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;pattern_2&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;expr_2&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When only 1 pattern, the &lt;code&gt;|&lt;/code&gt; is omitted.  &lt;/p&gt;
&lt;p&gt;example   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;_::&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Add&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;eval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="2-functions-as-first-class-values"&gt;2. FUNCTIONS AS FIRST-CLASS VALUES&lt;/h1&gt;
&lt;p&gt;functional types are just values of a particular type, thus this allows the uniform way of naming a value let x = ...   &lt;/p&gt;
&lt;p&gt;Types govern function application. We can apply e1 to e2 when:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e1 has type t1 -&amp;gt; t2  &lt;/li&gt;
&lt;li&gt;t1 matchs the type of e2  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk4_higher_order_fun/pasted_image.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)];;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hd&lt;/span&gt; &lt;span class="n"&gt;fl&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;apply_twice&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;apply_twice&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;apply_n_times&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;apply_n_times&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;apply_n_times&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;compose&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;));;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compose&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;fg&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="function-pitfalls"&gt;function pitfalls&lt;/h3&gt;
&lt;p&gt;function apply from left to right (&lt;em&gt;function application associates to the left&lt;/em&gt;):   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;exp1 exp2 exp3&lt;/code&gt; &lt;br/&gt;
is equivalent to: &lt;code&gt;(exp1 exp2) exp3&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="3-functions-with-multiple-arguments_1"&gt;3. FUNCTIONS WITH MULTIPLE ARGUMENTS&lt;/h1&gt;
&lt;p&gt;anonymous function with several arguments: use keyword &lt;code&gt;fun&lt;/code&gt;:&lt;br/&gt;
&lt;code&gt;fun p1 ... pn -&amp;gt; exp&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;unlike &lt;code&gt;function&lt;/code&gt; keyword, &lt;code&gt;fun&lt;/code&gt; &lt;em&gt;only admits one case/branch&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;remark: funs with several arguments are just abbrevations for single-argument functions that returns a function:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f1&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;f1&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;f2&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f2&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in fact, &lt;code&gt;fun x1 ... xn -&amp;gt; e&lt;/code&gt; is just abbreviation for: &lt;code&gt;function x1 -&amp;gt; (..(function x2 -&amp;gt; ... -&amp;gt; (function xn -&amp;gt; e)..)&lt;/code&gt; &lt;/p&gt;
&lt;h1 id="4-partial-function-application"&gt;4. PARTIAL FUNCTION APPLICATION&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;let f = fun x y -&amp;gt; exp&lt;/code&gt; is equivalent to: &lt;code&gt;let f = function x -&amp;gt; (function y -&amp;gt; exp)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;⇒ partially apply f (ie, &lt;code&gt;f x&lt;/code&gt;) will give a function.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;f3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;what happens at func-application:&lt;br/&gt;
when applying &lt;code&gt;f = function x-&amp;gt;e&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt;:&lt;br/&gt;
→ evaluate &lt;code&gt;e&lt;/code&gt; in the context &lt;code&gt;x=a&lt;/code&gt;&lt;br/&gt;
→ the arrow &lt;code&gt;-&amp;gt;&lt;/code&gt; will &lt;strong&gt;block&lt;/strong&gt; any evaluation  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;span class="c"&gt;(*error will not happen here, as the `-&amp;gt;` blocks the evaluation!*)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;f2&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="partial-evaluation"&gt;partial evaluation&lt;/h3&gt;
&lt;p&gt;sometimes we can do part of a calculation as soon as we have the frist few arguments &lt;br/&gt;
⇒ extract that part of calculation before the arrow !   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;egal&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;egalp&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;l1sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="c"&gt;(*sort the 1st argument before going to the next functional abstraction*)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l1sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="5-mapping-functions-on-lists_1"&gt;5. MAPPING FUNCTIONS ON LISTS&lt;/h1&gt;
&lt;p&gt;many useful functions in the &lt;code&gt;List&lt;/code&gt; module, either &lt;code&gt;open List&lt;/code&gt; at beginning, or with pointed notation (&lt;code&gt;List.hd&lt;/code&gt;)  &lt;/p&gt;
&lt;h3 id="implementation"&gt;implementation&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;):(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;];;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;map2&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt; &lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;)::(&lt;/span&gt;&lt;span class="n"&gt;map2&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Invalid_argument&lt;/span&gt; &lt;span class="s2"&gt;"List.map2"&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;map2&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;];;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="examples"&gt;examples&lt;/h3&gt;
&lt;p&gt;example1: int vectors/matrices  &lt;/p&gt;
&lt;p&gt;row vector: int list&lt;br/&gt;
matrix: list of row vectors&lt;br/&gt;
turn infix operators into functions : using parentheses &lt;code&gt;(+) (/) ( * )&lt;/code&gt; ...(note: spaces are necessary for &lt;code&gt;*&lt;/code&gt;, otherwise this turns into comments...  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;vsum&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map2&lt;/span&gt; &lt;span class="o"&gt;(+);;&lt;/span&gt; &lt;span class="c"&gt;(* use partial application *)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;vsum&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;];;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;msum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map2&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map2&lt;/span&gt; &lt;span class="o"&gt;(+));;&lt;/span&gt; &lt;span class="c"&gt;(* nested partial application *)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;msum&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;];&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="o"&gt;]];;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;example2: get &lt;em&gt;all sublists&lt;/em&gt; of a list&lt;br/&gt;
type: &lt;code&gt;a' list -&amp;gt; 'a list list&lt;/code&gt;&lt;br/&gt;
write using induction:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;sublists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sublists&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;appendh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;rp&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;appendh&lt;/span&gt; &lt;span class="n"&gt;rp&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="6-folding-functions-on-lists_1"&gt;6. FOLDING FUNCTIONS ON LISTS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;map: apping a &lt;em&gt;unary&lt;/em&gt; function on list, all elements considered isolated.   &lt;/li&gt;
&lt;li&gt;folding: combining all elements of a list using a &lt;em&gt;binary operator&lt;/em&gt;.   &lt;/li&gt;
&lt;li&gt;2 different ways of folding: fold-left/fold-right  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fold_right"&gt;fold_right&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fold_right: ('a -&amp;gt; 'b -&amp;gt; 'b) -&amp;gt; 'a list -&amp;gt; 'b -&amp;gt; 'b&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk4_higher_order_fun/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;implementation and usage:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;fold_right&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fold_right&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;fold_right&lt;/span&gt; &lt;span class="o"&gt;(+)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fold_right&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;fold_right&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;];;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="fold_left"&gt;fold_left&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fold_left: ('a -&amp;gt; 'b -&amp;gt; 'a) -&amp;gt; 'a -&amp;gt; 'b list -&amp;gt; 'a&lt;/code&gt; &lt;br/&gt;
note: the default value's position is different from that of fold_right !   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk4_higher_order_fun/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;fold_left&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fold_left&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;fold_left&lt;/span&gt; &lt;span class="o"&gt;(+)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;];;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fold_left&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;span class="c"&gt;(* partial application *)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;];;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="examples_1"&gt;examples&lt;/h3&gt;
&lt;p&gt;example1: Inner product of int vectors &lt;br/&gt;
first get pairwise product, then sum up.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fold_left&lt;/span&gt; &lt;span class="o"&gt;(+)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map2&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;];;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;example2: countif  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;countif&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fold_left&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;countif&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;];;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="OCaml"></category></entry><entry><title>[OCaml MOOC] week3: MORE ADVANCED DATA STRUCTURES</title><link href="https://x-wei.github.io/ocamlMOOC_wk3_advanced_ds.html" rel="alternate"></link><published>2016-11-21T00:00:00+01:00</published><updated>2016-11-21T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-11-21:ocamlMOOC_wk3_advanced_ds.html</id><summary type="html">&lt;p&gt;Last week, we only defined &lt;em&gt;flat data structures&lt;/em&gt; which are nice to aggregate values but quite limited when you try to structure values.   &lt;/p&gt;
&lt;p&gt;This week: &lt;strong&gt;algebraic datatypes&lt;/strong&gt;.  &lt;/p&gt;
&lt;h1 id="1-tagged-values"&gt;1. TAGGED VALUES&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk3_advanced_ds/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;⇒ change the return type to a type &lt;code&gt;query_result&lt;/code&gt;, which can be either of these:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an error  &lt;/li&gt;
&lt;li&gt;a new database (in case of successful insertion/deletion)  &lt;/li&gt;
&lt;li&gt;a contact and its index (in case of successful search)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in ocaml, can define such a type (called &lt;strong&gt;sum type&lt;/strong&gt;) by :   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;query_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;NewDatabase&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;FoundContact&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More generally, to define disjoint union of types:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;some_type_identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;SomeTag&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;some_type&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;SomeTag&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;some_type&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;tag must start with uppercase letter  &lt;/p&gt;
&lt;p&gt;Taga are also called &lt;strong&gt;conscturcors&lt;/strong&gt;, grammar is like java constructors: &lt;code&gt;SomeTag (some_expr, ..., some_expr)&lt;/code&gt; (the parenthesis can be omitted if only 1 expr is required)  &lt;/p&gt;
&lt;p&gt;enumeration:   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;type color = Black | Gray | White;;&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="observing-tagged-values"&gt;observing tagged values&lt;/h3&gt;
&lt;p&gt;must prvide an expression &lt;em&gt;for each possible case&lt;/em&gt; of the value. A &lt;strong&gt;case&lt;/strong&gt; is described by a pattern: &lt;br/&gt;
&lt;code&gt;SomeTag (some_pattern, ..., some_pattern)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;A branch is composed of a pattern an an expr separated by an arrow. &lt;code&gt;some_pattern -&amp;gt; some_expr&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pattern matching &lt;/strong&gt;is a seq of branches:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;some_expr&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;some_pattern&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;some_expr&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;|...&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;some_pattern&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;some_expr&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;example:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Insert&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Delete&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;synatactic shortcut: &lt;strong&gt;function&lt;/strong&gt; keyword (for functions with only 1 argument)   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk3_advanced_ds/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pitfalls&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ill-typed pattern  &lt;/li&gt;
&lt;li&gt;non-exhaustive case analysis  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These errors can be caught by the checker.   &lt;/p&gt;
&lt;h1 id="2-recursive-types_1"&gt;2. RECURSIVE TYPES&lt;/h1&gt;
&lt;p&gt;data structures with unbounded depth, ie, list/tree.   &lt;/p&gt;
&lt;p&gt;For example, an integer list can be defined as:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;int_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;EmptyList&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;SomeElement&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;int_list&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;int_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;EmptyList&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;SomeElement&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;int_list&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in the machine:   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk3_advanced_ds/pasted_image002.png"/&gt;&lt;br/&gt;
functions on such datastruct usually use pattern matching:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nc"&gt;EmptyList&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nc"&gt;SomeElement&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;int_list&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The predefined type in ocaml: &lt;code&gt;t list&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;empty list: &lt;code&gt;[]&lt;/code&gt; ( &lt;code&gt;[]&lt;/code&gt; is just a special tage corresponding to EmptyList)  &lt;/li&gt;
&lt;li&gt;head and tail: &lt;code&gt;i::r&lt;/code&gt; ( &lt;code&gt;::&lt;/code&gt; is just a special tage corresponding to SomeElement)  &lt;/li&gt;
&lt;li&gt;a list can be defined by enumeration: &lt;code&gt;[some_expr; ...; some_expr]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;list concatenation: &lt;code&gt;@&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;];;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;)@[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;];;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;];;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the &lt;code&gt;rev&lt;/code&gt; function above has quad-complexity → here is the tail rec version:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;rev_aux&lt;/span&gt; &lt;span class="n"&gt;accu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;accu&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rev_aux&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;accu&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;rev_aux&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rev_aux&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="3-tree-like-values"&gt;3. TREE-LIKE VALUES&lt;/h1&gt;
&lt;p&gt;the database type is formed in a (binary)tree-like fashion:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;NoContact&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;DataNode&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;NoContact&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;DataNode&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;impose the BST invariant:   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk3_advanced_ds/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;p&gt;Now the functions insert/search/delete is BST fashion:   &lt;/p&gt;
&lt;h1 id="4-case-study-a-story-teller"&gt;4. CASE STUDY: A STORY TELLER&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;type-directed&lt;/strong&gt; programming: writing the right type declaration is half success.   &lt;/p&gt;
&lt;p&gt;define a story type (and other types:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;story&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;perturbation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;adventure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;conclusion&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;characters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Change&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Action&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Happy&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Hungry&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Eat&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;GoToRestaurant&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Appartment&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Restaurant&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="5-polymorphic-algebraic-datatypes"&gt;5. POLYMORPHIC ALGEBRAIC DATATYPES&lt;/h1&gt;
&lt;p&gt;parametric programming: example — list is parametrized by the element type. &lt;br/&gt;
Hence in &lt;code&gt;List&lt;/code&gt; module contains polymorphic functions.   &lt;/p&gt;
&lt;p&gt;Good for code reuse.   &lt;/p&gt;
&lt;p&gt;define your own polymorphic types, using '&lt;code&gt;a&lt;/code&gt; to indicate unkonw types:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;type ('a1,...,1aN) some_type_identifier = some_type&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;either&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Left&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Right&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dimension&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;circle&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;either&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;another example: bst:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;bst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Empty&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;bast&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;bst&lt;/span&gt; &lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Empty&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Empty&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Empty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="6-advanced-topics"&gt;6. ADVANCED TOPICS&lt;/h1&gt;
&lt;h3 id="precise-typing"&gt;precise typing&lt;/h3&gt;
&lt;p&gt;when 2 types have the same structure but different semantical meaning: a &lt;strong&gt;sum type with only one constructor&lt;/strong&gt; can be useful to distinguish them.   &lt;/p&gt;
&lt;p&gt;example:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;euro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Euro&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;dollar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Dollar&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;euro_of_dollar&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Dollar&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Euro&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;/.&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Dollar&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Euro&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;valid_comparison&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;euro&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;dollar&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="disjunctive-patterns"&gt;disjunctive patterns&lt;/h3&gt;
&lt;p&gt;Use or-patterns to factorize branches into a unique branch:   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;some_pattern_1 | some_pattern_2&lt;/code&gt; means observation of either pattern 1 or pattern 2.   &lt;/p&gt;
&lt;p&gt;constraint: both must &lt;em&gt;contain the same identifiers&lt;/em&gt;.   &lt;/p&gt;
&lt;p&gt;ex:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;remove_zero_or_one_head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;remove_zero_or_one_head'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)::&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="as-patterns"&gt;as-patterns&lt;/h3&gt;
&lt;p&gt;convenient ot &lt;em&gt;name a matched component&lt;/em&gt;: &lt;code&gt;some_pattern as x&lt;/code&gt; ( if the value can be observed using some_pattern, name it x)  &lt;/p&gt;
&lt;p&gt;ex.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;duplicate_head_at_the_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::_)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;@[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="guard-pattern-matching-branch-using-when"&gt;guard: pattern matching branch using &lt;code&gt;when&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;a &lt;strong&gt;guard&lt;/strong&gt; (some bool-expression) can add an extra constraint to a pattern:  &lt;/p&gt;
&lt;p&gt;ex.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;push_max_at_the_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[_])&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::((&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;::_)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::(&lt;/span&gt;&lt;span class="n"&gt;push_max_at_the_end&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;push_max_at_the_end&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt; &lt;span class="c"&gt;(*when x&amp;gt;y, should permuate x and y*)&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="OCaml"></category></entry><entry><title>[OCaml MOOC] week2: BASIC DATA STRUCTURES</title><link href="https://x-wei.github.io/ocamlMOOC_wk2_basics_ds.html" rel="alternate"></link><published>2016-11-12T00:00:00+01:00</published><updated>2016-11-12T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-11-12:ocamlMOOC_wk2_basics_ds.html</id><summary type="html">&lt;p&gt;this week: structure code with types: tuples, records, arrays.   &lt;/p&gt;
&lt;h1 id="1-user-defined-types"&gt;1. USER-DEFINED TYPES&lt;/h1&gt;
&lt;h3 id="primary-use-of-types-document-your-code"&gt;primary use of types:  document your code&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk2_basics_ds/pasted_image.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;type type_identifier = some_type&lt;/code&gt; to define a new type (&lt;code&gt;type_identifier&lt;/code&gt; is synonym/abbrevation of &lt;code&gt;some_type&lt;/code&gt;)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;type_identifier&lt;/code&gt; &lt;em&gt;must start with lowercase letter&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;already known types: &lt;code&gt;int, bool, string, char&lt;/code&gt; ...  &lt;/li&gt;
&lt;li&gt;use &lt;code&gt;:&lt;/code&gt; to add type annotation to identifiers &lt;code&gt;let x : some_type = some_expr&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;annotation param/return type of a function: &lt;code&gt;let f(x: some_type): return_type = some_expr&lt;/code&gt; or &lt;code&gt;let f x : return_type = some_expr&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example: colors  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;white&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;example: positive integers  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;positive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;positive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;positive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;abs'&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;positive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;abs'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;positive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pitfalls"&gt;pitfalls&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;in the REPL, careful with unintended hiding of type identifiers:  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1027&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;       &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1029&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;limitations of type synonyms  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk2_basics_ds/pasted_image001.png"/&gt;&lt;br/&gt;
⇒ but ocaml has ways to define more precise types to avoid such error statically  &lt;/p&gt;
&lt;h1 id="2-tuples-positioned-components_1"&gt;2. TUPLES: positioned components&lt;/h1&gt;
&lt;p&gt;Some objects are naturally made of several components, example: 2d point.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;positive_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;positive_range&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4611686018427387903&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;negative_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;negative_range&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(-&lt;/span&gt;&lt;span class="mi"&gt;4611686018427387904&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;name tuples with &lt;code&gt;type&lt;/code&gt;: use &lt;code&gt;*&lt;/code&gt; to construct tuple types.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;point2D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;point2D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;point2D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;point2D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pattern-matching-observing-components-of-tuple"&gt;pattern matching: observing components of tuple&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pattern&lt;/strong&gt;: describe how values are observed by the program.   &lt;/li&gt;
&lt;li&gt;appear in let-bindings or in func arguments.   &lt;/li&gt;
&lt;li&gt;simplest form of pattern: identifiers   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example: &lt;code&gt;let x = 6*3 in x&lt;/code&gt; can be read as "&lt;em&gt;I observe the value of 6&lt;/em&gt;3 by naming it as x*"  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ignore some component using wildcard &lt;code&gt;_&lt;/code&gt;, example: &lt;code&gt;let _ = 6*3 in 1;;&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example for tuple: &lt;code&gt;let (x, _) = (5, 2) in x;;&lt;/code&gt; can read as: "&lt;em&gt;I observe the first component of tuple (5,2) by naming it as x, and I ignore the 2nd component&lt;/em&gt;"  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,_)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x_coord&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;_)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;x_coord&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y_coord&lt;/span&gt; &lt;span class="o"&gt;(_,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;y_coord&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tuples-in-the-machine"&gt;tuples in the machine&lt;/h3&gt;
&lt;p&gt;tuple is a block of memory, program holds &lt;em&gt;pointer&lt;/em&gt; to the block, &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk2_basics_ds/pasted_image003.png"/&gt;&lt;br/&gt;
pointers can be &lt;em&gt;shared&lt;/em&gt;:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk2_basics_ds/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;h3 id="structrual-equality-vs-physical-equaliity"&gt;structrual equality VS physical equaliity&lt;/h3&gt;
&lt;p&gt;in ocaml there are 2 types of equalities:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt; implies structrual eq — i.e. they have &lt;em&gt;the same content&lt;/em&gt;.   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt; implies physical eq — i.e. they are &lt;em&gt;stored in the same memory location&lt;/em&gt;.   &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pitfalls_1"&gt;pitfalls&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;mismatching number of components : can be caught by compiler  &lt;/li&gt;
&lt;li&gt;semantic errors:   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example: &lt;code&gt;# let x_coord (x, y) = y;;&lt;/code&gt; can't be caught by compiler → using &lt;strong&gt;records&lt;/strong&gt;.   &lt;/p&gt;
&lt;h1 id="3-records-naming-components_1"&gt;3. RECORDS: naming components&lt;/h1&gt;
&lt;p&gt;name each components of a tuple → record.   &lt;/p&gt;
&lt;p&gt;example:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;point2D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;point2D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;point2D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;from_tuple&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;from_tuple&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;point2D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from_tuple&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;point2D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from_tuple&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;point2D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;left_upper&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;point2D&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;right_lower&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;point2D&lt;/span&gt;&lt;span class="o"&gt;;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;left_upper&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;point2D&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;right_lower&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;point2D&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;abox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;left_upper&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;right_lower&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;abox&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;left_upper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt; &lt;span class="n"&gt;right_lower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;get_min_xcoord&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;left_upper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;span class="c"&gt;(*pattern matching here for the func*)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;get_min_xcoord&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;decalre a record type:   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;type som_type_identifier = {field_name: some_type; ...; field_name: some_type}&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;construct a record:&lt;br/&gt;
&lt;code&gt;{field_name = some_expr; ...; field_name = som_expr}&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;observe a field: &lt;br/&gt;
&lt;code&gt;some_expr.field_name&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;observe several fields: use record &lt;em&gt;patterns&lt;/em&gt;:&lt;br/&gt;
&lt;code&gt;{field_name = some_pattern; ...; field_name = some_pattern}&lt;/code&gt;&lt;br/&gt;
(don't have to write all fields here)  &lt;/p&gt;
&lt;p&gt;in the machine: like a tuple, a block of memory  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk2_basics_ds/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;h3 id="pitfalls-shadowing-a-field-name"&gt;pitfalls: shadowing a field name&lt;/h3&gt;
&lt;p&gt;if 2 records share some identical field names:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="o"&gt;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="o"&gt;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;advice: NOT share field names between records!  &lt;/p&gt;
&lt;h1 id="4-arrays_1"&gt;4. ARRAYS&lt;/h1&gt;
&lt;p&gt;tuple/record: sizes are statically bounded.   &lt;/p&gt;
&lt;p&gt;array: &lt;em&gt;dynamically&lt;/em&gt; change sequence size,&lt;br/&gt;
but all array elements must have &lt;em&gt;same type&lt;/em&gt;.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[|&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;|];;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[|&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;|]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;|]&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Std module &lt;code&gt;Array&lt;/code&gt;: provides functions over arrays  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;some_array = [|some_expr; ...; some_expr|]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.make sz val&lt;/code&gt;: takes an int (size of array) and a value to initialize each component of the array (like Array.fill).  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.init sz f&lt;/code&gt;: initial size of array &lt;code&gt;sz&lt;/code&gt; and a function &lt;code&gt;f&lt;/code&gt; to initilize each component of array, f takes the &lt;em&gt;index of&lt;/em&gt; the component and returns a value.   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.length arr&lt;/code&gt;: returns array size.  &lt;/li&gt;
&lt;li&gt;array indexing: &lt;code&gt;arr.(some_expr:int)&lt;/code&gt;, index: 0 to sz-1  &lt;/li&gt;
&lt;li&gt;array patterns: observe several components of array &lt;code&gt;[|some_expr; ...; some_expr|]&lt;/code&gt; (not very useful)  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)|];;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt; &lt;span class="o"&gt;[|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;|];;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[|&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;|]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt; &lt;span class="o"&gt;[|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;|]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[|&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|];;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Characters&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Warning&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;matching&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;exhaustive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Here&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[|&lt;/span&gt;  &lt;span class="o"&gt;|]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt; &lt;span class="o"&gt;[|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;|];;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[|&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;|]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt; &lt;span class="o"&gt;[|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;|];;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Match_failure&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"//toplevel//"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in the machine: a memory block, like a record  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk2_basics_ds/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;h1 id="5-case-study-a-small-typed-database"&gt;5. CASE STUDY: A SMALL TYPED DATABASE&lt;/h1&gt;
&lt;p&gt;a toy db for contacts, &lt;br/&gt;
3 queries: &lt;code&gt;insert, delete, search&lt;/code&gt;.   &lt;/p&gt;
&lt;p&gt;These functions have type: &lt;code&gt;database -&amp;gt; query_contact -&amp;gt; status * database * contact&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;define the phone number/contact/database types:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;phone_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;name&lt;/span&gt;         &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;phone_number&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;phone_number&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;nobody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;phone_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;number_of_contacts&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;contacts&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;};;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;implement &lt;code&gt;make&lt;/code&gt; (to create a database with parameter=max capacity):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;max_number_of_contacts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;number_of_contacts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;contacts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;max_number_of_contacts&lt;/span&gt; &lt;span class="n"&gt;nobody&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;};;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;(* Queries are represented by a code and a contact.  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;   - If the code is 0 then the contact must be inserted.  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;   - If the code is 1 then the contact must be deleted.  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;   - If the code is 2 then we are looking for a contact  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;     with the same name in the database. *)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;code&lt;/span&gt;    &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;implement &lt;code&gt;search&lt;/code&gt;:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number_of_contacts&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nobody&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;in&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;implement &lt;code&gt;insert&lt;/code&gt;:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number_of_contacts&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contacts&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nobody&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;else&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;_)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cells&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number_of_contacts&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;in&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;db'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;          &lt;span class="n"&gt;number_of_contacts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number_of_contacts&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;          &lt;span class="n"&gt;contacts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;cells&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;in&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;implement &lt;code&gt;delete&lt;/code&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;else&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cells&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number_of_contacts&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;==(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number_of_contacts&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;nobody&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;db'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;number_of_contacts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number_of_contacts&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;contacts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;cells&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;implement an engine function to process all kinds of queries:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;(* Engine parses and interprets the query. *)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nobody&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remarks:  &lt;/p&gt;
&lt;p&gt;This is purely functional, a new db is created each time a query is processed.   &lt;/p&gt;</summary><category term="OCaml"></category></entry><entry><title>[Scala MOOC II] Lec4 - Timely Effects</title><link href="https://x-wei.github.io/progfun2_lec4_var.html" rel="alternate"></link><published>2016-11-09T00:00:00+01:00</published><updated>2016-11-09T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-11-09:progfun2_lec4_var.html</id><summary type="html">&lt;p&gt;this week: discuss how to handle events in user-interface — MVC, functional reactive programming.  &lt;/p&gt;
&lt;h1 id="lecture-41-imperative-event-handling-the-observer-pattern"&gt;Lecture 4.1 - Imperative Event Handling: The Observer Pattern&lt;/h1&gt;
&lt;p&gt;Traditional way of handling events: &lt;em&gt;observer Pattern (MVC)&lt;/em&gt;. Used when views need to react to change in a model.  &lt;/p&gt;
&lt;p&gt;MVC: model-view-controller for user interface &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Views can announce themselves to a model (called "&lt;em&gt;substribe&lt;/em&gt;") &lt;/li&gt;
&lt;li&gt;Models can "&lt;em&gt;publish&lt;/em&gt;" new informations to views &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;Publisher&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;subscribers&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Subscriber&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscriber&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Subscriber&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;unsubscribe&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscriber&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Subscriber&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subscribers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foreach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;Substriber&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pub&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Publisher&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;make the &lt;code&gt;BankAccount&lt;/code&gt; a &lt;code&gt;Publisher&lt;/code&gt;:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec4_var/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;create a &lt;code&gt;Consolidator&lt;/code&gt; that displays bank accounts:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec4_var/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;p&gt;Advantages of MVC: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;decouples views from stat &lt;/li&gt;
&lt;li&gt;have varying number of views of a given state &lt;/li&gt;
&lt;li&gt;simple to set up  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Disadvantages:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;forces imperative style since handlers are of Unit type &lt;/li&gt;
&lt;li&gt;many moving parts that need to be coordinated &lt;/li&gt;
&lt;li&gt;concurrency will be more complicated (ex. 2 models update one view at the same time) &lt;/li&gt;
&lt;li&gt;Views are tightly bound to one state, view updates immediately &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="lecture-42-functional-reactive-programming"&gt;Lecture 4.2 - Functional Reactive Programming&lt;/h1&gt;
&lt;p&gt;FRP:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reactive programming: react to seq of &lt;em&gt;events&lt;/em&gt; that happen in &lt;em&gt;time&lt;/em&gt;.  &lt;/li&gt;
&lt;li&gt;functional view: aggregate an event sequence to a &lt;strong&gt;signal&lt;/strong&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our simple API, the most important concept is &lt;code&gt;Signal&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Signal:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is a vlaue that &lt;em&gt;changes over time&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;represented as a &lt;em&gt;function&lt;/em&gt; mapping time to value domain  &lt;/li&gt;
&lt;li&gt;define new signals from existing ones (instead of having &lt;em&gt;mutable&lt;/em&gt; state) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;example: move mouse positions&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;event-based view:&lt;/strong&gt;&lt;br/&gt;
whenever mouse moves, an event &lt;code&gt;MouseMoved(toPos: Position)&lt;/code&gt; is fired &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FRP view:&lt;/strong&gt;&lt;br/&gt;
use a signal(function): &lt;code&gt;mousePosition: Signal[Position]&lt;/code&gt; , which at any point represents a current mouse position &lt;/p&gt;
&lt;h3 id="signal-opeartions"&gt;Signal opeartions&lt;/h3&gt;
&lt;p&gt;2 fundamental ops on signals:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;obtain value of signal at current time (the &lt;code&gt;apply&lt;/code&gt; function): &lt;code&gt;mousePosition()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;define a signal in term of another signal (constructor &lt;code&gt;Signal(expr)&lt;/code&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example: from the mouse curve signal, define a new signal indicating whether the curve is inside the rectangle or not.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;inReactangle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;LL&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Position&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;UR&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Position&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Signal&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nc"&gt;Signal&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mousePosition&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// the mouse pos signal &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nc"&gt;LL&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nc"&gt;UR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;use &lt;code&gt;Signal(_value)&lt;/code&gt; to define a constant signal:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;val sig = Signal(3) // constant signal&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;then define a subclass &lt;code&gt;Var&lt;/code&gt; of &lt;code&gt;Signal&lt;/code&gt; for changable signals, which has an &lt;code&gt;update&lt;/code&gt; operation to redefine the value of a signal.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// update  &lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⇒ In scala, &lt;code&gt;update&lt;/code&gt; is also a special function: assignments like &lt;code&gt;a(e1,...en)=e&lt;/code&gt; are translated to &lt;code&gt;a.update(e1...en, e)&lt;/code&gt;. (Here the n could be 0, i.e. no arguments in the assignment expression).  &lt;/p&gt;
&lt;p&gt;→ So &lt;code&gt;sig.update(5)&lt;/code&gt; can be re-written as &lt;code&gt;sig()=5&lt;/code&gt;. The &lt;code&gt;()&lt;/code&gt; is like dereferencing a varable.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Difference between &lt;code&gt;Var&lt;/code&gt;s and mutable &lt;code&gt;var&lt;/code&gt;s: we can &lt;em&gt;map over signals&lt;/em&gt;, i.e. maintain a relation between 2 signals forever in the future, whereas using mutable &lt;code&gt;var&lt;/code&gt;s have to propagate all updates manually.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="example-bank-account"&gt;example: bank account&lt;/h3&gt;
&lt;p&gt;add a signal &lt;code&gt;balance&lt;/code&gt; to &lt;code&gt;BankAccount&lt;/code&gt;s, define a &lt;em&gt;function&lt;/em&gt; &lt;code&gt;consolidated&lt;/code&gt; which takes sum of all balances of accounts in list.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// a Var signal &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="c1"&gt;// otherwise cyclic definition of `balance` &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;()){&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"insufficient balance"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;consolidated&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accts&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;BankAccount&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Signal&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nc"&gt;Signal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;// similarly, define exange rate signals &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;xchange&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Signal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;246.0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;inDollar&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Signal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;()*&lt;/span&gt;&lt;span class="n"&gt;xchange&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;note the difference between var assignment and signal update:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v = v+1&lt;/code&gt;: the new value is old value + 1 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;s() = s() + 1&lt;/code&gt;: the s is a function that is always 1 larger than itself (cyclic definitions) &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="lecture-43-a-simple-frp-implementation_1"&gt;Lecture 4.3 - A Simple FRP Implementation&lt;/h1&gt;
&lt;p&gt;implementation of &lt;code&gt;Singal&lt;/code&gt; and &lt;code&gt;Var&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;class API:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Signal&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;???&lt;/span&gt; &lt;span class="c1"&gt;// s() give cur value &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Signal&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Signal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// construct new signal &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Var&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Signal&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;???&lt;/span&gt; &lt;span class="c1"&gt;// s()=expr for update &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Var&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or more convientently:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;sig()&lt;/code&gt; get the signal's (current) value &lt;/li&gt;
&lt;li&gt;use &lt;code&gt;sig() = {new_expr}&lt;/code&gt; to update the signal's expression &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="implemention-idea"&gt;implemention idea&lt;/h2&gt;
&lt;h3 id="signal"&gt;Signal&lt;/h3&gt;
&lt;p&gt;each &lt;code&gt;sig: Signal[T]&lt;/code&gt; maintains:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;its *current value * &lt;/p&gt;
&lt;p&gt;&lt;code&gt;private var myValue: T&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;its *current expression * &lt;/p&gt;
&lt;p&gt;&lt;code&gt;private var myexpr: () =&amp;gt; T&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set of &lt;em&gt;observers &lt;/em&gt;: other signals (&lt;strong&gt;callersig&lt;/strong&gt;s) that depend on &lt;code&gt;this.myValue&lt;/code&gt;  — if &lt;code&gt;this.myValue&lt;/code&gt; changes, all signals in this.observers should be re-evaluated  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;private var observers: Set[Signal[_]]&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;protected  function to re-evaluate value &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;protected def computeValue(): Unit&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protected function to change expression  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;protected def update(expr: =&amp;gt; T): Unit&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;How to record dependencies:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when evaluating a &lt;code&gt;Signal&lt;/code&gt;, need to know which &lt;code&gt;callersig&lt;/code&gt; gets defined by &lt;code&gt;this&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;So we should add the caller to &lt;code&gt;this.observers&lt;/code&gt; when &lt;code&gt;apply&lt;/code&gt; is called (like: &lt;code&gt;sig()&lt;/code&gt;).  &lt;/li&gt;
&lt;li&gt;if &lt;code&gt;this.myValue&lt;/code&gt; changes (when calling &lt;code&gt;computeValue()&lt;/code&gt;), all caller signals in &lt;code&gt;this.observers&lt;/code&gt; are re-evaluated (&lt;code&gt;callersig.computeValue()&lt;/code&gt;); and &lt;code&gt;this.observers&lt;/code&gt; is &lt;strong&gt;cleared(!! see next item)&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;when &lt;code&gt;callersig&lt;/code&gt;s re-evaluate their expression, the &lt;code&gt;apply()&lt;/code&gt; method will add the &lt;code&gt;callersig&lt;/code&gt; again to &lt;code&gt;this.observers&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="caller"&gt;caller&lt;/h3&gt;
&lt;p&gt;How to find out &lt;em&gt;who is calling&lt;/em&gt; so that a signal is evaluated ? 
simplistic way: maintain a &lt;em&gt;global&lt;/em&gt; data structure (stack-fashion) referring to current &lt;code&gt;caller: StackableVariable[Signal[T]]&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;caller&lt;/code&gt; is a global "stack" of &lt;code&gt;callersig&lt;/code&gt;s that get poped/pushed.  &lt;/p&gt;
&lt;p&gt;The API of the &lt;code&gt;StackableVariable[Signal[T]]&lt;/code&gt; class:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;caller.value: Signal[T]&lt;/code&gt;:  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;get &lt;em&gt;the callersig on top of stack, which depends on currently evaluating signal&lt;/em&gt; (&lt;code&gt;this&lt;/code&gt;), and so should be added to &lt;code&gt;this.observers&lt;/code&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;caller.withValue(sig:Signal[T])(expr: () =&amp;gt; [T])&lt;/code&gt;:  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;first add &lt;code&gt;sig&lt;/code&gt; to the top of stack; then evaluate &lt;code&gt;expr&lt;/code&gt;; finally pop &lt;code&gt;sig&lt;/code&gt; off the stack.  &lt;/p&gt;
&lt;p&gt;Here is the implementation of the &lt;code&gt;caller&lt;/code&gt; : &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun2_lec4_var/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;So whenever &lt;code&gt;sig&lt;/code&gt; want to know who depends on it, it just use &lt;code&gt;caller.value&lt;/code&gt;;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;thus, in the &lt;code&gt;apply&lt;/code&gt; method of &lt;code&gt;Signal&lt;/code&gt;s, we write like this:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;observers&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;caller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="c1"&gt;// caller.value=top of stack, it depends on currenlty-evaluating value (this), so it should be added to this.observers &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;caller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;observers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"cyclic signal definition"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;myValue&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;And if &lt;code&gt;sig&lt;/code&gt; want to depend on other signals, in order to write the expression(which includes other signals that sig depends on), it use: &lt;code&gt;caller.withValue(this){expr...}&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;so in &lt;code&gt;computeValue()&lt;/code&gt;, as &lt;code&gt;this.myExpr&lt;/code&gt; may contain other signals that &lt;code&gt;this&lt;/code&gt; depend on, we should write:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;computeValue&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;observed&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;observers&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;observed&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Nil&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;newValue&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;caller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;myExpr&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// withValue will add this to the top of stack, so when eval other signals, they know that it's this signal that depends on them&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myValue&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;newValue&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// re-evaluate all callersigs that depends on this&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;myValue&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newValue&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;obs&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;observers&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;observers&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// clear observers for this: the callersigs may be added back in apply()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;obs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foreach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;computeValue&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// here this.observers might be added with calersigs&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;problem: global stack is not good... especially for concurrency  ⇒ replace global state by &lt;em&gt;thread-local state&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;Or use &lt;em&gt;implicit parameteres&lt;/em&gt;: pass current value of the thread-local variable into a signal expr as implicit parameter.  &lt;/p&gt;
&lt;h1 id="lecture-4445-latency-as-an-effect_2"&gt;Lecture 4.4/4.5 - Latency as an Effect&lt;/h1&gt;
&lt;p&gt;(I didn't quite get the point from this lecture on...) &lt;/p&gt;
&lt;p&gt;when computation takes a lot of time: register a &lt;strong&gt;callback&lt;/strong&gt; when computation terminates (either success or failure).  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Future[T]&lt;/code&gt;: a &lt;strong&gt;monad&lt;/strong&gt; that handles both exceptions and latency &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;onComplete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Try&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The callback use pattern matching:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Success&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;onNext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Failure&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;onError&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;another option: give 2 callbacks, one for success, one for failure.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;def onCompelet(success: T=&amp;gt;Unit, failed: Throwable =&amp;gt; Unit): Unit&lt;/code&gt; &lt;/p&gt;
&lt;h1 id="lecture-46474849410-combinators-on-futurescomposing-futures"&gt;Lecture 4.6/4.7/4.8/4.9/4.10 - Combinators on Futures/Composing Futures&lt;/h1&gt;
&lt;p&gt;higher-order funcitons on &lt;code&gt;Future&lt;/code&gt;s: map/filter/flatMap/... &lt;/p&gt;
&lt;p&gt;recover/recoverWith for Error case ⇔ map/flatMap for Future. &lt;/p&gt;
&lt;p&gt;fallbackTo:  &lt;/p&gt;
&lt;p&gt;retry: deal with failure...  &lt;/p&gt;
&lt;p&gt;turn recursion to foldleft/foldright...  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec4_var/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;lazy evaluation: infinite data structure &lt;/li&gt;
&lt;li&gt;distinction between computations and values: random/signal are computations &lt;/li&gt;
&lt;li&gt;monads: abstract over properties of computations, encapsulate mutations, ... &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mix FP and mutable state &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;laziness &lt;/li&gt;
&lt;li&gt;FRP &lt;/li&gt;
&lt;li&gt;monads &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec4_var/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;h1 id="exercice-calculator"&gt;exercice: calculator&lt;/h1&gt;
&lt;p&gt;Use Function Reactive Programming (FRP), with the Signal[A] class that you have seen in the lectures, to implement a spreadsheet-like calculator. In this calculator, cells can depend on the value of other cells, and are recomputed automatically when the latter change.  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/X-Wei/Coursera-progfun2/tree/master/hw4-calculator"&gt;https://github.com/X-Wei/Coursera-progfun2/tree/master/hw4-calculator&lt;/a&gt; &lt;/p&gt;</summary><category term="scala"></category></entry><entry><title>[Scala MOOC II] Lec 3: Functions and State</title><link href="https://x-wei.github.io/progfun2_lec3_var.html" rel="alternate"></link><published>2016-10-31T00:00:00+01:00</published><updated>2016-10-31T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-10-31:progfun2_lec3_var.html</id><summary type="html">&lt;p&gt;This week: scala for imperative programming.   &lt;/p&gt;
&lt;h1 id="lecture-31-functions-and-state"&gt;Lecture 3.1 - Functions and State&lt;/h1&gt;
&lt;p&gt;So far: pure functional programming&lt;br/&gt;
→ side-effect free: therefore &lt;em&gt;time doesn't matter&lt;/em&gt;. &lt;br/&gt;
Any rewriting that terminates lead to the same solution. (Churcher-Rosser Th)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun2_lec3_var/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;Now: &lt;strong&gt;mutable states&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Stateful objects&lt;/em&gt;: objects can have state that change over time. (state is influenced by its history). ⇒ variables &lt;code&gt;var&lt;/code&gt; in scala, associates a value to a name, and can be changed by assignment.   &lt;/p&gt;
&lt;p&gt;ex. bank account — pretty much like java class  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BankAccount&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;balance&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"insufficient balance"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;acct&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BankAccount&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;acct&lt;/span&gt; &lt;span class="n"&gt;deposit&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;acct&lt;/span&gt; &lt;span class="n"&gt;withdraw&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;acct&lt;/span&gt; &lt;span class="n"&gt;withdraw&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ex2. streams impolemented using mutable variable  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec3_var/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;h1 id="lecture-32-identity-and-change"&gt;Lecture 3.2 - Identity and Change&lt;/h1&gt;
&lt;p&gt;when are 2 (&lt;em&gt;mutable&lt;/em&gt;) objs equal ? → what is equal?   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are &lt;strong&gt;operationally equivalent&lt;/strong&gt; if no possible &lt;em&gt;test&lt;/em&gt; can distinguish between them.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;to test if &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are the same: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun2_lec3_var/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;The substitution model is no longer valid&lt;/em&gt;:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;x and y are &lt;code&gt;not&lt;/code&gt; the same:  &lt;/p&gt;
&lt;p&gt;val x = new BankAccount&lt;br/&gt;
val y = new BankAccount  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;x and y are the same:  &lt;/p&gt;
&lt;p&gt;val x = new BankAccount&lt;br/&gt;
val y = x  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="lecture-33-loops"&gt;Lecture 3.3 - Loops&lt;/h1&gt;
&lt;p&gt;prop: &lt;code&gt;var&lt;/code&gt;s are already enough to model all imperative programs. &lt;em&gt;Can model loops using functions&lt;/em&gt;.   &lt;/p&gt;
&lt;p&gt;ex. scala while loop   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;r&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This while loop can be implemented using a function &lt;code&gt;WHILE&lt;/code&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;WHILE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;// cond and cmd must be passed by name  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;comd&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nc"&gt;WHILE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// or `()`=Unit (= void in java)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;exercice: write a REPEAT function: &lt;code&gt;REPEAT{cmd} (condition)&lt;/code&gt; , similar to &lt;code&gt;do...while&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;REPEAT&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;cmd&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// stop  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nc"&gt;REPEAT&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;do-while loop syntax in scala: &lt;code&gt;do{cmd}while(cond)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;the classical &lt;code&gt;for&lt;/code&gt; loop in java can NOT be modeled by higher-order function, because the for loop arguments contains declaration of a variable i. However, in scala, use:   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;for(i &amp;lt;- 1 until 3) println(i)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;This is similar to previously discussed &lt;code&gt;for-expression&lt;/code&gt;, but using &lt;code&gt;foreach&lt;/code&gt; instead of &lt;code&gt;map&lt;/code&gt;/&lt;code&gt;flatMap&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;example:   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;for(i&amp;lt;-i until 3; j&amp;lt;- "abc") println(i+" "+j)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;translates to:   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;(1 until 3) foreach (i =&amp;gt; "abc" foreach (j =&amp;gt; println(i+" "+j)))&lt;/code&gt; &lt;/p&gt;
&lt;h1 id="lecture-34-extended-example-discrete-event-simulation"&gt;Lecture 3.4 - Extended Example: Discrete Event Simulation&lt;/h1&gt;
&lt;p&gt;digital circuit simulator. &lt;br/&gt;
A digital circuit(DC) is composed of &lt;code&gt;wires&lt;/code&gt; and functional components.   &lt;/p&gt;
&lt;p&gt;Basic components: Inverter, AND gate, OR gate&lt;br/&gt;
components have reaction time (&lt;em&gt;delay&lt;/em&gt;)  &lt;/p&gt;
&lt;p&gt;diagrams: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun2_lec3_var/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;p&gt;example: half adder (input=a,b, output=sum and carry)  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec3_var/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;language&lt;/strong&gt; to describe digital circuits: using classes and functions  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Wire&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;inverter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;andGate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;orGate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ouput&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;a half adder can be defined as:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;halfAdder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Wire&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;orGate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;andGate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;inverter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;andGate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec3_var/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;p&gt;And this half adder can be used as another component, for example, for &lt;em&gt;full adder&lt;/em&gt;:   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec3_var/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;h1 id="lecture-35-discrete-event-simulation-api-and-usage"&gt;Lecture 3.5 - Discrete Event Simulation: API and Usage&lt;/h1&gt;
&lt;p&gt;give implementations of the digital circuits, based on an API for discrete event simulation.   &lt;/p&gt;
&lt;h3 id="discrete-evenet-simulator"&gt;discrete evenet simulator&lt;/h3&gt;
&lt;p&gt;performs &lt;em&gt;actions&lt;/em&gt;, specified by user at a given &lt;em&gt;moment&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;An &lt;code&gt;Action&lt;/code&gt;: a function that takes 0 parameters and returns &lt;code&gt;Unit&lt;/code&gt;.   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;type Action = () =&amp;gt; Unit&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;class hierachy:   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec3_var/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;Simulation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;currentTime&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;???&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;afterDelay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dalay&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;???&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;???&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Gates&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Simulation&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;{...}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;...}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Circuits&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Gates&lt;/span&gt;&lt;span class="o"&gt;{...}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;sim&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Circuits&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;...&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Wire&lt;/code&gt; class:&lt;br/&gt;
state of a wire is modeled by 2 private vars  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getSignal: Boolean&lt;/code&gt;: current value of signal in wire  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;setSignal(sig:Boolean):Unit&lt;/code&gt; : modifies value of signal  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;addAction(a: Action): Unit&lt;/code&gt;: attach actions to be &lt;em&gt;executed at each change of signal&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sigVal&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Action&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;getSignal&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sigVal&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;setSignal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getSignal&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;sigVal&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="n"&gt;foreach&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// for(a&amp;lt;-actions) a()  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;addAction&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Action&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;actions&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// have to perform it when added   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Inverter&lt;/code&gt;:&lt;em&gt;install an action on its input wire&lt;/em&gt;, the change is effective after a delay.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;inverter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;invertAction&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;inputSig&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getSignal&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;afterDelay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;InverterDelay&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;setSignal&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;inputSig&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="n"&gt;addAction&lt;/span&gt; &lt;span class="n"&gt;invertAction&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;andGate/orGate&lt;/code&gt;is similar:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec3_var/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;h1 id="lecture-36-discrete-event-simulation-implementation-and-test_1"&gt;Lecture 3.6 - Discrete Event Simulation: Implementation and Test&lt;/h1&gt;
&lt;p&gt;implement the simulation trait: keep each instance of &lt;code&gt;Simulation&lt;/code&gt; in &lt;code&gt;agenda&lt;/code&gt; of actions to perform.   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Agenda&lt;/code&gt; is a list of &lt;code&gt;Event&lt;/code&gt;s, each event consists of an &lt;code&gt;action&lt;/code&gt; and the &lt;code&gt;time&lt;/code&gt;, sorted by actions' time.   &lt;/p&gt;
&lt;p&gt;To run the simulation, use a &lt;code&gt;loop&lt;/code&gt; to handle events in agenda.   &lt;/p&gt;
&lt;p&gt;To examine the changes of the signals in wires, use funciton &lt;code&gt;probe&lt;/code&gt;.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;Simulation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="k"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Unit&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Action&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Agenda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;agenda&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Agenda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;curtime&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;currentTime&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curtime&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;afterDelay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentTime&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="k"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;agenda&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;agenda&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//insert to the write time  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ag&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ag&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;// event handling loop  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;agenda&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;agenda&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;curtime&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Nil&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;afterDelay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;s"*** simulation started, time = &lt;/span&gt;&lt;span class="si"&gt;$currentTime&lt;/span&gt;&lt;span class="s"&gt; ***"&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;probe&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wire&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Wire&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;probeAction&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;s"&lt;/span&gt;&lt;span class="si"&gt;$name&lt;/span&gt;&lt;span class="s"&gt; time = &lt;/span&gt;&lt;span class="si"&gt;$currentTime&lt;/span&gt;&lt;span class="s"&gt;, value = &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="n"&gt;wire&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getSignal&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// string formatting in scala  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;wire&lt;/span&gt; &lt;span class="n"&gt;addAction&lt;/span&gt; &lt;span class="n"&gt;probeAction&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to pack delay constrains into their own trait, use &lt;code&gt;extend..with..&lt;/code&gt; syntax:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;Parameters&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;InverterDelay&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;AndGateDelay&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;OrGateDelay&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;sim&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Circuits&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Paramters&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="summary"&gt;summary&lt;/h3&gt;
&lt;p&gt;state and assignments make model more complicates, lose referential transparency&lt;br/&gt;
on the other hand, assignments allow formulate certain programs in an elegant way.   &lt;/p&gt;
&lt;h1 id="programming-assignment-quickcheck_1"&gt;Programming Assignment: Quickcheck&lt;/h1&gt;
&lt;p&gt;This assignment has nothing to do with the mutable data... but rather to use scalacheck for testing.   &lt;/p&gt;
&lt;p&gt;Write properties that a heap should have to test heap implementations.   &lt;/p&gt;
&lt;h3 id="about-generator"&gt;about Generator&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/rickynils/scalacheck/blob/master/doc/UserGuide.md#generators"&gt;https://github.com/rickynils/scalacheck/blob/master/doc/UserGuide.md#generators&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;my code: &lt;br/&gt;
&lt;a href="https://github.com/X-Wei/Coursera-progfun2/tree/master/hw3-quickcheck/quickcheck"&gt;https://github.com/X-Wei/Coursera-progfun2/tree/master/hw3-quickcheck/quickcheck&lt;/a&gt;&lt;/p&gt;</summary><category term="scala"></category></entry><entry><title>[OCaml MOOC] week1: BASIC TYPES, DEFINITIONS AND FUNCTIONS</title><link href="https://x-wei.github.io/ocamlMOOC_wk1_basics.html" rel="alternate"></link><published>2016-10-23T00:00:00+02:00</published><updated>2016-10-23T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-10-23:ocamlMOOC_wk1_basics.html</id><summary type="html">&lt;h1 id="1-basic-data-types-int-bool"&gt;1. BASIC DATA TYPES: int, bool&lt;/h1&gt;
&lt;p&gt;Rich type system and polymorphism in ocaml. Types are &lt;em&gt;infered&lt;/em&gt; not declared.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Basic types&lt;/strong&gt;: int, bool, float, string, char, ... &lt;/p&gt;
&lt;h3 id="int"&gt;int&lt;/h3&gt;
&lt;p&gt;value: &lt;span class="math"&gt;\(-2^{62}\)&lt;/span&gt; ~ &lt;span class="math"&gt;\(2^{62}-1\)&lt;/span&gt; on 64-bit machines.&lt;br/&gt;
ops: &lt;code&gt;+, -, *, /, mod&lt;/code&gt; (reminder: &lt;code&gt;/&lt;/code&gt; is integer division) &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="ow"&gt;mod&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bool"&gt;bool&lt;/h3&gt;
&lt;p&gt;values: &lt;code&gt;true, false&lt;/code&gt; 
ops: &lt;code&gt;&amp;amp;&amp;amp;,||, not&lt;/code&gt; 
comparison ops: &lt;code&gt;&amp;lt;, &amp;gt;, =, &amp;lt;=, =&amp;gt;, &amp;lt;&amp;gt;&lt;/code&gt;&lt;br/&gt;
note 1: comparisons must have the &lt;em&gt;same type&lt;/em&gt; of operands) 
note 2: equal test is &lt;code&gt;=&lt;/code&gt; , &lt;code&gt;=&lt;/code&gt; is NOT assigment.  &lt;code&gt;==&lt;/code&gt; exists but is for something else... &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="kt"&gt;float&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"hello"&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="kt"&gt;int&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="kt"&gt;int&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="2-more-data-types-float-char-string_1"&gt;2. MORE DATA TYPES: float, char, string&lt;/h1&gt;
&lt;h3 id="float"&gt;float&lt;/h3&gt;
&lt;p&gt;value: must written with a dot (&lt;code&gt;5.0&lt;/code&gt;, &lt;code&gt;5.&lt;/code&gt;), or exponential (&lt;code&gt;5e3&lt;/code&gt;, &lt;code&gt;6e-9&lt;/code&gt;) 
ops: &lt;em&gt;also have a dot in the end&lt;/em&gt; &lt;code&gt;+.&lt;/code&gt;, &lt;code&gt;-.&lt;/code&gt;, &lt;code&gt;*.&lt;/code&gt;, &lt;code&gt;/.&lt;/code&gt; 
functions: &lt;code&gt;sqrt, sin, cos, ceil, floor, ...&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;+.&lt;/span&gt; &lt;span class="mf"&gt;1e10&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000000003&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="kt"&gt;int&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;+.&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;All basic types are disjoint&lt;/strong&gt;: no value belongs to 2 different basic types, &lt;strong&gt;no implicit conversion. &lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;conversion functions in both directions:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float_of_int&lt;/code&gt;: int -&amp;gt; float &lt;/li&gt;
&lt;li&gt;&lt;code&gt;int_of_float&lt;/code&gt;: float -&amp;gt; int &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;float_of_int&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;int_of_float&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;float_of_int&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;int_of_float&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Parentheses only necessary to indicate structure&lt;/strong&gt;.  &lt;/p&gt;
&lt;h3 id="char"&gt;char&lt;/h3&gt;
&lt;p&gt;values: 256 chars (0~255), can be written as '&lt;code&gt;a&lt;/code&gt;' or '&lt;code&gt;\087&lt;/code&gt;' 
conversion functions (char ↔ int):  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Char.chr&lt;/code&gt;: int -&amp;gt;char &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Char.code&lt;/code&gt;: char -&amp;gt; int &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="sc"&gt;'A'&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="sc"&gt;'\122'&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;122&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chr&lt;/span&gt; &lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'\233'&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chr&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'A'&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chr&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="string"&gt;string&lt;/h3&gt;
&lt;p&gt;values: written between &lt;code&gt;""&lt;/code&gt; 
ops: &lt;code&gt;^&lt;/code&gt; for string concatenation 
functions: &lt;code&gt;String.length, int_of_string, float_of_string, String.get(s,i) ...&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="s2"&gt;"abc"&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="s2"&gt;"def"&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"abcdef"&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="s2"&gt;"1234"&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;int_of_string&lt;/span&gt; &lt;span class="s2"&gt;"123"&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;int_of_string&lt;/span&gt; &lt;span class="s2"&gt;"123a"&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Failure&lt;/span&gt; &lt;span class="s2"&gt;"int_of_string"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;string_of_int&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"123"&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"abc"&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'b'&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="3-expressions-if-then-else-func-applications-and-operators_1"&gt;3. EXPRESSIONS: if-then-else, func-applications and operators&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;expressions&lt;/strong&gt; are used to compute values.  &lt;/p&gt;
&lt;h3 id="conditional-expr"&gt;conditional expr&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;if... then... else...&lt;/code&gt; 
⇒ this gives an &lt;strong&gt;expression&lt;/strong&gt;, not an &lt;strong&gt;instruction&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;An expression always have a type&lt;/em&gt;, type of the if-then-else expression is the type of the expressions in then and else, &lt;em&gt;which must be the same&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;else&lt;/code&gt; is missing → there is a default value, to be discussed later  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;.;;&lt;/span&gt;        &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="kt"&gt;int&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="function-application"&gt;function application&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk1_basics/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;p&gt;again, &lt;code&gt;()&lt;/code&gt; are &lt;strong&gt;not needed&lt;/strong&gt; unless indicate structure, and &lt;strong&gt;parentheses are NOT function applications...&lt;/strong&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"abcde"&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'c'&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello"&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="s2"&gt;"world"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'w'&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_of_int&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int_of_string&lt;/span&gt; &lt;span class="s2"&gt;"0"&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'6'&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;       &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="polymorphic-operators"&gt;Polymorphic operators&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk1_basics/pasted_image002.png"/&gt; 
Some ops have polymorphic(generic) types, like &lt;code&gt;&amp;gt;&lt;/code&gt;:  '&lt;code&gt;a → 'a → bool&lt;/code&gt; 
Here the '&lt;code&gt;a&lt;/code&gt; is a &lt;em&gt;type variable, &lt;/em&gt;can be instantiated by any type&lt;em&gt;.&lt;/em&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="kt"&gt;int&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="sc"&gt;'b'&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="s2"&gt;"hello"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"world"&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="4-definitions_1"&gt;4. DEFINITIONS&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;definition&lt;/strong&gt;s are used to give names to values, in ocaml there are &lt;em&gt;global&lt;/em&gt; defs and &lt;em&gt;local&lt;/em&gt; defs.  &lt;/p&gt;
&lt;h3 id="global-definition"&gt;global definition&lt;/h3&gt;
&lt;p&gt;effective for rest of session 
syntax: &lt;code&gt;let name = expr&lt;/code&gt; 
once set, the value of the identifier never changes.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt; &lt;span class="n"&gt;definition&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;shadowed&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="local-definition"&gt;local definition&lt;/h3&gt;
&lt;p&gt;naming within a delimited scope 
syntax: &lt;code&gt;let name = expr1 in expr2&lt;/code&gt; 
the scope of the identifier is &lt;code&gt;expr2&lt;/code&gt;, the result's value is also &lt;em&gt;expr2's value&lt;/em&gt;. &lt;em&gt;So the identifier should appear in expr2&lt;/em&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Unbound&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Unbound&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;           &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;local defs can be nested: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Syntax&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;                    &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk1_basics/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;h3 id="simultaneous-definitions"&gt;Simultaneous Definitions&lt;/h3&gt;
&lt;p&gt;can assign 2 identifiers in the same line:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;expr&lt;/code&gt; is  evaluated w.r.t. the value bindings &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;let&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="c"&gt;(*y=2+1*)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="c"&gt;(*y=1+1 because the binding for x before the let is 1!*)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="5-functions_1"&gt;5. FUNCTIONS&lt;/h1&gt;
&lt;h3 id="func-definition"&gt;func definition&lt;/h3&gt;
&lt;p&gt;global function (with 1 argument) def : &lt;code&gt;let f x = expr&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;local def: &lt;code&gt;let f x = expr1 in expr2&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;span class="c"&gt;(* interpreted as apply 2 argments to f, need parentheses here*)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;       &lt;span class="nc"&gt;It&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;applied&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;too&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;maybe&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;forgot&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;`;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="lexical-scoping"&gt;lexical scoping&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;def. &lt;strong&gt;lexical scoping&lt;/strong&gt; 
identifiers(names) used in function body refers to the names &lt;em&gt;that &lt;/em&gt;are visible &lt;em&gt;at the moment of function definition&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;dynamic scoping&lt;/strong&gt; 
names refer to names that are visible &lt;em&gt;at the moment of function invocation&lt;/em&gt;.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="c"&gt;(*here f is the f defined above, which is visible at the moment of g's declaration*)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="c"&gt;(*this f is visible after g's declaration, it is visible when g is invocated*)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;span class="c"&gt;(*g uses the first f*)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Warning&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unused&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;(*the same is true for global scoping*)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="identifiers-are-not-variables"&gt;identifiers are NOT variables&lt;/h3&gt;
&lt;p&gt;A name(identifier) can be &lt;em&gt;hidden&lt;/em&gt; (the value is NOT &lt;em&gt;changed&lt;/em&gt;) by a new definition of the same name.  &lt;/p&gt;
&lt;p&gt;The hidden identifier can be accessed with static(lexical) binding:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;span class="c"&gt;(*f still uses a's value as 2, the old value of a is NOT changed, it's hidden --closure? *)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="6-recursion_1"&gt;6. RECURSION&lt;/h1&gt;
&lt;p&gt;rec functions are natural on recursively defined data structures.  &lt;/p&gt;
&lt;p&gt;example: fact(n) &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk1_basics/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;h3 id="recursive-definition"&gt;recursive definition&lt;/h3&gt;
&lt;p&gt;using the &lt;code&gt;f&lt;/code&gt; in let's &lt;code&gt;expr&lt;/code&gt; will cause pb as &lt;code&gt;f&lt;/code&gt; refers to the previous value of &lt;code&gt;f&lt;/code&gt;. ⇒ use key word &lt;code&gt;rec&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Unbound&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3628800&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="mutually-recursive-function"&gt;mutually recursive function&lt;/h3&gt;
&lt;p&gt;ex. 2 funcs calling each other recursively &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk1_basics/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;p&gt;⇒ &lt;em&gt;use simultaneous defs&lt;/em&gt; (&lt;code&gt;let...and...&lt;/code&gt;):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;even&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;odd&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;odd&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;even&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;even&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;odd&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;even&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;odd&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="exercices_1"&gt;exercices&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;multiple_of&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;integer_square_root&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;sqr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_of_int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;int_of_float&lt;/span&gt; &lt;span class="n"&gt;sqr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;big&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;small&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;big&lt;/span&gt; &lt;span class="ow"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;small&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;small&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;small&lt;/span&gt;&lt;span class="o"&gt;;;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;multiple_upto&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;multiple_of&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;multiple_upto&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;is_prime&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiple_upto&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;));;&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript'; 
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="OCaml"></category></entry><entry><title>[Scala MOOC II] Lec2: Lazy Evaluation</title><link href="https://x-wei.github.io/progfun2_lec2_lazyeval.html" rel="alternate"></link><published>2016-10-22T00:00:00+02:00</published><updated>2016-10-22T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-10-22:progfun2_lec2_lazyeval.html</id><summary type="html">&lt;h1 id="lecture-21-structural-induction-on-trees-optional"&gt;Lecture 2.1 - Structural Induction on Trees (optional)&lt;/h1&gt;
&lt;p&gt;Generalize the structural induction on list to general structures like trees.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To prove a property &lt;code&gt;P(t)&lt;/code&gt; for all trees &lt;code&gt;t&lt;/code&gt;: &lt;br/&gt;
    * show for any leave l, &lt;code&gt;P(l)&lt;/code&gt; holds&lt;br/&gt;
    * for each internal node &lt;code&gt;t&lt;/code&gt; with subtrees &lt;code&gt;s1...sn&lt;/code&gt;, show &lt;code&gt;P(s1)&amp;amp;...&amp;amp;P(sn)&lt;/code&gt; holds  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="example-prove-correctness-for-intsets"&gt;Example: Prove correctness for IntSets&lt;/h2&gt;
&lt;p&gt;recall the &lt;code&gt;IntSet&lt;/code&gt; def: empty set or non-empty set organized in a binary (search) tree structure. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IntSet&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;incl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IntSet&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Empty&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;IntSet&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;incl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IntSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;NonEmpty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Empty&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Empty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NonEmpty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IntSet&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IntSet&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;IntSet&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// NonEmpty is just a BST &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;incl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IntSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;NonEmpty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="n"&gt;incl&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;NonEmpty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="n"&gt;incl&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Prove the correctness&lt;/strong&gt; of this implementation: show that it respects certain laws:  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;prop1:&lt;/strong&gt; &lt;code&gt;Empty contains x = false&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;pf: easy... &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;prop2:&lt;/strong&gt; &lt;code&gt;(s incl x) contains x = true&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;pf: proof by structual induction on &lt;code&gt;s&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;base case: &lt;code&gt;s = Empty&lt;/code&gt;,  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;(Empty incl x) = NonEmpty(x, Empty, Empty) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;NonEmpty(x, Empty, Empty) contains x = true&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;induction step: &lt;code&gt;s=NonEmpty(z,l,r)&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;first case, &lt;code&gt;z=x&lt;/code&gt; 
        s incl x = NonEmpty(x,l,r) incl x = NonEmpty(x,l,r) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;so &lt;code&gt;NonEmpty(x, l, r) contains x = true&lt;/code&gt; 
- second case, z&amp;lt;x 
&lt;code&gt;s incl x = NonEmpty(z,l,r) incl x = NonEmpty(z,l,r incl x)&lt;/code&gt; 
so: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;(s incl x) contains x  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;= NonEmpty(z,l,r incl x) contains x  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;= (r incl x) contains x = ture // by induction hypothesis&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;third case, z&amp;gt;x: symmetric ... &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;prop3:&lt;/strong&gt; if x!=y, &lt;code&gt;(s incl x) contains y = s contains y&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;pf: by structual induction &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;base case: &lt;code&gt;s = Empty&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;induction step: &lt;code&gt;s=NonEmpty(z,l,r)&lt;/code&gt; 
    5 cases to consider... &lt;ul&gt;
&lt;li&gt;z=x &lt;/li&gt;
&lt;li&gt;z=y &lt;/li&gt;
&lt;li&gt;z&amp;lt;y&amp;lt;x &lt;/li&gt;
&lt;li&gt;y&amp;lt;z&amp;lt;x &lt;/li&gt;
&lt;li&gt;y&amp;lt;x&amp;lt;z &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="lecture-22-streams_1"&gt;Lecture 2.2 - Streams&lt;/h1&gt;
&lt;p&gt;motivation: 2nd prime number between 1000 and 10000:  &lt;/p&gt;
&lt;p&gt;elegant, but not efficient solution:&lt;br/&gt;
&lt;code&gt;( (1000 to 10000) filter isPrime) (1)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;→ ALL prime numbers are constructed in the code, only use the first 2 elements...  &lt;/p&gt;
&lt;p&gt;⇒ *avoid computing the tail of a seq until necessary * &lt;/p&gt;
&lt;p&gt;→ new data structure: &lt;code&gt;Stream&lt;/code&gt;s, like lists, but &lt;em&gt;tail is eval only on demand&lt;/em&gt; &lt;/p&gt;
&lt;h2 id="stream-class"&gt;Stream class&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;constructor&lt;/strong&gt; 
Streams defined from either constant &lt;code&gt;Stream.empty&lt;/code&gt; and constructor &lt;code&gt;Stream.cons&lt;/code&gt; 
ex: &lt;code&gt;val xs = Stream.cons(1, Stram.cons(2, Stream.empty))&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;(Stream.empty~=&lt;code&gt;Nil&lt;/code&gt;, Stream.cons~=&lt;code&gt;::&lt;/code&gt;) &lt;/p&gt;
&lt;p&gt;or by using the &lt;code&gt;Stream&lt;/code&gt; object as a factory (like other collections): &lt;code&gt;val xs = Stream(1,2,3)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;toStream()&lt;/strong&gt;
&lt;code&gt;toStream&lt;/code&gt; on a collection will turn the collection into a stream.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toStream&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;res1&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;scala.collection.immutable.Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?)&lt;/span&gt; &lt;span class="c1"&gt;// the tail is (?) -- not evaled &lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The tail is not evaled! &lt;/p&gt;
&lt;p&gt;let's write a function to return a range as Stream ( returns &lt;code&gt;(lo until hi).toStream)&lt;/code&gt; ):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;streamRange&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cons&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stramRange&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;other methods&lt;/strong&gt;
&lt;code&gt;Stream&lt;/code&gt; supports almost all method of a &lt;code&gt;List&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;((1000 to 10000).toStream filter isPrime)(1)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Exception: concat operator &lt;code&gt;::&lt;/code&gt; will always return a list instead of a stream. 
→ alternative: &lt;code&gt;#::&lt;/code&gt; returns a stream 
&lt;code&gt;x#::xs == Stream.cons(x,xs)&lt;/code&gt; &lt;/p&gt;
&lt;h2 id="implementation-of-streams"&gt;Implementation of Streams&lt;/h2&gt;
&lt;p&gt;similar to the implementation of lists.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;scala
trait Stream[+A] extends Seq[A]{ 
    def isEmpty: Boolean 
    def head: A 
    def tail: Stream [A] 
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;concrete implementations are in the &lt;code&gt;Stream&lt;/code&gt; &lt;em&gt;companion object&lt;/em&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;hd&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tl&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;// **`=&amp;gt;`: tl is by name, will be evaled later!  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isEmpty&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hd&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tl&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Nothing&lt;/span&gt;&lt;span class="o"&gt;]{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isEmpty&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NoSuchElementException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"empty.head"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NoSuchElementException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"empty.tail"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;all other methods are implemented similar to list counterparts...&lt;br/&gt;
ex:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;+T&lt;/span&gt;&lt;span class="o"&gt;]{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;//... &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;// tail.filter(p) will be evaled on demande&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;//... &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="lecture-23-lazy-evaluation_1"&gt;Lecture 2.3 - Lazy Evaluation&lt;/h1&gt;
&lt;p&gt;pb with the last implementation of Streams: if tail is called several times, the corresponding stram will be re-computed each time.  &lt;/p&gt;
&lt;p&gt;→ can store the 1st result of the eval and use it later. (As in FP, the eval result never change) &lt;/p&gt;
&lt;p&gt;⇒ this scheme is called &lt;strong&gt;lazy evaluation&lt;/strong&gt;, as opposed to both by-name evaluation (&lt;code&gt;def x&lt;/code&gt;) and strict-evaluation (&lt;code&gt;val x&lt;/code&gt;). avoids both unnessary and repeated eval.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;lazy val x = expr&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;exercice:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec2_lazyeval/pasted_image.png"/&gt; 
→ this will print: "xzyz" &lt;/p&gt;
&lt;p&gt;adapt the lazy scheme for Stream implementation:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;hd&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tl&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hd&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;lazy&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tl&lt;/span&gt; &lt;span class="c1"&gt;// **lazy instead of `def`** &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;//... &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="lecture-24-computing-with-infinite-sequences"&gt;Lecture 2.4 - Computing with Infinite Sequences&lt;/h1&gt;
&lt;p&gt;with lazyness, can deal with inf seqs. ⇒ &lt;em&gt;infinite Streams&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;example: the stream of all integers starting from a given number:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;terminating&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;recursive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;all natural numbers:&lt;br/&gt;
&lt;code&gt;val nats = from(0)&lt;/code&gt; 
all multiples of 4:&lt;br/&gt;
&lt;code&gt;nats map (_ * 4)&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;#::&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;n:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;nats&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;nats&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;m4s&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nats&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;m4s&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;scala.collection.immutable.Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m4s&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toList&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;res2&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="err"&gt;``&lt;/span&gt;&lt;span class="n"&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;example1: Sieve of Eratosthenes &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;------------------------------- &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;![](../images/progfun2_lec2_lazyeval/pasted_image001.png) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;written in scala:  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;`&lt;/span&gt;&lt;span class="err"&gt;``&lt;/span&gt;&lt;span class="n"&gt;scala&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;// param s is the prime numbers for sieve &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;#::&lt;/span&gt; &lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;primes&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toList&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;res0&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;71&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;103&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;109&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;113&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;131&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;137&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;139&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;149&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;151&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;157&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;163&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;167&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;173&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;179&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;181&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;191&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;193&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;197&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;199&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;211&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;223&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;227&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;229&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;239&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;241&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;251&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;257&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;263&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;269&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;271&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;277&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;281&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;283&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;293&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;307&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;311&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;313&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;317&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;331&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;337&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;347&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;349&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;353&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;359&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;367&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;373&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;379&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;383&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;389&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;397&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;409&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;419&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;421&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;431&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;433&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;439&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;443&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;449&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;457&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;461&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;463&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;467&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;479&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;487&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;491&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;499&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;503&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;509&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;521&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;523&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;541&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="example2-square-root"&gt;example2: square root&lt;/h2&gt;
&lt;p&gt;previous implementation: use &lt;code&gt;isGoodEnough&lt;/code&gt; test termination. 
now: express the converging seq without having to worry about when to terminate:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sqrtStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;improve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;lazy&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;guesses&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;#::&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guesses&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;improve&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//**this will not explod!** &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;guesses&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isGoodEnough&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.0001&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrtStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isGoodEnough&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// get the 1st guess that is good enough &lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="lecture-25-case-study-the-water-pouring-problem_1"&gt;Lecture 2.5 - Case Study: the Water Pouring Problem&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;task: "water pouring problem"&lt;/strong&gt; 
given: source, sink, glasses of different sizes, target size...&lt;br/&gt;
goal: fill/empty/move water from 1 glass to another 
&lt;img alt="" class="img-responsive" src="../images/progfun2_lec2_lazyeval/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Model&lt;/strong&gt; 
Glass: &lt;code&gt;Int&lt;/code&gt; 
State: &lt;code&gt;Vector[Int]&lt;/code&gt; one entry per glass 
Moves:&lt;br/&gt;
&lt;code&gt;Empty(glass), Fill(glass), Pour(from, to)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec2_lazyeval/pasted_image004.png"/&gt; 
question: how to find the correct sequence of moves ?&lt;br/&gt;
⇒ BFS, generate all possible paths (from initial state where all glasses are empty) of length=1,2,3,...  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;first: define Move classes, they have a change method, take one state as param and return a state:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pouring&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;State&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;initialState&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;Move&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;State&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;State&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Empty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glass&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Move&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;State&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glass&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glass&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Move&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;State&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glass&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glass&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pour&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Move&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;State&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;={&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;)-&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;//the amount to move &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;)-&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;)+&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;...&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;generate all possible moves:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;glasses&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indices&lt;/span&gt; &lt;span class="c1"&gt;// equal to `0 until capacity.length` &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;moves&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;  &lt;span class="c1"&gt;// all possible moves &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="k"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;glasses&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nc"&gt;Empty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="k"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;glasses&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nc"&gt;Fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gfrom&lt;/span&gt;&lt;span class="k"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;glasses&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;gto&lt;/span&gt;&lt;span class="k"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;glasses&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;gfrom&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;gto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nc"&gt;Pour&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gfrom&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then define a &lt;code&gt;Path&lt;/code&gt; class: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Move&lt;/span&gt;&lt;span class="o"&gt;]){&lt;/span&gt;&lt;span class="c1"&gt;// history: moves in reversed order&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;endState&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;State&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;// given a path (list ot moves), return the final state by following the path&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="n"&gt;foldRight&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initialState&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mv&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Move&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stt&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;State&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mv&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="n"&gt;stt&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// as in the list are reversed order of moves, use foldright&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Move&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;toString&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="n"&gt;mkString&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"--&amp;gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;endState&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;initialPath&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Nil&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then define a &lt;code&gt;Stream&lt;/code&gt; of path sets: given current (set of) paths, extend one move and generate (a set of) paths of longer length:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;={&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="k"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;paths&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;moves&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;#::&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;more&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;pathSets&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initialPath&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;finally, solve the problem: for each path, track its end state, and if the target value is in the end state, return the path.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;solutions&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;pathsets&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;pathSets&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;pathsets&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endState&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pb: too slow for some case 
→ we generate ALL paths of a certain length in the stream, but in the paths, we should avoid returning to a preivous state !&lt;br/&gt;
→ re-define the &lt;code&gt;from&lt;/code&gt; function: add a param of explored set of states.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;explored&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;State&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;={&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="k"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;paths&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;nextpath&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;moves&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;explored&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;nextpath&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endState&lt;/span&gt;&lt;span class="o"&gt;)==&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;nextpath&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;newstates&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endState&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;#::&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;more&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;explored&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;union&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newstates&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;pathSets&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initialPath&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initialState&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;→ more improvement: avoid computing &lt;code&gt;endState&lt;/code&gt;(a &lt;code&gt;foldRight&lt;/code&gt;) over and over again — add to class param.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Move&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;endState&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;State&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;&lt;span class="c1"&gt;// history: moves in reversed order&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Move&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="n"&gt;endState&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;toString&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="n"&gt;mkString&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"--&amp;gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;endState&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec2_lazyeval/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;h1 id="programming-assignment-bloxorz"&gt;Programming Assignment: Bloxorz&lt;/h1&gt;
&lt;p&gt;https://github.com/X-Wei/Coursera-progfun2/tree/master/hw2-stream-bloxorz/streams&lt;/p&gt;</summary><category term="scala"></category></entry><entry><title>[learning torch] 6. optim (optimization tools)</title><link href="https://x-wei.github.io/learn-torch-6-optim.html" rel="alternate"></link><published>2016-10-10T00:00:00+02:00</published><updated>2016-10-10T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-10-10:learn-torch-6-optim.html</id><summary type="html">&lt;p&gt;ref: &lt;a href="http://rnduja.github.io/2015/10/26/deep_learning_with_torch_step_7_optim/"&gt;http://rnduja.github.io/2015/10/26/deep_learning_with_torch_step_7_optim/&lt;/a&gt; &lt;br/&gt;
doc: &lt;a href="https://github.com/torch/optim/blob/master/doc/intro.md"&gt;https://github.com/torch/optim/blob/master/doc/intro.md&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Before we implement the gd update step by defining a &lt;code&gt;gradientUpdate&lt;/code&gt; function and calling it in a loop.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;gradientUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;model, x, y, criterion, learningRate&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;assumes&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="n"&gt;criterion&lt;/span&gt; &lt;span class="n"&gt;expects&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;    local &lt;/span&gt;&lt;span class="s"&gt;loss = criterion:forward(pred, y) &lt;/span&gt;&lt;span class="p"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;zeroGradParameters&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;    local &lt;/span&gt;&lt;span class="s"&gt;grad_cri = criterion:backward(pred, y) &lt;/span&gt;&lt;span class="p"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grad_cri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;updateParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;learningRate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But this is functionality is implemented in the &lt;code&gt;optim&lt;/code&gt; module. In addition to just grad-descent, it has more complicated optimization algorithms implemented.  &lt;/p&gt;
&lt;h2 id="interface"&gt;Interface&lt;/h2&gt;
&lt;p&gt;The interface for all optimization algos are: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;params_new, fs, ... = optim._method_(feval, params[, config][, state])&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;explination:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;params&lt;/code&gt;: current parameters vector (&lt;strong&gt;1D tensor&lt;/strong&gt;), this will be updated during optimization &lt;/li&gt;
&lt;li&gt;&lt;code&gt;feval&lt;/code&gt;: a user-defined closure that respects this API: &lt;code&gt;f, df/dx = feval(x)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;config&lt;/code&gt;: a table of parameters for the algorithm (e.g. learning rate) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;state&lt;/code&gt;: a table of state variables &lt;/li&gt;
&lt;li&gt;&lt;code&gt;params_new&lt;/code&gt;: the resulting new parameter (in a 1D tensor), which minimizes the function f &lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs&lt;/code&gt;: a table of f values evaluated during the optimization, &lt;code&gt;fs[#fs]&lt;/code&gt; is the optimized function value &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt;&lt;br/&gt;
As optim expects the input to be 1D tensors, we need to &lt;strong&gt;flatten&lt;/strong&gt; the parameters in our model, this can be achieved via:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;params, gradParams = model:getParameters()&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;the reuslting &lt;code&gt;params&lt;/code&gt; and &lt;code&gt;gradParams&lt;/code&gt; are all flattened into 1D tensor.  &lt;/p&gt;
&lt;h2 id="example-sgd-to-train-mlp-the-xor-function"&gt;Example: sgd to train mlp the XOR function&lt;/h2&gt;
&lt;p&gt;Here is an example for learning an XOR using a mlp with one hidden layer.  &lt;/p&gt;
&lt;h3 id="model-criterion"&gt;model, criterion&lt;/h3&gt;
&lt;p&gt;First, define the model and criterion (use MSE here, see it as a regression problem):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'nn'&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;HUs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="c1"&gt;-- parameters&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sequential&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;-- make a multi-layer perceptron &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HUs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tanh&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HUs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;criterion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MSECriterion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="data"&gt;data&lt;/h3&gt;
&lt;p&gt;Then generate dataset of XORs: sample 2d inputs, and lables are -1 if the samples are of the sign, otherwise +1. Generate 128 training samples: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;batchSize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;batchInputs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;batchSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;batchLabels&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;batchSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;batchSize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;-- calculate label for XOR function &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;batchInputs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;batchLabels&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="feval-closure"&gt;feval() closure&lt;/h3&gt;
&lt;p&gt;Then define the feval function that returns the loss and the gradient wrt the loss:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;feval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;params&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gradParams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;    local &lt;/span&gt;&lt;span class="s"&gt;outputs = model:forward(batchInputs) &lt;/span&gt;&lt;span class="p"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;    local &lt;/span&gt;&lt;span class="s"&gt;loss = criterion:forward(outputs, batchLabels) &lt;/span&gt;&lt;span class="p"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;    local &lt;/span&gt;&lt;span class="s"&gt;dloss_doutputs = criterion:backward(outputs, batchLabels) &lt;/span&gt;&lt;span class="p"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;batchInputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dloss_doutputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;    return &lt;/span&gt;&lt;span class="s"&gt;loss, gradParams &lt;/span&gt;&lt;span class="p"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;finally, apply &lt;code&gt;optim.sgd&lt;/code&gt; to the batch for 500 epochs:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'optim'&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;local&lt;/span&gt; &lt;span class="n"&gt;sgdcfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;learningRate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;optim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sgd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sgdcfg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;can take some examples to test:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;x = torch.Tensor(2) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;x[1] =  0.5; x[2] =  0.5; print(model:forward(x)[1]) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;x[1] =  0.5; x[2] = -0.5; print(model:forward(x)[1]) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;x[1] = -0.5; x[2] =  0.5; print(model:forward(x)[1]) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;x[1] = -0.5; x[2] = -0.5; print(model:forward(x)[1])&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output is:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;-0.0073583598776157  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;0.24137506111789     &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;0.31254747107449     &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;-0.14114052583337&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the signs are correct for XOR function.  &lt;/p&gt;</summary><category term="torch"></category></entry><entry><title>[learning torch] 5. nngraph (another way to construct nn)</title><link href="https://x-wei.github.io/learn-torch-5-nngraph.html" rel="alternate"></link><published>2016-10-08T15:00:00+02:00</published><updated>2016-10-08T15:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-10-08:learn-torch-5-nngraph.html</id><summary type="html">&lt;p&gt;ref: &lt;a href="http://rnduja.github.io/2015/10/07/deep_learning_with_torch_step_4_nngraph/"&gt;http://rnduja.github.io/2015/10/07/deep_learning_with_torch_step_4_nngraph/&lt;/a&gt; &lt;br/&gt;
doc: &lt;a href="https://github.com/torch/nngraph/"&gt;https://github.com/torch/nngraph/&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;The aim of this library is to provide users of nn package with tools to easily create complicated architectures.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;luarocks install nngraph&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;optionally can install &lt;code&gt;graphvis&lt;/code&gt; for graph visualization.  &lt;/p&gt;
&lt;p&gt;From previous posts, to build networks, there are 2 important classes:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Module&lt;/code&gt; as a nn layer, can do forward and backward prop &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Container&lt;/code&gt; to combine several &lt;code&gt;Module&lt;/code&gt;s &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The nngraph library provides a way to build any complex network focusing on the network graph and avoiding the use of Containers.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="nngraphnode"&gt;nngraph.Node&lt;/h2&gt;
&lt;p&gt;Any &lt;code&gt;Module&lt;/code&gt; can be wrapped into a &lt;code&gt;nngraph.Node&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;For all &lt;code&gt;nn.Module&lt;/code&gt;, nngraph overrides the &lt;code&gt;__call__&lt;/code&gt; meta method (the function call operator &lt;code&gt;()&lt;/code&gt;), by &lt;em&gt;calling&lt;/em&gt; a module, a &lt;code&gt;Node&lt;/code&gt; is returned:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;th&amp;gt; require 'nngraph'; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                                                                      [0.0000s]  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;th&amp;gt; module = nn.Identity() &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                                                                      [0.0001s]  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;th&amp;gt; module &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;nn.Identity &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                                                                      [0.0000s]  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;th&amp;gt; module() &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;nngraph.Node &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                                                                      [0.0000s]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The arguments of  &lt;code&gt;__call__&lt;/code&gt; are other (parent) nodes that come into this node, in this way we specify which module(s) will feed into the current node/module: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;th&amp;gt; h1 = nn.Linear(20, 10)() &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                                                                      [0.0001s]  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;th&amp;gt; h2 = nn.Linear(10, 1)(h1) -- h1 is input of h2  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                                                                      [0.0001s]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="simple-sequential-example"&gt;Simple sequential example&lt;/h2&gt;
&lt;p&gt;We make a network by calling &lt;code&gt;nn.gModulet()&lt;/code&gt;, this takes 2 arguments: a table of &lt;code&gt;inputs&lt;/code&gt;, and a table of &lt;code&gt;outputs&lt;/code&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;th&amp;gt; mlp = nn.gModule({h1}, {h2}) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                                                                      [0.0002s]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we can plot the model using graphviz:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;-- draw graph (the forward graph, '.fg'), use it with itorch notebook &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;graph.dot(model.fg, 'MLP') &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;-- or save graph to file MLP.svg and MLP.dot &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;graph.dot(model.fg, 'MLP', 'MLP')&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/learn-torch-5-nngraph/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;(The first and last nodes are dummy nodes and regroup all inputs and outputs of the graph.) &lt;/p&gt;
&lt;h2 id="dag-example"&gt;DAG example&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/torch/nngraph#a-network-with-2-inputs-and-2-outputs"&gt;https://github.com/torch/nngraph#a-network-with-2-inputs-and-2-outputs&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Here is an example to build a model with 2 inputs and 2 outputs:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;h2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;hh1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tanh&lt;/span&gt;&lt;span class="p"&gt;()(&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;hh2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tanh&lt;/span&gt;&lt;span class="p"&gt;()(&lt;/span&gt;&lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;madd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CAddTable&lt;/span&gt;&lt;span class="p"&gt;()(&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;hh1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hh2&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;oA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sigmoid&lt;/span&gt;&lt;span class="p"&gt;()(&lt;/span&gt;&lt;span class="n"&gt;madd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;oB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tanh&lt;/span&gt;&lt;span class="p"&gt;()(&lt;/span&gt;&lt;span class="n"&gt;madd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;gmod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;oA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oB&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;gmod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;updateOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;gmod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;updateGradInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gmod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Big MLP'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;alternatively, &lt;strong&gt;use &lt;/strong&gt;&lt;code&gt;-&lt;/code&gt;&lt;strong&gt; to make your code looks like the data flow&lt;/strong&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;h1 = - nn.Linear(20,20) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;h2 = - nn.Linear(10,10) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;hh1 = h1 - nn.Tanh() - nn.Linear(20,1) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;hh2 = h2 - nn.Tanh() - nn.Linear(10,1) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;madd = {hh1,hh2} - nn.CAddTable() &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;oA = madd - nn.Sigmoid() &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;oB = madd - nn.Tanh() &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;gmod = nn.gModule( {h1,h2}, {oA,oB} )&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="annotations-of-nodes"&gt;Annotations of nodes&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/torch/nngraph#annotations"&gt;https://github.com/torch/nngraph#annotations&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;node::annotate()&lt;/code&gt; to annotated nodes, can add name/description, or change node color. &lt;/p&gt;
&lt;p&gt;WIth annotation, can enable debugging too:  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/torch/nngraph#debugging"&gt;https://github.com/torch/nngraph#debugging&lt;/a&gt; &lt;/p&gt;</summary><category term="torch"></category></entry><entry><title>[learning torch] 4. Criterion (loss function)</title><link href="https://x-wei.github.io/learn-torch-4-criterion.html" rel="alternate"></link><published>2016-10-08T14:00:00+02:00</published><updated>2016-10-08T14:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-10-08:learn-torch-4-criterion.html</id><summary type="html">&lt;p&gt;ref: &lt;a href="http://rnduja.github.io/2015/10/05/deep_learning_with_torch_step_3_nn_criterions/"&gt;http://rnduja.github.io/2015/10/05/deep_learning_with_torch_step_3_nn_criterions/&lt;/a&gt; &lt;br/&gt;
doc: &lt;a href="https://github.com/torch/nn/blob/master/doc/criterion.md"&gt;https://github.com/torch/nn/blob/master/doc/criterion.md&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Criterion&lt;/code&gt;: abstract class, given input and target(true label), a &lt;code&gt;Criterion&lt;/code&gt; can compute the gradient according to a certain loss function.   &lt;/p&gt;
&lt;h2 id="criterion-class"&gt;Criterion class&lt;/h2&gt;
&lt;p&gt;important methods:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;forward(input, target)&lt;/code&gt;: compute the loss function, the &lt;code&gt;input&lt;/code&gt; is usually the prediction/log-probability prediction of the network, &lt;code&gt;target&lt;/code&gt; is the truth label of training data.   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;backward(input, target)&lt;/code&gt;: compute gradient of the loss function.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;subclasses of &lt;code&gt;Criterion&lt;/code&gt;:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;classification critierions: cross-entropy, neg loglikelihood, ...  &lt;/li&gt;
&lt;li&gt;regression criterions: MSE, Abs, KL divergence, ...  &lt;/li&gt;
&lt;li&gt;embedding criterions  &lt;/li&gt;
&lt;li&gt;misc criterions  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="classification-criterion-examples"&gt;Classification criterion examples&lt;/h2&gt;
&lt;h3 id="classnllcriterion"&gt;ClassNLLCriterion&lt;/h3&gt;
&lt;p&gt;negative log likelihood criterion  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/torch/nn/blob/master/doc/criterion.md#nn.ClassNLLCriterion"&gt;https://github.com/torch/nn/blob/master/doc/criterion.md#nn.ClassNLLCriterion&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;crt = nn.ClassNLLCriterion([weights])&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;optional argument &lt;code&gt;weights&lt;/code&gt; is to assign class weights (1D tensor), which is useful for unbalanced dataset.   &lt;/p&gt;
&lt;p&gt;For NLL criterion, the &lt;code&gt;input&lt;/code&gt; given through a &lt;code&gt;forward(input, target)&lt;/code&gt; is expected to be the &lt;em&gt;log-probabilities&lt;/em&gt; of each class. The &lt;code&gt;target&lt;/code&gt; is expected to be a class index (1 to n).   &lt;/p&gt;
&lt;p&gt;The &lt;em&gt;probabilities&lt;/em&gt; of each class can be computed by applying softmax on &lt;em&gt;logits&lt;/em&gt;,  the log-proba is just to take the log of the probabilities. Can use directly &lt;a href="https://github.com/torch/nn/blob/master/doc/transfer.md#logsoftmax"&gt;logsoftmax&lt;/a&gt; layer to achieve this (ex. add &lt;code&gt;nn.LogSoftMax&lt;/code&gt; as last layer of a sequential container).   &lt;/p&gt;
&lt;p&gt;If the input &lt;code&gt;x&lt;/code&gt; is log-proba of each class, the loss is just:   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;loss = forward(x, target) = -x[target_class]&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="crossentropycriterion"&gt;CrossEntropyCriterion&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/torch/nn/blob/master/doc/criterion.md#nn.CrossEntropyCriterion"&gt;https://github.com/torch/nn/blob/master/doc/criterion.md#nn.CrossEntropyCriterion&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;This combines a logsoftmax and a NLLcriterion, so the &lt;code&gt;input&lt;/code&gt; is expected to be &lt;em&gt;logits&lt;/em&gt; (scores)  &lt;/p&gt;
&lt;h3 id="margincriterion"&gt;MarginCriterion&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/torch/nn/blob/master/doc/criterion.md#margincriterion"&gt;https://github.com/torch/nn/blob/master/doc/criterion.md#margincriterion&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;computes hinge loss of binary classification problem.   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;input&lt;/code&gt; x is expected to be svm scores, &lt;code&gt;target&lt;/code&gt; y is expected to be ±1 labels.   &lt;/p&gt;
&lt;h2 id="regression-criterion-examples_1"&gt;Regression criterion examples&lt;/h2&gt;
&lt;h3 id="msecriterion"&gt;MSECriterion&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/torch/nn/blob/master/doc/criterion.md#nn.MSECriterion"&gt;https://github.com/torch/nn/blob/master/doc/criterion.md#nn.MSECriterion&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;criterion = nn.MSECriterion()&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;the loss is just MSE, input and target both have n elements:   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;loss = forward(x,y) = sum[ (xi-yi)^2 ] / n&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="abscriterion"&gt;AbsCriterion&lt;/h3&gt;
&lt;p&gt;L1 distance between x and y.   &lt;/p&gt;
&lt;h3 id="distkldivcriterion"&gt;DistKLDivCriterion&lt;/h3&gt;
&lt;p&gt;KL divergence for class probabilities   &lt;/p&gt;
&lt;h2 id="a-complete-example_1"&gt;A Complete Example&lt;/h2&gt;
&lt;h3 id="updating-function"&gt;updating function&lt;/h3&gt;
&lt;p&gt;First write a function for  grad-desc updating for a &lt;code&gt;model&lt;/code&gt;, input &lt;em&gt;to the model&lt;/em&gt; is &lt;code&gt;x&lt;/code&gt;, truth label is &lt;code&gt;y&lt;/code&gt;.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gradientUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;criterion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;learningRate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;-- assumes pred is what criterion expects as input  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;criterion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;zeroGradParameters&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;grad_cri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;criterion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grad_cri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;updateParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;learningRate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kr"&gt;end&lt;/span&gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function implements an update step, given a training sample (&lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt;):  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the model computes its output by &lt;code&gt;model:forward(x)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;criterion takes model's output, and computes loss by&lt;code&gt;criterion:forward(pred, y)&lt;/code&gt;, &lt;em&gt;note&lt;/em&gt;: the output of model shall be what criterion expects, e.g. pred=log-class-proba for NLL criterion.   &lt;/li&gt;
&lt;li&gt;criterion gives the gradient of loss function wrt the model output by &lt;code&gt;cri:backward(pred, y)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;model computes the gradient of its parameters using the gradient from criterion by &lt;code&gt;model:backward(x, grad_cri)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;the model do a gradient descent step to modify its parameters by &lt;code&gt;model:updateParameters(learningRate)&lt;/code&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;This is the function that we should pass to an optimizer.&lt;/em&gt; &lt;/p&gt;
&lt;h3 id="model-criterion-and-data"&gt;model, criterion and data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;the model is just a linear layer (5 inputs, 1 output ), output = Ax+b  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;lua
        model = nn.Sequential()  
        model:add(nn.Linear(5,1))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the criterion is just hinge loss:   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;criterion = nn.MarginCriterion(1)&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For the data, just use 2 datapoints:   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;lua
    x1 = torch.rand(5)  
    y1 = torch.Tensor({1})  
    x2 = torch.rand(5)  
    y2 = torch.Tensor({-1})&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="training"&gt;training&lt;/h3&gt;
&lt;p&gt;To train the model, we run the update funcion on the data points 1000 times (&lt;em&gt;epochs&lt;/em&gt;):   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;lua
    for i = 1,1000 do  
        gradientUpdate(model, x1, y1, criterion, 0.01)  
        gradientUpdate(model, x1, y1, criterion, 0.01)  
    end&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="evaluating"&gt;evaluating&lt;/h3&gt;
&lt;p&gt;to see the prediciton, just use &lt;code&gt;model:forward(x)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;lua
    print('prediction for x1='..model:forward(x1)[1]..' expected value='..y1[1])  
    print('prediction for x2='..model:forward(x2)[1]..' expected value='..y2[1])&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;to see loss, use &lt;code&gt;criterion:forward(model_out, y)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;lua
    print('loss after training for x1 = ' .. criterion:forward(model:forward(x1), y1))  
    print('loss after training for x2 = ' .. criterion:forward(model:forward(x2), y2))&lt;/code&gt;&lt;/p&gt;</summary><category term="torch"></category></entry><entry><title>[learning torch] 3. Container (models)</title><link href="https://x-wei.github.io/learn-torch-3-container.html" rel="alternate"></link><published>2016-10-07T20:20:00+02:00</published><updated>2016-10-07T20:20:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-10-07:learn-torch-3-container.html</id><summary type="html">&lt;p&gt;doc: &lt;a href="https://github.com/torch/nn/blob/master/doc/containers.md"&gt;https://github.com/torch/nn/blob/master/doc/containers.md&lt;/a&gt; &lt;br/&gt;
ref: &lt;a href="http://rnduja.github.io/2015/10/04/deep_learning_with_torch_step_2_nn_containers/"&gt;http://rnduja.github.io/2015/10/04/deep_learning_with_torch_step_2_nn_containers/&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Container, similarly to Module, is the abstract class defining the base methods inherited from concrete containers. &lt;em&gt;Container contains modules (layers)&lt;/em&gt;.  &lt;/p&gt;
&lt;h2 id="container-class"&gt;Container class&lt;/h2&gt;
&lt;p&gt;important methods:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add(module)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;get(index)&lt;/code&gt;: get module at the index &lt;/li&gt;
&lt;li&gt;&lt;code&gt;size()&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;important subclasses: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Sequential&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Parallel&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Concat&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sequential"&gt;Sequential&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Sequential&lt;/code&gt;&lt;strong&gt; is just a stack of layers&lt;/strong&gt;, add layer by &lt;code&gt;model:add()&lt;/code&gt;. Here is a simple 2-layer MLP example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;th&amp;gt;  mlp = nn.Sequential() &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                                                                      [0.0000s]  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;th&amp;gt; mlp:add( nn.Linear(10, 25) ) -- 10 input, 25 hidden units &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                                                                      [0.0001s]  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;th&amp;gt; mlp:add( nn.Tanh() ) -- some hyperbolic tangent transfer function &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                                                                      [0.0001s]  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;th&amp;gt; mlp:add( nn.Linear(25, 1) ) -- 1 output &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                                                                      [0.0001s]  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;th&amp;gt; mlp:forward(torch.range(1,10)) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt; 1.2697 &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[torch.DoubleTensor of size 1]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="parallel"&gt;Parallel&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;module = Parallel(inputDimension,outputDimension)&lt;/code&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Creates a container module that applies its ith child module to the ith slice of the input Tensor&lt;/em&gt; by using &lt;code&gt;select&lt;/code&gt; on dimension &lt;code&gt;inputDimension&lt;/code&gt;. It concatenates the results of its contained modules together along dimension &lt;code&gt;outputDimension&lt;/code&gt;.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So if the input for parallel model is &lt;code&gt;x&lt;/code&gt;,  the input for its ith child module should be: &lt;code&gt;x.select(inputDimension, i)&lt;/code&gt;,&lt;br/&gt;
and the parallel model should be: &lt;code&gt;torch.cat( out1, out2, ouputDimension)&lt;/code&gt; (concat along this dimension).  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mlp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parallel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;-- select(split) on dim2 for input, concat along dim1 for output &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0000&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mlp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;-- input=1st slice of x (x:select()), output1: size=3 &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mlp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;-- output2: size=2 &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3242&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3911&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7433&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2725&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3947&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3332&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1618&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6743&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6655&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0901&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0419&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7845&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8508&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4670&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3842&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4107&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5238&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3616&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4136&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1327&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0002&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mlp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0456&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5682&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3488&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3786&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6320&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="concat"&gt;Concat&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;module = nn.Concat(dim)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Concat concatenates the output of its "parallel" children modules along &lt;code&gt;dim&lt;/code&gt;: these child modules &lt;em&gt;take the same inputs&lt;/em&gt;, and their output is concatenated. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;mlp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Concat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;ouput&lt;/span&gt; &lt;span class="nt"&gt;concat&lt;/span&gt; &lt;span class="nt"&gt;along&lt;/span&gt; &lt;span class="nt"&gt;dim&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;mlp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nt"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Linear&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;mlp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nt"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Linear&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0000&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;randn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;mlp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;forward&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;7497&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1909&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3280&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3981&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0207&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;torch.DoubleTensor&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="torch"></category></entry><entry><title>[learning torch] 2. Module (layers)</title><link href="https://x-wei.github.io/learn-torch-2-module.html" rel="alternate"></link><published>2016-10-07T19:40:00+02:00</published><updated>2016-10-07T19:40:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-10-07:learn-torch-2-module.html</id><summary type="html">&lt;p&gt;&lt;code&gt;Module&lt;/code&gt; is an abstract class which defines fundamental methods necessary for a &lt;em&gt;Layer&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;doc: &lt;a href="https://github.com/torch/nn/blob/master/doc/module.md"&gt;https://github.com/torch/nn/blob/master/doc/module.md&lt;/a&gt; &lt;/p&gt;
&lt;h2 id="module-class"&gt;Module class&lt;/h2&gt;
&lt;p&gt;variables in &lt;code&gt;Module&lt;/code&gt;:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;output&lt;/code&gt;: Tensor, the ouput computed from last call of &lt;code&gt;forward(input)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;gradInput&lt;/code&gt;: Tensor, gradient wrt input of module, computed from last call of &lt;code&gt;updateGradInput(input, gradOutput)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;important methods in &lt;code&gt;Module&lt;/code&gt;:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;forward(input)&lt;/code&gt;: return corresponding output of layer &lt;/li&gt;
&lt;li&gt;&lt;code&gt;backward(input, gradOutput)&lt;/code&gt;: return gradInput wrt the given input &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="linear"&gt;Linear&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/torch/nn/blob/master/doc/simple.md#nn.Linear"&gt;https://github.com/torch/nn/blob/master/doc/simple.md#nn.Linear&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Linear&lt;/code&gt; extends &lt;code&gt;Module&lt;/code&gt;, it's just linear transformation of input: &lt;code&gt;y=Ax+b&lt;/code&gt; (parameters/variables: &lt;code&gt;weight&lt;/code&gt;, &lt;code&gt;bias&lt;/code&gt;) &lt;/p&gt;
&lt;p&gt;&lt;code&gt;gradWeight&lt;/code&gt;, &lt;code&gt;gradBias&lt;/code&gt; are respectively the gradient of each parameter.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Linear&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt; &lt;span class="nt"&gt;output&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;ln&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="nt"&gt;ln&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;bias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;zero&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0000&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Tensor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;1,2,3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0000&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;ln&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;forward&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0000&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;gradinput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;ln&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;backward&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;y&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;gradinput&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="nt"&gt;12&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="nt"&gt;12&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="nt"&gt;12&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;torch.DoubleTensor&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;ln&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gradInput&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="nt"&gt;12&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="nt"&gt;12&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="nt"&gt;12&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;torch.DoubleTensor&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;ln&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gradWeight&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1132e&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;171&lt;/span&gt;  &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;2000e&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;01&lt;/span&gt; &lt;span class="nt"&gt;7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3587e&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;223&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;7112e&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;243&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3276e&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;251&lt;/span&gt; &lt;span class="nt"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0404e&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;180&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;torch.DoubleTensor&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;x3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;ln&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gradBias&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="nt"&gt;6&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="nt"&gt;6&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;torch.DoubleTensor&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="identity"&gt;Identity&lt;/h2&gt;
&lt;p&gt;output reproduces input, this layer can be used to model the input layer of a neural network.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0000&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0000&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gradInput&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="other-modules"&gt;Other modules&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/torch/nn/blob/master/doc/simple.md"&gt;https://github.com/torch/nn/blob/master/doc/simple.md&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;some examples: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Add&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mul&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMul&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reshape&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;</summary><category term="torch"></category></entry><entry><title>[learning torch] 1. Tensor</title><link href="https://x-wei.github.io/learn-torch-1-tensor.html" rel="alternate"></link><published>2016-10-07T15:30:00+02:00</published><updated>2016-10-07T15:30:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-10-07:learn-torch-1-tensor.html</id><summary type="html">&lt;p&gt;A &lt;code&gt;Tensor&lt;/code&gt; is the fondamental data type in torch, (similar to numpy for tensorflow), it's a potentially multi-dimensional matrix. &lt;/p&gt;
&lt;p&gt;See doc: &lt;a href="https://github.com/torch/torch7/blob/master/doc/tensor.md"&gt;https://github.com/torch/torch7/blob/master/doc/tensor.md&lt;/a&gt; &lt;/p&gt;
&lt;h2 id="basic-ops"&gt;basic ops&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Indicate shape in constructor: &lt;/p&gt;
&lt;p&gt;th&amp;gt; x = torch.Tensor(3,4) 
                                                                      [0.0000s] 
th&amp;gt; x 
 3.7366e+193  9.4775e+170  3.3018e+180   4.8950e-85 
 1.3808e+267  7.6859e+261   3.7512e-81  1.4692e+195 
 9.7016e+189  6.9641e+252  9.1815e+170  4.5239e+217 
[torch.DoubleTensor of size 3x4] &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By default the elements of a newly allocated memory are &lt;strong&gt;not initialized&lt;/strong&gt;, might contain arbitrary numbers !  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x:dim()&lt;/code&gt;: return nb of dimensions &lt;/li&gt;
&lt;li&gt;&lt;code&gt;x:nElement()&lt;/code&gt;: return nb of elements ("size") &lt;/li&gt;
&lt;li&gt;&lt;code&gt;x:size()&lt;/code&gt;: return "shape", shortcut is: &lt;code&gt;#x&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;x:resize(sz1, sz2, ...)&lt;/code&gt;: will not throw exception when total size is inconsistent! &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mi"&gt;3&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mi"&gt;4&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LongStorage&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mi"&gt;3&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mi"&gt;4&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LongStorage&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="mi"&gt;2&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0000&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mf"&gt;1.7479e+270&lt;/span&gt;  &lt;span class="mf"&gt;7.0981e+194&lt;/span&gt;  &lt;span class="mf"&gt;7.4861e-114&lt;/span&gt;  &lt;span class="mf"&gt;1.7479e+270&lt;/span&gt;  &lt;span class="mf"&gt;8.2791e-114&lt;/span&gt;  &lt;span class="mf"&gt;3.6822e+180&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mf"&gt;4.8548e-27&lt;/span&gt;   &lt;span class="mf"&gt;6.9204e-72&lt;/span&gt;  &lt;span class="mf"&gt;8.8289e+199&lt;/span&gt;  &lt;span class="mf"&gt;1.1567e+247&lt;/span&gt;   &lt;span class="mf"&gt;4.8548e-27&lt;/span&gt;  &lt;span class="mf"&gt;7.7700e-109&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;x6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0002&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;Columns&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mf"&gt;1.7479e+270&lt;/span&gt;  &lt;span class="mf"&gt;7.0981e+194&lt;/span&gt;  &lt;span class="mf"&gt;7.4861e-114&lt;/span&gt;  &lt;span class="mf"&gt;1.7479e+270&lt;/span&gt;  &lt;span class="mf"&gt;8.2791e-114&lt;/span&gt;  &lt;span class="mf"&gt;3.6822e+180&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mf"&gt;6.9204e-72&lt;/span&gt;  &lt;span class="mf"&gt;8.8289e+199&lt;/span&gt;  &lt;span class="mf"&gt;1.1567e+247&lt;/span&gt;   &lt;span class="mf"&gt;4.8548e-27&lt;/span&gt;  &lt;span class="mf"&gt;7.7700e-109&lt;/span&gt;   &lt;span class="mf"&gt;6.9006e-72&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;Columns&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mf"&gt;4.8548e-27&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mf"&gt;1.0240e-259&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;x7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mf"&gt;1.7479e+270&lt;/span&gt;  &lt;span class="mf"&gt;7.0981e+194&lt;/span&gt;  &lt;span class="mf"&gt;7.4861e-114&lt;/span&gt;  &lt;span class="mf"&gt;1.7479e+270&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mf"&gt;8.2791e-114&lt;/span&gt;  &lt;span class="mf"&gt;3.6822e+180&lt;/span&gt;   &lt;span class="mf"&gt;4.8548e-27&lt;/span&gt;   &lt;span class="mf"&gt;6.9204e-72&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;x4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;fill with constant value: &lt;/p&gt;
&lt;p&gt;th&amp;gt; x:fill(1) 
 1  1  1  1 
 1  1  1  1 
 1  1  1  1 
[torch.DoubleTensor of size 3x4] &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;other constructors: &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;-- note: y is just a reference of x!!! &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tensor&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0000&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;x3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="storage"&gt;Storage&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;One could say that a &lt;code&gt;Tensor&lt;/code&gt; is a particular way of viewing a &lt;code&gt;Storage&lt;/code&gt;: a &lt;code&gt;Storage&lt;/code&gt; only represents a chunk of memory, while the &lt;code&gt;Tensor&lt;/code&gt; interprets this chunk of memory as having dimensions.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;-- 'flatten' version of x &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0000&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="kr"&gt;end&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0000&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;9&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;12&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;short for range: torch.range(1,5) &lt;/p&gt;
&lt;h2 id="slicing"&gt;Slicing&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/torch/torch7/blob/master/doc/tensor.md#extracting-sub-tensors"&gt;https://github.com/torch/torch7/blob/master/doc/tensor.md#extracting-sub-tensors&lt;/a&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slicing using &lt;code&gt;sub()&lt;/code&gt; and &lt;code&gt;select()&lt;/code&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;9&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;12&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;-- x[2:3, 2:4] slicing &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;12&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;x3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;-- select(dim, index), dim=1 for rows, =2 for cols &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;2&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;6&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mi"&gt;10&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Or use slicing/indexing &lt;strong&gt;shortcut&lt;/strong&gt;: &lt;code&gt;[{ {dim1start, dim1end},...}] [dim1, dim2,...]&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;9&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;12&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mi"&gt;13&lt;/span&gt;  &lt;span class="mi"&gt;14&lt;/span&gt;  &lt;span class="mi"&gt;15&lt;/span&gt;  &lt;span class="mi"&gt;16&lt;/span&gt;  &lt;span class="mi"&gt;17&lt;/span&gt;  &lt;span class="mi"&gt;18&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mi"&gt;19&lt;/span&gt;  &lt;span class="mi"&gt;20&lt;/span&gt;  &lt;span class="mi"&gt;21&lt;/span&gt;  &lt;span class="mi"&gt;22&lt;/span&gt;  &lt;span class="mi"&gt;23&lt;/span&gt;  &lt;span class="mi"&gt;24&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mi"&gt;25&lt;/span&gt;  &lt;span class="mi"&gt;26&lt;/span&gt;  &lt;span class="mi"&gt;27&lt;/span&gt;  &lt;span class="mi"&gt;28&lt;/span&gt;  &lt;span class="mi"&gt;29&lt;/span&gt;  &lt;span class="mi"&gt;30&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;x6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0002&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0000&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0000&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}}]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;8&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;9&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mi"&gt;10&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mi"&gt;11&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;3&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;9&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mi"&gt;15&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mi"&gt;21&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mi"&gt;27&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="all-are-references"&gt;All are references&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;All tensor operations in this class do not make any memory copy. &lt;strong&gt;All these methods transform the existing tensor, or return a new tensor referencing the same storage&lt;/strong&gt;.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0000&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;9&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;12&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;-- x will be effected &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;9&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;12&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;9&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;12&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If don't want to modify original tensor, use &lt;code&gt;clone()&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0000&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;12&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="mi"&gt;9&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;12&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="matrix-ops"&gt;Matrix ops&lt;/h2&gt;
&lt;p&gt;Some matrix operations &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;random matrix: &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manualSeed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0000&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mf"&gt;0.4170&lt;/span&gt;  &lt;span class="mf"&gt;0.9972&lt;/span&gt;  &lt;span class="mf"&gt;0.7203&lt;/span&gt;  &lt;span class="mf"&gt;0.9326&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mf"&gt;0.0001&lt;/span&gt;  &lt;span class="mf"&gt;0.1281&lt;/span&gt;  &lt;span class="mf"&gt;0.3023&lt;/span&gt;  &lt;span class="mf"&gt;0.9990&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mf"&gt;0.1468&lt;/span&gt;  &lt;span class="mf"&gt;0.2361&lt;/span&gt;  &lt;span class="mf"&gt;0.0923&lt;/span&gt;  &lt;span class="mf"&gt;0.3966&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;transpose  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;At&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                                                                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0000&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;At&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mf"&gt;0.4170&lt;/span&gt;  &lt;span class="mf"&gt;0.0001&lt;/span&gt;  &lt;span class="mf"&gt;0.1468&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mf"&gt;0.9972&lt;/span&gt;  &lt;span class="mf"&gt;0.1281&lt;/span&gt;  &lt;span class="mf"&gt;0.2361&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mf"&gt;0.7203&lt;/span&gt;  &lt;span class="mf"&gt;0.3023&lt;/span&gt;  &lt;span class="mf"&gt;0.0923&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mf"&gt;0.9326&lt;/span&gt;  &lt;span class="mf"&gt;0.9990&lt;/span&gt;  &lt;span class="mf"&gt;0.3966&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;x3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;matrix mul is just &lt;code&gt;*&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;At&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mf"&gt;2.5568&lt;/span&gt;  &lt;span class="mf"&gt;1.2773&lt;/span&gt;  &lt;span class="mf"&gt;0.7330&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mf"&gt;1.2773&lt;/span&gt;  &lt;span class="mf"&gt;1.1059&lt;/span&gt;  &lt;span class="mf"&gt;0.4544&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="mf"&gt;0.7330&lt;/span&gt;  &lt;span class="mf"&gt;0.4544&lt;/span&gt;  &lt;span class="mf"&gt;0.2431&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;inner product: &lt;code&gt;dot()&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;At&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="mf"&gt;2.5568154905493&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;inverse: &lt;code&gt;torch.inverse(sq_mat)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="more-operations"&gt;More operations&lt;/h2&gt;
&lt;p&gt;can be found at:  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/torch/torch7/blob/master/doc/maths.md"&gt;https://github.com/torch/torch7/blob/master/doc/maths.md&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;example:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;torch.ones()/eye()/zeros()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;torch.cat()&lt;/code&gt;: concat tensors    &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoubleTensor&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;torch.conv2()&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;</summary><category term="torch"></category></entry><entry><title>[OCaml MOOC] week0: intro and overview</title><link href="https://x-wei.github.io/ocamlMOOC_wk0_intro.html" rel="alternate"></link><published>2016-10-04T00:00:00+02:00</published><updated>2016-10-04T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-10-04:ocamlMOOC_wk0_intro.html</id><summary type="html">&lt;h1 id="intro"&gt;Intro&lt;/h1&gt;
&lt;h3 id="ml-lang-family"&gt;ML lang family&lt;/h3&gt;
&lt;p&gt;statically strongly typed languages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fisrt-class functions&lt;/li&gt;
&lt;li&gt;type inference &lt;/li&gt;
&lt;li&gt;pattern matching&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="highlights-of-ocaml"&gt;highlights of ocaml&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;safty: static typing, pattern matching&lt;/li&gt;
&lt;li&gt;efficiency: high performance&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;expressiveness: functional+type inference+polymorphism&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;package manager: opam&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;debugger&lt;/li&gt;
&lt;li&gt;profiler&lt;/li&gt;
&lt;li&gt;REPL: "toplevel"&lt;/li&gt;
&lt;li&gt;bytecode compiler: ccamlc&lt;/li&gt;
&lt;li&gt;native compiler: ocamlopt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;programming environment &lt;strong&gt;fully online:&lt;/strong&gt;
&lt;a href="https://try.ocamlpro.com/fun-demo/tryocaml_index.html"&gt;https://try.ocamlpro.com/fun-demo/tryocaml_index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;note: the local REPL &lt;code&gt;ocaml&lt;/code&gt; (toplevel)  is not very good, either use &lt;code&gt;ledit ocaml&lt;/code&gt;, or use &lt;code&gt;utop&lt;/code&gt;. &lt;/p&gt;
&lt;h1 id="quick-tour-of-the-language_1"&gt;Quick tour of the language&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;list&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt; is empty list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a::l&lt;/code&gt; element &lt;code&gt;a&lt;/code&gt; in head and &lt;code&gt;l&lt;/code&gt; as remaining tail.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[1;2;3;4]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;function&lt;/strong&gt;: sum of list
write with pattern matching: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;sumlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sumlist&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This func has auto-inferred as of type: &lt;code&gt;int list -&amp;gt;int&lt;/code&gt;. all types are &lt;em&gt;computed and enforced&lt;/em&gt; at compile time. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;polymorphism and higher order&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;note: polymorphism ~= generic in java/template in cpp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;turn the &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; in previous function into parameters, call this function &lt;code&gt;fold&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;fold&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fold&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;infered the most general type: &lt;code&gt;val fold : ('a -&amp;gt; 'b -&amp;gt; 'b) -&amp;gt; 'b -&amp;gt; 'a list -&amp;gt; 'b = &amp;lt;fun&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pattern matching&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;write a function to remove all consecutive duplicates from a list: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;destutter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;function&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;destutter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;destutter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/ocamlMOOC_wk0_intro/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ compiler tell us we forgot to add the case when only one element is in list !! And this case: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;destutter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;function&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="bp"&gt;[]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;destutter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;destutter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;);;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="OCaml"></category></entry><entry><title>[Scala MOOC II] Lec1: For Expressions and Monads</title><link href="https://x-wei.github.io/progfun2_lec1_forexpr.html" rel="alternate"></link><published>2016-08-12T00:00:00+02:00</published><updated>2016-08-12T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-08-12:progfun2_lec1_forexpr.html</id><summary type="html">&lt;h1 id="recap-functions-and-pattern-matching"&gt;Recap: Functions and Pattern Matching&lt;/h1&gt;
&lt;h3 id="case-classes"&gt;case classes&lt;/h3&gt;
&lt;p&gt;ex: json
json objects can be seq, num, str, bool,...&lt;/p&gt;
&lt;p&gt;⇒ represented as abstract class and case classes. &lt;/p&gt;
&lt;h3 id="pattern-matching"&gt;pattern matching&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec1_forexpr/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;→ question: what is the type of the &lt;code&gt;{case(key, value)=&amp;gt;"..."}&lt;/code&gt; clause? &lt;/p&gt;
&lt;p&gt;it is &lt;code&gt;(JBinding =&amp;gt; String)&lt;/code&gt; type, which is a shorthand for &lt;code&gt;Function1[JBinding, String]&lt;/code&gt;. &lt;/p&gt;
&lt;h3 id="function1-trait"&gt;Function1 Trait&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec1_forexpr/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;h3 id="subclass-a-function-type"&gt;subclass a function type&lt;/h3&gt;
&lt;p&gt;function types can also be extended ! &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec1_forexpr/pasted_image005.png"/&gt;&lt;/p&gt;
&lt;p&gt;element accessing can be written as function calls because &lt;code&gt;Seq&lt;/code&gt;s are functions!&lt;/p&gt;
&lt;h3 id="partial-match"&gt;Partial Match&lt;/h3&gt;
&lt;p&gt;if there is no match → throw MatchError&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;val f: String=&amp;gt;String  = {case "ping" =&amp;gt; "pong"}&lt;/span&gt;
&lt;span class="code-line"&gt;f("ping") // no pb&lt;/span&gt;
&lt;span class="code-line"&gt;f("abc") // MatchError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⇒ define f as partial function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;val f: PartialFunction[String,String]  = {case "ping" =&amp;gt; "pong"}&lt;/span&gt;
&lt;span class="code-line"&gt;f.isDefinedAt("ping")&lt;/span&gt;
&lt;span class="code-line"&gt;f.isDefinedAt("abc")&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;isDefinedAt&lt;/code&gt; is a method for the &lt;code&gt;PartialFunction&lt;/code&gt; class. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec1_forexpr/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;p&gt;The f definition is translated to: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec1_forexpr/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;p&gt;But the &lt;code&gt;PartialFunction&lt;/code&gt; will only apply for level 1: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec1_forexpr/pasted_image008.png"/&gt;&lt;/p&gt;
&lt;h1 id="recap-collections_1"&gt;Recap: Collections&lt;/h1&gt;
&lt;p&gt;scala collections hirarchy: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec1_forexpr/pasted_image009.png"/&gt;&lt;/p&gt;
&lt;p&gt;collections &lt;em&gt;share&lt;/em&gt; some general methods (&lt;strong&gt;core methods&lt;/strong&gt;): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;flatMap&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;foldLeft/foldRight&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(idealized) implementation of &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt; on Lists: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec1_forexpr/pasted_image011.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec1_forexpr/pasted_image013.png"/&gt;&lt;/p&gt;
&lt;h3 id="for-expressions"&gt;For expressions&lt;/h3&gt;
&lt;p&gt;for-expr can &lt;em&gt;simplify combinations of core methods&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec1_forexpr/pasted_image014.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;the&lt;/strong&gt; &lt;strong&gt;lhs of a generator can also be a pattern!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec1_forexpr/pasted_image015.png"/&gt;&lt;/p&gt;
&lt;p&gt;pat &amp;lt;- expr &lt;/p&gt;
&lt;p&gt;is translated to : &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="n"&gt;withFilter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;pat&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;pat&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="11-queries-with-for_1"&gt;1.1 - Queries with For&lt;/h1&gt;
&lt;p&gt;for notation is equivalent to common ops on databases(ex. sql). &lt;/p&gt;
&lt;p&gt;ex. books in library&lt;/p&gt;
&lt;p&gt;&lt;code&gt;case class Book(title: String, authors: List[String])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;query1: books with author name is "Bird"&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;b.authors&lt;/span&gt; &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;startsWith&lt;/span&gt; &lt;span class="s"&gt;"Bird,"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;b.title&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;query2: books with "Program" in the title: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt; &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b.title&lt;/span&gt; &lt;span class="n"&gt;indexOf&lt;/span&gt; &lt;span class="s"&gt;"Program"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;b.title&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;query3: names of authors who wrote &amp;gt;=2 books&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;b2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;b1.authors&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;a2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;b2.authors&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;→ pb: the authors will be doubled → b1,b2 and b2,b1
⇒ change line 3 to &lt;code&gt;b1.title &amp;lt; b2.title&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;→ still pb: print 3 times if authors write 3 books... 
⇒ 
sol1. use &lt;code&gt;distinct&lt;/code&gt; function 
sol2. decalre books as Set instead of List. &lt;/p&gt;
&lt;h1 id="12-translation-of-for"&gt;1.2 - Translation of For&lt;/h1&gt;
&lt;p&gt;for expressions → higer order functions&lt;/p&gt;
&lt;p&gt;map, flatMap, filter can all be implemented with for expression:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec1_forexpr/pasted_image016.png"/&gt;&lt;/p&gt;
&lt;p&gt;In reality: scala translates for expr to map/flatMap/filter. &lt;/p&gt;
&lt;h3 id="implemention-of-for-expr-3-rules"&gt;implemention of for-expr: 3 rules&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;rule 1: in for(..) only a simple generator &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;for(x &amp;lt;- l1) yield e2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;is translated to: &lt;code&gt;l1.map(x =&amp;gt; e2)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rule2: in for(..), followed by the generator there is a filter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;for(x &amp;lt;- l1 if f; s) yield e2 //s is seq of other generators and filters&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;is translated to: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;for( x &amp;lt;- l1.withFilter(x=&amp;gt;f) ) yield e2&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rule3: in for(..), starts with 2 generators → flatMap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;for( x&amp;lt;-l1; y&amp;lt;-l2; s) yield e3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;is translated to: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;l1.flatMap( x =&amp;gt; for(y&amp;lt;-l2; s) yield e3 )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;example: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;b.authors&lt;/span&gt; &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;startsWith&lt;/span&gt; &lt;span class="s"&gt;"Bird"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;b.title&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;translated to: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt; &lt;span class="n"&gt;flatMap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;startsWith&lt;/span&gt; &lt;span class="ss"&gt;"Bird"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NB: for expr is not restricted to collections, it supports any types with &lt;code&gt;map/flatMap/withFilter&lt;/code&gt; method. ⇒ use for expr for your own types as well. &lt;/p&gt;
&lt;h1 id="13-functional-random-generators_1"&gt;1.3 - Functional Random Generators&lt;/h1&gt;
&lt;p&gt;goal: use for expr on rand generators. &lt;/p&gt;
&lt;p&gt;for expr support any type with map/flatMap/filter ⇒ ex. rand value generator. &lt;/p&gt;
&lt;p&gt;generate rand value of type T: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;trait Generator[+T] { &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;def generate: T&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;first implement Generator[Int], then use this to implement booleans, pairs, lists, sets, trees,......&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;rand&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextInt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;booleans&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Boolean{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;    def generate = integers.generate &amp;gt; 0&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;val pairs = new Generator[(Int, Int)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;→ can we avoid the &lt;code&gt;new Generator[...]&lt;/code&gt; ? &lt;/p&gt;
&lt;p&gt;&lt;em&gt;ideally we want to write booleans as pairs as:&lt;/em&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;booleans&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pairs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T,U&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;u&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the for expr will be translated to map/flatMap/filter... &lt;/p&gt;
&lt;p&gt;⇒ define map and flatMap on the Generator trait so that it supports for expr!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;+T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;syntax&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;here&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;flatMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ex. the booleans expression: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;val booleans = for (x&amp;lt;-integers) yield x&amp;gt;0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;is translated to: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;val booleans = integers map (x=&amp;gt;x&amp;gt;0)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;which is then expands to: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;booleans&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;after reduction, the expression is: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;val booleans = new Generator[Boolean{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def generate = integers.generate &amp;gt; 0&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which is the initial implementation... &lt;/p&gt;
&lt;h3 id="other-base-generators"&gt;other base Generators&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec1_forexpr/pasted_image017.png"/&gt;&lt;/p&gt;
&lt;p&gt;(The &lt;code&gt;T*&lt;/code&gt; syntax is variable parameter)&lt;/p&gt;
&lt;h3 id="rand-list-generator"&gt;rand List Generator&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Generator[List[Int]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;isEmpty&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;booleans&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;emptyLists&lt;/span&gt; &lt;span class="n"&gt;else&lt;/span&gt; &lt;span class="n"&gt;nonEmptyLists&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;emptyLists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;single&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;nonEmptyLists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;recursive&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;`lists`&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="rand-binary-tree-generator"&gt;rand (binary) Tree Generator&lt;/h3&gt;
&lt;p&gt;two types of tree nodes: leaf or inner node&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;trees&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tree&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;isLeaf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;booleans&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isLeaf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;leafs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inners&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;leafs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Leaf&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Leaf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;inners&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Inner&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;trees&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;trees&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="application-random-testing_1"&gt;Application: random testing&lt;/h2&gt;
&lt;p&gt;test: check &lt;em&gt;postconditions&lt;/em&gt; (expected results)&lt;/p&gt;
&lt;p&gt;→ generate random test inputs&lt;/p&gt;
&lt;p&gt;a generic wrapper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;def randTest[T](g: Generator[T], numTimes: Int=100)(testfcn: T=&amp;gt;Boolean): Unit = {&lt;/span&gt;
&lt;span class="code-line"&gt;    for( i &lt;span class="nt"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;until&lt;/span&gt; &lt;span class="err"&gt;numTimes){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="err"&gt;val&lt;/span&gt; &lt;span class="na"&gt;value:T =&lt;/span&gt; &lt;span class="s"&gt;g.generate&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="err"&gt;assert(testfcn(value),&lt;/span&gt; &lt;span class="err"&gt;"test&lt;/span&gt; &lt;span class="err"&gt;failed&lt;/span&gt; &lt;span class="err"&gt;for&lt;/span&gt; &lt;span class="err"&gt;"+value)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;println("passed"&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="err"&gt;numTime&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="err"&gt;"tests")&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="scalacheck"&gt;ScalaCheck&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;instead of writing tests, write properties that are assumed to hold.&lt;/em&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;forAll&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="14-monads_2"&gt;1.4 - Monads&lt;/h1&gt;
&lt;p&gt;from last section: not only collections, but also any type with map and flatmap can use for expr ⇒ monads. &lt;/p&gt;
&lt;p&gt;&lt;def&gt;. Monads is a type M[T] with 2 operations: &lt;code&gt;flatMap&lt;/code&gt; ("bind") and &lt;code&gt;unit&lt;/code&gt;, and satisfy some laws.&lt;/def&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;examples: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;List&lt;/code&gt; is a monad, &lt;code&gt;unit(x) = List(x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Set&lt;/code&gt;, with &lt;code&gt;unit(x) = Set(x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Option&lt;/code&gt;, with &lt;code&gt;unit(x) = Some(x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Generator&lt;/code&gt;, with &lt;code&gt;unit(x) = single(x)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; can be defined as a combination of &lt;code&gt;flatMap&lt;/code&gt; and &lt;code&gt;unit&lt;/code&gt;: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;m map f == m flatMap (x =&amp;gt; unit( f(x)) )&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="monad-laws"&gt;Monad laws&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;associativity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;(m flatMap f) flatMap g == m flatMap ( x =&amp;gt; f(x) flatMap g )&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;↔ (x+y+z) = x+(y+z)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;left unit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;unit(x) flatMap f == f(x)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;right unit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;m flatMap unit == m&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="the-try-type_1"&gt;the Try type&lt;/h2&gt;
&lt;p&gt;We define a Try class, which is similar to Option class. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;abstraxt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Try&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;+T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Success&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Try&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Try&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Nothing&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;we can write &lt;code&gt;Try(expr)&lt;/code&gt; to give a computation a try, by implementing the &lt;code&gt;apply&lt;/code&gt; method of object Try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Try&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Try&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;otherwise&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cause&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;syntax&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NonFatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;if Try is a Monad ⇒ can be written in for expr: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec1_forexpr/pasted_image018.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ define map and flatMap on &lt;code&gt;Try&lt;/code&gt; type. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun2_lec1_forexpr/pasted_image019.png"/&gt;&lt;/p&gt;
&lt;p&gt;question: is Try a monad with &lt;code&gt;unit(x)=Try(x)&lt;/code&gt;?
⇒ no, left-unit fails: &lt;code&gt;Try(expr) flatMap f != f(expr)&lt;/code&gt;
(lhs never nonfatal exception, but rhs will raise)&lt;/p&gt;
&lt;p&gt;Try is not a monad, but it can still use for expr...&lt;/p&gt;
&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;for exprs are useful not only for collections: &lt;code&gt;Generator&lt;/code&gt;, &lt;code&gt;Option&lt;/code&gt;, &lt;code&gt;Try&lt;/code&gt;&lt;/p&gt;</summary><category term="scala"></category></entry><entry><title>[Scala MOOC I] Lec6: Collections</title><link href="https://x-wei.github.io/progfun1_lec6_collections.html" rel="alternate"></link><published>2016-07-30T00:00:00+02:00</published><updated>2016-07-30T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-07-30:progfun1_lec6_collections.html</id><summary type="html">&lt;h1 id="61-other-collections"&gt;6.1 - Other Collections&lt;/h1&gt;
&lt;p&gt;so far: only seen List. → more (&lt;strong&gt;immutable&lt;/strong&gt;) collections. &lt;/p&gt;
&lt;h3 id="vector"&gt;vector&lt;/h3&gt;
&lt;p&gt;List:  is linear -- access to head is faster than middle or end element. 
Vector: better rand access performance. &lt;/p&gt;
&lt;p&gt;represented as very shallow trees(32-split at each node)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec6_collections/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Vector&lt;/code&gt; support similar operations as List (head, tail,map, fold) , except concat &lt;code&gt;::&lt;/code&gt;, instead Vectors have &lt;code&gt;+:&lt;/code&gt; and &lt;code&gt;:+&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x +: xs&lt;/code&gt; create new vector with x in head&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs :+ x&lt;/code&gt; create new vector with x in tail&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;implementation of &lt;code&gt;:+&lt;/code&gt;: create copies&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec6_collections/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;h3 id="seq"&gt;Seq&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Seq&lt;/code&gt; is base class for &lt;code&gt;Vector&lt;/code&gt; and &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Seq&lt;/code&gt; itself is subclass of &lt;code&gt;Iterable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hierarchy of Iterables: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec6_collections/pasted_image005.png"/&gt;&lt;/p&gt;
&lt;h3 id="array-ans-string"&gt;Array ans String&lt;/h3&gt;
&lt;p&gt;Array and String support same op as Seq, can implicitly be converted to seq when needed. But they are NOT subclasses of Seq as they come from java. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;scala&amp;gt; val xs: Array[Int] = Array(1,2,3)&lt;/span&gt;
&lt;span class="code-line"&gt;xs: Array[Int] = Array(1, 2, 3)&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;scala&amp;gt; xs map (2*_)&lt;/span&gt;
&lt;span class="code-line"&gt;res3: Array[Int] = Array(2, 4, 6)&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;scala&amp;gt; val ys = "Hello"&lt;/span&gt;
&lt;span class="code-line"&gt;ys: String = Hello&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;scala&amp;gt; ys filter (_.isUpper)&lt;/span&gt;
&lt;span class="code-line"&gt;res4: String = H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="range"&gt;Range&lt;/h3&gt;
&lt;p&gt;represents a seq of evenly spaced integers.&lt;/p&gt;
&lt;p&gt;represented as an obj with 3 values: lower bound, upper bound, step value. &lt;/p&gt;
&lt;p&gt;3 op: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to&lt;/code&gt;: inclusive &lt;/li&gt;
&lt;li&gt;&lt;code&gt;until&lt;/code&gt;: exclusive&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;by&lt;/code&gt;: step value&lt;/p&gt;
&lt;p&gt;1 to 6       // 1 2 3 4 5 6
1 until 6    // 1 2 3 4 5
1 to 6 by 2  // 1 3 5
6 to 1 by -2 // 6 4 2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="more-ops-on-seq"&gt;More ops on Seq&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xs exists p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs forall p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xs zip ys&lt;/code&gt;: takes 2 seq, returns a single seq, each elem is a pair&lt;/p&gt;
&lt;p&gt;scala&amp;gt; List(1,2,3) zip Vector(2,3,4)
res7: List[(Int, Int)] = List((1,2), (2,3), (3,4))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xs.unzip&lt;/code&gt;: reverse zip, return 2 lists &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xs flatMap f&lt;/code&gt;: apply f to all elements, and &lt;strong&gt;concat the results&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;scala&amp;gt; "hello" flatMap (c =&amp;gt; List('.', c))
res9: String = .h.e.l.l.o&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;flatten&lt;/code&gt;: flatten a seq of seq into just one seq...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;xs flatMap f = (xs map f).flatten&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The result is concated, instead of being a list of list. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xs.sum&lt;/code&gt;/&lt;code&gt;xs.product&lt;/code&gt;: for numeric collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs.max&lt;/code&gt;/&lt;code&gt;xs.min&lt;/code&gt;: an ordering must exist&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="examples"&gt;Examples&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cartesen product: 1..M x 1..N:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;(1 to M) flatMap( x =&amp;gt; (1 to N) map (y =&amp;gt; (x,y)) )&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;scalar of 2 vectors&lt;/p&gt;
&lt;p&gt;def scalaProd(xs: Vector[Double], ys: Vector[Double]): Double = 
  (xs zip ys) map (xy =&amp;gt; xy._1 * xy._2).sum&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;alternative: use pattern matching in map (need to add braces &lt;code&gt;{}&lt;/code&gt;!): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;(xs zip ys) map ( {case(x,y) =&amp;gt; x*y}).sum&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;test isPrime for a number&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;def isPrime(n: Int): Boolean = (2 until n) forall (d =&amp;gt; n%d!=0)&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="62-combinatorial-search-and-for-expressions_1"&gt;6.2 - Combinatorial Search and For-Expressions&lt;/h1&gt;
&lt;p&gt;goal: handle nested seq. &lt;/p&gt;
&lt;p&gt;⇒ extend usage of higher order functions instead of using nested loops. &lt;/p&gt;
&lt;p&gt;example:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;given n, find all (i,j) st: 1&amp;lt;=j&amp;lt;i&amp;lt;=n, and i+j is prime.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(1 until n) flatMap ( i =&amp;gt; (1 until i) map (j =&amp;gt; (i,j)) ) filter ( {case(i,j) =&amp;gt; isPrime(i+j)})&lt;/p&gt;
&lt;p&gt;this works, but less understandable... ⇒ for expressions. &lt;/p&gt;
&lt;h3 id="foryield-expressions"&gt;for/yield expressions&lt;/h3&gt;
&lt;p&gt;example: class of person&lt;/p&gt;
&lt;p&gt;&lt;code&gt;case class Person(name: String, age: Int)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To obtain names of persons over 20 years old: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;persons filter (_.age&amp;gt;20) map (_.name)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;equivalent to :&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for (p &amp;lt;- person if p.age &amp;gt; 20) yield p.name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The for expression is similar to jave for-loop, except &lt;strong&gt;it builds a list of the results of all iterations&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;for expression form: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;for( s ) yield e&lt;/code&gt;
where &lt;code&gt;s&lt;/code&gt; can contain &lt;strong&gt;generators&lt;/strong&gt; and &lt;strong&gt;filters&lt;/strong&gt;: &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;generator: &lt;code&gt;p&amp;lt;-e&lt;/code&gt; where &lt;code&gt;e&lt;/code&gt; is a collection, &lt;code&gt;p&lt;/code&gt; is a pattern&lt;/li&gt;
&lt;li&gt;filter: &lt;code&gt;if f&lt;/code&gt; where t is boolean expr&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;rewrite the prime sum example: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="n"&gt;until&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="n"&gt;until&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="nf"&gt;isPrime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nf"&gt;yield &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;exercice: write the scalaProd using for expr: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scalaProd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;more on scala for expr: 
&lt;a href="http://www.artima.com/pins1ed/for-expressions-revisited.html"&gt;http://www.artima.com/pins1ed/for-expressions-revisited.html&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="63-combinatorial-search-example_1"&gt;6.3 - Combinatorial Search Example&lt;/h1&gt;
&lt;p&gt;goal: combine &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt;-expr to solve the n-queens problem. &lt;/p&gt;
&lt;h3 id="sets"&gt;Sets&lt;/h3&gt;
&lt;p&gt;3 fundamental iterable collection types: seq, &lt;strong&gt;set&lt;/strong&gt;, map. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set support most operations on seq (c.f. doc on Iterable)&lt;/li&gt;
&lt;li&gt;sets are unordered&lt;/li&gt;
&lt;li&gt;set don't have dup elements&lt;/li&gt;
&lt;li&gt;contains: &lt;code&gt;s contains e&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="example-n-queens"&gt;Example: N-Queens&lt;/h3&gt;
&lt;p&gt;8*8 chess board, 8 queens 
⇒ places queens st: no two queen in same row/col/diag&lt;/p&gt;
&lt;p&gt;algo: put one queen in each row (in the right column) &lt;/p&gt;
&lt;p&gt;recursive solution: suppose already have solutions for first n-1 rows. 
represent each (partial)solution as a list of column index. &lt;/p&gt;
&lt;p&gt;return all possible solutions (as a Set). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;queens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List[Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;placeQueens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List[Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vm"&gt;???&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;first&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;placeQueens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fill in the helper function: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;placeQueens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List[Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;queens&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;placeQueens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;queens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isSafe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;queens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;column&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doesn&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;conflict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;partial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;queens&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;queens&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now fill in the function isSafe that check if a column is valid wrt queens for above rows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isSafe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;col&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;queens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;queens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;current&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;indexedQueens&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;queens&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;(row, col)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;indexedQueens&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;forall&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the queens function will work. &lt;/p&gt;
&lt;p&gt;Write another function to print the solution out: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;queens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;queens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"* "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"X "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mkString&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="ss"&gt;"\n"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mkString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"====\n"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="64-maps_1"&gt;6.4 - Maps&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Map[Key, Value]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ex: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;val romanNumerals = Map("I" -&amp;gt;1, "V" -&amp;gt;5, "X" -&amp;gt; 10)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;val captial = Map("France" -&amp;gt; "Paris", "US" -&amp;gt; "Washington")&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Maps are iterables and &lt;strong&gt;functions&lt;/strong&gt;: maps Key to Value like a function call &lt;/p&gt;
&lt;p&gt;ex. &lt;code&gt;romanNumerals("I")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;will throw &lt;code&gt;NoSuchElementException&lt;/code&gt; if the key is not in map. &lt;/p&gt;
&lt;p&gt;⇒ use &lt;code&gt;get&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;captial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"France"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nl"&gt;res3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Paris&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;captial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"France"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nl"&gt;res4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Paris&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;captial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"China"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nl"&gt;res5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;have a look at the Option type:&lt;/p&gt;
&lt;h3 id="the-option-type"&gt;The Option Type&lt;/h3&gt;
&lt;p&gt;definition: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;+A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;Some&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;+A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Nothing&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;so the get function of map gives: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;None&lt;/code&gt; if key is not in map&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Some(x)&lt;/code&gt; if map associates key to x&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;since &lt;code&gt;Some&lt;/code&gt; is case class, can use pattern matching to decompose. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def showCaptical(country: String) = captial.get(country) match{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    case Some(cap) =&amp;gt; cap&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    case None =&amp;gt; "missing data"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="sorted-and-groupby"&gt;Sorted and GroupBy&lt;/h3&gt;
&lt;p&gt;two useful SQL queries. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;orderBy can be expressed using sortWith and sorted: &lt;/p&gt;
&lt;p&gt;val fruit = List("apple", "pear", "orange", "pineapple")
scala&amp;gt; fruit sortWith (&lt;em&gt;.length &amp;lt; &lt;/em&gt;.length)
res7: List[String] = List(pear, apple, orange, pineapple)
scala&amp;gt; fruit.sorted
res8: List[String] = List(apple, orange, pear, pineapple)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GroupBy(f)&lt;/code&gt;: &lt;strong&gt;partition a collection into a map of collections&lt;/strong&gt; according to &lt;code&gt;f&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;scala&amp;gt; fruit groupBy (_.head)
res9: scala.collection.immutable.Map[Char,List[String]] = 
        Map(p -&amp;gt; List(pear, pineapple), 
            a -&amp;gt; List(apple), 
            o -&amp;gt; List(orange))&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="map-example-polynomials"&gt;map Example: polynomials&lt;/h3&gt;
&lt;p&gt;can be seen as map from exponents to coefficients:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec6_collections/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ represent polynm as maps&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;class Poly(val terms: Map[Int, Double]) {&lt;/span&gt;
&lt;span class="code-line"&gt;    def + (other: Poly) = new Poly(terms ++ // ++ on maps: will override older entries in terms!&lt;/span&gt;
&lt;span class="code-line"&gt;                            (other.terms maps adjust)) // adjust defined below&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    def adjust(term: (Int, Double)):(Int, Double) = {&lt;/span&gt;
&lt;span class="code-line"&gt;        val (exp, coeff) = term&lt;/span&gt;
&lt;span class="code-line"&gt;        terms get exp match{&lt;/span&gt;
&lt;span class="code-line"&gt;            case None =&amp;gt; Pair(exp, coeff) // or write: exp -&amp;gt; coeff&lt;/span&gt;
&lt;span class="code-line"&gt;            case Some(coeff1) =&amp;gt; Pair(exp, coeff+coeff1)&lt;/span&gt;
&lt;span class="code-line"&gt;        }&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;    override def toString = &lt;/span&gt;
&lt;span class="code-line"&gt;    (for( (exp, coeff) &lt;span class="nt"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="err"&gt;terms.toList.sorted.reverse)&lt;/span&gt; &lt;span class="err"&gt;yield&lt;/span&gt; &lt;span class="err"&gt;coeff+"x^"+exp)&lt;/span&gt; &lt;span class="err"&gt;mkString&lt;/span&gt; &lt;span class="err"&gt;"+&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="default-values"&gt;default values&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;withDefulatValue&lt;/code&gt;: makes a map into a &lt;strong&gt;total map&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;rewrite the poly example: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nf"&gt;Poly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;terms0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Map[Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Double]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;terms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;terms0&lt;/span&gt; &lt;span class="n"&gt;withDefaultValue&lt;/span&gt; &lt;span class="m"&gt;0.0&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Poly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;terms&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;maps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;older&lt;/span&gt; &lt;span class="n"&gt;entries&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;terms&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other.terms&lt;/span&gt; &lt;span class="n"&gt;maps&lt;/span&gt; &lt;span class="n"&gt;adjust&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;adjust&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt; &lt;span class="n"&gt;below&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;adjust&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;val &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coeff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;exp&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coeff&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;terms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coeff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;terms.toList.sorted.reverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;coeff&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"x^"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;mkString&lt;/span&gt; &lt;span class="s"&gt;"+ "&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;change to variable parameter for better constructor calling: add another constructor&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def this(bindings: (int, Double)*) = // bindings is s sequence&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;this(bindings.toMap)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Exercie: re-implement the &lt;code&gt;+&lt;/code&gt; using foldLeft : &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def + (other: Poly) =&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    new Poly( (other.terms foldLeft terms)(addTerm) )&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;def addTerm(terms:Map[Int, Double], term: (Int, Double)): Map[Int, Double] = {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    val (exp, coeff) = term&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    terms + ( exp -&amp;gt; (coeff + terms(exp)) ) // map + (k,v) updates the map&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="65-putting-the-pieces-together-t9-keyboard-mnem_1"&gt;6.5 - Putting the Pieces Together: T9 keyboard mnem&lt;/h1&gt;
&lt;p&gt;convert a seq of numbers to a scentence&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;val mnem  = Map('2'-&amp;gt;"ABC", '3'-&amp;gt;"DEF", 4-&amp;gt;"GHI", '5'-&amp;gt;"JKL",&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            '6'-&amp;gt;"MNO", '7'-&amp;gt;"PQRS", '8'-&amp;gt;"TUV", '9'-&amp;gt;"WXYZ" )&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;val in = Source.fromURL("...")&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;val words = in.getLines.toList // dictionary: list of valid words&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;goal: design a &lt;code&gt;translate(phoneNumber)&lt;/code&gt; that produces all phrases of words that can serve as mnemonics(助忆) for a phone number. &lt;/p&gt;
&lt;p&gt;Step 1: invert the mnem map to a map from A~Z to 2~9: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;val charCode: Map[Char, Char] = &lt;/span&gt;
&lt;span class="code-line"&gt;for ( (digit, str) &lt;span class="nt"&gt;&amp;lt;-mnem&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="err"&gt;ltr&amp;lt;-str)&lt;/span&gt; &lt;span class="err"&gt;yield&lt;/span&gt; &lt;span class="err"&gt;ltr-&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;digit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Step 2: map a word to the string it represents, ex. "java"-&amp;gt;"5282"&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def wordCode(word: String):String = &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    word.toUpperCase map charCode&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Step 3: maps from digit string to all possible valid strings, ex. "5282"-&amp;gt;List("java", "kata",...)
⇒ just a groupby!!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;val wordsForNum: Map[String, Seq[String]] = &lt;/span&gt;
&lt;span class="code-line"&gt;    words groupBy wordCode&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;→ Error: key not found: "-", some words contains a "-"... → drop such words... &lt;/p&gt;
&lt;p&gt;&lt;code&gt;val words = in.getLines.toList filter (wd =&amp;gt; wd forall (ch =&amp;gt; ch.isLetter))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Step 4: return all ways to encode a number as a list of words →  recursive, recurse on the nb of first words~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List[String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;phraseList&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;first&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;uses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1:split&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;firstWd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wordsForNum&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; number.take(split) &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;followingWds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;firstWd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;follwingWds&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;phraseList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toSet&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⇒ error in the line with &lt;code&gt;wordsForNum&lt;/code&gt;: key not found... 
⇒ &lt;code&gt;wordsForNum["7"]&lt;/code&gt; will give error 
⇒ make the &lt;code&gt;wordsForNum&lt;/code&gt; a total map, using withDefaultValue&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;val wordsForNum: Map[String, Seq[String]] = &lt;/span&gt;
&lt;span class="code-line"&gt;    (words groupBy wordCode) withDefaultValue( Seq() )&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Step 5: return strings (instead of List[String])&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;summary: 
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec6_collections/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec6_collections/pasted_image009.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.scala-exercises.org/"&gt;https://www.scala-exercises.org/&lt;/a&gt;&lt;/p&gt;</summary><category term="scala"></category></entry><entry><title>[Scala MOOC I] Lec5: Lists</title><link href="https://x-wei.github.io/progfun1_lec5_lists.html" rel="alternate"></link><published>2016-07-29T21:30:00+02:00</published><updated>2016-07-29T21:30:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-07-29:progfun1_lec5_lists.html</id><summary type="html">&lt;h1 id="51-more-functions-on-lists"&gt;5.1 - More Functions on Lists&lt;/h1&gt;
&lt;p&gt;already known methods: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;xs.head&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;xs.tail&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sublist and ele access: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xs.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs.last&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs.init&lt;/code&gt;: all elementh except last element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs.take(n)&lt;/code&gt;: sublist of first n elements&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs.drop(n)&lt;/code&gt;: the rest of list after taking first n elements&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs(n)&lt;/code&gt;: = &lt;code&gt;xs.apply(n)&lt;/code&gt; , element at index n&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;concatenation: &lt;code&gt;xs ++ ys&lt;/code&gt; (&lt;code&gt;:::&lt;/code&gt; is legacy usage)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs.reverse&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs.updated(n,x)&lt;/code&gt;: return a same list, except xs(n)=x (Note: Lists are immutable, so cannot modify)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs.indexOf(x)&lt;/code&gt;: index or -1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs.contains(x)&lt;/code&gt;: same as &lt;code&gt;xs.indexOf(x)&amp;gt;=0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;complexity: 
head, tail: simple to implement
⇒ complexity of &lt;code&gt;last&lt;/code&gt;?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"last of Nil"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⇒ complexity of last = O(n)&lt;/p&gt;
&lt;p&gt;implement &lt;code&gt;init&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"init of Nil"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⇒ complexity = O(length of xs)&lt;/p&gt;
&lt;p&gt;implement concatenation &lt;code&gt;:::&lt;/code&gt;/&lt;code&gt;++&lt;/code&gt;
(NB: &lt;code&gt;:::&lt;/code&gt; is right-associative, &lt;code&gt;xs:::ys&lt;/code&gt; = &lt;code&gt;ys. :::(xs)&lt;/code&gt;. )&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;z&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;zs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⇒ complexity of concat = O(length of xs)&lt;/p&gt;
&lt;p&gt;implement of reverse&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⇒ complexity of reverse: every call contains a concat, thus complexity=O(n2)&lt;/p&gt;
&lt;p&gt;exercice: remove nth element: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;removeAt&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;drop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="52-pairs-and-tuples"&gt;5.2 - Pairs and Tuples&lt;/h1&gt;
&lt;p&gt;example: sort list faster than insertion sort → merge sort. &lt;/p&gt;
&lt;p&gt;sort 2 sublist, merge them ⇒ list is sorted&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;see&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;below&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;splitAt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;splitAt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;returns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sublists&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;merge: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;zs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="k"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="k"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pairtuple"&gt;Pair/Tuple&lt;/h3&gt;
&lt;p&gt;written as &lt;code&gt;(x, y)&lt;/code&gt; in scala. pair can be used as patterns :  similar for tuples. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;val pair = ("a", 2)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;val (label, value) = pair&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec5_lists/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;tuple implementation: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec5_lists/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ can use &lt;code&gt;_1&lt;/code&gt; &lt;code&gt;_2&lt;/code&gt; to access elements&lt;/p&gt;
&lt;p&gt;exercice: rewrite the merge function using a &lt;em&gt;pattern matching over pairs&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;zs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="k"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="k"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="53-implicit-parameters_1"&gt;5.3 - Implicit Parameters&lt;/h1&gt;
&lt;p&gt;pb: how to apply msort to list of other element types. &lt;/p&gt;
&lt;p&gt;using type parameters ? &lt;code&gt;msort[T]&lt;/code&gt;⇒ the compare operator is not always defined ! &lt;/p&gt;
&lt;p&gt;⇒ &lt;em&gt;pass the lt function as a parameter&lt;/em&gt;: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;def msort[T](xs: List[T])(lt: (T,T)=&amp;gt;Boolean) = ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;another option: &lt;code&gt;scala.math.Ordering[T]&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;impor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ordering&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msort&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nl"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Ordering&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;msort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;Ordering&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pb: pass each time the function parameter is cumbersome... ⇒ use &lt;strong&gt;implicite&lt;/strong&gt; parameters&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msort&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;implicite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Ordering&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⇒ the function calls can ignore the implicite parameter, the compiler will figure it out. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec5_lists/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;h1 id="54-higher-order-list-functions"&gt;5.4 - Higher-Order List Functions&lt;/h1&gt;
&lt;p&gt;functions over list have similar pattern: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;transform each element &lt;/li&gt;
&lt;li&gt;retrive elements that satisfy some cretirion&lt;/li&gt;
&lt;li&gt;combing elements using an operator&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="map"&gt;map&lt;/h3&gt;
&lt;p&gt;apply an operation to every elements. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;abstract&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="filtering"&gt;filtering&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;other methods that extracts sublist: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec5_lists/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;exercice: implement a function &lt;code&gt;pack&lt;/code&gt;: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec5_lists/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List[T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;exercice2: implement  a function &lt;code&gt;encode&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec5_lists/pasted_image005.png"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;(T, Int)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;another version: use the pack: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;(T, Int)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="55-reduction-of-lists_1"&gt;5.5 - Reduction of Lists&lt;/h1&gt;
&lt;p&gt;fold/reduce: combine elements using an operator. &lt;/p&gt;
&lt;h3 id="reduceleft"&gt;reduceLeft&lt;/h3&gt;
&lt;p&gt;(can apply only to non-empty lists) 
inserts a binary operator between adj elements: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec5_lists/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;p&gt;ex. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reduceLeft&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reduceLeft&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;write shorter function values using underscore &lt;code&gt;_&lt;/code&gt;:  every &lt;code&gt;_&lt;/code&gt; represents a new parameter&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reduceLeft&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reduceLeft&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="foldleft"&gt;foldLeft&lt;/h3&gt;
&lt;p&gt;foldLeft is like reduceLeft, but can apply on Nil, and takes an &lt;strong&gt;accumulator&lt;/strong&gt; &lt;code&gt;z&lt;/code&gt; =&amp;gt; returns z when calling on Nil. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec5_lists/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foldleft&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foldleft&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec5_lists/pasted_image008.png"/&gt;&lt;/p&gt;
&lt;h3 id="foldrightreduceright"&gt;foldRight/reduceRight&lt;/h3&gt;
&lt;p&gt;dual functions to &lt;code&gt;foldLeft&lt;/code&gt; and &lt;code&gt;reduceLeft&lt;/code&gt;, but produce a tree leaned to right&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec5_lists/pasted_image010.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec5_lists/pasted_image011.png"/&gt;&lt;/p&gt;
&lt;p&gt;if the operation is associative and communitive, foldLeft and foldRight should give same results. Other times need to think. &lt;/p&gt;
&lt;p&gt;ex. concat&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec5_lists/pasted_image012.png"/&gt;
if apply foldLeft ⇒ type error, because the &lt;code&gt;::&lt;/code&gt; operator will be applied to 2 elements of type T.&lt;/p&gt;
&lt;h1 id="56-reasoning-about-concat_1"&gt;5.6 - Reasoning About Concat&lt;/h1&gt;
&lt;p&gt;proof of programs&lt;/p&gt;
&lt;h3 id="structural-induction"&gt;structural induction&lt;/h3&gt;
&lt;p&gt;pb: prove some properties of concat:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec5_lists/pasted_image015.png"/&gt;&lt;/p&gt;
&lt;p&gt;类似数学归纳法: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec5_lists/pasted_image016.png"/&gt;&lt;/p&gt;
&lt;p&gt;ex. prove &lt;code&gt;(xs ++ ys) ++ zs = xs ++ (ys ++ zs)&lt;/code&gt;: induction on &lt;code&gt;xs&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;z&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;zs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;base case: &lt;code&gt;xs=Nil&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;(Nil ++ ys ) ++ zs = Nil ++ (ys ++ zs)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;induction step: &lt;code&gt;x::xs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec5_lists/pasted_image017.png"/&gt;&lt;/p&gt;
&lt;h2 id="57-a-larger-equational-proof-on-lists_1"&gt;5.7 - A Larger Equational Proof on Lists&lt;/h2&gt;
&lt;p&gt;pb: want to prove that &lt;code&gt;xs.reverse.revese == xs&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;base case: &lt;code&gt;Nil.reverse.revers = Nil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;induction step&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pb: cannot advance 
⇒ generalize the argument. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec5_lists/pasted_image018.png"/&gt;&lt;/p&gt;</summary><category term="scala"></category></entry><entry><title>R语言从入门到放弃 (4). 统计回归</title><link href="https://x-wei.github.io/Rnotes-4-regression.html" rel="alternate"></link><published>2016-07-29T00:00:00+02:00</published><updated>2016-07-29T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-07-29:Rnotes-4-regression.html</id><summary type="html">&lt;p&gt;R里面的统计函数有很多, 这里只用线性模型&lt;code&gt;lm&lt;/code&gt;以及(一维)非参估计最常用的三个smoother: Nadaraya-Watson kernel(&lt;strong&gt;NW, &lt;/strong&gt;&lt;code&gt;ksmooth&lt;/code&gt;), Local Polynomial(&lt;strong&gt;LP, &lt;/strong&gt;&lt;code&gt;loess&lt;/code&gt;), Smoothing Spline(&lt;strong&gt;SS, &lt;/strong&gt;&lt;code&gt;smooth.spline&lt;/code&gt;). 用这三个smoother作为例子, 介绍R里面统计回归的一些用法. &lt;/p&gt;
&lt;p&gt;数据的形式是:　&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-4-regression/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;目标是估计函数m(). 例子使用R自带的&lt;code&gt;cars&lt;/code&gt;数据集, 它包含两列: 汽车速度speed和刹车距离dist. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt; data(cars)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt; summary(cars)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;     speed           dist       &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt; Min.   : 4.0   Min.   :  2.00  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt; 1st Qu.:12.0   1st Qu.: 26.00  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt; Median :15.0   Median : 36.00  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt; Mean   :15.4   Mean   : 42.98  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt; 3rd Qu.:19.0   3rd Qu.: 56.00  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt; Max.   :25.0   Max.   :120.00  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt; ?cars&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt; plot(cars$speed, cars$dist)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-4-regression/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;h1 id="theory"&gt;Theory&lt;/h1&gt;
&lt;p&gt;首先简单介绍一下这4个smoother的原理: &lt;/p&gt;
&lt;h3 id="linear-model"&gt;linear model&lt;/h3&gt;
&lt;p&gt;认为m是线性形式(包含intercept): &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-4-regression/pasted_image008.png"/&gt;&lt;/p&gt;
&lt;h3 id="nadaraya-watson-kernel-smoother"&gt;Nadaraya-Watson kernel smoother&lt;/h3&gt;
&lt;p&gt;m_NW 在x处的取值为Yi的加权平均, 权重是按照kernel K()确定的. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-4-regression/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;另外m_NW(x)还可以看做是最小化加权的square-error: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-4-regression/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;h3 id="local-polynomial-smoother"&gt;Local Polynomial smoother&lt;/h3&gt;
&lt;p&gt;m_NW(x)最小化加权sq-err那个表达式里, 可以是用一个&lt;em&gt;常数函数&lt;/em&gt;mx来估计在x处的取值, LP将它泛化为p-1阶多项式的形式, m在x附近是多项式形式. m(u)=poly(x-u), 这个多项式的系数为beta(x): &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-4-regression/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;p&gt;最后m_LP在x处的取值为: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-4-regression/pasted_image005.png"/&gt;&lt;/p&gt;
&lt;h3 id="smoothing-spline"&gt;Smoothing Spline&lt;/h3&gt;
&lt;p&gt;设定m的形式为knot在xi的spline, 加上penalize项: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-4-regression/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;p&gt;另外SS可以看作是bandwidth随x变化的kernel smoother. &lt;/p&gt;
&lt;h1 id="fit-model_1"&gt;fit model&lt;/h1&gt;
&lt;h3 id="formula"&gt;formula&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lm&lt;/code&gt;和&lt;code&gt;loess&lt;/code&gt;的文档里都提到参数为formula, 它大概是指示要fit的表达式形式. 这里面的加减号不是算数意义上的加减. 看例子: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dist ~ speed&lt;/code&gt;: 表示dist是speed的函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y ~ .&lt;/code&gt; : 表示y是所有其他变量的函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y ~　x1+x2&lt;/code&gt;: y 是x1和x2的函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y ~ x - 1&lt;/code&gt;: y是x的函数, 且没有intercept项&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fit-models"&gt;fit models&lt;/h3&gt;
&lt;p&gt;这几个函数的fit写法各不相同, 有的要提供formula, 有的要提供x和y值, 需要看文档: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fit.lm&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;fit.nw&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;ksmooth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"normal"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;fit.lp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;loess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;fit.ss&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;smooth.spline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="predict-fittedresiduals_1"&gt;predict, fitted/residuals&lt;/h1&gt;
&lt;p&gt;predict的写法也是各不相同, 一般都是用&lt;code&gt;predict&lt;/code&gt;函数, 然而这个函数在作用到不同smoother上面, 参数和返回值也都不一样......orz 关于&lt;code&gt;xx&lt;/code&gt;smoother的predict函数用法参考?&lt;code&gt;predict.xx&lt;/code&gt;. 最奇葩的是NW, 它不能用&lt;code&gt;predict&lt;/code&gt;函数, 而要fit的时候在&lt;code&gt;skmooth&lt;/code&gt;函数里传入&lt;code&gt;x.points&lt;/code&gt;参数... &lt;/p&gt;
&lt;p&gt;看predict例子: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;newspeed&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;26&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;pred.lm&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fit.lm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newspeed&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"prediction"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"fit"&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;pred.nw&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;ksmooth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"normal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bandwidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x.points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;newspeed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;pred.lp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fit.lp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newdata&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;newspeed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;pred.ss&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fit.ss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;newspeed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外, 如果想看smoother在design points(Xi)处的预测值, 可以用&lt;code&gt;fitted&lt;/code&gt;函数(NW还是不能用), 例子: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fitted.lm&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;fitted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fit.lm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;fitted.nw&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;ksmooth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"normal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bandwidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x.points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;fitted.lp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;fitted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fit.lp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;fitted.ss&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;fitted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fit.ss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要看每个点的residual ri=yi-yhat_i, 用&lt;code&gt;residuals&lt;/code&gt;函数(NW不行):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;resd.lm&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;residuals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fit.lm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;resd.nw&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;ksmooth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"normal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bandwidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x.points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;resd.lp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;residuals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fit.lp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;resd.ss&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;residuals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fit.ss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以画出这几个方法的fit: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;abline(fit.lm, lty=1, col=1) # linear model is just a straigh line&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;lines(newspeed, pred.nw, lty=2, col=2)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;lines(newspeed, pred.lp, lty=3, col=3)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;lines(newspeed, pred.ss, lty=4, col=4)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;legend("topleft", c("lm", "nw", "lp", "ss"), lty=1:4, col=1:4)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-4-regression/pasted_image009.png"/&gt;&lt;/p&gt;
&lt;h1 id="bandwidthdf-hat-matrix"&gt;bandwidth&amp;amp;df: Hat Matrix&lt;/h1&gt;
&lt;p&gt;三个非参估计的smoother都有"带宽"(bandwidth)或者"自由度"(df)的概念, 带宽即NW或LP表达式里的h. &lt;/p&gt;
&lt;p&gt;自由度df是带宽的函数, smoother的df可以用它的&lt;strong&gt;hat matrix&lt;/strong&gt; S计算出来. &lt;/p&gt;
&lt;p&gt;一个smoother的hat matrix S, 是把训练值Y映射到估计值Yhat的矩阵: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-4-regression/pasted_image010.png"/&gt;&lt;/p&gt;
&lt;p&gt;而df则是S的迹: df = tr(S). df的&lt;/p&gt;
&lt;p&gt;根据script(P28), S的第j列可以用这个smoother fit一个unit vector来得到: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-4-regression/pasted_image012.png"/&gt;&lt;/p&gt;
&lt;p&gt;所以计算S可以用下面的代码: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;Snw&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;Slp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;Sss&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nrow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ncol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# identity matrix&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;In[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j]&lt;/span&gt; &lt;span class="c1"&gt;# unit vector ej&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;Snw[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;ksmooth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"normal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bandwidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x.points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;Slp[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;fitted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;loess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;Sss[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;fitted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;smooth.spline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;df.nw&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Snw&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;df.lp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Slp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;df.ss&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sss&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;发现三个非参smoother的自由度不同, 所以上面画图的比较并没有意义, 为了让三者的自由度相同, 可以设定ksmooth/loess/smooth.spline的参数.&lt;/p&gt;
&lt;p&gt;控制带宽, Lp的参数为&lt;code&gt;span&lt;/code&gt;, SS的参数为&lt;code&gt;spar&lt;/code&gt;; 而指定想要的自由度则分别是&lt;code&gt;enp.target&lt;/code&gt;和&lt;code&gt;df&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"let all 3 np smoother use the same df="&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df.nw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;Slp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;Sss&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nrow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ncol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# identity matrix&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;In[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;Slp[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;fitted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;loess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enp.target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df.nw&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;Sss[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;fitted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;smooth.spline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df.nw&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Slp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sss&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;发现SS的df参数使用以后控制的非常接近NW的df了, 不过lp的df还是不够接近, 用span来控制应该更准确一些, 为了找到合适的span, 用以下代码来寻找使得df=df.nw的span取值: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dflp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nf"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;Slp[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;loess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;In[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j]&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;fitted&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nf"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Slp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;chosen_span&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;uniroot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dflp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df.nw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果不用这个循环计算的话, 可以用&lt;code&gt;sfsmisc&lt;/code&gt;包里的&lt;code&gt;hatMat&lt;/code&gt;函数: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-4-regression/pasted_image013.png"/&gt; &lt;/p&gt;
&lt;p&gt;参数&lt;code&gt;trace&lt;/code&gt;取TRUE的话, 直接返回hat matrix的迹, 否则返回整个hat matrix. 
需要把要计算的smoother包装成一个pred.sm函数传入, 这个函数接受x和y, 返回fitted数值. 例子: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;hatMat(cars$speed, T, &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;       pred.sm = function(x,y) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;         ksmooth(x, y, kernel="normal", bandwidth=2, x.points=x)$y )&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;hatMat(cars$speed, T, &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;       pred.sm = function(x,y) fitted(loess(y~x, span=chosen_span)) )&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;hatMat(cars$speed, T, &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;       pred.sm = function(x,y) fitted(smooth.spline(x, y, df=df.nw)) )&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="cv-and-hat-matrix"&gt;CV and Hat Matrix&lt;/h1&gt;
&lt;p&gt;为了预测smoother的performance, 用loo CV来估计MSE(mean sq err)的值. &lt;/p&gt;
&lt;p&gt;loo CV可以用下面这个通用函数得到(注意看对于参数的要求): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;##&lt;/span&gt;&lt;span class="s1"&gt;' Calculates the LOO CV score for given data and regression prediction function&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;##'&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;##&lt;/span&gt;&lt;span class="s1"&gt;' @param reg.data: regression data; data.frame with columns '&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="s1"&gt;', '&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;##'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@param&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;regr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prediction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;##&lt;/span&gt;&lt;span class="s1"&gt;'                    reg.x: regression x-values&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;##'&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;regression&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;values&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;##&lt;/span&gt;&lt;span class="s1"&gt;'                    x:     x-value(s) of evaluation point(s)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;##'&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prediction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;##'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LOOCV&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;loocv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;calculate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;leave&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;regression&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;values&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;loo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;-i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;-i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Calculate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LOO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;regression&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;values&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;above&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;loo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;values&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;##&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Calculate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MSE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;values&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比如, 为了计算NW的CV数值, 需要这样: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;regfcn.nw&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;regy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nf"&gt;ksmooth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;regy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"normal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bandwidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x.points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;loocv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;regfcn.nw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过, 如果得到了hat Matrix S, 根据公式4.5, loo CV可以这样一次计算出来: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-4-regression/pasted_image014.png"/&gt;&lt;/p&gt;
&lt;p&gt;试一下: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# compute CV using shortcut euqation&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;yhat.nw&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;Snw&lt;/span&gt; &lt;span class="o"&gt;%*%&lt;/span&gt; &lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="c1"&gt;# or use regfcn.nw(cars$speed, cars$dist, cars$speed)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;yhat.nw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Snw&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;^2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到的结果和之前用loocv一样, 都是253.9128 !~ &lt;/p&gt;
&lt;p&gt;或者只用df, 计算generalized CV, 公式为: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-4-regression/pasted_image015.png"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#compute GCV&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;mean( (cars$dist-yhat.nw)^2 ) / ( 1 - df.nw/n )^2&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到gcv=269.3911, 和looCV也比较接近. &lt;/p&gt;</summary><category term="R"></category></entry><entry><title>R语言从入门到放弃 (3). 绘图</title><link href="https://x-wei.github.io/Rnotes-3-plot.html" rel="alternate"></link><published>2016-07-28T00:00:00+02:00</published><updated>2016-07-28T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-07-28:Rnotes-3-plot.html</id><summary type="html">&lt;p&gt;R关于绘图应该可以写很多, 不过这里只列举在compstat这门课里最经常用的几个函数. 关于R的绘图, 详细了解可以运行 &lt;code&gt;demo(graphics)&lt;/code&gt;或者 &lt;code&gt;example("plot")&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;R里面的绘图命令分为两类: 一类是"high-level"的"创建新图片"命令, 运行以后会新画一个图; 另一类则是"low-level"的命令, 不会创建新图片, 而只会在当前图片中修改添加(例如添加线条, 添加点等). 下面分别简单介绍, 最后再介绍其他一些绘图配置的命令. &lt;/p&gt;
&lt;h1 id="configurationsparameters"&gt;configurations/parameters&lt;/h1&gt;
&lt;p&gt;介绍一下常用的参数意义, 以及画图的配置. 详细文档见&lt;code&gt;?par&lt;/code&gt;. 这些参数可以放在绘图命令中. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;par(mfrow=c(1,2))&lt;/code&gt;: 这个命令是设定画图的布局, 把放置图片的区域分为一行两列, 第一个plot的图片在左边, 第二个在右边. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;col&lt;/code&gt;: 设定画图(线段/点)的颜色, 可以用数字(col=1, 2, ...)也可以用英文(col="red", "gray", "blue"等)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lty&lt;/code&gt;: 设定线段类型, 例如lty=1为实线, lty=2为虚线&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pch&lt;/code&gt;: 设定点的类型(pch="point character")&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cex&lt;/code&gt;: 似乎是设定文字大小的, 一般设置cex=0.6&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="high-levelming-ling-plot"&gt;high level命令: plot&lt;/h1&gt;
&lt;p&gt;创建新图片的命令主要就是plot这个函数 (其他还有如&lt;code&gt;hist&lt;/code&gt;, &lt;code&gt;contour&lt;/code&gt;, &lt;code&gt;boxplot&lt;/code&gt;, 不太常用, 看文档应该能会用). &lt;/p&gt;
&lt;p&gt;&lt;code&gt;plot&lt;/code&gt;的内容或者为一系列x和y坐标, 或者为一个formula(见plot.formula). : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;: 指定画线(&lt;code&gt;type="l"&lt;/code&gt;)或者画点(&lt;code&gt;type="p"&lt;/code&gt;, 默认值). &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当type="l"的时候, 可以设定&lt;code&gt;lty&lt;/code&gt;参数, type="p"则可以设定&lt;code&gt;pch&lt;/code&gt;参数. &lt;/p&gt;
&lt;p&gt;当&lt;code&gt;type="n"&lt;/code&gt;的时候表示不画任何东西 — 然后可以用后面介绍的low level命令往里面添加东西. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;main&lt;/code&gt;: 设定图片的标题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xlab&lt;/code&gt;/&lt;code&gt;ylab&lt;/code&gt;: x/y轴的文字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xlim/ylim&lt;/code&gt;: 设定x/y轴的范围, 例如: &lt;code&gt;xlim=c(0,10)&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个参数比较重要, 如果想要根据数据来动态调整的话, 可以使用extendrange函数, 它返回比数据range稍大一点的range: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt; extendrange(1:10)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[1]  0.55 10.45&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个plot的例子:　&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;plot(x,　y,　type="l", lty=2, &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    xlab="x axis label", ylab="y=10sin(x)+x", &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    main="sample plot", &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    xlim=c(-1, 101), ylim=extendrange(y)　)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-3-plot/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;h1 id="low-levelming-ling"&gt;low level命令&lt;/h1&gt;
&lt;h3 id="points"&gt;points&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;points(x, y)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加(多个)点, 这些点的坐标在x和y中. &lt;br/&gt;
此时可以用&lt;code&gt;pch&lt;/code&gt;参数指定点的类型.&lt;/p&gt;
&lt;h3 id="lines"&gt;lines&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lines(x, y)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加多条线段, 这些线段依次经过一系列的点, 而点的xy坐标放在x和y中.&lt;br/&gt;
此时可以设定&lt;code&gt;lty&lt;/code&gt;指定线段类型. &lt;/p&gt;
&lt;h3 id="abline"&gt;abline&lt;/h3&gt;
&lt;p&gt;这个函数作用是添加一条直线, 可以传入&lt;code&gt;lty&lt;/code&gt;参数. &lt;/p&gt;
&lt;p&gt;abline有多种用法: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;abline(a=a, b=b)&lt;/code&gt;: 指定斜率和截距(y=ax+b)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abline(h=y0)&lt;/code&gt;/&lt;code&gt;abline(v=x0)&lt;/code&gt;: 画水平/垂直的线&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abline(reg=lm_fit)&lt;/code&gt;: reg为有coeff的对象(如一个线性fit), 画出fitted line&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rug"&gt;rug&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;rug(x)&lt;/code&gt;的作用是在x轴添加小线段, 位置为参数&lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="lengend"&gt;lengend&lt;/h3&gt;
&lt;p&gt;添加图例, 直接看例子:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;legend("topleft", c("data", "fitted"), lty=1:2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样在左上角(其他可选项见文档)添加图例, 文字"data"对应lty=1的数据, "fitted"对应lty=2的. &lt;/p&gt;
&lt;h3 id="example"&gt;example&lt;/h3&gt;
&lt;p&gt;下面是一个low level绘图例子(在前一个图基础上添加各种东西): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;newpts.x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;newpts.y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;points&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newpts.x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newpts.y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newpts.x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newpts.y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;abline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"gray"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;abline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;fit&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# fit to linear model&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;abline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"topleft"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"linear fit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"lines example"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"vertical line"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;                  &lt;span class="n"&gt;lty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-3-plot/pasted_image002.png"/&gt;&lt;/p&gt;</summary><category term="R"></category></entry><entry><title>R语言从入门到放弃 (2). 向量(列表)及函数</title><link href="https://x-wei.github.io/Rnotes-2-seq_func.html" rel="alternate"></link><published>2016-07-26T23:48:00+02:00</published><updated>2016-07-26T23:48:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-07-26:Rnotes-2-seq_func.html</id><summary type="html">&lt;p&gt;首先, R似乎默认所有的变量都为向量vector, 即使一个单独的数字也是长度为1的, 所以&lt;code&gt;1&lt;/code&gt;等价于&lt;code&gt;c(1)&lt;/code&gt;.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a[1]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="s"&gt;"double"&lt;/span&gt; &lt;span class="c1"&gt;# means "double vector" (I think)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="fancy-indexing"&gt;fancy indexing&lt;/h2&gt;
&lt;p&gt;R的vector/list/matrix支持类似numpy(稍有不同)的fancy indexing, 以下是例子: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v[1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# slicing&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# EXCLUDING first 3 elements&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt;  &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="m"&gt;5&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;  &lt;span class="m"&gt;7&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v[&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# EXCLUDING first element&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;  &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="m"&gt;5&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;  &lt;span class="m"&gt;7&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="nf"&gt;[c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v[v&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# indexing using logical array&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# works also for lists&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"aa"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l[&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[[1]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[[2]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[[3]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="s"&gt;"aa"&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下是矩阵的fancy indexing例子: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nrow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ncol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="n"&gt;[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="n"&gt;[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="n"&gt;[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;    &lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="m"&gt;7&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="m"&gt;8&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;    &lt;span class="m"&gt;3&lt;/span&gt;    &lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="m"&gt;9&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mat[1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mat[1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mat[&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="n"&gt;[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="n"&gt;[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="n"&gt;[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="m"&gt;8&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;    &lt;span class="m"&gt;3&lt;/span&gt;    &lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="m"&gt;9&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mat[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="names-dimnames"&gt;names / dimnames&lt;/h2&gt;
&lt;p&gt;好玩的是可以用&lt;code&gt;names&lt;/code&gt;/&lt;code&gt;dimnames&lt;/code&gt;函数给每个值加上一个名字: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"elem"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;  &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="m"&gt;-2&lt;/span&gt;  &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="m"&gt;-3&lt;/span&gt;  &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="m"&gt;-4&lt;/span&gt;  &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="m"&gt;-5&lt;/span&gt;  &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="m"&gt;-6&lt;/span&gt;  &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="m"&gt;-7&lt;/span&gt;  &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="m"&gt;-8&lt;/span&gt;  &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="m"&gt;-9&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="m"&gt;-10&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="m"&gt;1&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;       &lt;span class="m"&gt;3&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;5&lt;/span&gt;       &lt;span class="m"&gt;6&lt;/span&gt;       &lt;span class="m"&gt;7&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="m"&gt;9&lt;/span&gt;      &lt;span class="m"&gt;10&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"elem"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="n"&gt;elem_1&lt;/span&gt;  &lt;span class="n"&gt;elem_2&lt;/span&gt;  &lt;span class="n"&gt;elem_3&lt;/span&gt;  &lt;span class="n"&gt;elem_4&lt;/span&gt;  &lt;span class="n"&gt;elem_5&lt;/span&gt;  &lt;span class="n"&gt;elem_6&lt;/span&gt;  &lt;span class="n"&gt;elem_7&lt;/span&gt;  &lt;span class="n"&gt;elem_8&lt;/span&gt;  &lt;span class="n"&gt;elem_9&lt;/span&gt; &lt;span class="n"&gt;elem_10&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="m"&gt;1&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;       &lt;span class="m"&gt;3&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;5&lt;/span&gt;       &lt;span class="m"&gt;6&lt;/span&gt;       &lt;span class="m"&gt;7&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="m"&gt;9&lt;/span&gt;      &lt;span class="m"&gt;10&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;elem_1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;elem_1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;invalid&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;atomic&lt;/span&gt; &lt;span class="n"&gt;vectors&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v[&lt;/span&gt;&lt;span class="s"&gt;"elem_1"&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;elem_1&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="m"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"elem"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;elem_1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l[1]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;elem_1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l[&lt;/span&gt;&lt;span class="s"&gt;"elem_1"&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;elem_1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面例子看到, vector不能使用&lt;code&gt;$&lt;/code&gt;来获得"field", 但是list可以, 这是list和vector的一个区别. &lt;/p&gt;
&lt;p&gt;下面是矩阵的例子: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;dimnames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nf"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="nf"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;ncol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;col_1&lt;/span&gt; &lt;span class="n"&gt;col_2&lt;/span&gt; &lt;span class="n"&gt;col_3&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;row_1&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;     &lt;span class="m"&gt;4&lt;/span&gt;     &lt;span class="m"&gt;7&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;row_2&lt;/span&gt;     &lt;span class="m"&gt;2&lt;/span&gt;     &lt;span class="m"&gt;5&lt;/span&gt;     &lt;span class="m"&gt;8&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;row_3&lt;/span&gt;     &lt;span class="m"&gt;3&lt;/span&gt;     &lt;span class="m"&gt;6&lt;/span&gt;     &lt;span class="m"&gt;9&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mat[&lt;/span&gt;&lt;span class="s"&gt;"row_1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"col_1"&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="c"&gt;c()&lt;/h2&gt;
&lt;p&gt;关于&lt;code&gt;c&lt;/code&gt;这个函数, 值得一提的除了它自动"展开"参数的list/vector以外(上次博客提到), 还有就是它会自动cast, 文档里是这么说的: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The output type is determined from the highest type of the components in the hierarchy NULL &amp;lt; raw &amp;lt; logical &amp;lt; integer &amp;lt; double &amp;lt; complex &amp;lt; character &amp;lt; list &amp;lt; expression. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中的logical, integer, character都属于(atomic) vector, list和他们不同, 见后文. &lt;/p&gt;
&lt;p&gt;以下是例子: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;logical&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;"char"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;character&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;"1"&lt;/span&gt;    &lt;span class="ss"&gt;"2"&lt;/span&gt;    &lt;span class="ss"&gt;"char"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="vector-vs-list-matrix-vs-dataframe"&gt;vector VS list ( matrix VS data.frame )&lt;/h2&gt;
&lt;p&gt;用于集合主要是vector和list, 他们的区别是: &lt;strong&gt;vector只能存放同样类型的元素, 而list可以存放不同类型的元素&lt;/strong&gt;&lt;em&gt;.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;vector可以是: numeric, logical, char... 类比一下, vector类似java里的array, list类似python的list. &lt;/p&gt;
&lt;p&gt;另外访问第i个元素, vector是 &lt;code&gt;v[i]&lt;/code&gt;, 而list需要用两个括号 &lt;code&gt;l[[i]]&lt;/code&gt;(&lt;code&gt;l[i]&lt;/code&gt;还是一个list, &lt;code&gt;l[[i]]&lt;/code&gt;才是想要的东西... )&lt;/p&gt;
&lt;p&gt;看例子: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nb"&gt;numeric&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;自动&lt;/span&gt;&lt;span class="k"&gt;cast&lt;/span&gt;&lt;span class="err"&gt;把前两个数字转成了&lt;/span&gt;&lt;span class="nb"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;变成一个&lt;/span&gt;&lt;span class="nb"&gt;char&lt;/span&gt;&lt;span class="err"&gt;类型的&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;"1"&lt;/span&gt; &lt;span class="ss"&gt;"2"&lt;/span&gt; &lt;span class="ss"&gt;"a"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;"a"&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同理, matrix和data.frame也类似, matrix的所有元素必须相同, 而data.frame可以每一列各不相同(不过一列之中需要相同). 另外data.frame也支持用&lt;code&gt;$&lt;/code&gt;选取一列, matrix则不支持.&lt;/p&gt;
&lt;h2 id="functions"&gt;functions&lt;/h2&gt;
&lt;p&gt;R的函数定义为如下形式, 注意, 函数体的最后一句就是返回值, 不用显示写"return" (类似scala).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;myfunnction&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;...&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="c1"&gt;# ...&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;the.return.value&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外注意到上面函数定义, 参数里有三个点&lt;code&gt;...&lt;/code&gt;, 这个不是必须的, 它的的作用见下一节. &lt;/p&gt;
&lt;p&gt;R是函数式语言: 一个function可以作为参数传递, 例子就是&lt;code&gt;apply&lt;/code&gt;, 见下一节.&lt;/p&gt;
&lt;h2 id="applylapplysapply"&gt;apply/lapply/sapply&lt;/h2&gt;
&lt;h3 id="apply"&gt;apply&lt;/h3&gt;
&lt;p&gt;apply这个函数的doc写到用法为: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;apply(X, MARGIN, FUN, ...)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X&lt;/code&gt;是操作的数据(&lt;strong&gt;一般为matrix&lt;/strong&gt;), &lt;code&gt;MARGIN&lt;/code&gt;为选择对行或列操作(类似numpy的&lt;code&gt;axis&lt;/code&gt;参数), &lt;code&gt;FUN&lt;/code&gt;就是作为参数传入的函数了. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nrow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ncol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="n"&gt;[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="n"&gt;[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="n"&gt;[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="n"&gt;[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;    &lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="m"&gt;7&lt;/span&gt;   &lt;span class="m"&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="m"&gt;8&lt;/span&gt;   &lt;span class="m"&gt;11&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;    &lt;span class="m"&gt;3&lt;/span&gt;    &lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="m"&gt;9&lt;/span&gt;   &lt;span class="m"&gt;12&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# apply on row&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# apply on col&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;33&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里类似做reduce操作, 而MARGIN就是指定要reduce哪一个维度. &lt;/p&gt;
&lt;p&gt;另外文档里的三个点&lt;code&gt;...&lt;/code&gt;很有意思, 它是&lt;strong&gt;参数FUN的额外参数&lt;/strong&gt; ! 下面是一个例子, 给FUN传入了一个匿名函数: &lt;code&gt;function(x,power) sum(x^power)&lt;/code&gt;, 它计算x里元素的power次方, 然后加起来. 所以在apply里可以指定FUN这个&lt;code&gt;power&lt;/code&gt;参数的数值, 这就对应着apply用法里的这三个点&lt;code&gt;...&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt; apply(mat, 1, function(x,power) sum(x^power), power=1 )&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[1] 22 26 30&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt; apply(mat, 1, function(x,power) sum(x^power), power=2 )&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[1] 166 214 270&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="lapplysapply"&gt;lapply/sapply&lt;/h3&gt;
&lt;p&gt;如果说上面&lt;code&gt;apply&lt;/code&gt;一般用在matrix上, 用于将一个matrix &lt;strong&gt;reduce&lt;/strong&gt;为向量的话, &lt;code&gt;lapply/sapply&lt;/code&gt;就是&lt;strong&gt;map&lt;/strong&gt;操作了: 作用在一个vector/list上, 返回对每一个元素进行操作后的新list. &lt;/p&gt;
&lt;p&gt;它们的区别大概是: lapply返回list, sapply返回vector. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sq&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;x^2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# lapply returns a list&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[[1]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[[2]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[[3]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[[4]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# lapply returns a list&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[[1]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[[2]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[[3]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[[4]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# sapply returns a vector&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# sapply returns a vector&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;[1]&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="R"></category></entry><entry><title>R语言从入门到放弃 (1). 基础</title><link href="https://x-wei.github.io/Rnotes-1-basics.html" rel="alternate"></link><published>2016-07-26T00:00:00+02:00</published><updated>2016-07-26T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-07-26:Rnotes-1-basics.html</id><summary type="html">&lt;p&gt;这个"从入门到放弃"系列是为了应付eth的&lt;a href="https://stat.ethz.ch/education/semesters/ss2016/CompStat"&gt;computational statistics&lt;/a&gt;这门课... 对R无爱... &lt;/p&gt;
&lt;h2 id="terminology"&gt;terminology&lt;/h2&gt;
&lt;p&gt;首先在stat里面有一些叫法和以前不太一样: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;predictor variable&lt;/code&gt;: 就是机器学习里面说的feature (Xi)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;design points&lt;/code&gt;: 是机器学习里的训练数据(X1...Xn)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;response variable&lt;/code&gt;: 要预测的变量(y)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rstudio"&gt;Rstudio&lt;/h2&gt;
&lt;p&gt;这个是用R编程的标配, 确实很方便, 不用可惜. 另外R markdown也不错, 可以边写markdown边运行代码, 建议编辑器窗口里新建rmd文件. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认有四个窗口:  编辑器, 变量, 命令行, 画图/帮助. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-1-basics/pasted_image.png"/&gt;&lt;/p&gt;
&lt;h2 id="kuai-jie-jian"&gt;快捷键&lt;/h2&gt;
&lt;p&gt;一些常用的快捷键: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alt+-&lt;/code&gt;: 用于输入赋值符号&lt;code&gt;&amp;lt;-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(编辑器窗口中) &lt;code&gt;ctrl+enter&lt;/code&gt;: (在console里)执行光标所在的行, 等同于按钮"run"&lt;/li&gt;
&lt;li&gt;(r markdown编辑器窗口中) &lt;code&gt;ctrl+alt+I&lt;/code&gt;: 插入一个R代码的chunk&lt;/li&gt;
&lt;li&gt;(r markdown编辑器窗口中) &lt;code&gt;ctrl+shift+enter&lt;/code&gt;: 运行当前code chunk&lt;/li&gt;
&lt;li&gt;(选中一个函数名) &lt;code&gt;F1&lt;/code&gt;: 在右下角帮助窗口里显示相关文档. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="r-wen-dang"&gt;R 文档&lt;/h2&gt;
&lt;p&gt;获得文档也可以输入: &lt;code&gt;?funcname&lt;/code&gt; 或者 &lt;code&gt;help(funcname)&lt;/code&gt; 输入 &lt;code&gt;??funcname&lt;/code&gt; 则是非精确匹配的查找.&lt;/p&gt;
&lt;p&gt;另外获得例子可以使用&lt;code&gt;demo()&lt;/code&gt;/&lt;code&gt;example()&lt;/code&gt;, 例如: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;demo(graphs)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;example("plot")&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是一个R文档的例子(运行&lt;code&gt;?lm&lt;/code&gt;得到): &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-1-basics/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;章节Arguments里介绍了每个参数的意义和用法, 然后往下翻还有一个Values章节: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/Rnotes-1-basics/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;Values里的每一项是这个函数的返回值(object)的内容, 比如要获得一个lm object的参数, 只需要: &lt;code&gt;lm_obj$coefficients&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="r-101"&gt;R 101&lt;/h2&gt;
&lt;p&gt;首先, R非常让我非常不习惯的一点是: 在R里面, dot&lt;code&gt;.&lt;/code&gt;&lt;strong&gt;只是一个普通的字符&lt;/strong&gt;, 它的用法和python里的下划线&lt;code&gt;_&lt;/code&gt;类似, 只是起到分割函数名里的单词而已... 在其他语言里, dot&lt;code&gt;.&lt;/code&gt;一般都是用来调用函数或者获取field的. 所以见到&lt;code&gt;cv.ss&lt;/code&gt;之类的名字的时候别以为是变量cv的一个field... 这个就相当于python里一个叫&lt;code&gt;cv_ss&lt;/code&gt;的变量...&lt;/p&gt;
&lt;p&gt;获取一个object的field, 在R里面是用dollar&lt;code&gt;$&lt;/code&gt;(另外R里的object似乎并没有method!) . &lt;/p&gt;
&lt;p&gt;另外, 赋值使用的是&lt;code&gt;&amp;lt;-&lt;/code&gt;, 等号似乎只在指定函数参数的时候用到. &lt;/p&gt;
&lt;h2 id="chang-yong-han-shu"&gt;常用函数&lt;/h2&gt;
&lt;p&gt;接下来列举一些常用的函数, 它们的详细用法可以看文档... &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c(...)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;combine values into vector/list. 
注意的是它会自动把list/vector参数展开: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt; c(1,2,3)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[1] 1 2 3&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt; c(c(1,2),3)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[1] 1 2 3&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;利用这个性质, 可以这样向一个列表(向量)添加东西: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;l &amp;lt;- c(l, new_element)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;numeric(l)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成长度为l的(全0)向量. 经常用这个命令生成一个"数组" 然后用一个循环向里面写入东西. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt; numeric(5)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[1] 0 0 0 0 0&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取向量第i个元素: &lt;code&gt;vec[i]&lt;/code&gt;(btw, R index是从1开始的)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;matrix(v, nrow=nr, ncol=nc)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成一个矩阵, 全部初始化为v, nr行, nc列. 
获取i行j列: &lt;code&gt;mat[i,j]&lt;/code&gt;
获取第i行: &lt;code&gt;mat[i,]&lt;/code&gt; 第j列: &lt;code&gt;mat[,j]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;seq(from, to, by)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类似py的range函数...  另外&lt;code&gt;1:n&lt;/code&gt;是&lt;code&gt;seq(1,n,by=1)&lt;/code&gt;的简写&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt; seq(1,10, 2)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[1] 1 3 5 7 9&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt; 1:5&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[1] 1 2 3 4 5&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for循环: &lt;code&gt;for(i in 1:n){...&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rep&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直接看例子: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt; rep(1, 10)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt; [1] 1 1 1 1 1 1 1 1 1 1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt; rep(c(1,2), 10)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt; [1] 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt; rep(c(1,2), each=10)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt; [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;length(lst)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用来获得一个向量/列表的长度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dim(mat)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;获得一个矩阵的维度, 类似numpy的&lt;code&gt;mat.shape&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cbind/rbind&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按行/列合成矩阵&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt; cbind(c(1,2),c(3,4))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;     [,1] [,2]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[1,]    1    3&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[2,]    2    4&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;str&lt;/code&gt;/&lt;code&gt;summary&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输出一个obj的信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat&lt;/code&gt;/&lt;code&gt;print&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打印, 区别是&lt;code&gt;cat&lt;/code&gt;可以依次打印多个字符串/对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;which&lt;/code&gt;/&lt;code&gt;which.max&lt;/code&gt;/&lt;code&gt;which.min&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;which.max/min类似于argmax/min&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt; which(2&amp;gt;c(1,2,1))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[1] 1 3&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt; which.max(c(1,2,1))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[1] 2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt; which.min(c(1,2,1))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[1] 1&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;paste&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个函数可以用来给一个数组的前面加一个前缀, 看例子: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt; paste("a", 1:5, sep="-")&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;[1] "a-1" "a-2" "a-3" "a-4" "a-5"&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;operators: with &lt;code&gt;%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些运算符需要用%包裹起来, 比如:
- &lt;code&gt;%%&lt;/code&gt;: 取模
- &lt;code&gt;%*%&lt;/code&gt;: 矩阵相乘
- &lt;code&gt;%/%&lt;/code&gt;: 整数相除(类似java里int的除法)
- &lt;code&gt;a %in% b&lt;/code&gt;: 判断元素是否属于b&lt;/p&gt;</summary><category term="R"></category></entry><entry><title>[Scala MOOC I] Lec4: Types and Pattern Matching</title><link href="https://x-wei.github.io/progfun1_lec4_pattern_matching.html" rel="alternate"></link><published>2016-07-17T00:00:00+02:00</published><updated>2016-07-17T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-07-17:progfun1_lec4_pattern_matching.html</id><summary type="html">&lt;h2 id="41-objects-everywhere"&gt;4.1 - Objects Everywhere&lt;/h2&gt;
&lt;p&gt;scala is &lt;em&gt;pure&lt;/em&gt; OO: every value is an obj, every operation is a method of obj.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;scala.Int&lt;/code&gt; &lt;code&gt;scala.Boolean&lt;/code&gt; maps to JVM standard primitive types.  &lt;/p&gt;
&lt;p&gt;Implement &lt;code&gt;Boolean&lt;/code&gt; withous primitive type in scala:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;Then defin &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;true&lt;/code&gt; as objects, give implementation for &lt;code&gt;ifThenElse()&lt;/code&gt; funciton:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Boolean&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ifThenElse&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Boolean&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ifThenElse&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="42-functions-as-objects"&gt;4.2 - Functions as Objects&lt;/h2&gt;
&lt;p&gt;Function values are treated as objects in scala.&lt;br/&gt;
the type &lt;code&gt;A =&amp;gt; B&lt;/code&gt; is an abbrevation for &lt;code&gt;scala.Function1[A, B]&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Functions are objects with &lt;/strong&gt;&lt;code&gt;apply&lt;/code&gt;&lt;strong&gt; methods.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;anonymous function &lt;code&gt;(x: Int) =&amp;gt; x*x&lt;/code&gt; is expanded to :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;new Function1[Int, Int]{ &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;def apply(x: Int) = x*x &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;function call &lt;code&gt;f(a,b)&lt;/code&gt; is expanded to:  &lt;code&gt;f.apply(a,b)&lt;/code&gt;
&lt;code&gt;List(1,2)&lt;/code&gt; is expanded to : &lt;code&gt;List.apply(1,2)&lt;/code&gt; &lt;/p&gt;
&lt;h2 id="43-subtyping-and-generics"&gt;4.3 - Subtyping and Generics&lt;/h2&gt;
&lt;p&gt;2 forms of polymorphism: &lt;em&gt;subtyping and generics&lt;/em&gt; &lt;/p&gt;
&lt;h3 id="type-bounds"&gt;Type Bounds&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image003.png"/&gt;
&lt;code&gt;assertAllPos&lt;/code&gt; taks either &lt;code&gt;EmptySet&lt;/code&gt; or &lt;code&gt;NonEmptySet&lt;/code&gt;, the return type is EmptySet (when para=EmptySet) or NonEmptySet (when para=NonEmpty).&lt;br/&gt;
To express this situation:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;def assertAllPos[S &amp;lt;: IntSet](r: S): S = ...&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Here &lt;code&gt;&amp;lt;: IntSet&lt;/code&gt; means IntSet is an upper bound of the type parameter.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image004.png"/&gt; 
and we can mix the two notations:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;[S &amp;gt;: NonEmpty &amp;lt;: IntSet]&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="covariance"&gt;Covariance&lt;/h3&gt;
&lt;p&gt;Given &lt;code&gt;NonEmpty &amp;lt;: IntSet&lt;/code&gt;,&lt;br/&gt;
should we have: &lt;code&gt;List[NonEmpty] &amp;lt;: List[IntSet]&lt;/code&gt; ? &lt;/p&gt;
&lt;p&gt;In this case the typse are called *covariant. * &lt;/p&gt;
&lt;p&gt;In java, arrays are covariant: &lt;code&gt;NonEmpty[] &amp;lt;: IntSet[]&lt;/code&gt; 
but this might cause problems:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;p&gt;will get ArrayStoreException in 3rd line.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Liskov substitution principle&lt;/strong&gt;: when a type can be a subtype of another  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If A&amp;lt;:B, then everything one can do with an object of type B, one should also be able to do it with object of type A.&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In scala the Array is not covariant: &lt;code&gt;Array[IntSet]&lt;/code&gt; is not supertype of &lt;code&gt;Array[NonEmpty]&lt;/code&gt; &lt;/p&gt;
&lt;h2 id="45-decomposition_1"&gt;4.5 - Decomposition&lt;/h2&gt;
&lt;p&gt;ex: arithmetic expression interpreter: a tree of numbers and sums, both are subtype of &lt;code&gt;Expr&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;1st try: test and accessor methods &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;p&gt;→ tedious... And to add more operands need to add many more methods...  &lt;/p&gt;
&lt;p&gt;2nd try: (non-solution) 
type testing and type casting 
&lt;code&gt;isinstantceof&lt;/code&gt;, &lt;code&gt;asinstanceof&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;p&gt;discouraged in scala. &lt;/p&gt;
&lt;p&gt;1st solution: &lt;strong&gt;OO decomposition&lt;/strong&gt; 
add &lt;code&gt;eval&lt;/code&gt; method to class Expr. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;p&gt;limitation: if we want to simplify an expression,  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;p&gt;⇒ there is no local simplification ! &lt;/p&gt;
&lt;p&gt;⇒ &lt;strong&gt;pattern matching&lt;/strong&gt; &lt;/p&gt;
&lt;h2 id="46-pattern-matching"&gt;4.6 - Pattern Matching&lt;/h2&gt;
&lt;p&gt;goal: &lt;em&gt;reverse&lt;/em&gt; the construction process.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;which subclass it is? &lt;/li&gt;
&lt;li&gt;what were the arguments? &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="case-classes"&gt;case classes&lt;/h3&gt;
&lt;p&gt;add &lt;code&gt;case&lt;/code&gt; in class definition. 
ex. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;case class Number(n: Int) extends Expr &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;case class Sum(e1: Expr, e2: Expr) extends Expr&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;adding &lt;code&gt;case&lt;/code&gt; adds &lt;em&gt;companion objects&lt;/em&gt; with &lt;code&gt;apply&lt;/code&gt; methods:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;p&gt;according to the expansion, &lt;code&gt;Number(2)&lt;/code&gt; is equal to &lt;code&gt;Number.apply(2)&lt;/code&gt; which is actaully &lt;code&gt;new Numver(2)&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="pattern-matching"&gt;pattern matching&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;match&lt;/code&gt;: extension of &lt;code&gt;switch&lt;/code&gt; in java, ex:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def eval(e: Expr): Int = e match{ &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    case Number(n) =&amp;gt; n &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    case Sum(e1, e2) =&amp;gt; e1 + e2 &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;p&gt;patterns include:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;constructor, ex. &lt;code&gt;Number(n)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;variable, ex. &lt;code&gt;n, e1, e2&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;wildcard patters, ex. &lt;code&gt;_&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;constant, ex. &lt;code&gt;1, true&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;or their combination, ex &lt;code&gt;Sum(Number(1),  Var(x))&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The whole match expression is replaced with the expression to the rhs of the first match pattern.  &lt;/p&gt;
&lt;p&gt;exercice: implement a &lt;code&gt;show&lt;/code&gt; function. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def show(e: Expr): String = e match { &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    case Number(n) =&amp;gt; n.toString &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    case Sum(l, r) =&amp;gt; show(l) + "+" + show(r) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="47-lists_1"&gt;4.7 - Lists&lt;/h2&gt;
&lt;p&gt;example:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image013.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image014.png"/&gt; &lt;/p&gt;
&lt;p&gt;difference between List and Array:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lists are immutable, elements cannot change &lt;/li&gt;
&lt;li&gt;Lists are recursive, arrays are flat &lt;/li&gt;
&lt;li&gt;both are homogeneous, all elements of the same type &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All &lt;code&gt;List&lt;/code&gt;s in scala are constructed with:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Empty list &lt;code&gt;Nil&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;construction op &lt;code&gt;::&lt;/code&gt;(pronunced: cons), &lt;code&gt;x::xs&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image015.png"/&gt; &lt;/p&gt;
&lt;p&gt;convention in scala: operators ending with &lt;code&gt;:&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;are &lt;em&gt;right-associative&lt;/em&gt;. &lt;code&gt;a::b::c&lt;/code&gt; is equal to &lt;code&gt;a::(b::c)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;seen as method calls from the right-hand operand. &lt;code&gt;1::2::Nil&lt;/code&gt; equal to &lt;code&gt;Nil.::(2).::(1)&lt;/code&gt; ( &lt;code&gt;::&lt;/code&gt; is prepend operation) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;operations on lists:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;head &lt;/li&gt;
&lt;li&gt;tail &lt;/li&gt;
&lt;li&gt;isEmpty &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;list in pattern matching: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image016.png"/&gt; &lt;/p&gt;
&lt;p&gt;ex. insertion sort of lists &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec4_pattern_matching/pasted_image017.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="scala"></category></entry><entry><title>[Scala MOOC I] Lec3: Data and Abstraction</title><link href="https://x-wei.github.io/progfun1_lec3_data_abstraction.html" rel="alternate"></link><published>2016-06-28T00:00:00+02:00</published><updated>2016-06-28T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-06-28:progfun1_lec3_data_abstraction.html</id><summary type="html">&lt;p&gt;This week, we'll cover traits, and we'll learn how to organize classes into hierarchies. We'll cover the hierarchy of standard Scala types, and see how to organize classes and traits into packages. Finally, we'll touch upon the different sorts of polymorphism in Scala. &lt;/p&gt;
&lt;h2 id="31-class-hierarchies"&gt;3.1 - Class Hierarchies&lt;/h2&gt;
&lt;h3 id="abstract-class"&gt;abstract class&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;abstract class IntSet { &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  def incl(x: Int): IntSet &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  def contains(x: Int): Boolean &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;abstract class:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contains members without implementation &lt;/li&gt;
&lt;li&gt;cannot be created with &lt;code&gt;new&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="class-extensions"&gt;class Extensions&lt;/h3&gt;
&lt;p&gt;implement the integer set abstract class with BST 
2 types of trees: &lt;code&gt;Empty&lt;/code&gt; and &lt;code&gt;NonEmpty&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;IntSet&lt;/span&gt; { &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;incl&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Int&lt;/span&gt;): &lt;span class="n"&gt;IntSet&lt;/span&gt; = &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NonEmpty&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;, &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt;, &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt;)&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nb"&gt;contains&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Int&lt;/span&gt;): &lt;span class="n"&gt;Boolean&lt;/span&gt; = &lt;span class="n"&gt;false&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;NonEmpty&lt;/span&gt;(&lt;span class="n"&gt;elem:&lt;/span&gt; &lt;span class="nb"&gt;Int&lt;/span&gt;, &lt;span class="n"&gt;left:&lt;/span&gt; &lt;span class="n"&gt;IntSet&lt;/span&gt;, &lt;span class="n"&gt;right:&lt;/span&gt; &lt;span class="n"&gt;IntSet&lt;/span&gt;) &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;IntSet&lt;/span&gt; { &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;incl&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Int&lt;/span&gt;): &lt;span class="n"&gt;IntSet&lt;/span&gt; = &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="o"&gt;x&lt;/span&gt; == &lt;span class="n"&gt;elem&lt;/span&gt;) &lt;span class="n"&gt;this&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="n"&gt;elem&lt;/span&gt; &amp;gt; &lt;span class="o"&gt;x&lt;/span&gt;) &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NonEmpty&lt;/span&gt;(&lt;span class="n"&gt;elem&lt;/span&gt;, &lt;span class="n"&gt;left&lt;/span&gt;.&lt;span class="n"&gt;incl&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;), &lt;span class="n"&gt;right&lt;/span&gt;)// &lt;span class="n"&gt;immutable&lt;/span&gt;! &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NonEmpty&lt;/span&gt;(&lt;span class="n"&gt;elem&lt;/span&gt;, &lt;span class="n"&gt;left&lt;/span&gt;, &lt;span class="n"&gt;right&lt;/span&gt;.&lt;span class="n"&gt;incl&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;))&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nb"&gt;contains&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Int&lt;/span&gt;): &lt;span class="n"&gt;Boolean&lt;/span&gt; = &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="n"&gt;elem&lt;/span&gt; == &lt;span class="o"&gt;x&lt;/span&gt;) &lt;span class="nb"&gt;true&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="n"&gt;elem&lt;/span&gt; &amp;gt; &lt;span class="o"&gt;x&lt;/span&gt;) &lt;span class="n"&gt;left&lt;/span&gt;.&lt;span class="nb"&gt;contains&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;) &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;.&lt;span class="nb"&gt;contains&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;) &lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;root class of all classes: &lt;code&gt;Object&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;replace concrete defintion of super class: &lt;code&gt;override&lt;/code&gt; is mandantory. &lt;/p&gt;
&lt;h3 id="object"&gt;Object&lt;/h3&gt;
&lt;p&gt;in the previous example, seems only one single &lt;code&gt;Empty&lt;/code&gt; set is needed.&lt;br/&gt;
⇒ define &lt;code&gt;Empty&lt;/code&gt; as &lt;strong&gt;singleton object&lt;/strong&gt; 
no other &lt;code&gt;Empty&lt;/code&gt; instances can be created, object is a &lt;em&gt;value.&lt;/em&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;IntSet&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;incl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;IntSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NonEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="k"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;"."&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="program"&gt;Program&lt;/h3&gt;
&lt;p&gt;create standalone scala applicatoins.&lt;br/&gt;
Each such applications contains an &lt;code&gt;object&lt;/code&gt; with a &lt;code&gt;main(args:Array[String])&lt;/code&gt; method &lt;/p&gt;
&lt;h3 id="exercice-implement-union"&gt;exercice: implement union&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;union(other:IntSet): IntSet&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;override def union(other: IntSet): IntSet = &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  left union (right union (other incl elem))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;why this recursive call terminates ?&lt;br/&gt;
every call to &lt;code&gt;union&lt;/code&gt; is on a &lt;em&gt;smaller&lt;/em&gt; IntSet ! &lt;/p&gt;
&lt;p&gt;写成这样就会stackoverflow: &lt;code&gt;other.incl(elem).union(left).union(right)&lt;/code&gt;&lt;br/&gt;
讨论见: &lt;a href="https://www.coursera.org/learn/progfun1/discussions/weeks/3/threads/AzJ-4CLYEeag6wpD-92Rcw"&gt;https://www.coursera.org/learn/progfun1/discussions/weeks/3/threads/AzJ-4CLYEeag6wpD-92Rcw&lt;/a&gt; 
(需要点"view earlier replies"才有) 
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec3_data_abstraction/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;h3 id="dynamic-binding"&gt;Dynamic Binding&lt;/h3&gt;
&lt;p&gt;behavior depends on the runtime type of the object.  &lt;/p&gt;
&lt;p&gt;~ higher-order functions &lt;/p&gt;
&lt;h2 id="lecture-32-how-classes-are-organized_1"&gt;Lecture 3.2 - How Classes Are Organized&lt;/h2&gt;
&lt;h3 id="package"&gt;package&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="n"&gt;imports&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;week3.Rational&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;week3.&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Rational&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;wildcard&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;week3._&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;can import either from a package or from an object &lt;/p&gt;
&lt;p&gt;automatically imported in scala:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec3_data_abstraction/pasted_image001.png"/&gt; 
ex: 
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec3_data_abstraction/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;scaladoc: &lt;a href="http://www.scala-lang.org/files/archive/api/current/#package"&gt;http://www.scala-lang.org/files/archive/api/current/#package&lt;/a&gt; &lt;/p&gt;
&lt;h3 id="traits"&gt;Traits&lt;/h3&gt;
&lt;p&gt;in scala/java, a class has only one super class (single inheritance).&lt;br/&gt;
have several supertypes? ⇒ trait! &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one class can extend many traits (concated by &lt;code&gt;with&lt;/code&gt;)  — like java &lt;code&gt;interface&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec3_data_abstraction/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;traits can contain fileds and concrete methods &lt;/li&gt;
&lt;li&gt;on the other hand, traits cannot have (value) parameters, but classes can &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="scala-class-hierchy"&gt;scala class hierchy&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec3_data_abstraction/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Any&lt;/code&gt;: base class of all &lt;/li&gt;
&lt;li&gt;&lt;code&gt;AnyVal&lt;/code&gt;: primitive types (&lt;code&gt;Int, Unit, Boolean,...&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;AnyRef&lt;/code&gt;: (=alias of &lt;code&gt;java.lang.Object&lt;/code&gt;) all reference types (&lt;code&gt;String, List, Seq, Iterable,...&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nothing&lt;/code&gt;: bottom of the hierchy, &lt;em&gt;is subtype of every type&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Null&lt;/code&gt;: &lt;em&gt;subtype of every reference type, &lt;/em&gt;&lt;code&gt;null&lt;/code&gt;'s type is &lt;code&gt;Null&lt;/code&gt;, not compatible with &lt;code&gt;AnyVal&lt;/code&gt; types.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;exception: &lt;code&gt;throw Exc&lt;/code&gt;, the typeof &lt;code&gt;Exc&lt;/code&gt; is &lt;code&gt;Nothing&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;exercice:&lt;br/&gt;
&lt;code&gt;if (true) 1 else false&lt;/code&gt; ⇒ type = &lt;code&gt;AnyVal&lt;/code&gt; &lt;/p&gt;
&lt;h2 id="lecture-33-polymorphism_1"&gt;Lecture 3.3 - Polymorphism&lt;/h2&gt;
&lt;h3 id="cons-list"&gt;cons-list&lt;/h3&gt;
&lt;p&gt;immutable linked list 
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec3_data_abstraction/pasted_image005.png"/&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec3_data_abstraction/pasted_image006.png"/&gt; 
implement this in scala: 
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec3_data_abstraction/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;p&gt;the &lt;code&gt;val&lt;/code&gt; in the class definition: &lt;strong&gt;defines at the same time parameter and field of a class&lt;/strong&gt;, equivalent to:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec3_data_abstraction/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;type parameters&lt;/strong&gt; (generic) 
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec3_data_abstraction/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;trait List[T]{ &lt;/span&gt;
&lt;span class="code-line"&gt;  def isEmpty : Boolean &lt;/span&gt;
&lt;span class="code-line"&gt;  def head: T &lt;/span&gt;
&lt;span class="code-line"&gt;  def tail: List[T] &lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;class Cons[T](val head:T, val tail: List[T]) extends List[T] { &lt;/span&gt;
&lt;span class="code-line"&gt;  def isEmpty(): Boolean = false &lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;head and tail are implemented in the parameters(fields), difference between &lt;code&gt;val&lt;/code&gt; and &lt;code&gt;def&lt;/code&gt; only consist in the initialization (CBN, CBV). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nil&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nothing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NoSuchElementException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"Nil.head"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nothing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NoSuchElementException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"Nil.tail"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;use nothing as return type, and throw an exception.  &lt;/p&gt;
&lt;h3 id="generic-functions"&gt;generic functions&lt;/h3&gt;
&lt;p&gt;type parameters can be applied to functions.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec3_data_abstraction/pasted_image011.png"/&gt; 
sometime the type parameter can be deduced by scala compiler.&lt;br/&gt;
ex. &lt;code&gt;singleton(2); singleton(true)&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="types-and-evaulation"&gt;Types and Evaulation&lt;/h3&gt;
&lt;p&gt;type parameters don't affect evaluation.&lt;br/&gt;
can assume type parameters are removed before the evaluation (&lt;em&gt;type erasure&lt;/em&gt;).  &lt;/p&gt;
&lt;h3 id="polymorphism"&gt;Polymorphism&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;subtyping: instances of subclass can be passed to a base class &lt;/li&gt;
&lt;li&gt;generics: function/class with type parameters &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;exercice: write a function &lt;code&gt;nth(n: Int, list: List)&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nth&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IndexOutOfBoundsException&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="programming-assignment-object-oriented-sets_1"&gt;Programming Assignment: Object-Oriented Sets&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;TweetSet&lt;/code&gt;: an abstract class &lt;code&gt;TweetSet&lt;/code&gt; with two concrete subclasses,&lt;code&gt;Empty&lt;/code&gt; which represents an empty set, and &lt;code&gt;NonEmpty(elem: Tweet, left: TweetSet, right: TweetSet&lt;/code&gt;), which represents a non-empty set as a binary tree rooted at elem. The tweets are indexed by their text bodies: the bodies of all tweets on the left are lexicographically smaller than elem and all bodies of elements on the right are lexicographically greater. &lt;/p&gt;</summary><category term="scala"></category></entry><entry><title>[Scala MOOC I] Lec2: Higher Order Functions</title><link href="https://x-wei.github.io/progfun1_lec2_highorder_func.html" rel="alternate"></link><published>2016-06-23T00:00:00+02:00</published><updated>2016-06-23T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-06-23:progfun1_lec2_highorder_func.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;This week, we'll learn about functions as first-class values, and higher order functions. We'll also learn about Scala's syntax and how it's formally defined. Finally, we'll learn about methods, classes, and data abstraction through the design of a data structure for rational numbers. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="21-higher-order-functions"&gt;2.1 - Higher-Order Functions&lt;/h2&gt;
&lt;p&gt;higher order functions: functions that takes functions as parameter or returns functions.  &lt;/p&gt;
&lt;p&gt;example:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image.png"/&gt; 
⇒ put the &lt;code&gt;f&lt;/code&gt; as a parameter &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def sum(f:Int =&amp;gt; Int, a: Int, b: Int):Int = { &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  if(a&amp;gt;b) 0 &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  else f(a) + sum(f, a+1, b) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="function-types"&gt;function types&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;A =&amp;gt; B&lt;/code&gt; is a function that takes &lt;code&gt;A&lt;/code&gt; as parameter and returns &lt;code&gt;B&lt;/code&gt;. &lt;/p&gt;
&lt;h3 id="anonymous-functions"&gt;Anonymous functions&lt;/h3&gt;
&lt;p&gt;"literals" for functions, syntactic sugar. 
ex.   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;(x: Int, y: Int) =&amp;gt; x+y&lt;/code&gt;
&lt;code&gt;(x: Int) =&amp;gt; x*x&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;use anon functions in previous &lt;code&gt;sum()&lt;/code&gt; function:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sum(x=&amp;gt;x, 1, 10) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;sum(x=&amp;gt;x*x, 1, 10)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;exercice: turn &lt;code&gt;sum()&lt;/code&gt; into tailrec fashion. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def sum2(f:Int =&amp;gt; Int, a: Int, b: Int):Int = { &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  @tailrec &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  def sumTR(a: Int, acc: Int): Int = { &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if (a &amp;gt; b) acc &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else sumTR(a + 1, acc + f(a)) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  } &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  sumTR(a, 0) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(note: using namescoping to eliminate parameters in inner functions) &lt;/p&gt;
&lt;h2 id="22-currying_1"&gt;2.2 - Currying&lt;/h2&gt;
&lt;p&gt;define a function that &lt;em&gt;returns  a funtion&lt;/em&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def sum3(f:Int =&amp;gt; Int): (Int, Int)=&amp;gt;Int = { &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  def sumF(a:Int, b:Int):Int = { &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(a&amp;gt;b) 0 &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else f(a) + sum3(f, a+1, b) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  } &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  sumF &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;when calling this function:&lt;br/&gt;
&lt;code&gt;sum3(cube)(1,10)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;syntactic sugar: shorter version of functions that return functions: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def sum3(f:Int =&amp;gt; Int)(a:Int, b:Int):Int = { &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(a&amp;gt;b) 0 &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else f(a) + sum3(f)(a+1, b) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;question: what is type of &lt;code&gt;sum3&lt;/code&gt;? 
→ &lt;code&gt;Int =&amp;gt; Int =&amp;gt; (Int, Int) =&amp;gt; Int&lt;/code&gt; 
note: functional types are &lt;em&gt;associated to the right&lt;/em&gt;,&lt;br/&gt;
&lt;code&gt;Int =&amp;gt; Int =&amp;gt; Int&lt;/code&gt; is equivalent to &lt;code&gt;Int =&amp;gt; (Int =&amp;gt; Int)&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="currying"&gt;"currying"&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image002.png"/&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;p&gt;exercice:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def product(f: Int =&amp;gt; Int)(a: Int, b: Int): Int = { &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  if (a &amp;gt; b) 1 &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  else a * product(f)(a + 1, b) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;} &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;product(x=&amp;gt;x)(1,10)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def fact(n:Int) = product(x=&amp;gt;x)(1,n) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;fact(10)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image007.png"/&gt; 
    def more_general(op: (Int,Int) =&amp;gt; Int, default: Int) 
                    (f: Int=&amp;gt; Int)(a:Int, b:Int):Int = { 
      if(a&amp;gt;b) default 
      else op(a, more_general(op, default)(f)(a + 1, b)) 
    } 
    more_general((x,y)=&amp;gt;x+y, 0)(x=&amp;gt;x)(1,10) &lt;/p&gt;
&lt;p&gt;老师的解法:&lt;br/&gt;
    def map_reduce(f:Int=&amp;gt; Int, op:(Int, Int)=&amp;gt;Int, default:Int) 
                  (a:Int, b:Int):Int = { 
      if(a&amp;gt;b) default 
      else op(f(a), map_reduce(f, op, default)(a+1,b)) 
    } 
    def factorial2(n:Int):Int = map_reduce(x=&amp;gt;x, (a,b)=&amp;gt; a*b, 1)(1,n) 
    factorial2(10) &lt;/p&gt;
&lt;h2 id="23-example-finding-fixed-points_1"&gt;2.3 - Example: Finding Fixed Points&lt;/h2&gt;
&lt;p&gt;find the fix point of a function: x = f(x) 
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;val tol = 0.001 &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;def isCloseEnough(x:Double, y:Double):Boolean = &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  math.abs((x-y)/x)&amp;lt;tol &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;def fixedPoint(f: Double=&amp;gt;Double)(firstGuess:Double):Double = { &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  def iterate(guess:Double):Double = { &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(isCloseEnough(guess, f(guess))) guess &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else iterate(f(guess)) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  } &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  iterate(firstGuess) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;} &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;fixedPoint(x=&amp;gt;1+x/2)(1)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;using the fixepoint function for &lt;code&gt;sqrt&lt;/code&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sqrt(x) = y such that: x=y*y &lt;/li&gt;
&lt;li&gt;=y such that y = x/y &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;=&lt;em&gt;fixed point for the function f(y)=x/y&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;def sqrt(x:Double):Double = fixedPoint(y=&amp;gt;x/y)(1) 
sqrt(2) &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ doesn't converge! ⇒ guess oscillates between 1 and 2... 
average damping: prevent the estimate from varying to much. 
⇒  &lt;em&gt;by taking the average of successive values&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;def sqrt2(x: Double): Double = fixedPoint(y =&amp;gt; (y + x / y) / 2)(1)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;abstract this damping technique: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def avgDamping(f:Double=&amp;gt; Double)(x:Double):Double = &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  (f(x)+x)/2 &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;def sqrt2(x: Double): Double = fixedPoint(avgDamping(y=&amp;gt;x/y))(1)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;summary: The highest level of abstraction is not always the best, but it is important to know the techniques of abstraction, so as to use them when appropriate. &lt;/p&gt;
&lt;h2 id="24-scala-syntax-summary"&gt;2.4 - Scala Syntax Summary&lt;/h2&gt;
&lt;p&gt;notations(EBNF): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt; denotes an alternative &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[...]&lt;/code&gt; an option (0 or 1) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{...}&lt;/code&gt; a repetition (0 or more) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Types&lt;/strong&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expressions&lt;/strong&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definitions&lt;/strong&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;h2 id="25-functions-and-data"&gt;2.5 - Functions and Data&lt;/h2&gt;
&lt;p&gt;example. &lt;em&gt;rational numbers&lt;/em&gt; (x/y) 
define a class:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;class Rational(x:Int, y:Int){ &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  def numer = x &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  def denom = y &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;} &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;val x = new Rational(1,2) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;x.numer &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;x.denom&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;this definition creates both a class and the constructor.&lt;br/&gt;
now implement arithmetic: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Rational&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rational&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numer&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;denom&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;denom&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;denom&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;denom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;neg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rational&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;numer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;denom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Rational&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;neg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numer&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="ss"&gt;"/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;denom&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="26-more-fun-with-rationals"&gt;2.6 - More Fun With Rationals&lt;/h2&gt;
&lt;p&gt;simplify the rationals &lt;em&gt;at construction&lt;/em&gt;:  add private members:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;private val g = gcd(x, y) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;def numer = x/g &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;def denom = y/g&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;other options:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;replace &lt;code&gt;g&lt;/code&gt; with &lt;code&gt;gcd(x,y)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;turn &lt;code&gt;numer&lt;/code&gt; and &lt;code&gt;denom&lt;/code&gt; into &lt;code&gt;val&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;add less and max function:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="k"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Rational&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numer&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;denom&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;denom&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numer&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="k"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Rational&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="preconditions"&gt;preconditions&lt;/h3&gt;
&lt;p&gt;ex: avoid divide by 0.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;require(y!=0, "denominator must be non zero")&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;→ &lt;em&gt;java.lang.IllegalArgumentException: requirement failed: denominator must be non zero&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;require&lt;/code&gt;is a test to perform when the class is initialized.&lt;br/&gt;
similar: &lt;code&gt;assert()&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="constructor"&gt;constructor&lt;/h3&gt;
&lt;p&gt;in scala a class implicitly introduces a &lt;strong&gt;primary constructor:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;takes parameters of the class&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;em&gt;executes all statements in the class body&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;to add another constructor: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;def this(x:Int) = this(x,1)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;exercice:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;override def toString = { &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  val g = gcd(numer, denom) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  numer/g + "/" + denom/g &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="27-evaluation-and-operators_1"&gt;2.7 - Evaluation and Operators&lt;/h2&gt;
&lt;h2 id="evaluation-for-classobject"&gt;evaluation for class/object&lt;/h2&gt;
&lt;p&gt;extend the substitution model to classes and objects 
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image014.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image015.png"/&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image016.png"/&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image017.png"/&gt; &lt;/p&gt;
&lt;p&gt;examples:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image019.png"/&gt; &lt;/p&gt;
&lt;h2 id="operator-overloading"&gt;operator overloading&lt;/h2&gt;
&lt;h3 id="infix-ops"&gt;infix ops&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;any method with one parameter can be used as an infix operator.&lt;/strong&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image020.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;scala identifiers can bu symbolic:&lt;/em&gt;
&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image021.png"/&gt; &lt;/p&gt;
&lt;p&gt;⇒ change names to &lt;code&gt;+, &amp;lt;, -,&lt;/code&gt; use in this way: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;x + y &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;x &amp;lt; y &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;x max y &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;x - y - z&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="unitary-ops"&gt;unitary ops&lt;/h3&gt;
&lt;p&gt;now change the &lt;code&gt;neg&lt;/code&gt; method: prefix operator, and might be confused with the sub(&lt;code&gt;-&lt;/code&gt;) 
⇒ it's name is special: &lt;code&gt;unary_-&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;def unary_- = new Rational(-numer, denom)&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="precedence-of-ops"&gt;precedence of ops&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;the precedence of an op is defined by its first letter&lt;/strong&gt; 
order (by increasing precedence): &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec2_highorder_func/pasted_image022.png"/&gt; 
quite the same as in java &lt;/p&gt;
&lt;h2 id="programming-assignment-functional-sets_1"&gt;Programming Assignment: Functional Sets&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Mathematically, we call the function which takes an integer as argument and which returns a boolean indicating whether the given integer belongs to a set, the characteristic function of the set. For example, we can characterize the set of negative integers by the characteristic function (x: Int) =&amp;gt; x &amp;lt; 0. &lt;/p&gt;
&lt;p&gt;Therefore, we choose to represent a set by its characterisitc function and define a type alias for this representation: &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;type Set = Int =&amp;gt; Boolean &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;def contains(s: Set, elem: Int): Boolean = s(elem)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="scala"></category></entry><entry><title>[Scala MOOC I] Lec1: Functions &amp; Evaluation</title><link href="https://x-wei.github.io/progfun1_lec1_fun_and_eval.html" rel="alternate"></link><published>2016-06-21T00:00:00+02:00</published><updated>2016-06-21T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-06-21:progfun1_lec1_fun_and_eval.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;In this week, we'll learn the difference between functional imperative programming. We step through the basics of Scala; covering expressions, evaluation, conditionals, functions, and recursion  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="11-programming-paradigms"&gt;1.1 - Programming Paradigms&lt;/h2&gt;
&lt;p&gt;imperative programming:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;modify mutable variables  &lt;/li&gt;
&lt;li&gt;using assignments  &lt;/li&gt;
&lt;li&gt;control structures: if-else, loops, break, continue, return, etc.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;~~~&amp;gt; Von Neumann computer:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;conceptualize data structures word-by-word. ⇒ need higher level abstractions (theories).&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;theory doesn't describe mutations!&lt;/strong&gt;&lt;br/&gt;
ex. theories of polynomials  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;To implement high-level concepts following their math theories, &lt;strong&gt;there's no place for mutation&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Functional programming&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image004.png"/&gt;&lt;br/&gt;
functions in FP language are 1st-class citizens.  &lt;/p&gt;
&lt;h2 id="12-elements-of-programming"&gt;1.2 - Elements of Programming&lt;/h2&gt;
&lt;p&gt;in a language:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;primitive expressions  &lt;/li&gt;
&lt;li&gt;operators to combin expressions  &lt;/li&gt;
&lt;li&gt;abstract expressions: introduce a name for an expression  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;primitive types in scala are written capatilized:   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;h3 id="repl"&gt;REPL&lt;/h3&gt;
&lt;p&gt;interactive shell: write expressions and respond its value  &lt;/p&gt;
&lt;h3 id="evaluation"&gt;Evaluation&lt;/h3&gt;
&lt;p&gt;evaluation: &lt;strong&gt;expression → value&lt;/strong&gt;&lt;br/&gt;
evaluation stops onces it results in a &lt;em&gt;value.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;evaluate non-primitive expressions:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;take the left-most operator  &lt;/li&gt;
&lt;li&gt;take (left and right) operands   &lt;/li&gt;
&lt;li&gt;apply the operator to operands  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;evaluate names:&lt;/strong&gt;&lt;br/&gt;
replace the name with the rhs of its &lt;em&gt;definition.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;definitions can have parameters.&lt;br/&gt;
ex. variable/return types are &lt;em&gt;after&lt;/em&gt; their names, seperated by a &lt;code&gt;:&lt;/code&gt;&lt;br/&gt;
&lt;code&gt;def power(x: Double, y: Int): Double = ...&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;evaluate a parameterized function:&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;p&gt;This scheme is called "&lt;strong&gt;substition model&lt;/strong&gt;" — formalized in the lambda calculus. This can be applied as long as there is no &lt;em&gt;side effects&lt;/em&gt;(ex. modify variable &lt;code&gt;c++&lt;/code&gt;)&lt;em&gt;.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Termination&lt;/strong&gt;&lt;br/&gt;
Q: does every expression evaluates to a value? &lt;br/&gt;
NO, ex. &lt;br/&gt;
&lt;code&gt;def loop: Int = loop&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;change evaluation strategy&lt;/strong&gt;&lt;br/&gt;
do &lt;em&gt;not&lt;/em&gt; reduce argument values before rewrite function application.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;h2 id="call-by-name-and-call-by-value_1"&gt;call-by-name and call-by-value&lt;/h2&gt;
&lt;p&gt;the above evaluation schemes.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;call-by-value: reduce argument values before rewrite function application.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;advantage: it evaluates every function argument only once.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;call-by-name: do not reduce arg values  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;advantage: a function argument is not evaluated if the corresponding parameter is unused in the evaluation&lt;br/&gt;
of the function body.  &lt;/p&gt;
&lt;p&gt;ex.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;h2 id="13-evaluation-strategies-and-termination"&gt;1.3 - Evaluation Strategies and Termination&lt;/h2&gt;
&lt;p&gt;CBV and CBN:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;p&gt;ex.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def first(x: Int, y: Int) = x  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;first(1, loop)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in scala:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;normally use call-by-value (more efficient than call-by-name because it avoid repeated computation of CBN).  &lt;/li&gt;
&lt;li&gt;but: &lt;strong&gt;if a  &lt;/strong&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;strong&gt; before a parameter type&lt;/strong&gt;, that parameter is called &lt;em&gt;by-name&lt;/em&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def constOne(x: Int, y: =&amp;gt; Int) = 1  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;constOne(1+2, loop)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;constOne(loop, 1)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="14-conditionals-and-value-definitions"&gt;1.4 - Conditionals and Value Definitions&lt;/h2&gt;
&lt;h3 id="conditional-expressions"&gt;conditional expressions&lt;/h3&gt;
&lt;p&gt;the &lt;code&gt;if-else&lt;/code&gt; expression&lt;br/&gt;
the &lt;code&gt;if-else&lt;/code&gt; is an expression, not statement.&lt;br/&gt;
ex. &lt;code&gt;def abs(x: Int): Int = if (x&amp;gt;=0) x else -x&lt;/code&gt;&lt;br/&gt;
the &lt;code&gt;x&amp;gt;=0&lt;/code&gt; is a boolean expression, sometimes called &lt;strong&gt;predicates&lt;/strong&gt;.  &lt;/p&gt;
&lt;h3 id="cbn-and-cbv-for-definition"&gt;CBN and CBV for definition&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;def&lt;/code&gt; form is by name, its rhs is evaluated at each use  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;val&lt;/code&gt; is by value, evaluted at the definiton  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;Execution&lt;/span&gt; &lt;span class="n"&gt;interrupted&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;exercice: implement &lt;code&gt;and(x,y)&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;res3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="15-example-square-roots-with-newtons-method_1"&gt;1.5 - Example: square roots with Newton's method&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;def sqrt(x: Double): Double = ...&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;need helper (recursive) functions.   &lt;/p&gt;
&lt;p&gt;note: in scala the &lt;em&gt;return type of recursive functions&lt;/em&gt; must be given.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;improve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isGoodGuess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;001&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sqrtItr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isGoodGuess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;sqrtItr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;improve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrtItr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="16-blocks-and-lexical-scope"&gt;1.6 - Blocks and Lexical Scope&lt;/h2&gt;
&lt;h3 id="nested-functions"&gt;nested functions&lt;/h3&gt;
&lt;p&gt;put aux functions inside a function.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;improve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isGoodGuess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;001&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sqrtItr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isGoodGuess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;sqrtItr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;improve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;sqrtItr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="blocks-and-visibility"&gt;blocks and visibility&lt;/h3&gt;
&lt;p&gt;blocks: delimited by braces &lt;code&gt;{...}&lt;/code&gt;&lt;br/&gt;
The last element of a block is an expression that defines its value.&lt;br/&gt;
Blocks are themselves expressions; &lt;em&gt;a block may appear everywhere an expression can&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image013.png"/&gt; &lt;/p&gt;
&lt;p&gt;ex.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;val x = 0  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;def f(y: Int) = y +1  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;val result = {  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  val x = f(3);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  x * x  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;} + x // result = 16&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ex. eliminate the parameter &lt;code&gt;x&lt;/code&gt; of helper functions inside the &lt;code&gt;sqrt&lt;/code&gt; function  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;improve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isGoodGuess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;001&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sqrtItr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isGoodGuess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;sqrtItr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;improve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;sqrtItr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;about multiline expressions: put the operator in the first line to avoid ambguity.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image014.png"/&gt; &lt;/p&gt;
&lt;h2 id="17-tail-recursion_1"&gt;1.7 - Tail Recursion&lt;/h2&gt;
&lt;p&gt;review: evaluation of function application.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image015.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image016.png"/&gt; &lt;/p&gt;
&lt;p&gt;ex1. gcd  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def gcd(a:Int, b:Int): Int=  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  if(b==0) a else gcd(b, a%b)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image017.png"/&gt; &lt;/p&gt;
&lt;p&gt;ex2. factorial  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def factorial(n:Int): Int =  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  if(n==0) 1 else n*factorial(n-1)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/progfun1_lec1_fun_and_eval/pasted_image018.png"/&gt; &lt;/p&gt;
&lt;p&gt;difference from the &lt;code&gt;gcd&lt;/code&gt; case:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in &lt;code&gt;gcd&lt;/code&gt;, the expression is reduced to a &lt;code&gt;gcd()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;in &lt;code&gt;factorial&lt;/code&gt;, &lt;em&gt;add one more element to the expression in each step&lt;/em&gt;!  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tail-recursion"&gt;tail recursion&lt;/h3&gt;
&lt;p&gt;if &lt;strong&gt;a function calls itself  as its last action&lt;/strong&gt;, then the function's stack can be reused. &lt;br/&gt;
⇒ tail recursion functions are iterative process.   &lt;/p&gt;
&lt;p&gt;In general, if &lt;strong&gt;the last action of a function consists of calling a function (which may be the same)&lt;/strong&gt;, one stack frame would be sufficient for both functions. Such calls are called &lt;em&gt;tail-calls&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;tail-recursive function:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;more efficient  &lt;/li&gt;
&lt;li&gt;can avoid stackoverflow  &lt;/li&gt;
&lt;li&gt;might not be as clear as a non-tailrec version   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;add &lt;code&gt;@tailrec&lt;/code&gt;annotation to the function, if its not tailrec, an error will be shown.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;@tailrec  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;def gcd(a: Int, b: Int): Int = ...&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;exercice: turn factorial into tailrec fashion. &lt;br/&gt;
→ idea: use an &lt;strong&gt;accumulator &lt;/strong&gt;(partial result) &lt;code&gt;acc&lt;/code&gt; .  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def factorialTR(n:Int):Int = {  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  @tailrec  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  def fact(n:Int, acc:Int):Int = {  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(n==0) acc  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else fact(n-1, n*acc)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  fact(n, 1)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="programming-assignment-recursion_1"&gt;Programming Assignment: Recursion&lt;/h2&gt;
&lt;p&gt;三道递归的练习题...  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/**  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    * Exercise 1  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    */&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pascal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pascal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pascal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/**  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    * Exercise 2  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    */&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Char&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;balance_rec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Char&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'('&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;balance_rec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;')'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;balance_rec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;balance_rec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;balance_rec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/**  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    * Exercise 3  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    */&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;countChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;money&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;money&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;money&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;countChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;money&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;countChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;money&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="scala"></category></entry><entry><title>[Scala MOOC I] Lec0: Getting Started</title><link href="https://x-wei.github.io/progfun1_lec0_setup.html" rel="alternate"></link><published>2016-06-20T00:00:00+02:00</published><updated>2016-06-20T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-06-20:progfun1_lec0_setup.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Get up and running with Scala on your computer. Complete an example assignment to familiarize yourself with our unique way of submitting assignments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="tool-setup"&gt;Tool setup&lt;/h1&gt;
&lt;h3 id="intellij"&gt;IntelliJ&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;use worksheet as a better REPL&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="sbt"&gt;SBT&lt;/h3&gt;
&lt;p&gt;navigate to the directory of the assignment you are working on, then start &lt;code&gt;sbt&lt;/code&gt;. 
(when first running &lt;code&gt;sbt&lt;/code&gt;, will take 5~10 minutes to download files...)&lt;/p&gt;
&lt;h4 id="repl"&gt;REPL&lt;/h4&gt;
&lt;p&gt;type &lt;code&gt;console&lt;/code&gt; to enter scala REPL, hit &lt;code&gt;ctrl-d&lt;/code&gt; to exit REPL. &lt;/p&gt;
&lt;h4 id="compile-run-test"&gt;Compile / run / test&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;compile&lt;/code&gt;: The compile task will compile the source code of the assignment which is located in the directory &lt;code&gt;src/main/scala&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt;: The directory &lt;code&gt;src/test/scala&lt;/code&gt; contains unit tests for the project. In order to run these tests in sbt, you can use the test command.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run&lt;/code&gt;: If your project has an object with a main method (or an object extending the trait App), then you can run the code in sbt easily by typing run. In case sbt finds multiple main methods, it will ask you which one you'd like to execute.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="submit"&gt;submit&lt;/h4&gt;
&lt;p&gt;submitting assignments in sbt: 
&lt;code&gt;submit your@email.com YourSubmissionPassWord&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="scala-tutorial_2"&gt;Scala tutorial&lt;/h1&gt;
&lt;h3 id="classes-traits-objects-and-packages"&gt;Classes, Traits, Objects and Packages&lt;/h3&gt;
&lt;h4 id="classes"&gt;Classes&lt;/h4&gt;
&lt;p&gt;Classes in Scala are very similar to classes in Java. They are templates containing fields and methods. Like in Java, classes can be instantiated using the new construct, there can be many “instances” (or “objects”) of the same class.&lt;/p&gt;
&lt;p&gt;In Scala there exists &lt;strong&gt;a special kind of class named case classes&lt;/strong&gt;. You will learn about case classes during the course.&lt;/p&gt;
&lt;p&gt;Classes in Scala &lt;strong&gt;cannot have static members&lt;/strong&gt;. You can use &lt;em&gt;objects&lt;/em&gt; (see below) to achieve similar functionality as with static members in Java.&lt;/p&gt;
&lt;h4 id="traits"&gt;Traits&lt;/h4&gt;
&lt;p&gt;Traits are like &lt;strong&gt;interfaces&lt;/strong&gt; in Java, but they &lt;em&gt;can also contain concrete members&lt;/em&gt;, i.e. method implementations or field definitions.&lt;/p&gt;
&lt;h4 id="objects"&gt;Objects&lt;/h4&gt;
&lt;p&gt;Object in Scala are like classes, but for every object definition there is only one single instance. &lt;em&gt;It is not possible to create instances of objects using new&lt;/em&gt;, instead you can just access the members (methods or fields) of an object using its name.&lt;/p&gt;
&lt;h4 id="packages"&gt;Packages&lt;/h4&gt;
&lt;p&gt;Adding a statement such as package foo.bar at the top of a file makes the code in a file part of the package foo.bar. You can then do import foo.bar._ to make everything from package foo.bar available in your code. The content of a package can be scattered across many files. If you define a class MyClass in package foo.bar, you can import that specific class (and not anything else from that package) with import foo.bar.MyClass.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In Scala, everything can be imported, not only class names&lt;/em&gt;. So for instance if you have an object baz in package foo.bar, then import foo.bar.baz._ would import all the members of that object.&lt;/p&gt;
&lt;h3 id="hello-world-in-scala_1"&gt;Hello, World! in Scala&lt;/h3&gt;
&lt;p&gt;In Scala, the main or &lt;em&gt;entry point method is defined in an object&lt;/em&gt;. An object can be made executable by either adding extending the type &lt;code&gt;App&lt;/code&gt; or by adding a method &lt;code&gt;def main(args: Array[String])&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here are two ways to define a program which outputs “Hello, World!” in Scala:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;object HelloWorld extends App {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;  println("Hello, World!")&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HelloWorld&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="source-files-classfiles-and-the-jvm"&gt;Source Files, Classfiles and the JVM&lt;/h3&gt;
&lt;p&gt;Scala source code is stored in text files with the extension &lt;code&gt;.scala&lt;/code&gt;. Typically Scala programmers create one source file for each class, or one source file for a class hierarchy: In fact, Scala &lt;em&gt;allows multiple classes and objects to be defined in the same source file&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The name of a Scala source file can be chosen &lt;em&gt;freely&lt;/em&gt;, but it is recommended to use the name of a class which is defined in that file.&lt;/li&gt;
&lt;li&gt;Package hierarchies should be reflected in directory structure: a source file defining class C in package foo.bar should be stored in a subdirectory as foo/bar/C.scala. Scala does not really enforce this convention, but some tools such as the Scala IDE for eclipse might have problems otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The scala compiler compiles &lt;code&gt;.scala&lt;/code&gt; source files to &lt;code&gt;.class&lt;/code&gt; files, like the Java compiler. Classfiles are binary files containing machine code for the Java Virtual Machine. In order to run a Scala program, the JVM has to know the directory where classfiles are stored. This parameter is called the “classpath”.&lt;/p&gt;
&lt;p&gt;If you are using eclipse or sbt to compile and run your Scala code, you don’t need to do any of the above manually - these tools take care of invoking the Scala compiler and the JVM with the correct arguments.&lt;/p&gt;
&lt;h1 id="scala-style-guide_1"&gt;Scala Style Guide&lt;/h1&gt;
&lt;p&gt;style checker: &lt;a href="http://www.scalastyle.org/"&gt;http://www.scalastyle.org/&lt;/a&gt;
(in IntelliJ: You can enable scalastyle in Intellij by selecting Settings-&amp;gt;Editor-&amp;gt;Inspections, then searching for Scala style inspections.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Avoid Casts and Type Tests&lt;/em&gt;: Never use isInstanceOf or asInstanceOf - there’s always a better solution.&lt;/li&gt;
&lt;li&gt;Indentation &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Line Length and Whitespace&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Use local Values to simplify complex Expressions&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Choose meaningful Names for Methods and Values&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Common Subexpressions&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;*Don’t Copy-Paste Code!: factor out common parts into separate methods instead of copying code around. *&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Scala doesn’t require Semicolons&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Don’t submit Code with “print” Statements: the final code should be free of debugging statements.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Avoid using Return&lt;/em&gt;: often don’t need to use explicit returns. &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Avoid mutable local Variables&lt;/em&gt;: You can often rewrite code that uses mutable local variables to code with helper functions that take accumulators.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Eliminate redundant “If” Expressions&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="cheatsheet"&gt;Cheatsheet&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/lampepfl/progfun-wiki/blob/gh-pages/CheatSheet.md"&gt;https://github.com/lampepfl/progfun-wiki/blob/gh-pages/CheatSheet.md&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="example-assignment"&gt;Example Assignment&lt;/h1&gt;
&lt;h3 id="implementation"&gt;implementation&lt;/h3&gt;
&lt;p&gt;implement &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;sum&lt;/code&gt; method for &lt;code&gt;List[Int]&lt;/code&gt;. 
trick: use recursion. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoSuchElementException&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MinValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="scalatest"&gt;ScalaTest&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A test suite is simply a collection of individual tests for some specific component of a program. A test suite is created by defining a class which extends the type &lt;code&gt;org.scalatest.FunSuite&lt;/code&gt;. When running ScalaTest, it will automatically find this class and execute all of its tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You have two options for running this test suite:
- Start the sbt console and run the "&lt;code&gt;test&lt;/code&gt;" command
- Right-click this file in eclipse and chose "Run As" - "JUnit Test"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tests are written using the &lt;code&gt;test&lt;/code&gt; operator which takes two arguments:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A description of the test. This description has to be unique, no two tests can have the same description. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;The test body, a piece of Scala code that implements the test 
The most common way to implement a test body is using the method &lt;code&gt;assert&lt;/code&gt; which tests that its argument evaluates to &lt;code&gt;true&lt;/code&gt;. So one of the simplest successful tests is the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;test("one plus one is two")(assert(1 + 1 == 2))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In Scala, it is allowed to pass an argument to a method using the block  syntax, i.e. &lt;code&gt;{ argument }&lt;/code&gt; instead of parentheses&lt;code&gt;(argument)&lt;/code&gt;.
This allows tests to be written in a more readable manner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;test("one plus one is three?") {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    assert(1 + 1 == 3) // This assertion fails! Go ahead and fix it.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One problem with the previous (failing) test is that ScalaTest will      &lt;br/&gt;
only tell you that a test failed, but it will not tell you what was      &lt;br/&gt;
the reason for the failure. The output looks like this:                    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;{{{&lt;/span&gt;&lt;span class="w"&gt;                                                                        &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;plus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FAILED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;&lt;span class="w"&gt;                          &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This situation can be improved by &lt;strong&gt;using a special equality operator &lt;/strong&gt;&lt;code&gt;===&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; (this is only possible in ScalaTest). So if you  run the next test, ScalaTest will show the following output:               &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;{{{&lt;/span&gt;&lt;span class="w"&gt;                                                                        &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;details&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;why&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;plus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FAILED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;did&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;equal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListsSuite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;scala&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;                        &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}}}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;We recommend to always use the &lt;/strong&gt;&lt;code&gt;===&lt;/code&gt;&lt;strong&gt; equality operator when writing tests.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;In order to test the exceptional behavior of a methods, ScalaTest offers the &lt;code&gt;intercept&lt;/code&gt;operation.                                              &lt;/p&gt;
&lt;p&gt;In the following example, we test the fact that the method &lt;code&gt;intNotZero&lt;/code&gt; throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if its argument is &lt;code&gt;0&lt;/code&gt;.     &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;intNotZero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"zero is not allowed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"intNotZero throws an exception if its argument is 0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;intercept&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;intNotZero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is allowed to have multiple &lt;code&gt;assert&lt;/code&gt; statements inside one test, however it is recommended to write an individual &lt;code&gt;test&lt;/code&gt; statement for every tested aspect of a method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"sum of a few numbers"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"sum of empty list"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"sum of negative numbers"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"max of a few numbers"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"max of empty list throws NoSuchElementException"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;intercept&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NoSuchElementException&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="scala"></category></entry><entry><title>(DeepLearning MOOC) Lesson 4: Deep Models for Text and Sequences</title><link href="https://x-wei.github.io/dlMOOC_L4.html" rel="alternate"></link><published>2016-06-07T00:00:00+02:00</published><updated>2016-06-07T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-06-07:dlMOOC_L4.html</id><summary type="html">&lt;p&gt;problems with text:   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;often very rare word is important, e.g. &lt;em&gt;retinopathy&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;ambiguity: e.g. &lt;em&gt;cat&lt;/em&gt; and &lt;em&gt;kitty&lt;/em&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;→ need a lot of labeled data ⇒ not realistic. &lt;br/&gt;
⇒ &lt;strong&gt;unsupervised learning&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;similar words appear in similar context. &lt;br/&gt;
embedding: map words to small vectors&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image.png"/&gt;&lt;br/&gt;
measure the closeness by cosine distance: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;h2 id="word2vec"&gt;word2vec&lt;/h2&gt;
&lt;p&gt;initial: random vector&lt;br/&gt;
→ train model to predict nearby word. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image001.png"/&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image004.png"/&gt;&lt;br/&gt;
pb: too many words in dictionary → softmax too slow&lt;br/&gt;
⇒ random sample the non-target words &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;h2 id="tsne"&gt;tSNE&lt;/h2&gt;
&lt;p&gt;dimension reduction (not PCA) that preserves the neighborhood structure (close vector → close in 2d as well). &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;h2 id="rnn"&gt;RNN&lt;/h2&gt;
&lt;p&gt;treat varaible length sequences of words. &lt;br/&gt;
use the current word (Xi) and the last prediction as input. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;h2 id="backprop-for-rnn"&gt;backprop for RNN&lt;/h2&gt;
&lt;p&gt;apply highly correlated derivatives to W → not good for SGD. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;p&gt;pb if we use highly correlated updates: grad either explod or it disappear quickly.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;p&gt;fix grad-exploding: &lt;em&gt;clip&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;p&gt;grad-vanishing: memory loss in RNN&lt;br/&gt;
⇒ LSTM  &lt;/p&gt;
&lt;h2 id="lstm"&gt;LSTM&lt;/h2&gt;
&lt;p&gt;in RNN: replace the NN by a LSTM cell&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image013.png"/&gt;&lt;br/&gt;
represent the system with memory by a diagram with logical gates:   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image014.png"/&gt;&lt;br/&gt;
change the decision variables to continous:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image012.png"/&gt;&lt;br/&gt;
a logistic regression in each gate: controls when to remember and when to forget things. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image015.png"/&gt;&lt;br/&gt;
&lt;a href="http://blog.csdn.net/dark_scope/article/details/47056361"&gt;http://blog.csdn.net/dark_scope/article/details/47056361&lt;/a&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image024.png"/&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image023.png"/&gt; &lt;/p&gt;
&lt;p&gt;regularization for LSTM:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L2 regularization: OK  &lt;/li&gt;
&lt;li&gt;dropout: OK when used for input/output (X and Y), but NOT use to the recurrent in/out.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="beam-search"&gt;beam search&lt;/h2&gt;
&lt;p&gt;beam search is for &lt;em&gt;generating&lt;/em&gt; sequences by RNN.   &lt;/p&gt;
&lt;p&gt;Greedy approach: at each step, &lt;em&gt;sample&lt;/em&gt; from the predicted distribution of the RNN. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image017.png"/&gt;&lt;br/&gt;
smarter approach: &lt;br/&gt;
predict more steps and pick the seq with largest proba. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image018.png"/&gt;&lt;br/&gt;
pb with this: the number of possible seq grows exponentially &lt;br/&gt;
⇒ just keep the few most promising seqs → "&lt;strong&gt;Beam search"&lt;/strong&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image016.png"/&gt; &lt;/p&gt;
&lt;h2 id="seq-to-seq"&gt;seq to seq&lt;/h2&gt;
&lt;p&gt;RNN: model to map vaiable length seq to fix-length vectors. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image021.png"/&gt;&lt;br/&gt;
Beam search: sequence generation (map fix-length vectors to seq)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image019.png"/&gt; &lt;/p&gt;
&lt;p&gt;concat them together: seq to seq system&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L4/pasted_image022.png"/&gt; &lt;/p&gt;
&lt;p&gt;e.g. &lt;br/&gt;
translation, speech recognation, image captionning  &lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>(DeepLearning MOOC) Lesson 3: Convolutional Neural Networks</title><link href="https://x-wei.github.io/dlMOOC_L3.html" rel="alternate"></link><published>2016-06-06T00:00:00+02:00</published><updated>2016-06-06T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-06-06:dlMOOC_L3.html</id><summary type="html">&lt;p&gt;statistical invariance → &lt;strong&gt;weight sharing&lt;/strong&gt;&lt;br/&gt;
e.g. image colors, translation invariance...   &lt;/p&gt;
&lt;h2 id="convnet"&gt;convnet&lt;/h2&gt;
&lt;p&gt;is NNs that share their weights across space.   &lt;/p&gt;
&lt;p&gt;convolution: slide a small patch of NN over the image to produce a new "image"&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L3/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;convnet forms a pyramid, each "stack of pincake" get larger depth and smaller area. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L3/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;h2 id="convolutional-lingo"&gt;convolutional lingo&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L3/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;patch (kernel)&lt;/strong&gt;&lt;br/&gt;
small NN that slides over the image.   &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;depth&lt;/strong&gt;&lt;br/&gt;
number of pincakes in stack.   &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;feature map&lt;/strong&gt;&lt;br/&gt;
each "pincake" in stack.   &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;stride&lt;/strong&gt;&lt;br/&gt;
nb of pixels that you shift each time you move your filter. &lt;br/&gt;
e.g. stride=1 → output almost the same size as the input; stride=2 → output about half size  &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;padding&lt;/strong&gt;&lt;br/&gt;
the way you treat the edge of image.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;valid padding&lt;/em&gt;: don't go pass the edge  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;same padding&lt;/em&gt;: go off the image and pad with 0s (output size=input size)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L3/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L3/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;p&gt;once got "deep and narrow" representation by convolution, connect to a normal (regular) fully-conncected NN. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L3/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;h2 id="pooling"&gt;pooling&lt;/h2&gt;
&lt;p&gt;better way to reduce the spatial extend (i.e. size) of the feature map. &lt;br/&gt;
simple convnet: use large stride to reduce the feature map size. ⇒ &lt;em&gt;aggressive&lt;/em&gt;&lt;br/&gt;
&lt;strong&gt;pooling&lt;/strong&gt;: use small stride (ex. stride=1), then &lt;em&gt;take convolutions in neighbourhood and combine them&lt;/em&gt;.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L3/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;max pooling&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L3/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;average pooling&lt;/strong&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L3/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;h2 id="1x1-convolution"&gt;1x1 convolution&lt;/h2&gt;
&lt;p&gt;classic convolution = &lt;em&gt;linear&lt;/em&gt; classifier over a small patch of image&lt;br/&gt;
&lt;strong&gt;add a 1x1 convolution in the middle&lt;/strong&gt; ⇒ a mini-dnn over the patch. &lt;br/&gt;
cheap: not convolution, just matrix multiplication. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L3/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;h2 id="inception-module"&gt;inception module&lt;/h2&gt;
&lt;p&gt;between each layers, just do both pooling and 1x1 conv, and 3x3 and 5x5.. conv, and concatenate them together. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L3/pasted_image010.png"/&gt;&lt;br/&gt;
benefit: total number of parameters is small, yet performance better.   &lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>(DeepLearning MOOC) Lesson 2: Deep Neural Networks</title><link href="https://x-wei.github.io/dlMOOC_L2.html" rel="alternate"></link><published>2016-06-05T18:00:00+02:00</published><updated>2016-06-05T18:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-06-05:dlMOOC_L2.html</id><summary type="html">&lt;h2 id="linear-models"&gt;Linear models&lt;/h2&gt;
&lt;p&gt;matrix multiplication: fast with GPU&lt;br/&gt;
numerically stable&lt;br/&gt;
cannot cocatenate linear units → equivalent to one big matrix...  &lt;/p&gt;
&lt;p&gt;⇒ add non-linear units in between   &lt;/p&gt;
&lt;h2 id="rectified-linear-units-relu"&gt;rectified linear units (RELU)&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L2/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L2/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;chain rule: efficient computationally&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L2/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L2/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;h2 id="back-propagation"&gt;back propagation&lt;/h2&gt;
&lt;p&gt;easy to compute the gradient as long as the function Y(X) is made of simple blocks with simple deritivates. &lt;br/&gt;
most deep-learning framework can do it automatically for you.   &lt;/p&gt;
&lt;p&gt;N.B. The backprop block takes 2x memory/compute wrt the forward prop blocks. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L2/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;p&gt;first neural network: RELU units between linear classifiers: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L2/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;h2 id="tensor-flow"&gt;Tensor flow&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;tensors&lt;/code&gt; define computations, and they are nodes in a computation &lt;code&gt;graph&lt;/code&gt;. &lt;br/&gt;
To actually run the optimization, use &lt;code&gt;sessions&lt;/code&gt;...  &lt;/p&gt;
&lt;p&gt;define a computation graph:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;num_hidden&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;For&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;training&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fed&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;training&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;minibatch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;tf_train_dataset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                                    &lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;image_size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;image_size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;tf_train_labels&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_labels&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;tf_valid_dataset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;valid_dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;tf_test_dataset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Variables&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;W1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;truncated_normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;image_size * image_size, num_hidden&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_hidden&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Hidden&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RELU&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;computation&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf_train_dataset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Hidden&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RELU&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;computation&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;X1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Variables&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;W2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;truncated_normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_hidden, num_labels&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="n"&gt;#W2&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num_labels&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;#b2&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;logit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;logits&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce_mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;softmax_cross_entropy_with_logits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf_train_labels&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getlogits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;X1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Optimizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GradientDescentOptimizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;minimize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Predictions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;training&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;validation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;train_prediction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;softmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;valid_prediction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;softmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getlogits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf_valid_dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;test_prediction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;softmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getlogits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf_test_dataset&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;run sgd optimization:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;num_steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3001&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize_all_variables&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"Initialized"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_steps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Pick&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="k"&gt;offset&lt;/span&gt; &lt;span class="n"&gt;within&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;training&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;randomized&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Note&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;could&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;randomization&lt;/span&gt; &lt;span class="n"&gt;across&lt;/span&gt; &lt;span class="n"&gt;epochs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;train_labels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Generate&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;minibatch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;batch_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train_dataset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="k"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;batch_labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train_labels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="k"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;Prepare&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;dictionary&lt;/span&gt; &lt;span class="n"&gt;telling&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;session&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;minibatch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;dictionary&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;placeholder&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;fed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt; &lt;span class="nb"&gt;array&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;feed_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tf_train_dataset&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;batch_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tf_train_labels&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;batch_labels&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;predictions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;train_prediction&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;feed_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;feed_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"Minibatch loss at step %d: %f"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"Minibatch accuracy: %.1f%%"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;accuracy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;batch_labels&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"Validation accuracy: %.1f%%"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;accuracy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;valid_prediction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;valid_labels&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"Test accuracy: %.1f%%"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;accuracy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_prediction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;test_labels&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="regularization"&gt;Regularization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;early termination: stop when cannot improve in validation performance.   &lt;/li&gt;
&lt;li&gt;L2 regularization: adding L2 norm of   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L2/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;h2 id="dropout"&gt;Dropout&lt;/h2&gt;
&lt;p&gt;def. &lt;strong&gt;activation&lt;/strong&gt; is the output of last layer that flows into the next layer. &lt;br/&gt;
dropout: &lt;em&gt;randomly set half of activations to 0&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;rational: forcing your model to learn reduadant representations (consus over an ensemble of nns...)... &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L2/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;p&gt;N.B.&lt;br/&gt;
for evaluation no longer dropout, &lt;code&gt;ye&lt;/code&gt; = average of activations, trick to let &lt;code&gt;ye=E(yt)&lt;/code&gt;, in training, multiply the remaining activations by 2.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L2/pasted_image008.png"/&gt; &lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>(DeepLearning MOOC) Lesson 1: From Machine Learning to Deep Learning</title><link href="https://x-wei.github.io/dlMOOC_L1.html" rel="alternate"></link><published>2016-06-05T00:00:00+02:00</published><updated>2016-06-05T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-06-05:dlMOOC_L1.html</id><summary type="html">&lt;p&gt;这是udacity上deeplearning的笔记, 做得非常粗糙, 而且这门课也只是介绍性质的... 
&lt;a href="https://www.udacity.com/course/deep-learning--ud730"&gt;https://www.udacity.com/course/deep-learning--ud730&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="softmax-function"&gt;Softmax function&lt;/h2&gt;
&lt;p&gt;socres &lt;code&gt;yi&lt;/code&gt; ⇒ probabilities &lt;code&gt;pi&lt;/code&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;property: &lt;strong&gt;smaller scores ⇒ less certain about result&lt;/strong&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;h2 id="onehot-encoding"&gt;Onehot encoding&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;h2 id="cross-entropy"&gt;Cross entropy&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;measure how well the probability vector &lt;/em&gt;&lt;code&gt;S&lt;/code&gt;&lt;em&gt; corresponds to the label vector &lt;/em&gt;&lt;code&gt;L&lt;/code&gt;&lt;em&gt;.&lt;/em&gt; 
⇒ cross entropy &lt;code&gt;D(S,L)&lt;/code&gt;&lt;em&gt;( D&amp;gt;=0, the smaller the better)&lt;/em&gt;
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;N.B. &lt;code&gt;D(S,L)&lt;/code&gt; is not symmetric (never log 0 ) &lt;/p&gt;
&lt;p&gt;recap ("multinominal logistic classificaton"): 
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;h2 id="minimizing-cross-entropy"&gt;Minimizing cross entropy&lt;/h2&gt;
&lt;p&gt;take avg D as loss function: 
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image008.png"/&gt;
⇒ optimization, for example, by grad-desc: 
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;p&gt;for the moment, take the optimizer as black box. &lt;/p&gt;
&lt;p&gt;two practical problems: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;how to feed img pixels to classifiers &lt;/li&gt;
&lt;li&gt;how to initialize the optimization&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="numerical-stability"&gt;numerical stability&lt;/h2&gt;
&lt;p&gt;adding very small values to very large values will introduce a lot of errors ! 
ex. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; a = 1e9&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; for _ in xrange(1000000):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;...     a += 1e-6&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; a - 1e9&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;0.95367431640625&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⇒ the result is not 1... &lt;/p&gt;
&lt;p&gt;⇒ normalize input ! ⇒ &lt;strong&gt;0 mean, 1 variance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;this make optimizers easier to find optimum. 
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image009.png"/&gt;&lt;/p&gt;
&lt;p&gt;normalization for images: 
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image010.png"/&gt;&lt;/p&gt;
&lt;h2 id="weight-initialization"&gt;weight initialization&lt;/h2&gt;
&lt;p&gt;draw init w/b from a &lt;code&gt;Gaussian(0, sigma)&lt;/code&gt;, sigma → magtitude of initial output. 
small sigma means small outputs → uncertain about result. 
⇒ take small sigma for initialization 
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image011.png"/&gt;&lt;/p&gt;
&lt;p&gt;recap: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image012.png"/&gt;
⇒ feed this loss fcn to the optimizer &lt;/p&gt;
&lt;h2 id="training-validation-and-test-dataset"&gt;training, validation and test dataset&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;rule of thumb (30)&lt;/strong&gt;: 
a change that affects 30 examples in the validation set is statically significant. 
⇒ in most cases use &amp;gt;30000 samples in validation set → changes in 0.1% is significant. &lt;/p&gt;
&lt;h2 id="sgd"&gt;SGD&lt;/h2&gt;
&lt;p&gt;rule of thumb: computing &lt;code&gt;grad(L)&lt;/code&gt; takes 3x time than computing loss fcn &lt;code&gt;L&lt;/code&gt;. → pb for scaling.. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image014.png"/&gt;
SGD is the only fast enough model in practice. &lt;/p&gt;
&lt;p&gt;tricks to help SGD: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;normalize data (0 mean, uni-var)&lt;/li&gt;
&lt;li&gt;randomly initialize weights&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;momentum&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;learning rate decay&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="momentum"&gt;Momentum&lt;/h2&gt;
&lt;p&gt;SGD: many small steps in random directions → general direction is more accurate. 
⇒ keep a running average of the gradients&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image015.png"/&gt;&lt;/p&gt;
&lt;h2 id="learning-rate-decay"&gt;Learning rate decay&lt;/h2&gt;
&lt;p&gt;take smaller and smaller steps (alpha decays)
e.g. alpha decays exponentially...&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image016.png"/&gt;&lt;/p&gt;
&lt;h2 id="parameter-tuning"&gt;parameter tuning&lt;/h2&gt;
&lt;p&gt;how quickly you learning != how well you train.. 
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image017.png"/&gt;
balck magics in deep learning: 
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image018.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adagrad&lt;/strong&gt;
variant of SGD, implicitly decays momentum and learning rate. &lt;/p&gt;
&lt;p&gt;recap: 
&lt;img alt="" class="img-responsive" src="../images/dlMOOC_L1/pasted_image019.png"/&gt;&lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[Algorithms II] Week 6-3 Intractability</title><link href="https://x-wei.github.io/algoII_week6_3_intractability.html" rel="alternate"></link><published>2016-02-23T00:00:00+01:00</published><updated>2016-02-23T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-02-23:algoII_week6_3_intractability.html</id><summary type="html">&lt;h1 id="1-introduction-to-intractability"&gt;1. Introduction to Intractability&lt;/h1&gt;
&lt;p&gt;recall model of computation: DFA &lt;br/&gt;
a &lt;em&gt;univeral&lt;/em&gt; model of computation: turing machine  &lt;br/&gt;
→ no more powerful model of computation.  &lt;br/&gt;
Turing machine can compute any function that can be computed by a physically harnessable process of the natural world.    &lt;/p&gt;
&lt;p&gt;bottom line: turing machine is a simple and universal model of computation.    &lt;/p&gt;
&lt;p&gt;Q. which algos are &lt;em&gt;useful in practice&lt;/em&gt;?   &lt;/p&gt;
&lt;p&gt;useful in practice = polynomial time for all inputs   &lt;/p&gt;
&lt;p&gt;def. a pb is &lt;strong&gt;intractable&lt;/strong&gt; if it cannot be solved in polynomial time.    &lt;/p&gt;
&lt;p&gt;2 pbs that &lt;em&gt;can be proved&lt;/em&gt; to require exp time:    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Given a constant-size programme, does it halt in &amp;lt;=K steps ?   &lt;/li&gt;
&lt;li&gt;Given a N*N chess board position, can the first player force a win ?   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Bad news: very few pbs can be proved to require exp time...   &lt;/p&gt;
&lt;h1 id="2-search-problems"&gt;2. Search Problems&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Four fundamental problems: &lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LSLOVE&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given a system of linear equations, find a solution &lt;br/&gt;
var: real numbers &lt;br/&gt;
→ guassian elimination   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LP&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given a system of linear inequaties, find a solution. (not necessarily find the opt) &lt;br/&gt;
var: real numbers   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ILP&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given a system of linear inequaties, find a &lt;strong&gt;0-1&lt;/strong&gt; solution.  &lt;br/&gt;
var: 0 or 1   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SAT&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given a system of &lt;em&gt;boolean equations&lt;/em&gt;, find a binary solution.    &lt;/p&gt;
&lt;p&gt;Which ones of the 4 foundamental pbs have poly-time solutions?   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LSLOVE: Gaussian elimination works in O(n3)   &lt;/li&gt;
&lt;li&gt;LP: Ellipsoid works in poly-time (simplex also poly-time &lt;em&gt;in practice&lt;/em&gt;..)   &lt;/li&gt;
&lt;li&gt;ILP, SAT: No poly-time algorithm known (or believed to exist) !   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All 4 pbs are examples of search problems.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Search pb&lt;/strong&gt;: given an instance &lt;code&gt;I&lt;/code&gt;, find a solution &lt;code&gt;S&lt;/code&gt; / report there's no solution.  &lt;br/&gt;
&lt;em&gt;requirement&lt;/em&gt;: able to efficiently (poly-time) &lt;em&gt;check&lt;/em&gt; that &lt;code&gt;S&lt;/code&gt; is a solution. (that's the case for the above 4 fundamental pbs)   &lt;/p&gt;
&lt;p&gt;another example:  &lt;br/&gt;
&lt;strong&gt;FACTOR&lt;/strong&gt;: given a n-bit integer, find a nontrival factor.  &lt;br/&gt;
(given a solution, simply need to long-divide to check...)   &lt;/p&gt;
&lt;h1 id="3-p-vs-np"&gt;3. P vs. NP&lt;/h1&gt;
&lt;p&gt;def. &lt;strong&gt;NP&lt;/strong&gt; is the class of all search pbs. (ie. solution be checked efficiently)  &lt;br/&gt;
NB: classical definition limits to yes-no pbs... &lt;br/&gt;
Significance: NP pbs are what scientists and engineers &lt;em&gt;aspire to compute feasibly&lt;/em&gt;. &lt;br/&gt;
examples:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;P&lt;/strong&gt; is the class of search pbs that &lt;em&gt;are solvable&lt;/em&gt; in poly-time.    &lt;/p&gt;
&lt;p&gt;(What scientists and engineers &lt;em&gt;do compute feasibly&lt;/em&gt;.)   &lt;/p&gt;
&lt;p&gt;examples: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nondeterminism&lt;/strong&gt; &lt;br/&gt;
Nondeterminism machine can &lt;em&gt;guess&lt;/em&gt; the solution (donot exist in natural world..). → NFA tries to simulate such a machine... &lt;br/&gt;
Ex. &lt;code&gt;int[] a = new int[N];&lt;/code&gt; &lt;br/&gt;
・ Java: initializes entries to 0 . &lt;br/&gt;
・ Nondeterministic machine: &lt;em&gt;initializes entries to the solution!&lt;/em&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;NP: &lt;em&gt;Search problems solvable in poly time on a nondeterministic Turing machine&lt;/em&gt;.    &lt;/p&gt;
&lt;p&gt;Extended Church-Turing thesis: &lt;br/&gt;
P: Search pbs solvable in poly time &lt;em&gt;in natural world&lt;/em&gt;.    &lt;/p&gt;
&lt;p&gt;do we have non-determinism in natural world? ---&amp;gt; natural computers ?  &lt;br/&gt;
ex. STEINER tree: set of segments connecting given N points.  &lt;br/&gt;
use soap → doesn't really work... &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;p&gt;another example for P/NP: automating creativity &lt;br/&gt;
&lt;em&gt;being creative VS appreciating creativity&lt;/em&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;p&gt;The central question: does P=NP?  &lt;br/&gt;
(can you alway avoid brute-force searching and do better?) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image005.png"/&gt; &lt;br/&gt;
Millennium prize by Clay instute. &lt;br/&gt;
(among all ways of earning 1M dollars, this might be the most complicated way... @_@...)   &lt;/p&gt;
&lt;h1 id="4-classifying-problems"&gt;4. Classifying Problems&lt;/h1&gt;
&lt;p&gt;classify pbs like classifying elements into perodic table.    &lt;/p&gt;
&lt;p&gt;key pb: satisfiablity &lt;br/&gt;
SAT. given a sys of boolean eq, find a solution.    &lt;/p&gt;
&lt;p&gt;exhaustive search: try 2^n possible solutions.  &lt;br/&gt;
conjecture: no poly-time algo for SAT (ie. intractable)   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assumption&lt;/strong&gt;: assume the intractability for SAT. &lt;br/&gt;
Tool: reduction &lt;br/&gt;
def. pb X reduces to pb Y: we can solve pb X with the algo for pb Y.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;if SAT poly-reduces to pb Y ⇒ pb Y in (probably) intractable.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="sat-poly-reduces-to-ilp"&gt;SAT poly-reduces to ILP&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image007.png"/&gt; &lt;br/&gt;
(all SAT pb can be reduced to 3SAT)   &lt;/p&gt;
&lt;p&gt;⇒ can be converted to an ILP pb:  &lt;br/&gt;
for each eq, introduce a var Ci: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;h1 id="5-np-completeness_1"&gt;5. NP-Completeness&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;def. an NP pb is &lt;strong&gt;NP-complete&lt;/strong&gt; if all pbs in NP poly-reduces to it.    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;prop. &lt;em&gt;SAT id NP-complete.&lt;/em&gt; &lt;br/&gt;
any pb in NP poly-reduces to SAT (reverse direction as last lecture) &lt;br/&gt;
pf sketch: convert non-dertiministic turing machine notation to SAT notation...   &lt;/p&gt;
&lt;p&gt;cor. poly time algo for SAT iff P=NP...   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;p&gt;⇒ there pbs are equivalent !    &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image013.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image014.png"/&gt; &lt;br/&gt;
summary:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image015.png"/&gt; &lt;/p&gt;
&lt;p&gt;==... &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image016.png"/&gt; &lt;/p&gt;
&lt;h1 id="6-coping-with-intractability"&gt;6. Coping with Intractability&lt;/h1&gt;
&lt;h3 id="exploit-intractability"&gt;exploit intractability&lt;/h3&gt;
&lt;p&gt;cryptography ecopoits the hardness of FACTOR pb &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image017.png"/&gt; &lt;/p&gt;
&lt;p&gt;Can factor an n-bit integer in n 3 steps on a "&lt;em&gt;quantum computer&lt;/em&gt;.”   &lt;/p&gt;
&lt;h3 id="coping-with-intractability"&gt;Coping with intractability&lt;/h3&gt;
&lt;p&gt;relax one of desired features...   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;special cases   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image018.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Develop a heuristic, and hope it produces a good solution.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;no guarantee &lt;br/&gt;
ex. TSP   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Approximation algorithm. Find solution of provably good quality.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image019.png"/&gt; &lt;/p&gt;
&lt;h3 id="halmiton-path"&gt;Halmiton path&lt;/h3&gt;
&lt;p&gt;remark: Euler path (each edge once) easy, Halmiton path (each vertex once) NPC... &lt;br/&gt;
dfs solution for Halmiton path:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Halmiton&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;marked&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Halmiton&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Halmiton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;marked&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;G.V()&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;depth&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;marked&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marked&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;depth&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;marked&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;flase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;backtrack&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_3_intractability/pasted_image020.png"/&gt; &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 6-2 Linear Programming</title><link href="https://x-wei.github.io/algoII_week6_2_LP.html" rel="alternate"></link><published>2016-02-21T17:00:00+01:00</published><updated>2016-02-21T17:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-02-21:algoII_week6_2_LP.html</id><summary type="html">&lt;p&gt;simplex algo: top 10 algo of the 20th century (ever?).   &lt;/p&gt;
&lt;p&gt;what is linear programming:  &lt;br/&gt;
&lt;em&gt;a general problem-solving model&lt;/em&gt; that works for:  &lt;br/&gt;
shortest-path, maxflow, MST, matching, assignment, ...   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image.png"/&gt; &lt;/p&gt;
&lt;h1 id="1-brewer-s-problem"&gt;1. Brewer-'s Problem&lt;/h1&gt;
&lt;p&gt;toy example: choose products to maximize profit.  &lt;br/&gt;
... &lt;br/&gt;
&lt;em&gt;feasible region&lt;/em&gt;: a convex polygon.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;⇒ optimum solution appears at an extreme point.    &lt;/p&gt;
&lt;p&gt;standard form of LP   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n non-neg variables (j=1..n)   &lt;/li&gt;
&lt;li&gt;m linear euqations (i=1..m)   &lt;/li&gt;
&lt;li&gt;input: a_ij, c_j, b_i   &lt;/li&gt;
&lt;li&gt;output: x_j   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image003.png"/&gt; &lt;br/&gt;
to convert &lt;em&gt;inequality&lt;/em&gt; to &lt;em&gt;equality (as in the standard form above)&lt;/em&gt;: add slack var!  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def. convex set &lt;br/&gt;
for any a and b in set ⇒ 1/2(a+b) is also in set.    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;extreme point:    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def. &lt;strong&gt;extreme point&lt;/strong&gt; &lt;br/&gt;
is a point in set that cannot be written as 1/2(a+b) with a b distinct.    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;extreme point property:  &lt;br/&gt;
if there exists an potimal solution, then there exists one that is an extreme point.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nb of extreme point is finite   &lt;/li&gt;
&lt;li&gt;but this nb can be exponential   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;greedy property:  &lt;br/&gt;
&lt;em&gt;extreme point is optimal iff no better adj extreme points.&lt;/em&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;h1 id="2-simplex-algorithm"&gt;2. Simplex Algorithm&lt;/h1&gt;
&lt;p&gt;algo. simplex   &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;start at some point   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pivot&lt;/strong&gt; from one extreme point to an adj one (never decrease the obj fcn)   &lt;/li&gt;
&lt;li&gt;repeat until optimal   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;We're using the "basis" and "pivoting" to solve LP. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def. &lt;strong&gt;basis&lt;/strong&gt; (基变量) is a subset (size=m) of the n variables.    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;vars in basis are always non-zero...   &lt;/p&gt;
&lt;p&gt;basic feasible solution:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set n-m non-basis vars to 0   &lt;/li&gt;
&lt;li&gt;solve for remaining m vars (with m constraints)   &lt;/li&gt;
&lt;li&gt;if unique and feasible (matrix invertable)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;algo:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initial basic-feasible-solution: start slack vars as basis.    &lt;/li&gt;
&lt;li&gt;choose a non-basic var as &lt;strong&gt;pivot&lt;/strong&gt;, add it into basis, take some basis var out   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. pick B as pivot var using constraint 2 (2nd equation): &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;why picking var B? → its obj coeff is positive   &lt;/li&gt;
&lt;li&gt;why pivot on 2nd constraint (5A+15B+Sc=480)? →    &lt;ul&gt;
&lt;li&gt;RHS &amp;gt; 0 (preserves feasibility)   &lt;/li&gt;
&lt;li&gt;minimum ratio rule: min(480/15, 160/4, 1190/20)   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;stop when no obj-coeff is positive   &lt;/p&gt;
&lt;h1 id="3-simplex-implementations"&gt;3. Simplex Implementations&lt;/h1&gt;
&lt;p&gt;encode standard LP formulation into java 2d array:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Simplex&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;double&lt;/span&gt;&lt;span class="err"&gt;[][]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Simplex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;double&lt;/span&gt;&lt;span class="err"&gt;[][]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;double&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;double&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;double&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m+1&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n+m+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j-n&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n+m&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;simplex algo: just transform initial 2d array into final solution.    &lt;/p&gt;
&lt;h3 id="choosing-pivot-variable-find-entering-column"&gt;choosing pivot variable (find entering column)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Bland's rule.&lt;/strong&gt; find the first column whose obj-coeff is positive.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bland&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;]&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="choosing-pivot-constraint-find-entering-row"&gt;choosing pivot constraint (find entering row)&lt;/h3&gt;
&lt;p&gt;minimum ratio rule (if a tie, choose first row).    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;minRatioRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;]&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;==-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;m+n&lt;/span&gt;&lt;span class="o"&gt;]/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;m+n&lt;/span&gt;&lt;span class="o"&gt;]/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="do-the-pivot-column-q-row-p"&gt;do the pivot (column q, row p)&lt;/h3&gt;
&lt;p&gt;like Guassian elimination:    &lt;/p&gt;
&lt;p&gt;make var q disappear on each row (except for row p); &lt;br/&gt;
on row p: make var q's coeff become 1.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;]/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;so the simplex algo is:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public void solve(){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    while(true){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        int q = bland();    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if(q==-1) break; // optimal if -1   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        int p = minRatioRule(q);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if(p==-1) break; // unbounded if -1   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        pivot(p,q);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;final solution is just in the array: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;remarkable property&lt;/strong&gt; &lt;br/&gt;
&lt;em&gt;in typical applications&lt;/em&gt;, simplex terminates after at most 2(m+n) pivots. — whereas nb of extreme points is exp in n !! &lt;br/&gt;
ie. LINEAR time in practice!!   &lt;/p&gt;
&lt;p&gt;other pivot rules:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;h3 id="degeneracy"&gt;degeneracy&lt;/h3&gt;
&lt;p&gt;when choosing new basis, still stay in the same extreme point...  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image010.png"/&gt; &lt;br/&gt;
→ might cause cycling &lt;br/&gt;
→ bland's rule guarantees finite number of pivots   &lt;/p&gt;
&lt;p&gt;further improvement:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;p&gt;Best practice. &lt;em&gt;Don't implement it yourself......&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image013.png"/&gt; &lt;br/&gt;
(AMPL是个好东西...)   &lt;/p&gt;
&lt;p&gt;算法的力量:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image014.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image015.png"/&gt; &lt;/p&gt;
&lt;h1 id="4-linear-programming-reductions_1"&gt;4. Linear Programming Reductions&lt;/h1&gt;
&lt;h3 id="reduction-to-std-form-equalities"&gt;reduction to std form (equalities)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Minimization problem: max -1*obj   &lt;/li&gt;
&lt;li&gt;ineq constraints: add slack var   &lt;/li&gt;
&lt;li&gt;unbounded var X: replace with X=X0-X1, X0&amp;gt;=0, X1&amp;gt;=0   &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="modeling-of-lp"&gt;modeling of LP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;identify variables   &lt;/li&gt;
&lt;li&gt;define constraints   &lt;/li&gt;
&lt;li&gt;define objective fcn   &lt;/li&gt;
&lt;li&gt;convert to std form   &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="maxflow-by-lp"&gt;maxflow by LP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;variables: x_uv = flow on edge uv   &lt;/li&gt;
&lt;li&gt;constraints: capacity, flow conservation   &lt;/li&gt;
&lt;li&gt;obj: net flow to t   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image016.png"/&gt; &lt;/p&gt;
&lt;p&gt;can use LP to solve mincost maxflow easily...   &lt;/p&gt;
&lt;h3 id="max-cardinality-bipartite-matching-by-lp"&gt;max cardinality bipartite matching by LP&lt;/h3&gt;
&lt;p&gt;input: bipartite graph &lt;br/&gt;
goal: max cardinatlity matching (set of vertex-disjoint edges) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image017.png"/&gt; &lt;br/&gt;
can be reduced to maxflow (见algolab...)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;var: x_ij = indicator of person i assigned to job j (0&amp;lt;=x_ij&amp;lt;=1)   &lt;/li&gt;
&lt;li&gt;constraints: vertex-disjoint   &lt;/li&gt;
&lt;li&gt;obj: sum of all x_ij   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image018.png"/&gt; &lt;/p&gt;
&lt;p&gt;non-trival: cause this is an INTEGER LP...    &lt;/p&gt;
&lt;p&gt;Th (Von Neumann) (and Poincare?..)  &lt;br/&gt;
if all RHS=1 ⇒ &lt;em&gt;all extreme points of the polyhedron have integer coord&lt;/em&gt;.   &lt;/p&gt;
&lt;h3 id="and-many-others"&gt;and many others...&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_2_LP/pasted_image019.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;the profound question: Is there a universal problem-solving model ?&lt;/strong&gt; &lt;br/&gt;
→ P/NP...   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"For the time being, the closest thing that we have to universal problem-solving model is LP "&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="algorithm"></category></entry><entry><title>[python进阶课程] 面向对象编程</title><link href="https://x-wei.github.io/imooc_py_oop.html" rel="alternate"></link><published>2016-02-19T14:00:00+01:00</published><updated>2016-02-19T14:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-02-19:imooc_py_oop.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.imooc.com/learn/317"&gt;http://www.imooc.com/learn/317&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="mo-kuai-he-bao"&gt;模块和包&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;包&lt;/strong&gt;: 文件夹 (可以有多级), 且包含&lt;code&gt;__init__.py&lt;/code&gt;文件(每层都要有) 
&lt;strong&gt;模块&lt;/strong&gt;: py文件&lt;/p&gt;
&lt;p&gt;代码分开放在多个py文件(&lt;strong&gt;模块&lt;/strong&gt;名=文件名). 同名变量互不影响. &lt;/p&gt;
&lt;p&gt;模块名冲突: 把同名模块放在不同&lt;strong&gt;包&lt;/strong&gt;中. &lt;/p&gt;
&lt;h3 id="dao-ru-mo-kuai"&gt;导入模块&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引用时: 使用完整的路径(包+模块名). ex. &lt;code&gt;p1.util.f()&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="dong-tai-dao-ru-mo-kuai"&gt;动态导入模块&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cStringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码先尝试从cStringIO导入，如果失败了（比如cStringIO没有被安装），再尝试从StringIO导入。这样，如果cStringIO模块存在，则我们将获得更快的运行速度，如果cStringIO不存在，则顶多代码运行速度会变慢，但不会影响代码的正常执行。&lt;/p&gt;
&lt;h3 id="shi-yong-__future__"&gt;使用__future__&lt;/h3&gt;
&lt;p&gt;Python的新版本会引入新的功能，但是，实际上这些功能在上一个老版本中就已经存在了。要“试用”某一新的特性，就可以通过导入__future__模块的某些功能来实现。&lt;/p&gt;
&lt;p&gt;ex. 在Python 2.7中引入3.x的除法规则，导入__future__的division：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;division&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mf"&gt;3.3333333333333335&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="an-zhuang-di-san-fang-mo-kuai_1"&gt;安装第三方模块&lt;/h2&gt;
&lt;p&gt;模块管理工具: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;easy_install&lt;/li&gt;
&lt;li&gt;pip (推荐) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查找第三方模块: &lt;a href="https://pypi.python.org/pypi"&gt;https://pypi.python.org/pypi&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="mian-xiang-dui-xiang-bian-cheng-ji-chu_1"&gt;面向对象编程基础&lt;/h1&gt;
&lt;p&gt;OOP: 数据的封装  &lt;/p&gt;
&lt;h3 id="chu-shi-hua-shi-li-shu-xing"&gt;初始化实例属性&lt;/h3&gt;
&lt;p&gt;当创建实例时，&lt;code&gt;__init__()&lt;/code&gt;方法被自动调用, 第一个参数必须是 self（也可以用别的名字，但建议使用习惯用法, 第一个参数self被Python解释器作为实例的引用），后续参数则可以自由指定，和定义函数没有任何区别。&lt;br/&gt;
相应地，创建实例时，就必须要提供除 self 以外的参数.   &lt;/p&gt;
&lt;p&gt;用&lt;code&gt;setattr&lt;/code&gt;让&lt;code&gt;__init__&lt;/code&gt;接受任意的kw参数:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;setattr(object, name, value)&lt;/code&gt;&lt;br/&gt;
This is the counterpart of getattr(). The arguments are an object, a string and an arbitrary value. The string may name an existing attribute or a new attribute. The function assigns the value to the attribute, provided the object allows it. For example, setattr(x, 'foobar', 123) is equivalent to x.foobar = 123.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;class Person(object):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __init__(self, name, gender, birth, **kw):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.name = name  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.gender = gender  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.birth = birth  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        for k, v in kw.iteritems():  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            setattr(self, k, v)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="fang-wen-xian-zhi"&gt;访问限制&lt;/h3&gt;
&lt;p&gt;Python对属性权限的控制是通过&lt;strong&gt;属性名&lt;/strong&gt;来实现的.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个属性由双下划线开头(&lt;code&gt;__&lt;/code&gt;)，该属性就无法被外部访问。  &lt;/li&gt;
&lt;li&gt;但是，如果一个属性以"&lt;code&gt;__xxx__&lt;/code&gt;"的形式定义，那它又可以被外部访问了，以"&lt;code&gt;__xxx__&lt;/code&gt;"定义的属性在Python的类中被称为特殊属性有很多预定义的特殊属性可以使用，通常我们不要把普通属性用"&lt;strong&gt;xxx&lt;/strong&gt;"定义。  &lt;/li&gt;
&lt;li&gt;以单下划线开头的属性"&lt;code&gt;_xxx&lt;/code&gt;"虽然也可以被外部访问，但是，按照习惯，他们不应该被外部访问。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="chuang-jian-lei-shu-xing"&gt;创建类属性&lt;/h3&gt;
&lt;p&gt;绑定在一个实例上的属性不会影响其他实例，但是，类本身也是一个对象，如果在类上绑定一个属性，则所有实例都可以访问类的属性，并且，所有实例访问的类属性都是同一个！也就是说，实例属性每个实例各自拥有，互相独立，而&lt;em&gt;类属性有且只有一份&lt;/em&gt;。&lt;br/&gt;
定义类属性可以直接在 class 中定义：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;class Person(object):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    address = 'Earth'  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __init__(self, name):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.name = name&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为类属性是直接绑定在类上的，所以，访问类属性不需要创建实例，就可以直接访问.  对一个实例调用类的属性也是可以访问的，所有实例都可以访问到它所属的类的属性.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;print Person.address  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;print p1.address&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;类属性和实例属性名字冲突怎么办&lt;/strong&gt;&lt;br/&gt;
当实例属性和类属性重名时，实例属性优先级高，它将屏蔽掉对类属性的访问。&lt;br/&gt;
可见，千万&lt;em&gt;不要在实例上修改类属性&lt;/em&gt;，它实际上并没有修改类属性，而是给实例绑定了一个实例属性。  &lt;/p&gt;
&lt;h3 id="ding-yi-shi-li-fang-fa"&gt;定义实例方法&lt;/h3&gt;
&lt;p&gt;实例的方法就是在类中定义的函数，它的&lt;strong&gt;第一个参数永远是&lt;/strong&gt; &lt;code&gt;self&lt;/code&gt;，指向调用该方法的实例本身，其他参数和一个普通函数是完全一样的. 在实例方法内部，可以访问所有实例属性，这样，如果外部需要访问私有属性，可以通过方法调用获得，这种数据封装的形式除了能保护内部数据一致性外，还可以简化外部调用的难度。  &lt;/p&gt;
&lt;p&gt;我们在 class 中定义的实例方法其实也是属性，它实际上是一个函数对象. 因为方法也是一个属性，所以，它也可以动态地添加到实例上，只是需要用 types.MethodType() 把一个函数变为一个方法...  &lt;/p&gt;
&lt;h3 id="ding-yi-lei-fang-fa"&gt;定义类方法&lt;/h3&gt;
&lt;p&gt;和属性类似，方法也分实例方法和类方法。&lt;br/&gt;
在class中定义的全部是实例方法，实例方法第一个参数 self 是实例本身。&lt;br/&gt;
要在class中定义类方法，需要这么写：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;class Person(object):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    count = 0  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    @classmethod  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def how_many(cls):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return cls.count  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __init__(self, name):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.name = name  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        Person.count = Person.count + 1  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;print Person.how_many()  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;p1 = Person('Bob')  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;print Person.how_many()&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过标记一个 &lt;code&gt;@classmethod&lt;/code&gt;，该方法将绑定到 Person 类上，而非类的实例。类方法的第一个参数将传入类本身，通常将参数名命名为 &lt;code&gt;cls&lt;/code&gt;，上面的 cls.count 实际上相当于 Person.count。  &lt;/p&gt;
&lt;h1 id="lei-de-ji-cheng_1"&gt;类的继承&lt;/h1&gt;
&lt;p&gt;代码复用&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/imooc_py_oop/pasted_image.png"/&gt;&lt;br/&gt;
python的继承:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总是从某个类继承(最上层是&lt;code&gt;object&lt;/code&gt;)  &lt;/li&gt;
&lt;li&gt;不要忘记&lt;code&gt;super.__init__&lt;/code&gt;调用  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;super(SubCls, self)将返回当前类继承的父类, 注意self参数已在super()中传入，在__init__()中将隐式传递，不需要写出（也不能写）。&lt;br/&gt;
        def &lt;strong&gt;init&lt;/strong&gt;(self, args):&lt;br/&gt;
            super(SubCls, self).&lt;strong&gt;init&lt;/strong&gt;(args)&lt;br/&gt;
            pass  &lt;/p&gt;
&lt;h3 id="pan-duan-lei-xing"&gt;判断类型&lt;/h3&gt;
&lt;p&gt;函数&lt;code&gt;isinstance()&lt;/code&gt;可以判断一个变量的类型，既可以用在Python内置的数据类型如str、list、dict，也可以用在我们自定义的类，它们本质上都是数据类型。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(p, Person)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;True    # p是Person类型  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(p, Student)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;False   # p不是Student类型  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(p, Teacher)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;False   # p不是Teacher类型  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(s, Person)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;True    # s是Person类型&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在一条继承链上，一个实例可以看成它本身的类型，也可以看成它父类的类型。  &lt;/p&gt;
&lt;h3 id="duo-tai"&gt;多态&lt;/h3&gt;
&lt;p&gt;调用 s.whoAmI()总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止。  &lt;/p&gt;
&lt;p&gt;由于Python是动态语言，所以，传递给函数 who_am_i(x)的参数 x 不一定是 Person 或 Person 的子类型。任何数据类型的实例都可以，只要它有一个whoAmI()的方法即可：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;class Book(object):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def whoAmI(self):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return 'I am a book'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是动态语言和静态语言（例如Java）最大的差别之一。动态语言调用实例方法，不检查类型，&lt;strong&gt;只要方法存在，参数正确，就可以调用&lt;/strong&gt;。  &lt;/p&gt;
&lt;h3 id="duo-zhong-ji-cheng"&gt;多重继承&lt;/h3&gt;
&lt;p&gt;除了从一个父类继承外，Python允许&lt;em&gt;从多个父类继承&lt;/em&gt;，称为多重继承。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;a&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'init A...'&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;a&lt;/span&gt; = &lt;span class="n"&gt;a&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;(&lt;span class="n"&gt;A&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;a&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;super&lt;/span&gt;(&lt;span class="n"&gt;B&lt;/span&gt;, &lt;span class="k"&gt;self&lt;/span&gt;).&lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="n"&gt;a&lt;/span&gt;)  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'init B...'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;(&lt;span class="n"&gt;A&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;a&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;super&lt;/span&gt;(&lt;span class="n"&gt;C&lt;/span&gt;, &lt;span class="k"&gt;self&lt;/span&gt;).&lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="n"&gt;a&lt;/span&gt;)  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'init C...'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;(&lt;span class="n"&gt;B&lt;/span&gt;, &lt;span class="n"&gt;C&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;a&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;super&lt;/span&gt;(&lt;span class="n"&gt;D&lt;/span&gt;, &lt;span class="k"&gt;self&lt;/span&gt;).&lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="n"&gt;a&lt;/span&gt;)  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'init D...'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/imooc_py_oop/pasted_image001.png"/&gt;&lt;br/&gt;
D 同时继承自 B 和 C，也就是 D 拥有了 A、B、C 的全部功能。多重继承通过 super()调用__init__()方法时，A 虽然被继承了两次，但&lt;code&gt;__init__()&lt;/code&gt;只调用一次：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; d = D('d')  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;init A...  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;init C...  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;init B...  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;init D...&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="huo-qu-dui-xiang-xin-xi"&gt;获取对象信息&lt;/h3&gt;
&lt;p&gt;首先可以用 &lt;code&gt;type()&lt;/code&gt; 函数获取变量的类型，它返回一个 Type 对象：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; type(123)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;lt;type 'int'&amp;gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; s = Student('Bob', 'Male', 88)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; type(s)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;lt;class '__main__.Student'&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其次，可以用 &lt;code&gt;dir()&lt;/code&gt; 函数获取变量的所有属性：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="err"&gt;整数也有很多属性&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'__abs__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__add__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__and__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__class__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__cmp__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'__class__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__delattr__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__dict__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__doc__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__format__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__getattribute__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__hash__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__init__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__module__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__new__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__reduce__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__reduce_ex__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__repr__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__setattr__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__sizeof__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__str__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__subclasshook__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'__weakref__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'gender'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'score'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'whoAmI'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;dir()&lt;/code&gt;返回的属性是字符串列表，如果已知一个属性名称，要获取或者设置对象的属性，就需要用 &lt;code&gt;getattr()&lt;/code&gt; 和 &lt;code&gt;setattr()&lt;/code&gt;函数了：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="err"&gt;获取&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="err"&gt;属性&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;'Bob'&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Adam'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="err"&gt;设置新的&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="err"&gt;属性&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s1"&gt;'Adam'&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="err"&gt;获取&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="err"&gt;属性，但是属性不存在，报错：&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="ss"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Student'&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="k"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;'age'&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="err"&gt;获取&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="err"&gt;属性，如果属性不存在，就返回默认值&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="err"&gt;：&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="n"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Bob'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Male'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Python'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;course&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="ding-zhi-lei_1"&gt;定制类&lt;/h1&gt;
&lt;h3 id="te-shu-fang-fa"&gt;特殊方法&lt;/h3&gt;
&lt;p&gt;又叫 "魔术方法"  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义在class中  &lt;/li&gt;
&lt;li&gt;不需要直接调用: py的函数或操作符会自动调用  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. 任何数据类型的实例都有&lt;code&gt;__str__()&lt;/code&gt;特殊方法.   &lt;/p&gt;
&lt;p&gt;pothon的特殊方法:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__str__&lt;/code&gt;: 用于print  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__len__&lt;/code&gt;: 用于len  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__cmp__&lt;/code&gt;: 用于比较&lt;code&gt;cmp&lt;/code&gt;/排序&lt;code&gt;sorted&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="str-he-repr"&gt;&lt;strong&gt;str&lt;/strong&gt; 和 &lt;strong&gt;repr&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;实现特殊方法&lt;code&gt;__str__()&lt;/code&gt;可以在print的时候打印合适的字符串, 如果直接在命令行敲变量名则不会:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; p = Person('Bob', 'male')  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; print p  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;(Person: Bob, male)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; p  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;lt;main.Person object at 0x10c941890&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为 Python 定义了&lt;code&gt;__str__()&lt;/code&gt;和&lt;code&gt;__repr__()&lt;/code&gt;两种方法，&lt;code&gt;__str__()&lt;/code&gt;用于显示给用户，而&lt;code&gt;__repr__()&lt;/code&gt;用于显示给开发人员。&lt;br/&gt;
偷懒定义&lt;code&gt;__repr__&lt;/code&gt;: &lt;code&gt;__repr__ = __str__&lt;/code&gt; &lt;/p&gt;
&lt;h3 id="cmp"&gt;&lt;strong&gt;cmp&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;__cmp__&lt;/code&gt;用实例自身self和传入的实例 s 进行比较，如果 self 应该排在前面，就返回 -1，如果 s 应该排在前面，就返回1，如果两者相当，返回 0。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;class Student(object):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __init__(self, name, score):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.name = name  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.score = score  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __str__(self):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return '(%s: %s)' % (self.name.lower(), self.score)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    __repr__ = __str__  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __cmp__(self, s):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if self.score!=s.score:  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            return - (self.score - s.score)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        else: return cmp(self.name, s.name)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="len"&gt;&lt;strong&gt;len&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;如果一个类表现得像一个list，要获取有多少个元素，就得用 len() 函数。&lt;br/&gt;
要让 len() 函数工作正常，类必须提供一个特殊方法&lt;code&gt;__len__()&lt;/code&gt;，它返回元素的个数。  &lt;/p&gt;
&lt;h3 id="shu-xue-yun-suan"&gt;数学运算&lt;/h3&gt;
&lt;p&gt;如果要让Rational类(有理数)进行&lt;code&gt;+&lt;/code&gt;运算，需要正确实现&lt;code&gt;__add__&lt;/code&gt;：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;class Rational(object):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __init__(self, p, q):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.p = p  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.q = q&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;p、q 都是整数，表示有理数 p/q。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;class Rational(object):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __init__(self, p, q):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.p = p  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.q = q  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __add__(self, r):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return Rational(self.p * r.q + self.q * r.p, self.q * r.q)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __sub__(self, r):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return Rational(self.p * r.q - self.q * r.p, self.q * r.q)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __mul__(self, r):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return Rational(self.p * r.p, self.q * r.q)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __div__(self, r):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return Rational(self.p * r.q, self.q * r.p)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __str__(self):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        d = 1  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        for i in xrange(2,min(self.p, self.q)+1):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            if self.p%i==0 and self.q%i==0:  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                d = i  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return '%s/%s' % (self.p/d, self.q/d)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    __repr__ = __str__&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="lei-xing-zhuan-huan"&gt;类型转换&lt;/h3&gt;
&lt;p&gt;要让&lt;code&gt;int()&lt;/code&gt;函数对于Rational类正常工作，只需要实现特殊方法&lt;code&gt;__int__()&lt;/code&gt;:&lt;br/&gt;
同理，要让&lt;code&gt;float()&lt;/code&gt;函数正常工作，只需要实现特殊方法&lt;code&gt;__float__()&lt;/code&gt;。  &lt;/p&gt;
&lt;h3 id="property"&gt;@property&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;class Student(object):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __init__(self, name, score):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.name = name  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.__score = score  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def get_score(self):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return self.__score  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def set_score(self, score):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if score &amp;lt; 0 or score &amp;gt; 100:  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            raise ValueError('invalid score')  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.__score = score&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 &lt;code&gt;get/set&lt;/code&gt; 方法来封装对一个属性封装. 但是写 s.get_score() 和 s.set_score() 没有直接写 s.score 来得直接。  &lt;/p&gt;
&lt;p&gt;可以用装饰器函数把 get/set 方法“装饰”成属性调用：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;class Student(object):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __init__(self, name, score):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.name = name  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.__score = score  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    @property  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def score(self):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return self.__score  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    @score.setter  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def score(self, score):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if score &amp;lt; 0 or score &amp;gt; 100:  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            raise ValueError('invalid score')  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.__score = score&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一个score(self)是get方法，用&lt;code&gt;@property&lt;/code&gt;装饰，第二个score(self, score)是set方法，用&lt;code&gt;@score.setter&lt;/code&gt;装饰，&lt;code&gt;@score.setter&lt;/code&gt;是前一个&lt;code&gt;@property&lt;/code&gt;装饰后的副产品。对 score 赋值实际调用的是 set方法。  &lt;/p&gt;
&lt;h3 id="slots"&gt;&lt;strong&gt;slots&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;由于Python是动态语言，任何实例在运行期都可以动态地添加属性。  &lt;/p&gt;
&lt;p&gt;如果要限制添加的属性，例如，Student类只允许添加 name、gender和score 这3个属性，就可以利用Python的一个特殊的&lt;code&gt;__slots__&lt;/code&gt;来实现。&lt;br/&gt;
顾名思义，&lt;code&gt;__slots__&lt;/code&gt;是指一个类允许的属性列表 (所以是类属性)：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;__slots__&lt;/span&gt; = (&lt;span class="s"&gt;'name'&lt;/span&gt;, &lt;span class="s"&gt;'gender'&lt;/span&gt;, &lt;span class="s"&gt;'score'&lt;/span&gt;)  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;gender&lt;/span&gt;, &lt;span class="n"&gt;score&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;gender&lt;/span&gt; = &lt;span class="n"&gt;gender&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;score&lt;/span&gt; = &lt;span class="n"&gt;score&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;s&lt;/span&gt; = &lt;span class="n"&gt;Student&lt;/span&gt;(&lt;span class="s"&gt;'Bob'&lt;/span&gt;, &lt;span class="s"&gt;'male'&lt;/span&gt;, &lt;span class="mi"&gt;59&lt;/span&gt;)  &lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;s&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="s"&gt;'Tim'&lt;/span&gt; &lt;span class="c1"&gt;# OK  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;s&lt;/span&gt;.&lt;span class="n"&gt;score&lt;/span&gt; = &lt;span class="mi"&gt;99&lt;/span&gt; &lt;span class="c1"&gt;# OK  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;s&lt;/span&gt;.&lt;span class="n"&gt;grade&lt;/span&gt; = &lt;span class="s"&gt;'A'&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; (&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="k"&gt;last&lt;/span&gt;):  &lt;/span&gt;
&lt;span class="code-line"&gt;  ...  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;AttributeError:&lt;/span&gt; &lt;span class="s"&gt;'Student'&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="k"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s"&gt;'grade'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;__slots__&lt;/code&gt;的目的是限制当前类所能拥有的属性，如果不需要添加任意动态的属性，使用&lt;code&gt;__slots__&lt;/code&gt;也能节省内存。  &lt;/p&gt;
&lt;h3 id="call"&gt;&lt;strong&gt;call&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在Python中，函数其实是一个对象：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; f = abs  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; f.__name__  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;'abs'  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; f(-123)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;123&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于 f 可以被调用，所以，f 被称为可调用对象。&lt;br/&gt;
所有的函数都是可调用对象。&lt;br/&gt;
一个类实例也可以变成一个可调用对象，只需要实现一个特殊方法&lt;code&gt;__call__()&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;把 Person 类变成一个可调用对象：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;class Person(object):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __init__(self, name, gender):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.name = name  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        self.gender = gender  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def __call__(self, friend):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        print 'My name is %s...' % self.name  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        print 'My friend is %s...' % friend&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在可以对 Person 实例直接调用：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; p = Person('Bob', 'male')  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; p('Tim')  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;My name is Bob...  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;My friend is Tim...&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;单看 p('Tim') 你无法确定 p 是一个函数还是一个类实例，所以，&lt;em&gt;在Python中，函数也是对象，对象和函数的区别并不显著&lt;/em&gt;。  &lt;/p&gt;</summary><category term="python"></category></entry><entry><title>[Algorithms II] Week 6-1 Reductions</title><link href="https://x-wei.github.io/algoII_week6_1_reductions.html" rel="alternate"></link><published>2016-02-19T09:00:00+01:00</published><updated>2016-02-19T09:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-02-19:algoII_week6_1_reductions.html</id><summary type="html">&lt;p&gt;Goal: classify problems according to computational requirements. &lt;br/&gt;
bad new: for huge number of pbs we don't know...  &lt;/p&gt;
&lt;h1 id="1-introduction-to-reductions"&gt;1. Introduction to Reductions&lt;/h1&gt;
&lt;p&gt;shifing gears:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from individual problems to problem-solving models.   &lt;/li&gt;
&lt;li&gt;from linear/quard to polynomial/exponential pbs  &lt;/li&gt;
&lt;li&gt;from implementation details to conceptual framwork  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;suppose we could (not) solve pb X efficiently &lt;br/&gt;
⇒ what else pbs could (not) we solve efficiently ?  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def. reduction&lt;br/&gt;
Pb X &lt;strong&gt;reduces to&lt;/strong&gt; pb Y if you can use an algo that solves Y to solve X.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_1_reductions/pasted_image.png"/&gt;&lt;br/&gt;
for an instance of pb X → transform it into an instance of pb Y → translate the solution for Y to solution for X.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_1_reductions/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;p&gt;ex1. finding median can reduce to sorting... cost = NlogN+1&lt;br/&gt;
ex1. element distinctness can reduce to sorting... cost = NlogN + N  &lt;/p&gt;
&lt;h1 id="2-designing-algorithms"&gt;2. Designing Algorithms&lt;/h1&gt;
&lt;p&gt;algo design: by reduction to problems that we know how to solve (sorting/shortest path/flow/...)  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_1_reductions/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;h3 id="ex1-convex-hull-reduces-to-sorting"&gt;ex1. convex hull reduces to sorting&lt;/h3&gt;
&lt;p&gt;Gram scan algo... (discussed in algo-I course)&lt;br/&gt;
cost = NlogN + N&lt;br/&gt;
algo. Gram scan  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;pick a point with smallest y-coord  &lt;/li&gt;
&lt;li&gt;sort all points by polar angle wrt the picked point   &lt;/li&gt;
&lt;li&gt;consider points in this order, discard points that creates clockwise turn   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_1_reductions/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;h3 id="ex2-undirected-shortest-path-nonneg-weights-reduces-to-directed-shortest-path"&gt;ex2. undirected shortest path (nonneg weights) reduces to directed shortest path&lt;/h3&gt;
&lt;p&gt;cost: ElogV + E&lt;br/&gt;
algo. replace each undir-edge by 2 dir-edge...  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_1_reductions/pasted_image004.png"/&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_1_reductions/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;h1 id="3-establishing-lower-bounds_1"&gt;3. Establishing Lower Bounds&lt;/h1&gt;
&lt;p&gt;goal: prove that a pb requires (at least) a certain nb of steps.   &lt;/p&gt;
&lt;p&gt;ex. any compare-based sorting requires NlogN compares. log(N!) = NlogN  &lt;/p&gt;
&lt;p&gt;Bad news: very hard to estibalish lower bounds.&lt;br/&gt;
Good new: can spread the lower bound NlogN by reducing to sorting (if cost of reduction is small).   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def. linear-time reduction&lt;br/&gt;
pb X linear-time reduces to pb Y if X can be solved with: &lt;br/&gt;
1. linear nb of op for reduction&lt;br/&gt;
2. constant nb of calles to Y  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ex. almost all reductions we've seen so far...   &lt;/p&gt;
&lt;h3 id="ex-proof-of-lower-bound-for-convex-hull"&gt;ex. proof of lower bound for convex hull&lt;/h3&gt;
&lt;p&gt;prop. sorting linear-time reduces to convex hull &lt;br/&gt;
(注意这次是反向的! )&lt;br/&gt;
pf. &lt;br/&gt;
for an instance of sorting: x1 ... xn&lt;br/&gt;
⇒ convert to convex hull instance: &lt;em&gt;(x1, x1^2), ... , (xn, xn^2)&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_1_reductions/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;p&gt;⇒ implication: all (ccw-based) convex hull algo cannot be easier than NlgN ! (otherwise sorting would be easier..)   &lt;/p&gt;
&lt;p&gt;lesson: Establishing lower bounds through reduction is an important tool in guiding algorithm design efforts.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_1_reductions/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;h1 id="4-classifying-problems_1"&gt;4. Classifying Problems&lt;/h1&gt;
&lt;p&gt;prove that pb X and pb Y have the same complexity:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;show X linear-time reduces to Y  &lt;/li&gt;
&lt;li&gt;show Y linear-time reduces to X  &lt;/li&gt;
&lt;li&gt;conclude that X Y have the same complexity (even if we don't know what it is)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. sorting and convex hull... &lt;br/&gt;
一个囧囧的脑洞: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_1_reductions/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;h3 id="ex-integer-arithmetic-reductions-integer-multiplication"&gt;ex. integer arithmetic reductions: integer multiplication&lt;/h3&gt;
&lt;p&gt;integer multiplication: of two N-bit integers. &lt;br/&gt;
Its complexity (unknown) is denoted as M(N)&lt;br/&gt;
brute force: N^2 ops  → so M(N) = Omega(N2)&lt;br/&gt;
many other integer ops can reduce to integer multiplication: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_1_reductions/pasted_image009.png"/&gt;&lt;br/&gt;
what is M(N)?&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_1_reductions/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;h3 id="ex-linear-algebra-reductions-matrix-multiplication"&gt;ex. linear-algebra reductions: matrix multiplication&lt;/h3&gt;
&lt;p&gt;compute product of 2 N*N matrices. &lt;br/&gt;
Its complexity (unknown) is denoted as MM(N)&lt;br/&gt;
brute force: N^3&lt;br/&gt;
operations that can reduce to matrix-multiplication:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_1_reductions/pasted_image011.png"/&gt;&lt;br/&gt;
what is MM(N)?&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week6_1_reductions/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;h3 id="summary"&gt;summary&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week6_1_reductions/pasted_image013.png"/&gt; &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[python进阶课程] 函数式编程</title><link href="https://x-wei.github.io/imooc_py_functional.html" rel="alternate"></link><published>2016-02-17T00:00:00+01:00</published><updated>2016-02-17T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-02-17:imooc_py_functional.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.imooc.com/learn/317"&gt;http://www.imooc.com/learn/317&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;函数式编程: 更抽象, 更脱离指令(计算机), 更贴近计算(数学).   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需要变量 (python允许有变量, 所以python非纯函数式)  &lt;/li&gt;
&lt;li&gt;高阶函数  &lt;/li&gt;
&lt;li&gt;闭包: 返回函数  &lt;/li&gt;
&lt;li&gt;匿名函数  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="gao-jie-han-shu"&gt;高阶函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;变量可以指向函数 &lt;code&gt;f=abs; f(-10)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;函数名: 就是指向函数的变量 &lt;code&gt;abs=len&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高阶函数: 接收函数作为参数的函数  &lt;/p&gt;
&lt;p&gt;def add(x,y,f): &lt;br/&gt;
    return f(x)+f(y)&lt;br/&gt;
add(-5, 9, abs)  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="map"&gt;map()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;map()&lt;/code&gt;是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。map()函数不改变原有的 list，而是返回一个新的 list。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def format_name(s):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return s.title()  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;print map(format_name, ['adam', 'LISA', 'barT'])&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="reduce"&gt;reduce()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;reduce()&lt;/code&gt;函数也是Python内置的一个高阶函数。reduce()函数接收的参数和 map()类似，一个函数 f，一个list，但行为和 map()不同，reduce()传入的函数 f 必须接收两个参数，reduce()对list的每个元素反复调用函数f，并返回最终结果值。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;reduce(function, iterable[, initializer])&lt;/code&gt;&lt;br/&gt;
Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value.  If the optional initializer is present, it is placed before the items of the iterable in the calculation, and serves as a default when the iterable is empty. If initializer is not given and iterable contains only one item, the first item is returned.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="filter"&gt;filter()&lt;/h3&gt;
&lt;p&gt;filter()函数接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。  &lt;/p&gt;
&lt;h3 id="zi-ding-yi-sorted"&gt;自定义sorted()&lt;/h3&gt;
&lt;p&gt;sorted()也是一个高阶函数，它可以接收一个比较函数&lt;code&gt;cmp&lt;/code&gt;来实现自定义排序，比较函数的定义是，传入两个待比较的元素 x, y，如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0。  &lt;/p&gt;
&lt;h3 id="fan-hui-han-shu"&gt;返回函数&lt;/h3&gt;
&lt;p&gt;在函数内部定义一个函数 然后返回这个内部定义的函数. &lt;br/&gt;
&lt;em&gt;返回函数可以把一些计算延迟执行&lt;/em&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def calc_sum(lst):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def lazy_sum():  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return sum(lst)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return lazy_sum&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用&lt;code&gt;calc_sum()&lt;/code&gt;并没有计算出结果，而是返回函数:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; f = calc_sum([1, 2, 3, 4])  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; f  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;lt;function lazy_sum at 0x1037bfaa0&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对返回的函数进行调用时，才计算出结果:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; f()  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bi-bao"&gt;闭包&lt;/h3&gt;
&lt;p&gt;函数&lt;code&gt;f&lt;/code&gt;内部定义的函数&lt;code&gt;g&lt;/code&gt;无法被外部访问 → 可以防止其他代码调用&lt;code&gt;g&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def calc_sum(lst):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def lazy_sum():  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return sum(lst)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return lazy_sum&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意: 发现没法把 &lt;code&gt;lazy_sum&lt;/code&gt; 移到 &lt;code&gt;calc_sum&lt;/code&gt; 的外部，因为它&lt;em&gt;引用了 calc_sum 的参数&lt;/em&gt; &lt;code&gt;lst&lt;/code&gt;。&lt;br/&gt;
像这种&lt;strong&gt;内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数&lt;/strong&gt;的情况，称为闭包（Closure）。  &lt;/p&gt;
&lt;p&gt;闭包的特点是返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，就要&lt;em&gt;确保引用的局部变量在函数返回后不能变&lt;/em&gt;。&lt;br/&gt;
ex:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;# 希望一次返回3个函数，分别计算1x1,2x2,3x3:  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;def count():  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    fs = []  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for i in range(1, 4):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        def f():  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;             return i*i  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        fs.append(f)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return fs  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;f1, f2, f3 = count()&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以为调用f1()，f2()和f3()结果应该是1，4，9，但实际结果全部都是 9 !  原因就是当count()函数返回了3个函数时，这3个函数所引用的变量 i 的值已经变成了3。&lt;em&gt;函数只在执行时才去获取外层参数i&lt;/em&gt;, 由于f1、f2、f3并没有被调用，所以，此时他们并未计算 i*i，当 f1 被调用时i已经变为3... &lt;br/&gt;
上面的正确写法是:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def count():  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    fs = []  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for i in range(1, 4):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        def f(j=i):   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            return j*j  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        fs.append(f)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return fs  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;f1, f2, f3 = count()  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;print f1(), f2(), f3()&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;因此，返回函数不要引用任何循环变量，或者后续会发生变化的变量。&lt;/strong&gt; &lt;/p&gt;
&lt;h3 id="ni-ming-han-shu"&gt;匿名函数&lt;/h3&gt;
&lt;p&gt;Python中，对匿名函数提供了有限支持。 &lt;br/&gt;
关键字&lt;code&gt;lambda&lt;/code&gt; 表示匿名函数，冒号前面的 x 表示函数参数。匿名函数有个限制，就是只能有一个表达式，不写return，返回值就是该表达式的结果。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9])  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;myabs = lambda x: -x if x &amp;lt; 0 else x   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; myabs(-1)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="zhuang-shi-qi_1"&gt;装饰器&lt;/h2&gt;
&lt;p&gt;问题: 定义了函数, 想在运行时增加函数功能同时不改动函数代码.&lt;br/&gt;
ex. 希望函数调用时打印调用日志&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/imooc_py_functional/pasted_image.png"/&gt;&lt;br/&gt;
⇒ 方法: 高阶函数: &lt;strong&gt;接收要修改的函数, 进行包装后返回包装过的新函数.&lt;/strong&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def new_f(f):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def fn(x):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        print 'call %s()' % f.__name__  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return f(x)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return fn&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;函数&lt;code&gt;new_fn&lt;/code&gt;就是所谓装饰器函数. python的@语法可以简化装饰器调用: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/imooc_py_functional/pasted_image001.png"/&gt;&lt;br/&gt;
(注意: 右边代码, 原本未装饰的f1函数已经被彻底隐藏了. )&lt;br/&gt;
优点: 极大简化代码.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/imooc_py_functional/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;h3 id="wu-can-shu-decorator"&gt;无参数decorator&lt;/h3&gt;
&lt;p&gt;上面例子里面的&lt;code&gt;new_fn&lt;/code&gt;函数只能装饰接收一个参数x的函数, 想要处理接收任意参数的函数 ⇒ 利用Python的 &lt;code&gt;*args&lt;/code&gt; 和 &lt;code&gt;**kw&lt;/code&gt;&lt;br/&gt;
    def log(f):&lt;br/&gt;
        def fn(*args, &lt;strong&gt;kw):&lt;br/&gt;
            print 'call %s() in %s'%( f.&lt;strong&gt;name&lt;/strong&gt;, time.ctime() )&lt;br/&gt;
            return f(*args, &lt;/strong&gt;kw)&lt;br/&gt;
        return fn  &lt;/p&gt;
&lt;h3 id="dai-can-shu-decorator"&gt;带参数decorator&lt;/h3&gt;
&lt;p&gt;接上面的log函数, 如果有的函数非常重要，希望打印出'[INFO] call xxx()...'，有的函数不太重要，希望打印出'[DEBUG] call xxx()...'，这时，log函数本身就需要传入'INFO'或'DEBUG'这样的参数，类似这样：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;@log('DEBUG')  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;def my_func():  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    pass&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把上面的定义翻译成高阶函数的调用，就是：&lt;br/&gt;
&lt;code&gt;my_func = log('DEBUG')(my_func)&lt;/code&gt;&lt;br/&gt;
再展开一下：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;log_decorator = log('DEBUG')  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;my_func = log_decorator(my_func)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相当于:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;log_decorator = log('DEBUG')  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;@log_decorator  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;def my_func():  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    pass&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以，带参数的log函数&lt;em&gt;首先&lt;strong&gt;&lt;em&gt;返回一个decorator函数&lt;/em&gt;&lt;/strong&gt;，再让这个decorator函数接收my_func并返回新函数&lt;/em&gt;：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def log(prefix):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def log_decorator(f):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        def wrapper(*args, **kw):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            print '[%s] %s()...' % (prefix, f.__name__)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            return f(*args, **kw)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return wrapper  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return log_decorator  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;@log('DEBUG')  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;def test():  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    pass  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;print test()&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里用到了闭包: 最里层wrapper函数(即修饰过个函数)用到了prefix参数.   &lt;/p&gt;
&lt;h3 id="wan-shan-decorator"&gt;完善decorator&lt;/h3&gt;
&lt;p&gt;上面的decorator会修改函数名:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在没有decorator的情况下，打印函数名：  &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def f1(x):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    pass  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;print f1.__name__&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ 输出： f1  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有decorator的情况下，再打印函数名：  &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def log(f):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def wrapper(*args, **kw):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        print 'call...'  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return f(*args, **kw)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return wrapper  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;@log  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;def f2(x):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    pass  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;print f2.__name__&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ 输出： wrapper  &lt;/p&gt;
&lt;p&gt;这对于那些依赖函数名的代码就会失效。decorator还改变了函数的&lt;code&gt;__doc__&lt;/code&gt;等其它属性。如果要让调用者看不出一个函数经过了@decorator的“改造”，就需要&lt;em&gt;把原函数的一些属性复制到新函数中&lt;/em&gt;：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def log(f):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    def wrapper(*args, **kw):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        print 'call...'  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return f(*args, **kw)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    wrapper.__name__ = f.__name__  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    wrapper.__doc__ = f.__doc__  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return wrapper&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样写很不方便, Python内置的&lt;code&gt;functools&lt;/code&gt;可以用来自动化完成这个“复制”的任务：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'call...'&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;functools.wraps(f)&lt;/code&gt;是一个装饰器函数, 目的是为了把最后返回的函数再次装饰(复制f的属性进去)... 所以对于带参数的装饰器, 应该在最里面返回的wrapper函数前加上&lt;code&gt;@functools.wraps(f)&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perf_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'call &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;() in &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#closure  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;perf_decorator&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nd"&gt;@performance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ms'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pian-han-shu"&gt;偏函数&lt;/h3&gt;
&lt;p&gt;假设要转换大量的二进制字符串，每次都传入&lt;code&gt;int(x, base=2)&lt;/code&gt;非常麻烦，于是，我们想到，可以定义一个int2()的函数，默认把base=2传进去：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;def int2(x, base=2):  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return int(x, base)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;functools.partial&lt;/code&gt;可以把一个参数多的函数变成一个参数少的新函数，少的参数需要在创建时指定默认值，这样，新函数调用的难度就降低了。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;functools.partial(func[,*args][, **keywords])&lt;/code&gt;&lt;br/&gt;
Return a new partial object which when called will behave like func called with the positional arguments args and keyword arguments keywords.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;int2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;int2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1000000'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;64&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;int2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1010101'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;sorted_ignore_case&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sorted_ignore_case&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'bob'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'about'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Zoo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Credit'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category></entry><entry><title>[Algorithms II] Week 5-2 Data Compression</title><link href="https://x-wei.github.io/algoII_week5_2.html" rel="alternate"></link><published>2016-01-04T00:00:00+01:00</published><updated>2016-01-04T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2016-01-04:algoII_week5_2.html</id><summary type="html">&lt;h1 id="1-introduction-to-data-compression"&gt;1. Introduction to Data Compression&lt;/h1&gt;
&lt;p&gt;pb: reduce the size of a file, to save space/time for storing/transmitting. &lt;br/&gt;
applications: generic file compression(gzip), multimedia (mp3), communication(skype).   &lt;/p&gt;
&lt;p&gt;From binary data &lt;code&gt;B&lt;/code&gt;, ⇒ generate a compressed representation &lt;code&gt;C(B)&lt;/code&gt;. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_2/pasted_image.png"/&gt;&lt;br/&gt;
&lt;strong&gt;lossless compression&lt;/strong&gt;: get exactly &lt;code&gt;B&lt;/code&gt; from &lt;code&gt;C(B)&lt;/code&gt;&lt;br/&gt;
&lt;strong&gt;compression ratio&lt;/strong&gt;: &lt;code&gt;|C(B)|/|B|&lt;/code&gt;(||means number of &lt;em&gt;bits&lt;/em&gt;)  &lt;/p&gt;
&lt;h3 id="tools"&gt;Tools&lt;/h3&gt;
&lt;p&gt;extension to stdio libraries: read/write &lt;em&gt;bits&lt;/em&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;BinaryStdIn&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;readBoolean&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;read&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;bit&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;boolean&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;char&lt;/span&gt; &lt;span class="n"&gt;readChar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;read&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;char&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;char&lt;/span&gt; &lt;span class="n"&gt;readChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;read&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;char&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;similar&lt;/span&gt; &lt;span class="k"&gt;method&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;bitstream&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="k"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;BinaryStdOut&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;write&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;bit&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;char&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;write&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;char&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;write&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;least&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;significant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;similar&lt;/span&gt; &lt;span class="k"&gt;method&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="k"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;might&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="k"&gt;some&lt;/span&gt; &lt;span class="n"&gt;byte&lt;/span&gt; &lt;span class="n"&gt;alignment&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;usage example: store a date 12/31/1999&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_2/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;p&gt;universal date compression?&lt;br/&gt;
&lt;strong&gt;prop&lt;/strong&gt;. NO algorithm can compress every bitstring.&lt;br/&gt;
pf. by contradiction: repeatedly compress the bitstring ⇒ bit length goes to 0.   &lt;/p&gt;
&lt;h1 id="2-run-length-coding_1"&gt;2. Run-Length Coding&lt;/h1&gt;
&lt;p&gt;one simple type of redundancy in bitstream: long runs of repeated bits. &lt;br/&gt;
⇒ use &lt;em&gt;4-bit counts&lt;/em&gt; to represent alternating 1s and 0s. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_2/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;question1: how many bits to represent counts ? ⇒ pick 8 bits (just tradeoff)  &lt;/li&gt;
&lt;li&gt;question2: what if run length is bigger than max length(2^8)? ⇒ just add length=0 of the alternating bit...   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;application: JPEG...   &lt;/p&gt;
&lt;p&gt;code:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;RunLength&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;max&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="k"&gt;length&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lgR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;compress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;boolean&lt;/span&gt; &lt;span class="nb"&gt;bit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oldbit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;BinaryStdIn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nb"&gt;bit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BinaryStdIn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readBoolean&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bit&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="k"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="n"&gt;oldbit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="n"&gt;BinaryStdOut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lgR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="err"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="n"&gt;BinaryStdOut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lgR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="n"&gt;BinaryStdOut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lgR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="err"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="err"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;BinaryStdOut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lgR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;BinaryStdOut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;boolean&lt;/span&gt; &lt;span class="nb"&gt;bit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;BinaryStdIn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BinaryStdIn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lgR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="n"&gt;BinaryStdOut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nb"&gt;bit&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;bit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="err"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;BinaryStdOut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="3-huffman-compression"&gt;3. Huffman Compression&lt;/h1&gt;
&lt;p&gt;classique...   &lt;/p&gt;
&lt;p&gt;idea: &lt;em&gt;variable length code&lt;/em&gt;. &lt;br/&gt;
ex. Morse code, more freq chars use less chars. &lt;br/&gt;
→ pb: ambiguity? one code is the prefix of another... &lt;br/&gt;
→ need to use &lt;em&gt;prefix-free code&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;⇒ use a trie to represent the prefix-free code, in bitstream, use a binary trie: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_2/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;h3 id="huffman-trie-node"&gt;Huffman Trie Node&lt;/h3&gt;
&lt;p&gt;define trie nodes having frequences:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public static class Node implements Comparable&amp;lt;Node&amp;gt;{  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private char ch; // only used for leaves, null for internal nodes  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private int freq;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private final Node left, right; // left--&amp;gt;0, right--&amp;gt;1  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public Node(char ch, int freq, Node left, Node right){//...}  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public boolean isLeaf(){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return left==null &amp;amp;&amp;amp; right==null;}  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public int compareTo(Node that){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return this.freq-that.freq;}  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="implementation"&gt;implementation&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;expansion&lt;/strong&gt;&lt;br/&gt;
&lt;em&gt;in the bitstream, we first put the (serialized) trie in the head.&lt;/em&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public void expand{  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Node root = getTrie(); //   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int N = BinaryStdIn.readInt(); // number of chars in string  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for(int i=0; i&amp;lt;N; i++){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        Node x = root;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        while (!x.isLeaf()){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            if(BinaryStdIn.readBoolean()) x = x.right;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            else x = x.left;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        BinaryStdOut.write(x.ch);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    BinaryStdOut.close();  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;output trie&lt;/strong&gt;&lt;br/&gt;
ie. to serialize a trie. &lt;br/&gt;
⇒ use &lt;em&gt;preorder traversal&lt;/em&gt;: &lt;br/&gt;
0 for internal nodes, and 1 for leaf (followed by the corresponding char)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_2/pasted_image004.png"/&gt;&lt;br/&gt;
recursive method:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private static void writeTrie(Node x){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(x==null) return;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(x.isLeaf()){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        BinaryStdOut.write(true); // leaf node  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        BinaryStdOut.write(x.ch); // followed by the char  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    } else {  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        BinaryStdOut.write(false); // internal node  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        writeTrie(x.left);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        writeTrie(x.right);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;read trie&lt;/strong&gt;&lt;br/&gt;
Reconstruct the trie from the serialized bitstring. &lt;br/&gt;
preorder(x) = x+preorder(x.left)+preorder(x.right) ⇒ recursive method...   &lt;/p&gt;
&lt;p&gt;这个递归函数还是蛮有代表性的, 值得看.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private static Node readTrie(){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(BinaryStdOut.readBoolean()) {  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        char ch = BinaryStdOut.readChar();  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return new Node(ch, 0, null, null);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    } else {  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        Node left = readTrie();  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        Node right = readTrie();  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return new Node('\0', 0, left, right); // subtle recursion  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="huffman-algorithm"&gt;Huffman algorithm&lt;/h3&gt;
&lt;p&gt;pb: how to find the best prefixless code?   &lt;/p&gt;
&lt;p&gt;Shannon-Fano algo:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;partition symbols S into 2 subsets: S1, S0, with roughly equal freq  &lt;/li&gt;
&lt;li&gt;code in S1 start with 1 and in S0 start with 0  &lt;/li&gt;
&lt;li&gt;recur on S1 and S0  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;[Huffman algo]&lt;/strong&gt; (1950) &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;count letter freq in input  &lt;/li&gt;
&lt;li&gt;build a node for each char  &lt;/li&gt;
&lt;li&gt;select the 2 tries with minimum weight(freq), merge them, and put it back  &lt;/li&gt;
&lt;li&gt;repeat until we get only 1 trie  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week5_2/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;p&gt;application: jpeg, pdf, mp3, ...  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buildTrie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MinPQ&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MinPQ&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;top&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;. Huffman algorithm produces the optimal prefixless code.   &lt;/p&gt;
&lt;p&gt;running time: &lt;strong&gt;N + RlgR&lt;/strong&gt; &lt;/p&gt;
&lt;h1 id="4-lzw-compression_1"&gt;4. LZW Compression&lt;/h1&gt;
&lt;p&gt;idea:&lt;br/&gt;
adaptive model: learn and &lt;em&gt;update&lt;/em&gt; the model as you read the text. &lt;br/&gt;
decoder will do the same thing.   &lt;/p&gt;
&lt;p&gt;build a table of not only mapping chars to codes, but also mapping &amp;gt;=2-char combinations to codes(of fixed width). &lt;br/&gt;
when encoding strings, look for the longest prefix that is in our table. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_2/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;h3 id="lzw-compression"&gt;LZW compression&lt;/h3&gt;
&lt;p&gt;LZW compression algo  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a symbol table mapping string keys to W-bit code, initialize as mapping only chars to codes  &lt;/li&gt;
&lt;li&gt;find longest prefix &lt;code&gt;s&lt;/code&gt; of the unscanned input   &lt;/li&gt;
&lt;li&gt;write out the corresponding code   &lt;/li&gt;
&lt;li&gt;add &lt;code&gt;s+c&lt;/code&gt; into the symbol table, where &lt;code&gt;c&lt;/code&gt; is the next char in input  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use a trie for representing the code table → because support longest prefix match.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;compress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;TST&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TST&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;trie&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;char&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;""&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="ss"&gt;"stop"&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;length&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;longestPrefixOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;BinaryStdOut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;length&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;length&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;BinaryStdOut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;write&lt;/span&gt; &lt;span class="ss"&gt;"stop"&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;BinaryStdOut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="lzw-expansion"&gt;LZW expansion&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;no need to get the codeword table&lt;/em&gt;, the input is just the compressed bitstring.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maintain a (reverse)table mapping int(code) to strings.   &lt;/li&gt;
&lt;li&gt;as we decode the string, we add new entries to our table.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;to represent the table: just an array.   &lt;/p&gt;
&lt;p&gt;&lt;em&gt;note&lt;/em&gt; when add new entries: add key = &lt;code&gt;s+c&lt;/code&gt;, where &lt;code&gt;s&lt;/code&gt; is the last decoded string, &lt;code&gt;c&lt;/code&gt; is the first char of the currently decoded string.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_2/pasted_image008.png"/&gt;&lt;br/&gt;
example: when decoded ABR, s = BR, currently decoded string = ABR, so we add BRA.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tricky case&lt;/strong&gt;: ABABABA&lt;br/&gt;
compression&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_2/pasted_image009.png"/&gt;&lt;br/&gt;
problem in expansion when reading the "83": &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_2/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;p&gt;→ need to be able to update the table when encountering a code not yet defined...   &lt;/p&gt;
&lt;h1 id="summary_1"&gt;Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Huffman: fixed-length symbols, with variable-length codes.   &lt;/li&gt;
&lt;li&gt;LZW: variable-length symbols, with fixed-length codes.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;theoretical limit: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_2/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;p&gt;还剩下一周的内容, 可能要等到二月底考完以后有时间再看了, 现在先复习备考...&lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 5-1 Regular Expressions</title><link href="https://x-wei.github.io/algoII_week5_1.html" rel="alternate"></link><published>2015-12-27T00:00:00+01:00</published><updated>2015-12-27T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-12-27:algoII_week5_1.html</id><summary type="html">&lt;h1 id="1-regular-expressions"&gt;1. Regular Expressions&lt;/h1&gt;
&lt;p&gt;pb: pattern matching. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image.png"/&gt; &lt;/p&gt;
&lt;h3 id="regular-expression"&gt;regular expression&lt;/h3&gt;
&lt;p&gt;Is a notation to specify a set of strings. &lt;br/&gt;
basic operations:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;concatenation   &lt;/li&gt;
&lt;li&gt;or  &lt;/li&gt;
&lt;li&gt;closure: "0 or more appearances of chars"  &lt;/li&gt;
&lt;li&gt;parentheses  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image001.png"/&gt;&lt;br/&gt;
additional operations (&lt;em&gt;added for convinence&lt;/em&gt;):&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image002.png"/&gt;&lt;br/&gt;
ex. &lt;code&gt;[A-C]+&lt;/code&gt; is equivalent to &lt;code&gt;(A|B|C)(A|B|C)*&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;吐槽名句: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;h1 id="2-res-and-nfas_1"&gt;2. REs and NFAs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;duality&lt;/strong&gt; between RE and DFA:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RE: to decribe a set of strings.  &lt;/li&gt;
&lt;li&gt;DFA: machine to ecognize whether a string is in a given set.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;[Kleene's therom]&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For any DFA, there exists a RE that describes the same set of strings;&lt;br/&gt;
For any RE, there exists a DFA that recognizes the same set of strings.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;h3 id="first-attempt-of-pattern-matching"&gt;first attempt of pattern matching&lt;/h3&gt;
&lt;p&gt;(Ken Tompson) same as KMP — no backup.&lt;br/&gt;
basic plan:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;construct the DFA  &lt;/li&gt;
&lt;li&gt;simulate the DFA with text   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bad news: DFA may have exponential nb of states. &lt;br/&gt;
⇒ change to &lt;strong&gt;NFA&lt;/strong&gt; (nondeterministic finite automaton).  &lt;/p&gt;
&lt;h3 id="nfa"&gt;NFA&lt;/h3&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;put RE into parentheses  &lt;/li&gt;
&lt;li&gt;every &lt;em&gt;char&lt;/em&gt; as a state (start=0, success=M) — 这里和之前的DFA很不一样: 之前是每个transition(edge)关联一个char, 这里是每个状态(node)关联一个char.   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;epsilon-transition&lt;/strong&gt; (red links below): change of machine state &lt;em&gt;without scanning text&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;match-transition&lt;/strong&gt; (black links below): change state, but also have to scan next char in text, &lt;em&gt;match transition is added after each alphabetic char&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;success (accept) if &lt;em&gt;any sequence&lt;/em&gt; of transitions (after scanning all text) end at state-M.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;亦可理解为, DFA是每一条边对应一个可能的(字母表内的)char, 而NFA只有match-transition对应于pattern里的(alphabetic) char, 其他epsilon transition的边对应空字符串(也就是epsilon string). &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image005.png"/&gt;&lt;br/&gt;
example:&lt;br/&gt;
is "AAAABD" a match ?&lt;br/&gt;
→ yes. (和上一节substring的插图进行一下比对, 还是有很大不同)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;p&gt;pb: non-determinism&lt;br/&gt;
How to determine whether a string is a match of a NFA (ie. &lt;em&gt;how to select the right sequence&lt;/em&gt; of transition) ? &lt;br/&gt;
⇒ sysematically  consider &lt;em&gt;all&lt;/em&gt; possible transition sequences.   &lt;/p&gt;
&lt;h1 id="3-nfa-simulation_1"&gt;3. NFA Simulation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;state names: 0 to M. (M+1 states in total, M=length of RE string).   &lt;/li&gt;
&lt;li&gt;match-transitions: store in array &lt;code&gt;re[]&lt;/code&gt; (the match transitions are naturally in order of the array).  &lt;/li&gt;
&lt;li&gt;epsilon -transitions: store in a digraph &lt;code&gt;G&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;idea:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;maintain a &lt;em&gt;set&lt;/em&gt; of all state that NFA could be in after reading first i chars in text.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;at each iteration: check all reachable state wrt the transitions, then update reachable states. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;h3 id="algorithm"&gt;algorithm&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image008.png"/&gt;&lt;br/&gt;
(for the NFA above, 注意为了方便已经加了 必要的括号)  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Algo]&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;initial: &lt;code&gt;rs&lt;/code&gt;(reachable state)=reachable state from state 0 (left parenthese) using epsilon trantisions   &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;consume a char &lt;em&gt;in text&lt;/em&gt;:   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nrs&lt;/code&gt; (&lt;em&gt;new-reachable-states&lt;/em&gt;) = empty set  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;from all reachable state of this character: add next state using the match-transition to &lt;code&gt;nrs&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;add all reachable states (using epsilon transition) form the &lt;code&gt;nrs&lt;/code&gt; set to &lt;code&gt;nrs&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;set &lt;code&gt;rs = nrs&lt;/code&gt;, and consume the next char in text   &lt;/li&gt;
&lt;li&gt;accept if at the end the state M is in &lt;code&gt;rs&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="concrete-example"&gt;concrete example&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;init:  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when &lt;em&gt;matching A&lt;/em&gt; from text: state 2 or 6  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image011.png"/&gt;&lt;br/&gt;
using match transition of A, we can get to state 3 or 7&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image012.png"/&gt;&lt;br/&gt;
if we add epsilon transitions: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image013.png"/&gt;&lt;br/&gt;
so reachable states after reading 1st A are: 2, 3, 4, 7&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image014.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;matching 2nd A from text: state 2  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;using match transition we can only get to state 3. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image015.png"/&gt;&lt;br/&gt;
using epsilon transitions from state 3: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image016.png"/&gt;&lt;br/&gt;
 (&lt;em&gt;the only state after matching A is state 2 3 4&lt;/em&gt;)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;etc...   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者直接看这张图:   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image017.png"/&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image018.png"/&gt; &lt;/p&gt;
&lt;h3 id="reachability"&gt;reachability&lt;/h3&gt;
&lt;p&gt;All reachable vertices from &lt;em&gt;a set of&lt;/em&gt; source vertices → just DFS. &lt;br/&gt;
⇒ directly use the API from the digraph section: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image019.png"/&gt;&lt;br/&gt;
running time linear to E+V  &lt;/p&gt;
&lt;h3 id="java-implementation"&gt;Java implementation&lt;/h3&gt;
&lt;p&gt;API:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class NFA{  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private int M;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private char[] re;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private Digraph G;// digraph of the epsilon-transitions  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public NFA(String regexp){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        M = regexp.length();  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        re = regexp.toCharArray();  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        G = buildEpsilonTransitionGraph();// helper function to build the graph G  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public boolean matches(String text);// does text match the regexp?  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private Digraph buildEpsilonTransitionGraph();// private helper function  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The function &lt;code&gt;buildEpsilonTransitionGraph()&lt;/code&gt;will be attacked in next session, for now we focus on the NFA simulation code — that is, the &lt;code&gt;mathes()&lt;/code&gt; method.   &lt;/p&gt;
&lt;p&gt;For simplicity let's assume we have a function &lt;code&gt;reachableVertices(Digraph G, Bag&amp;lt;Integer&amp;gt; sourceSet)&lt;/code&gt; and  &lt;code&gt;reachableVertices(Digraph G, int source)&lt;/code&gt; that gives the reachable states from (a set of) source vertices, including the sources. Or we can directly use the &lt;code&gt;DirectedDFS&lt;/code&gt; api as listed above.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;does&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;regexp&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Bag&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rechableStates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reachableVertices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reachable&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Bag&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;newRechableStatesBymatch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bag&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rechableStates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;newRechableStatesBymatch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;rechableStates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reachableVertices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;newRechableStates&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reachableStates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(代码虽然短但是这个过程我理解了好久.. 另外上面的代码有点伪).   &lt;/p&gt;
&lt;h3 id="analysis"&gt;Analysis&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;. the matches() method takes &lt;code&gt;O(MN)&lt;/code&gt; time in worst case.   &lt;/p&gt;
&lt;p&gt;pf. N chars in text, each char can go through &amp;lt;= M states (DFS), and in the digraph, no node has &amp;gt;3 degree ⇒ &lt;em&gt;number of edges &amp;lt;= 3M&lt;/em&gt;, so the time for each dfs is O(M), in total we have O(MN).   &lt;/p&gt;
&lt;h1 id="4-nfa-construction_1"&gt;4. NFA Construction&lt;/h1&gt;
&lt;p&gt;→ construct the epsilon transition digraph.   &lt;/p&gt;
&lt;h3 id="buiding-a-nfa-from-a-re-parsing"&gt;buiding a NFA from a re (parsing)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;states in a NFA: one state per char, plus an  accept state (state M)  &lt;/li&gt;
&lt;li&gt;alphabet state: chars in alphabet (&lt;code&gt;A, B, C, D&lt;/code&gt;)  → (implicitly) put a match transition to next state  &lt;/li&gt;
&lt;li&gt;metacharacters:  &lt;code&gt;( ) . * |&lt;/code&gt; , 5 metacharacters in total  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ to deal with the metacharacters:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;paretheses &lt;/strong&gt;&lt;code&gt;( )&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;simply put a epsilon-transition to the next state&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image020.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;closure &lt;/strong&gt;&lt;code&gt;*&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;星号前面只可能是字母(包括&lt;code&gt;.&lt;/code&gt;)或者右括号&lt;code&gt;)&lt;/code&gt;, 所以分两种情况讨论一下, 需要向前看一位, 这里就比较subtle&lt;br/&gt;
for each &lt;code&gt;*&lt;/code&gt; state, add 3 transitions as below: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image021.png"/&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image022.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;or&lt;/strong&gt; &lt;code&gt;|&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or符号肯定在一个括号里面&lt;br/&gt;
add 2 epsilon transitions wrt parethese: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image023.png"/&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image024.png"/&gt; &lt;/p&gt;
&lt;p&gt;以上就是NFA建立G的时候要处理的三种情形, 这三种情形都要知道一个左括号(&lt;code&gt;lp&lt;/code&gt;)的位置 ⇒ use a stack !   &lt;/p&gt;
&lt;h3 id="implementation"&gt;implementation&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image025.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for alphabetic chars: do one-char &lt;em&gt;lookahead&lt;/em&gt; → if next is &lt;code&gt;*&lt;/code&gt;, add transitions.   &lt;/li&gt;
&lt;li&gt;for left parenthese &lt;code&gt;(&lt;/code&gt;: add transition to next state, and push to stack  &lt;/li&gt;
&lt;li&gt;for or &lt;code&gt;|&lt;/code&gt;: add transition to next state, and push to stack   &lt;/li&gt;
&lt;li&gt;for right parenthese &lt;code&gt;)&lt;/code&gt;: pop the stack to deal with or and lp; and also do lookahead.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;code is not trival... look carefully:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Digraph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buildEpsilonTransitionGraph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;helper&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Digraph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Digraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="s1"&gt;'|'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="s1"&gt;'('&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;stk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="s1"&gt;'('&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="s1"&gt;')'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="s1"&gt;')'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;need&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="s1"&gt;'|'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;lookahead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i+1&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="s1"&gt;')'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;closure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;before&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;closure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;alphabetic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;before&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;through&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="analysis_1"&gt;Analysis&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;. building an NFA takes linear time and space in M. &lt;br/&gt;
pf. for each char, the nb of operations is const.   &lt;/p&gt;
&lt;p&gt;真不愧是most ingenius algorithm we met in this course......   &lt;/p&gt;
&lt;h1 id="5-regular-expression-applications_1"&gt;5. Regular Expression Applications&lt;/h1&gt;
&lt;h3 id="grep"&gt;grep&lt;/h3&gt;
&lt;p&gt;"&lt;strong&gt;G&lt;/strong&gt;eneralized &lt;strong&gt;R&lt;/strong&gt;egular &lt;strong&gt;E&lt;/strong&gt;xpression &lt;strong&gt;P&lt;/strong&gt;rint"&lt;br/&gt;
print out all lines (from stdin) having a substring of an RE.&lt;br/&gt;
⇒ equal to adding a &lt;code&gt;.*&lt;/code&gt; to the beginning and end of the RE to make a match.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class GREP{  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public void main(String[] args){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        String re = ".*"+args[0]+".*";  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        NFA nfa = new NFA(re);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        while(StdIn.hasNextLine){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            String line = StdIn.readLine();  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            if(nfa.matches(line)) StdOut.println(line);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the grep has NM worst case running time — same as brute force substring search — amazing...  &lt;/p&gt;
&lt;p&gt;grep application: crossword puzzles&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image026.png"/&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image027.png"/&gt; &lt;/p&gt;
&lt;h3 id="regexp-in-other-languages"&gt;regexp in other languages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;unix: grep, awk  &lt;/li&gt;
&lt;li&gt;script: python, &lt;em&gt;perl&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image028.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java: &lt;code&gt;String.matches(regexp)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image029.png"/&gt; &lt;/p&gt;
&lt;h3 id="harvesting-information"&gt;Harvesting information&lt;/h3&gt;
&lt;p&gt;goal: print &lt;em&gt;all substrings&lt;/em&gt; of input that match an RE. &lt;br/&gt;
use &lt;code&gt;Pattern&lt;/code&gt; and &lt;code&gt;Matcher&lt;/code&gt; class in &lt;code&gt;java.util.regexp&lt;/code&gt;. &lt;br/&gt;
first compile the regexp, then build the matcher&lt;br/&gt;
→ so that we can iterate through all matches of the input using &lt;code&gt;find()&lt;/code&gt; and &lt;code&gt;group()&lt;/code&gt; of the matcher &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image030.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Caveat&lt;/em&gt;: performance NOT guaranteed ! &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image031.png"/&gt;&lt;br/&gt;
→ exponential time growth! &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image032.png"/&gt; &lt;/p&gt;
&lt;h3 id="not-so-regular-expressions"&gt;Not-so-regular expressions&lt;/h3&gt;
&lt;p&gt;"not rugular" means Kleene's Th doesn't hold &lt;br/&gt;
→ efficient performance not tractable......&lt;br/&gt;
&lt;strong&gt;back-reference&lt;/strong&gt;&lt;br/&gt;
&lt;code&gt;\1&lt;/code&gt; matches &lt;em&gt;subexpressions&lt;/em&gt; that was matched earliser&lt;br/&gt;
limitations of regular languages: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image034.png"/&gt; &lt;/p&gt;
&lt;h3 id="summary"&gt;Summary&lt;/h3&gt;
&lt;p&gt;the substring and regexp are examples of compilers ! (from string to a NFA/DFA/bytecode)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image033.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week5_1/pasted_image035.png"/&gt; &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 4-2 Substring Search</title><link href="https://x-wei.github.io/algoII_week4_2.html" rel="alternate"></link><published>2015-12-07T00:00:00+01:00</published><updated>2015-12-07T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-12-07:algoII_week4_2.html</id><summary type="html">&lt;h1 id="1-introduction-to-substring-search"&gt;1. Introduction to substring search&lt;/h1&gt;
&lt;p&gt;"most ingenious algorithm we've seen so far"&lt;br/&gt;
&lt;strong&gt;pb. &lt;/strong&gt;having two strings, &lt;code&gt;pattern&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt;, len(pattern)=M &amp;lt;&amp;lt; len(text)=N, try to find pattern in text.   &lt;/p&gt;
&lt;p&gt;ex. &lt;code&gt;indexOf&lt;/code&gt; method of String in java.   &lt;/p&gt;
&lt;h1 id="2-brute-force-substring-search"&gt;2. Brute-Force Substring Search&lt;/h1&gt;
&lt;p&gt;function signature: &lt;br/&gt;
&lt;code&gt;public static int search(String pat, String txt);&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;brute-force algo: look for &lt;code&gt;pattern&lt;/code&gt; at every position of &lt;code&gt;text&lt;/code&gt;.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public static int search(String pat, String txt){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int N=txt.length(), M=pat.length();  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for(int i=0; i&amp;lt;=N-M; i++){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        int j;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        for(j=0; j&amp;lt;M &amp;amp;&amp;amp; pat.charAt(j)==txt.charAt(i+j); j++);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if(j==M) return i;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return N;// not found  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;worst case: &lt;/strong&gt;when txt/pat are repetitive → MN compares. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image.png"/&gt;&lt;br/&gt;
problem with brute-force: always &lt;em&gt;backup&lt;/em&gt; when mismatch. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image001.png"/&gt;&lt;br/&gt;
&lt;strong&gt;brute-force alternative&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;j := number of matched chars in pattern  &lt;/li&gt;
&lt;li&gt;i := index of the end of matched char in text  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ do explicite backup when mismatch by &lt;code&gt;i -= j&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public static int search(String pat, String txt){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int N=txt.length(), M=pat.length(), i=0, j=0;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    while(i&amp;lt;N &amp;amp;&amp;amp; j&amp;lt;M){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if(pat.charAt(j)==txt.charAt(i))   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            {j=i++; j++;}  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        else   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            {i=i-j+1; j=0}// &amp;lt;==backup  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return j==M ? i-M : N;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;challenge: want linear-time guarantee, and want to avoid backup.   &lt;/p&gt;
&lt;h1 id="3-knuth-morris-pratt"&gt;3. Knuth-Morris-Pratt&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;"one of the coolest/trickiest algorithm covered in this course"&lt;/em&gt; &lt;/p&gt;
&lt;h3 id="intuition"&gt;intuition&lt;/h3&gt;
&lt;p&gt;suppose pattern = "BAAAAA", &lt;br/&gt;
if we matched 5 chars in pattern and get mismatch on 6th char ⇒ we know the previous 5 chars are "BAAAA"  → no need to backup the i pointer.   &lt;/p&gt;
&lt;p&gt;KMP algorithm: clever method that &lt;em&gt;always&lt;/em&gt; avoid backup !  &lt;/p&gt;
&lt;h3 id="deterministic-finite-state-automaton-dfa"&gt;Deterministic finite state automaton (DFA)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;finite states ,including start and halt state, indexed by j in the subtring pb  &lt;/li&gt;
&lt;li&gt;for each state: exactly one transition for each char in alphabet  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. &lt;br/&gt;
states are 0~6, pat="ABABAC", transitions are indexed by chars in alphabet = {A,B,C}, finish if we reach state-6.   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;dfa[c][i]&lt;/code&gt; = the next state if we are currently in state-i and encoutered char-c.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;interpretation of DFA for KMP algo&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;in the DFA after reading &lt;code&gt;txt[i]&lt;/code&gt;, the index of state is the &lt;strong&gt;number of matched chars&lt;/strong&gt; in pattern, or length of *longest prefix of pat that is a suffix of txt[0:i]. *  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;need to precompute the &lt;code&gt;dfa[][]&lt;/code&gt; array from pattern  &lt;/li&gt;
&lt;li&gt;the pointer i &lt;em&gt;never&lt;/em&gt; decrements (thus we can do it in a &lt;em&gt;streaming&lt;/em&gt; manner)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ &lt;em&gt;if&lt;/em&gt; &lt;code&gt;dfa[][]&lt;/code&gt; &lt;em&gt;is precomputed&lt;/em&gt;, java code is very very simple:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[][]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfa&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;txt.charAt(i)&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;running time: linear.&lt;br/&gt;
→ key pb: &lt;em&gt;how to build dfa efficiently&lt;/em&gt; ?  &lt;/p&gt;
&lt;h3 id="dfa-construction"&gt;DFA construction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;match transition &lt;/strong&gt;(easy part)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;when at state j, for the char &lt;code&gt;c0==pat.charAt(j+1)&lt;/code&gt;, just go on matching: &lt;code&gt;dfa[c0][j] = j+1&lt;/code&gt;&lt;br/&gt;
ex. (&lt;em&gt;pat="ABABAC"&lt;/em&gt;)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image003.png"/&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mismatch transition&lt;/strong&gt; (hard part)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(for j==0, things are simple: &lt;code&gt;dfa[c][0]=0&lt;/code&gt; for all &lt;code&gt;c!=pat[0]&lt;/code&gt;)  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;at state &lt;/em&gt;&lt;code&gt;j&lt;/code&gt; (ie. j chars in pattern are matched)&lt;em&gt;, and for &lt;/em&gt;&lt;code&gt;c!=pat.charAt(j+1)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;⇒ we are in state j: we know &lt;em&gt;the &lt;strong&gt;&lt;em&gt;last j chars in input&lt;/em&gt;&lt;/strong&gt; are &lt;/em&gt;&lt;code&gt;pat[0...j-1]&lt;/code&gt;, &lt;em&gt;and followed by char =&lt;/em&gt; &lt;code&gt;c&lt;/code&gt;, so the last j+1 chars of input string is: &lt;code&gt;pat[0...j-1]+c&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;⇒ to compute dfa[c][j]: we can &lt;strong&gt;simulate as if we backup&lt;/strong&gt;&lt;em&gt;, ie. &lt;/em&gt;&lt;code&gt;i=i-j+1, j=0&lt;/code&gt;.   &lt;/li&gt;
&lt;li&gt;if we go back to set j=0, and set i = i-j+1, then i is pointing at &lt;code&gt;pat[1]&lt;/code&gt;, the text become &lt;code&gt;pat[1...j-1]+c&lt;/code&gt;. We then let this string go through our dfa, the state that it achieves is the value of &lt;code&gt;dfa[c][j]&lt;/code&gt;.   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;here is&lt;/em&gt; &lt;em&gt;a concrete example:&lt;/em&gt; &lt;br/&gt;
pattern = &lt;code&gt;"ABABAC"&lt;/code&gt;, state &lt;code&gt;j=5&lt;/code&gt;, char &lt;code&gt;c='B&lt;/code&gt;'  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;we know the last 6 chars of the input = &lt;code&gt;pat[0...j-1]+c="ABABA"+"B"="ABABAB"&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;if we backup, i will point to pat[1], the string is just &lt;code&gt;pat[1...j-1]+c="BABAB"&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;we use the string "BABAB" as input and go through the partially constructed dfa, and see that we will reach state 4  &lt;/li&gt;
&lt;li&gt;so we know &lt;code&gt;dfa['B'][5]=4&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;similarly we can get &lt;code&gt;dfa['A'][5]=1&lt;/code&gt;, as indicated below: &lt;br/&gt;
(&lt;em&gt;pat="ABABAC"&lt;/em&gt;)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;p&gt;one concern: seems this simulation needs &lt;code&gt;j&lt;/code&gt; steps ?&lt;br/&gt;
⇒ can be changed to be constant time if we maintain a &lt;strong&gt;state X := the state of simulating of input=pat[1...j-1]&lt;/strong&gt;&lt;br/&gt;
we maintain this state &lt;code&gt;X&lt;/code&gt;, then for each &lt;em&gt;mismatched&lt;/em&gt; char c, we just need to look at &lt;code&gt;dfa[c][X]&lt;/code&gt;. &lt;br/&gt;
(&lt;em&gt;pat="ABABAC"&lt;/em&gt;)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Algo]&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;set all matched transitions &lt;code&gt;dfa[c0][j] = j+1&lt;/code&gt; for all &lt;code&gt;c0==pat[j]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;fill first column (j==0): &lt;code&gt;dfa[c][0]=0&lt;/code&gt; for all &lt;code&gt;c!=pat[0]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;initialize &lt;code&gt;X=0&lt;/code&gt; (state for empty input string)  &lt;/li&gt;
&lt;li&gt;for j=1 to M:  &lt;ul&gt;
&lt;li&gt;for all &lt;code&gt;c!=pat[0]&lt;/code&gt;: set &lt;code&gt;dfa[c][j] = dfa[c][X]&lt;/code&gt; (DP here...)  &lt;/li&gt;
&lt;li&gt;update &lt;code&gt;X=dfa[c0][X]&lt;/code&gt; ⇒ 注意, 此时X并&lt;strong&gt;不等于&lt;/strong&gt;X+1(最开始&lt;code&gt;dfa[c0][j]=j+1&lt;/code&gt;不适用于此), 为什么? 因为&lt;code&gt;c0==pat[j]&lt;/code&gt; 而不&lt;code&gt;是pat[X]&lt;/code&gt;!! 比如说最开始, j=1的时候X是等于0的!!! (这个弯我饶了好几分钟...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;java code (can be written to be more compate):   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[][]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;constructDFA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nf"&gt;ASCII&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[][]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfa&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pat.charAt(j)&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;dfa&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pat.charAt(j)&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;column&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--&amp;gt; can be ignored as java int default val=0  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mismatched&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;transitions&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;dfa&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfa&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfa&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pat.charAt(j)&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;running time and space: &lt;strong&gt;O(M*R)&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;prop.&lt;/strong&gt; &lt;br/&gt;
KMP algorithm runs in O(M+N) time, and constructs the dfa in O(M*R) time/space.   &lt;/p&gt;
&lt;p&gt;这个KMP算法, 我曾经想过好几个小时, 然后最后写出了特别复杂的代码, 虽然可以用但是基本写了就忘掉了. 但是经过老爷子这么一讲, 感觉这次印象深刻了好多. 老爷子NB...  &lt;/p&gt;
&lt;p&gt;八卦时间: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;h1 id="4-boyer-moore_1"&gt;4. Boyer-Moore&lt;/h1&gt;
&lt;p&gt;Heuristic in practice.&lt;br/&gt;
i does not necessarily go through all txt chars ⇒ i may &lt;em&gt;skip&lt;/em&gt; some chars.   &lt;/p&gt;
&lt;h3 id="intuition_1"&gt;intuition&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;for matching: scan chars &lt;em&gt;from right to left&lt;/em&gt; (j will decrease when checking)  &lt;/li&gt;
&lt;li&gt;when encoutered a mismatch: we can skip &amp;lt;= M chars (if the char is not in pattern)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. (pat="NEEDLE")&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;p&gt;→ pb: how to skip?   &lt;/p&gt;
&lt;h3 id="mismatch-character-heuristic"&gt;mismatch character heuristic&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;note&lt;/em&gt;: the &lt;code&gt;i&lt;/code&gt; always points to the &lt;em&gt;beginning&lt;/em&gt; of the substring (&lt;code&gt;txt[i,...,i+M-1]&lt;/code&gt;) to be checked for match.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;case 1. mismatched char not in pattern&lt;/strong&gt;&lt;br/&gt;
easy case → just move i to the right of this char. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;case 2. mismatched char in pattern&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;heuristic:&lt;/strong&gt; line up i with the &lt;strong&gt;rightmost&lt;/strong&gt;&lt;em&gt; char in pattern&lt;/em&gt;.&lt;br/&gt;
&lt;code&gt;i += skip&lt;/code&gt;&lt;br/&gt;
where &lt;em&gt;skip length = j - index of rightmost char in pattern&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;p&gt;note: this does not always help, in the example below, i even &lt;em&gt;backups&lt;/em&gt;: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image011.png"/&gt;&lt;br/&gt;
to avoid backup, in this case we just &lt;em&gt;increment i by 1&lt;/em&gt; (heuristic doesn't help in this case).  &lt;/p&gt;
&lt;h3 id="implementation"&gt;implementation&lt;/h3&gt;
&lt;p&gt;use an array &lt;code&gt;right[]&lt;/code&gt; as &lt;em&gt;skip table&lt;/em&gt;, &lt;code&gt;right[c]&lt;/code&gt; is the index of rightmost occurrence of char c (-1 if c not in pat). &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pat.charAt(j)&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;using this table we can implemente the heuristic algorithm:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public static int search(String pat, String txt, int[] right){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int N=txt.length(), M=pat.length();  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int skip;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for(int i=0;i&amp;lt;N-M;i+=skip){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        skip = 0;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        for(int j=M-1;j&amp;gt;=0;j++)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            if(pat.charAt(j)!=txt.charAt(i+j)){// when mismatch happens  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                skip = Math.max(1,j - right[txt.charAt(i+j)]);// skip if we can, else just increment i by 1  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                break;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if(skip==0)// if the above for loop finishes without changing skip --&amp;gt; we are done.    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            return i;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return N;// pattern not found  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="analysis"&gt;analysis&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;property&lt;/strong&gt;. the Boyer-Moore heuristic (in practice) takes about &lt;strong&gt;N/M&lt;/strong&gt; (sublinear!) compares to search.   &lt;/p&gt;
&lt;p&gt;好神奇, 比KMP还要简单的算法, 实际效率这么高...  &lt;/p&gt;
&lt;p&gt;worst-case performance: &lt;strong&gt;N*M&lt;/strong&gt;... 这一点不如KMP. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image013.png"/&gt;&lt;br/&gt;
→ can be improved...   &lt;/p&gt;
&lt;h1 id="5-rabin-karp_1"&gt;5. Rabin-Karp&lt;/h1&gt;
&lt;p&gt;两个图灵奖的大神发明的算法..   &lt;/p&gt;
&lt;h3 id="intuition_2"&gt;intuition&lt;/h3&gt;
&lt;p&gt;basic idea: &lt;strong&gt;modular hashing&lt;/strong&gt;&lt;br/&gt;
ex. for strings of numbers   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;compute hash fcn (for number strings is easy: take the string and treat it as a number, then %Q where Q is a big prime number).   &lt;/li&gt;
&lt;li&gt;for a pointer i →corresponds to the substring &lt;code&gt;txt[i, ..., i+M-1]&lt;/code&gt;  → check hash for match  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(below: text=3141592653589793, pattern=26535)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image014.png"/&gt; &lt;/p&gt;
&lt;h3 id="computing-the-hash-function-efficiently"&gt;computing the hash function efficiently&lt;/h3&gt;
&lt;p&gt;let ti be the ith char in txt, the hashcode for substring &lt;code&gt;txt[i,...,i+M-1]&lt;/code&gt; is: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image015.png"/&gt;&lt;br/&gt;
⇒ just an M-digit base-R integer modulo Q ! &lt;code&gt;poly(M, R) % Q&lt;/code&gt;*. *  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Honor's method&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;linear time algorithm for evaluating polynomial. &lt;br/&gt;
recursive equation: &lt;code&gt;poly(i, R) = poly(i-1, R)*R+ti&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;ex. (R=10, M=5)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image016.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private long hash(String key, int M){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    long h=0;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for(int i=0;i&amp;lt;M;i++)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        h = ( h*R + key.charAt(i) ) % Q  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return h;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;if we know x_i, the x_i+1 can be infered:   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image017.png"/&gt;&lt;br/&gt;
⇒ x_i+1 can be computed in constant time: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image018.png"/&gt;&lt;br/&gt;
⇒ we precompute R^(M-1) and maintain the hash number, and check for match !   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public static int search(String txt, String pat){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int N=txt.length(), M=pat.length();  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    long pathash = hash(pat, M);      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int RM = R^(M-1);// &amp;lt;-- pseudo code, store value of R^(M-1)  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    long txthash = hash(txt, M);// txthash will be maintained  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for(int i=0;i&amp;lt;N-M;i++){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if(txthash==pathash &amp;amp;&amp;amp; checkMatch(i,txt,pat))   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            return i;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        txthash = ( (txthash - txt.charAt(i)*RM)*R + txt.charAt(i+M) ) % Q;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更新txthash的地方可能会有modulo造成的问题... 不过先这样写吧..   &lt;/p&gt;
&lt;p&gt;for collisions: &lt;em&gt;Monte Carlo&lt;/em&gt; vs. &lt;em&gt;Las Vegas&lt;/em&gt; &lt;/p&gt;
&lt;h3 id="analysis_1"&gt;analysis&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Theory&lt;/strong&gt;: if Q is sufficiently large (~M*N^2), the probability of collision is ~1/N. &lt;br/&gt;
&lt;strong&gt;Practice&lt;/strong&gt;: choose Q to be sufficiently large, and collision probability is ~1/Q.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image019.png"/&gt; &lt;/p&gt;
&lt;h1 id="summery_1"&gt;Summery&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week4_2/pasted_image020.png"/&gt; &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 4-1 Tries</title><link href="https://x-wei.github.io/algoII_week4_1.html" rel="alternate"></link><published>2015-12-05T00:00:00+01:00</published><updated>2015-12-05T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-12-05:algoII_week4_1.html</id><summary type="html">&lt;p&gt;More efficient version of symbol-table where the keys are strings.   &lt;/p&gt;
&lt;h1 id="1-r-way-tries"&gt;1. R-way Tries&lt;/h1&gt;
&lt;p&gt;Two implementations of symbol tables that we've seen: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_1/pasted_image.png"/&gt;&lt;br/&gt;
when keys are strings:&lt;br/&gt;
(&lt;code&gt;L&lt;/code&gt;=string length, &lt;code&gt;N&lt;/code&gt;=number of strings, &lt;code&gt;R&lt;/code&gt;=radix)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_1/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;p&gt;for string keys ⇒ do better by avoiding examing the entire key.  &lt;/p&gt;
&lt;p&gt;goal: faster than hashtable, more flexible than BST !  &lt;/p&gt;
&lt;h2 id="string-symbol-table-api"&gt;String Symbol Table API&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class StringST&amp;lt;V&amp;gt;{// implements ST&amp;lt;String, V&amp;gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public void put(String key, V val);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public V get(String key);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public void delete(String key);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="r-way-tries"&gt;R-way tries&lt;/h2&gt;
&lt;p&gt;A trie is a tree where:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;except the root, each node store &lt;em&gt;characters&lt;/em&gt; (instead of string keys) — in fact the chars are stored in &lt;em&gt;links&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;each node has R children  &lt;/li&gt;
&lt;li&gt;store &lt;em&gt;value&lt;/em&gt; in node if the node corresponds to the&lt;em&gt; last char&lt;/em&gt; in key.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example: (&lt;em&gt;a trie&lt;integer&gt;)&lt;/integer&gt;&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_1/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;search in a trie &lt;/strong&gt;&lt;code&gt;get()&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;hit&lt;/em&gt; if when search ends the node has a non-null value&lt;br/&gt;
&lt;em&gt;miss&lt;/em&gt; if reach a null link or have null value when search ends.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;insertion in a trie&lt;/strong&gt; &lt;code&gt;put()&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;follow the links as the chars indicate in the key&lt;br/&gt;
→ if meet null links: create new node&lt;br/&gt;
→ when reach last char in key: set the value of the node  &lt;/p&gt;
&lt;h2 id="java-implementation"&gt;Java implementation&lt;/h2&gt;
&lt;p&gt;trie node class:&lt;br/&gt;
in each node use an array of size R to store links...  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;because&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cannot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arries&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;implicitly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;defined&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外关于为什么内部类Node声明为static, 参考这里: &lt;br/&gt;
&lt;a href="http://www.geeksforgeeks.org/static-class-in-java/"&gt;http://www.geeksforgeeks.org/static-class-in-java/&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;implementation: use private recursive methods, 和BST的实现类似, 定义一个递归的private函数, 返回插入后的Node, 很有用.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TrieST&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pirvate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;ASCII&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;because&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cannot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arries&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;implicitly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;defined&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;recursive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;helper&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;method&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;returns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inserted&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nc"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;cast&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;returns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;contains&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;delete node in trie:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find the node and set the val to null  &lt;/li&gt;
&lt;li&gt;if a node has 0 links(leaf)  and val==null: delete it and recursivly go up.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week4_1/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;h2 id="analysis"&gt;analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;time:&lt;/strong&gt;&lt;br/&gt;
search hit —  L nodes examined. &lt;br/&gt;
serach miss —  sublinear in L&lt;br/&gt;
&lt;strong&gt;space:&lt;/strong&gt; &lt;br/&gt;
each node has R links (possibly null) — &lt;em&gt;too much memory for large R&lt;/em&gt; !&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_1/pasted_image004.png"/&gt;&lt;br/&gt;
&lt;strong&gt;Application&lt;/strong&gt;&lt;br/&gt;
interview question: data structure for spell checking.   &lt;/p&gt;
&lt;h1 id="2-ternary-search-tries_1"&gt;2. Ternary Search Tries&lt;/h1&gt;
&lt;p&gt;Solution to the memory issue of R-way tries —  much fewer null links. ternery=tuple of 3...&lt;br/&gt;
TST:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;store chars (and vals) &lt;em&gt;explicitly&lt;/em&gt; in nodes  &lt;/li&gt;
&lt;li&gt;each node has &lt;strong&gt;3&lt;/strong&gt; children:   &lt;ul&gt;
&lt;li&gt;&lt;em&gt;smaller, larger: &lt;/em&gt;TST that starts with char smaller/bigger than its char c.   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;equal: &lt;/em&gt;the TST with keys that &lt;strong&gt;starts with&lt;/strong&gt; this char c  &lt;/li&gt;
&lt;li&gt;(所以除了用smaller/larger连接的节点在Rway trie里属于同一层  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week4_1/pasted_image005.png"/&gt;&lt;br/&gt;
类似于3-way radix sort(同一篇paper里提出的), 有有点RBTree的意思...   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;searching&lt;/strong&gt; in TST: quite similar to BST search, will go down ("equal" or "middle") when the current node matchs current char...  &lt;/p&gt;
&lt;h2 id="implementation"&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Node class:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private class Node{  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private Value val;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private char c;// store char explicitly  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private Node left, mid, right;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TST class (again use recursive helper functions)&lt;br/&gt;
有一种写BST代码的感觉, 另外由于这次char是显式存在node里, 代码反而更好理解了...  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class TST&amp;lt;Value&amp;gt;{  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private class Node{...};  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private Node root;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public void put(String key, Value val){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        this.put(root, key, val, 0);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private Node put(Node x, String key, Value val, int d){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        char c = key.charAt(d);// char to process  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if(x==null) x = new Node(c);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if(c==x.c) {  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            if(d==key.length()-1) x.val = val;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            else x.mid = put(x.mid, key, val, d+1);// d+1 means we go down one level  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        else if (c&amp;lt;x.c) x.left = put(x.left, key, val, d);// do not increment if the current char is not matchd  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        else x.right = put(x.right, key, val, d);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return x;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public Value get(String key){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        Node nd = this.get(root, key, 0);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if(nd==null) return null;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return nd.val;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private Node get(Node x, String key, int d){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if(x==null) return null;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        char c = key.charAt(d);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if(x.c==c) {  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            if(d==key.length()-1) return x;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            else return get(x.mid, key, d+1);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        else if(c&amp;lt;x.c) return get(x.left, key, d);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        else return get(x.right, d);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="hybrid-of-tst-and-rway-trie"&gt;Hybrid of TST and Rway trie&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;at root: do &lt;em&gt;R^2 branching&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;other nodes are TSTs   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week4_1/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;h2 id="analysis_1"&gt;analysis&lt;/h2&gt;
&lt;p&gt;space cost: linear in N.&lt;br/&gt;
time: if keys arrive in rand order... (can use rotation to get worst-case guarantee..)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_1/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;h2 id="hashing-vs-tst"&gt;Hashing vs. TST&lt;/h2&gt;
&lt;p&gt;Hashing:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;need to check entire key no matter hit or miss  &lt;/li&gt;
&lt;li&gt;performance relies on hash functions  &lt;/li&gt;
&lt;li&gt;donot support ordered operations  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TST:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;examines just enough chars  &lt;/li&gt;
&lt;li&gt;support ordered operations  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="3-character-based-operations_1"&gt;3. Character-Based Operations&lt;/h1&gt;
&lt;p&gt;some very useful char-based operations:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prefix match&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wildcard match&lt;/strong&gt;: use a dot to represent any char  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;longest prefix&lt;/strong&gt;: find the key that is the longest prefix of a string  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="api"&gt;API&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class TrieST&amp;lt;Value&amp;gt;{  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    // functions decalred before..  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Iterable&amp;lt;String&amp;gt; keys;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Iterable&amp;lt;String&amp;gt; keysWithPrefix(String s);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Iterable&amp;lt;String&amp;gt; keysThatMatch(String s);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Iterable&amp;lt;String&amp;gt; longestPrefixOf(String s);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="keys-ordered-iteration"&gt;keys(): ordered iteration&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;keys()&lt;/code&gt;: just an inorder-traversal of the &lt;em&gt;Rway trie&lt;/em&gt; →dfs, + maintain the chars in the path (root to current node). &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_1/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;helper&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fcn&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pathstr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathstr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pathstr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pathstr&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="prefix-match"&gt;prefix match&lt;/h2&gt;
&lt;p&gt;very useful: ex. autocomplete, search bar, ...&lt;br/&gt;
implementation⇒ just find the end of that prefix, then call &lt;code&gt;keys()&lt;/code&gt; on the &lt;em&gt;subtrie&lt;/em&gt;.&lt;br/&gt;
之前写的俩helper function这里发挥作用了:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public Iterable&amp;lt;String&amp;gt; keysWithPrefix(String prefix){  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Node subtrieRoot = get(root, prefix, 0);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Queue&amp;lt;String&amp;gt; q = new Queue&amp;lt;String&amp;gt;();  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    collect(subtrieRoot, prefix, q);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return q;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="longest-prefix"&gt;longest prefix&lt;/h2&gt;
&lt;p&gt;⇒ just do a search and keep track of the longest key that we encounterd.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;longestPrefixOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;current&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;longest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;prefix&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="application-t9-texting"&gt;application: T9 texting&lt;/h3&gt;
&lt;p&gt;classique... G面试以及X的TP里都有涉及过...   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;first: generate all string combinations  &lt;/li&gt;
&lt;li&gt;second: call get() on the trie of dictionaries.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="other-variants_1"&gt;Other Variants&lt;/h2&gt;
&lt;h3 id="patricia-trie"&gt;Patricia trie&lt;/h3&gt;
&lt;p&gt;improvement: remove the one-eay branching (put &amp;gt;1 chars in a node).&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week4_1/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;h3 id="suffix-tree"&gt;suffix tree&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;patricia tree of the suffix  &lt;/li&gt;
&lt;li&gt;linear time construction  &lt;/li&gt;
&lt;li&gt;ongest repeated substring, longest common substring, longest palindromic substring, substring search, tandem repeats... 好有用!!...   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="summery_1"&gt;Summery&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week4_1/pasted_image011.png"/&gt; &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 3-2 Radix Sorts</title><link href="https://x-wei.github.io/algoII_week3_2.html" rel="alternate"></link><published>2015-11-23T00:00:00+01:00</published><updated>2015-11-23T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-11-23:algoII_week3_2.html</id><summary type="html">&lt;p&gt;This week: string sort.  &lt;/p&gt;
&lt;h1 id="1-strings-in-java"&gt;1. Strings in Java&lt;/h1&gt;
&lt;h3 id="char-data-type"&gt;char data type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;char in C&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;8-bit integer, 256 characters, 7-bit ASCII code  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;char in Java&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;16-bit Unicode&lt;/em&gt; &lt;/p&gt;
&lt;h3 id="string-data-type"&gt;String data type&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;String&lt;/code&gt;: &lt;em&gt;immutable&lt;/em&gt; sequence of characters&lt;br/&gt;
operations: lengthe, ith char, substring, concatenate  &lt;/p&gt;
&lt;p&gt;implementation: using a &lt;code&gt;char[]&lt;/code&gt;, maintain a &lt;code&gt;length&lt;/code&gt; and an &lt;code&gt;offset.&lt;/code&gt; ⇒ substring methode is O(1) time.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image.png"/&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;h3 id="stringbuilder-data-type"&gt;StringBuilder data type&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;StringBuilder&lt;/code&gt;: &lt;em&gt;mutable&lt;/em&gt; data type.&lt;br/&gt;
implementation: using a resizing &lt;code&gt;char[]&lt;/code&gt; array (ArrayList). &lt;br/&gt;
⇒ contat in (amortized) constant time, &lt;em&gt;substring in linear time&lt;/em&gt;!&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;ex.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reverse a string: linear using StringBuilder, quad using String.   &lt;/li&gt;
&lt;li&gt;form an array of suffixes: quad (time&amp;amp;space) using StringBuilder, linear (time&amp;amp;space) using String.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image003.png"/&gt;&lt;br/&gt;
&lt;strong&gt;Longest Common Prefix:&lt;/strong&gt;&lt;br/&gt;
runs in linear/subinear time ⇒ &lt;code&gt;compareTo()&lt;/code&gt; for strings takes (sub)linear time!  &lt;/p&gt;
&lt;h3 id="alphabet"&gt;Alphabet&lt;/h3&gt;
&lt;p&gt;alphabet different for different type of string (ex. binary numbers, DNA, ...)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image004.png"/&gt;&lt;br/&gt;
def. &lt;strong&gt;Radix&lt;/strong&gt; &lt;code&gt;R&lt;/code&gt; is number of digits  in alphabet.   &lt;/p&gt;
&lt;h1 id="2-key-indexed-counting_1"&gt;2. Key-Indexed Counting&lt;/h1&gt;
&lt;p&gt;review of &lt;em&gt;compare-based&lt;/em&gt; sorting algorithms:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image005.png"/&gt;&lt;br/&gt;
lower-bound for compare-based algorithms: ~&lt;em&gt;NlgN&lt;/em&gt; (=Lg(N!))&lt;br/&gt;
⇒ goal: do better by avoiding using compares.   &lt;/p&gt;
&lt;h3 id="key-indexed-counting"&gt;Key-indexed counting&lt;/h3&gt;
&lt;p&gt;is an algorithm to sort &lt;em&gt;by character(ex. sort array of string by their 1st character).&lt;/em&gt; &lt;br/&gt;
Assumption: keys are integers between 0 and R-1 (&amp;lt;&amp;lt;N, small integer).&lt;br/&gt;
⇒ use keys as array index, to sort an &lt;em&gt;array of N integers between 0 and R-1&lt;/em&gt;.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[algo]&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;count freq of each key index (of size &lt;em&gt;R+1&lt;/em&gt;)  &lt;/li&gt;
&lt;li&gt;using count array, compute a &lt;em&gt;cumulated freq&lt;/em&gt; (cumsum of &lt;code&gt;count[]&lt;/code&gt;)  &lt;/li&gt;
&lt;li&gt;the &lt;code&gt;cumsum[]&lt;/code&gt; array stores the &lt;strong&gt;index range&lt;/strong&gt; of each key index:   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;index range of key-i in sorted array is &lt;code&gt;[cumsum[i], cumsum[i+1]]&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;then get the sorted array by going through the array and using cumsum[] array  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image007.png"/&gt;⇒ &lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keyIndexCounting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0,R-1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;R+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;ai&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ai+1&lt;/span&gt;&lt;span class="o"&gt;]++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cumulated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ranges&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sorted&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cumsum[i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;ai&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cumsum[ai&lt;/span&gt;&lt;span class="o"&gt;]++&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ai&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="analysis"&gt;analysis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;running time: &lt;strong&gt;linear&lt;/strong&gt; in time and in space.   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stable&lt;/strong&gt; sorting: that's why we need the cumsum and aux array...  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="3-lsd-radix-sort_1"&gt;3. LSD Radix Sort&lt;/h1&gt;
&lt;p&gt;LSD = least significant digit (for string sorting)&lt;br/&gt;
(assume strings all of same length)&lt;br/&gt;
idea:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;consider chars from right to left   &lt;/li&gt;
&lt;li&gt;sort using dth character as key (using key-indexed counting)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;important: the key-indexed counting should be stable.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;h3 id="analysis_1"&gt;analysis&lt;/h3&gt;
&lt;p&gt;time: W * N (W=length of string)  &lt;/p&gt;
&lt;p&gt;correctness:&lt;br/&gt;
&lt;strong&gt;prop&lt;/strong&gt;. LSD sorting works&lt;br/&gt;
pf. by induction on i&lt;br/&gt;
prove that: after pass i, strings are sorted by last i characters.   &lt;/p&gt;
&lt;h3 id="implementation"&gt;implementation&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LSDsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fixed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;ASCII&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chars&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="c1"&gt;--){//W passes  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;indexed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;counting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;R+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s.charAt[d&lt;/span&gt;&lt;span class="o"&gt;]+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s.charAt[d&lt;/span&gt;&lt;span class="o"&gt;]++&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;if keys are binary numbers → break into bit characters then apply LSD.   &lt;/li&gt;
&lt;li&gt;if not fixed length → some fix..  &lt;/li&gt;
&lt;li&gt;sort 1 million 32-bit integers? (Google/Obama interview) ⇒ LSD string sort~   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="4-msd-radix-sort_1"&gt;4. MSD Radix Sort&lt;/h1&gt;
&lt;p&gt;most-significant-digit first (from left to right)&lt;br/&gt;
Idea.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;partition array into R pieces according to first character (the count[] array is the partition)  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;recursively&lt;/em&gt; sort each subarrays  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;variable length: end-of-string are treated as before any char&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;h3 id="implementation_1"&gt;implementation&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;character&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;R+2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;taking&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="err"&gt;!!&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; a[i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;count[a[i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i-lo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;attention&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filled&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;instead&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;recursively&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;subarray&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;subarrays&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ranges&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stored&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;r+1&lt;/span&gt;&lt;span class="o"&gt;]-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="analysis_2"&gt;analysis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;can recycle &lt;code&gt;aux[]&lt;/code&gt;, but &lt;em&gt;not&lt;/em&gt; &lt;code&gt;count[]&lt;/code&gt;.   &lt;/li&gt;
&lt;li&gt;too slow for small subarrays (if len(subarray)&amp;lt;&amp;lt;R)  &lt;/li&gt;
&lt;li&gt;huge nb of subarrays because of recursion   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;improvement ⇒ cutoff to insertion sort...   &lt;/p&gt;
&lt;p&gt;characteristics of MSD sort: &lt;br/&gt;
examines &lt;strong&gt;just enough chars&lt;/strong&gt; to sort. &lt;br/&gt;
→ can be sublinear in N. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;h3 id="msd-vs-quicksort"&gt;MSD vs. quicksort&lt;/h3&gt;
&lt;p&gt;disadvantages for MSD:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;random access of memory (cache inefficient)  &lt;/li&gt;
&lt;li&gt;too many instructions in inner loop   &lt;/li&gt;
&lt;li&gt;extra space for count[]  &lt;/li&gt;
&lt;li&gt;extra space for aux[]  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;disadvantages for qsort:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NlgN nb of string compares  &lt;/li&gt;
&lt;li&gt;has to rescan many chars for keys with &lt;em&gt;long prefix matches&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="5-3-way-radix-quicksort_1"&gt;5. 3-way Radix Quicksort&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;⇒ combine benefits of qsort and MSD.&lt;/em&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image015.png"/&gt;&lt;br/&gt;
idea: do &lt;strong&gt;3-way partition by the dth character&lt;/strong&gt;. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image013.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;less overhead than &lt;em&gt;R-way&lt;/em&gt; partitioning for MSD  &lt;/li&gt;
&lt;li&gt;do not re-examine chars equal to the partitioning char  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image014.png"/&gt; &lt;/p&gt;
&lt;h3 id="implementation_2"&gt;Implementation&lt;/h3&gt;
&lt;p&gt;modification of the 3-way qsort.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;pointers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nl"&gt;invariant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lo,lt)&amp;lt;pivot, a(gt,hi&lt;/span&gt;&lt;span class="o"&gt;]&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lt,i&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;--);  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;way&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;partition&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;means&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="analysis_3"&gt;analysis&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;wrt. qsort:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from NlgN &lt;strong&gt;string&lt;/strong&gt; compares to NlgN &lt;strong&gt;char&lt;/strong&gt; compares.  &lt;/li&gt;
&lt;li&gt;avoids re-comparing long common prefixes.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;wrt. MSD:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;short inner loop  &lt;/li&gt;
&lt;li&gt;cache friendly  &lt;/li&gt;
&lt;li&gt;in-place  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image016.png"/&gt; &lt;/p&gt;
&lt;h1 id="6-suffix-arrays_1"&gt;6. Suffix Arrays&lt;/h1&gt;
&lt;p&gt;(&lt;em&gt;some applications of suffix array)&lt;/em&gt; &lt;/p&gt;
&lt;h3 id="keyword-in-context-search"&gt;keyword-in-context search&lt;/h3&gt;
&lt;p&gt;given N chars (N huge), &lt;em&gt;preprocess&lt;/em&gt; it to enable fast substring search. &lt;br/&gt;
⇒ suffix sort  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;generate suffix array (linear time &amp;amp; space )  &lt;/li&gt;
&lt;li&gt;sort on the suffix ⇒ brings repeated suffixes together  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image017.png"/&gt; &lt;/p&gt;
&lt;h3 id="longest-repeated-substring"&gt;longest repeated substring&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;brute force algorithm  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;try all i, j as starts of indices, then compute longest common prefix (LCP)&lt;br/&gt;
→ O(D*N2) where D is length of longest repeated substring.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⇒ use suffix array   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sorting suffix array will bring repeated substrings together&lt;br/&gt;
java code:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lcp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;defined&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lrs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;construct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Arrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;way&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;radix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;longest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repeated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;substring&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bigest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lcp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lrs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lcp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lcp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lcp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lrs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lcp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lrs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;lrs worst-case input&lt;/strong&gt;: &lt;em&gt;lrs very long&lt;/em&gt; (say N/2). &lt;br/&gt;
⇒ &lt;em&gt;quadratic&lt;/em&gt; for lrs and for sorting. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_2/pasted_image018.png"/&gt; &lt;/p&gt;
&lt;p&gt;→ &lt;em&gt;improvement of lrs for worst-case performance:&lt;/em&gt;&lt;br/&gt;
&lt;strong&gt;Manber-Myers algo&lt;/strong&gt;&lt;br/&gt;
sketch:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;phase 0: sort suffix[] on 1st char   &lt;/li&gt;
&lt;li&gt;phase i: given suffix[] is sorted based on first 2^(i-1) chars → create suffix[] sorted on first 2^i chars.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;each phase: double the nb of chars sorted on. &lt;br/&gt;
maintain an inverse[] array, to make comparisons constant time. &lt;br/&gt;
performance: NlgN  &lt;/p&gt;
&lt;h2 id="string-sorting-summery_1"&gt;String sorting summery&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;can have linear sort: use chars as array index  &lt;/li&gt;
&lt;li&gt;sublinear sort: not all date need to be examined  &lt;/li&gt;
&lt;li&gt;3-way radix qsort is &lt;em&gt;asymptotically optimal&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 3-1 Maximum Flow</title><link href="https://x-wei.github.io/algoII_week3_1.html" rel="alternate"></link><published>2015-11-17T00:00:00+01:00</published><updated>2015-11-17T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-11-17:algoII_week3_1.html</id><summary type="html">&lt;h1 id="1-introduction-to-maxflow"&gt;1. Introduction to Maxflow&lt;/h1&gt;
&lt;h3 id="min-cut-pb"&gt;Min-cut pb&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;input: edge-weighted digraph G, each edge &lt;code&gt;e&lt;/code&gt; has weight(&lt;em&gt;"capacity"&lt;/em&gt;) &lt;code&gt;c[e]&lt;/code&gt;&amp;gt;=0, a &lt;em&gt;source vertex&lt;/em&gt; &lt;code&gt;s&lt;/code&gt;, a &lt;em&gt;target vertex&lt;/em&gt; &lt;code&gt;t&lt;/code&gt;.    &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;def&lt;/strong&gt;. an &lt;strong&gt;st-cut &lt;/strong&gt;&lt;code&gt;(A,B)&lt;/code&gt; is a partition of vertices into 2 disjoint sets A and B, with &lt;code&gt;s&lt;/code&gt; in set &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; in set &lt;code&gt;B&lt;/code&gt;.    &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;def&lt;/strong&gt;. the &lt;strong&gt;capacity&lt;/strong&gt; of a cut &lt;code&gt;(A,B)&lt;/code&gt; is sum of capacities of edges going &lt;em&gt;from A to B&lt;/em&gt; &lt;em&gt;(not considering B to A)&lt;/em&gt;.    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image.png"/&gt; &lt;br/&gt;
⇒ min-cut pb: find the cut &lt;strong&gt;(A,B)&lt;/strong&gt; with min-capacity.    &lt;/p&gt;
&lt;h3 id="max-flow-pb"&gt;Max-flow pb&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;same input: graph G, source s, target t   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;def.&lt;/strong&gt; an &lt;strong&gt;st-flow&lt;/strong&gt; is an assignment of values to edges &lt;code&gt;f: e→f[e]&lt;/code&gt; such that:    &lt;ul&gt;
&lt;li&gt;capacity constraint: &lt;code&gt;0&amp;lt;=f[e]&amp;lt;=c[e]&lt;/code&gt; for any e;   &lt;/li&gt;
&lt;li&gt;local equilibrium: for any vertex v (other than s or t), &lt;em&gt;inflow=outflow&lt;/em&gt;;   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;def.&lt;/strong&gt; the &lt;strong&gt;value&lt;/strong&gt; of a flow &lt;code&gt;f&lt;/code&gt; is the inflow at &lt;code&gt;t&lt;/code&gt;. (assume no ingoing edge to s or outgoing edge to t)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image001.png"/&gt; &lt;br/&gt;
⇒ max-flow pb: find &lt;code&gt;f&lt;/code&gt; with max value.    &lt;/p&gt;
&lt;p&gt;remark: max-flow and min-cut are dual problems.    &lt;/p&gt;
&lt;h1 id="2-ford-fulkerson-algorithm_1"&gt;2. Ford-Fulkerson Algorithm&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;def.&lt;/strong&gt; given a flow &lt;code&gt;f&lt;/code&gt; for a graph, an &lt;strong&gt;"augment path"&lt;/strong&gt; is an &lt;strong&gt;undirected&lt;/strong&gt; path form &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;, if there exist &lt;code&gt;df&amp;gt;0&lt;/code&gt; (&lt;em&gt;"bottleneck capacity"&lt;/em&gt;) such that:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for forward edges e: can augment flow by &lt;code&gt;df&lt;/code&gt; (not full: &lt;code&gt;f[e]+df&amp;lt;=c[e]&lt;/code&gt;)   &lt;/li&gt;
&lt;li&gt;for backward edges: can decrease flow by &lt;code&gt;df&lt;/code&gt; (not empty: &lt;code&gt;f[e]-df&amp;gt;=0&lt;/code&gt;)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;def. &lt;strong&gt;residual capacity&lt;/strong&gt; &lt;ul&gt;
&lt;li&gt;for forward edge e, &lt;em&gt;residual-cap = c[e]-f[e]&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;for backward edge e, &lt;em&gt;residual-cap = f[e]&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ an aug-path is a path where &lt;em&gt;each edge has residual capacity &amp;gt;0&lt;/em&gt;.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;blocking edges&lt;/strong&gt;: &lt;em&gt;full forward edge&lt;/em&gt; or &lt;em&gt;empty backward edge.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;→ idea: increase flow along augment paths. &lt;br/&gt;
&lt;strong&gt;[algo]&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;start: 0 flow: &lt;code&gt;f[e]=0&lt;/code&gt; for all e.    &lt;/li&gt;
&lt;li&gt;find an augment path (and the corresponding &lt;code&gt;df&lt;/code&gt;) in graph, and change the flows along the path by &lt;code&gt;+/-df&lt;/code&gt;.   &lt;/li&gt;
&lt;li&gt;loop until no augment path exists. (ie. all path s→t are blocked either by a &lt;em&gt;full forward edge&lt;/em&gt; or an &lt;em&gt;empty backward edge, &lt;/em&gt;ie. by an edge with 0 residual capacity)   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;p&gt;FF is a gernel algorithm:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;h1 id="3-maxflow-mincut-theorem"&gt;3. Maxflow-Mincut Theorem&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;def&lt;/strong&gt;. for a cut (A,B), the &lt;strong&gt;net flow&lt;/strong&gt; across the cut (&lt;em&gt;netflow(A,B)&lt;/em&gt;) is the sum of flows from A to B minus flows from B to A.    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[flow-value Lemma]&lt;/strong&gt; &lt;br/&gt;
For any flow &lt;code&gt;f&lt;/code&gt; and any cut &lt;code&gt;(A,B)&lt;/code&gt;⇒  &lt;em&gt;netflow(A,B) = value(f).&lt;/em&gt; &lt;br/&gt;
&lt;em&gt;pf.&lt;/em&gt; &lt;br/&gt;
induction on the size of set B. &lt;br/&gt;
&lt;em&gt; base case, when B={t}, by def we have &lt;/em&gt;netflow(A,B) = value(f)&lt;em&gt; &lt;br/&gt;
&lt;/em&gt; when moving any vertex v from A to B: &lt;br/&gt;
    * netflow(A, B) augment by &lt;em&gt;flow(A→v)+flow(B→v)=inflow(v)&lt;/em&gt;,  &lt;br/&gt;
    * netflow(A, B) decrease by &lt;em&gt;flow(v→A)+flow(v→B)=outflow(v)&lt;/em&gt;,  &lt;br/&gt;
    * by equilibrium of flow, &lt;em&gt;netflow(A',B')=netflow(A,B)=value(f)&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ex. (A: gray vertices, B: white vertices) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;p&gt;[cor] &lt;em&gt;outflow(s)=inflow(t)=value(f)&lt;/em&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[weak duality]&lt;/strong&gt; &lt;br/&gt;
For &lt;em&gt;any&lt;/em&gt; flow &lt;code&gt;f&lt;/code&gt; and &lt;em&gt;any&lt;/em&gt; cut &lt;code&gt;(A,B)&lt;/code&gt;, ⇒ &lt;em&gt;value(f) &amp;lt;= capacity(A,B).&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Augmenting path Th]&lt;/strong&gt; &lt;br/&gt;
A flow &lt;code&gt;f&lt;/code&gt; is maxflow &lt;em&gt;iff&lt;/em&gt; there is no augment path.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[maxflow-mincut Th]&lt;/strong&gt; &lt;br/&gt;
&lt;strong&gt;value(maxflow) = capacity(mincut).&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;pf.&lt;/em&gt; &lt;br/&gt;
for any flow &lt;code&gt;f&lt;/code&gt;, prove the equivalence of the 3 following statements: &lt;br/&gt;
i. there exists a cut st: &lt;em&gt;capacity(cut) = value(f).&lt;/em&gt; &lt;br/&gt;
ii. &lt;code&gt;f&lt;/code&gt; is a maxflow. &lt;br/&gt;
iii. there is no augmenting path wrt &lt;code&gt;f&lt;/code&gt;.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[i⇒ii]   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;suppose cut(A,B) st: &lt;em&gt;capacity(A,B)=value(f)&lt;/em&gt; &lt;br/&gt;
⇒ by weak duality, for any other flow f', &lt;em&gt;vlaue(f')&amp;lt;=capacity(A,B)=value(f)&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ii⇒iii] (eqv to prove ~iii⇒~ii)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;suppose there is an aug-path from s to t, of bottleneck capacity=df, &lt;br/&gt;
⇒ by improving f with df, we get a f' &amp;gt; f   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[iii⇒i]   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;suppose there is no aug-path, ie, &lt;em&gt;all path from s to t are blocked by some full-forward edge or empty backward edge.&lt;/em&gt; &lt;br/&gt;
⇒ let A:=vertices connected with s by a path with no blocking edges, and B := the rest &lt;br/&gt;
(&lt;em&gt;so&lt;/em&gt; &lt;em&gt;once we get a maxflow, we can &lt;strong&gt;&lt;em&gt;compute the mincut&lt;/em&gt;&lt;/strong&gt; in this way&lt;/em&gt;) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image006.png"/&gt; &lt;br/&gt;
→ for all edges across A and B, all forward edges are full, all backward edges are empty &lt;br/&gt;
⇒ capacity(A,B) = netflow(A,B) = value(f) by flow-value lemma &lt;br/&gt;
CQFD... 过瘾...   &lt;/p&gt;
&lt;h1 id="4-running-time-analysis"&gt;4. Running Time Analysis&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getting a mincut form maxflow? → easy (as discussed in the pf above)   &lt;/li&gt;
&lt;li&gt;computing an aug-path? → &lt;strong&gt;BFS&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;does FF algo always terminate? how many augmentations? → ...   &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="integer-capacity-graphs"&gt;integer capacity graphs&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;special case of FF algo&lt;/em&gt;: edge capacities are &lt;em&gt;integers&lt;/em&gt; between 1 and U.    &lt;/p&gt;
&lt;p&gt;invariant: flow is always integer all along FF algo.   &lt;/p&gt;
&lt;p&gt;[prop] nb of augmentations &amp;lt;= value of maxflow. &lt;br/&gt;
pf. each augmentation will add flow by &amp;gt;=1.    &lt;/p&gt;
&lt;p&gt;[integrality Th] There exist an integer-valued maxflow.    &lt;/p&gt;
&lt;h3 id="bad-case-for-ff"&gt;Bad case for FF&lt;/h3&gt;
&lt;p&gt;nb of augmentation == value of maxflow &lt;br/&gt;
(each time, the path through the middle edge is chosen as aug-path) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image008.png"/&gt; &lt;br/&gt;
&lt;strong&gt;can be easily avoided&lt;/strong&gt;⇒  by using shortest(nb of edges)/fastest(biggest df) path  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;p&gt;Performance of FF depends on the algo for choosing aug-path: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;h1 id="5-java-implementation_1"&gt;5. Java Implementation&lt;/h1&gt;
&lt;h3 id="representation-of-flow-graph"&gt;representation of flow graph&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;flow edge:   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;each e= v→w, have flow f[e] and capacity c[e].   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flow graph:   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;put e in both v and w's adj-list.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flow augmentation (by delta)   &lt;ul&gt;
&lt;li&gt;for forward edge e, f[e] += delta   &lt;/li&gt;
&lt;li&gt;for backward edge e, f[e] -= delta   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="residual-graph-gr"&gt;Residual graph Gr&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;def&lt;/strong&gt;. For a flow &lt;code&gt;f&lt;/code&gt; and a graph &lt;code&gt;G&lt;/code&gt;,  the &lt;strong&gt;residual graph&lt;/strong&gt; &lt;code&gt;Gr&lt;/code&gt; is obtained by:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;for each edge &lt;code&gt;e=v→w&lt;/code&gt;, (with &lt;code&gt;c[e]&lt;/code&gt; and &lt;code&gt;f[e]&lt;/code&gt;) in &lt;code&gt;G&lt;/code&gt;, put in &lt;code&gt;Gr&lt;/code&gt;: &lt;br/&gt;
&lt;em&gt; &lt;code&gt;e1=v→w&lt;/code&gt;, with weight=&lt;code&gt;c[e]-f[e]&lt;/code&gt; &lt;br/&gt;
&lt;/em&gt; &lt;code&gt;e2=w→v&lt;/code&gt;, with weight=&lt;code&gt;f[e]&lt;/code&gt; (即两个方向上的weight都为residual capacity)   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(rmq: &lt;code&gt;Gr&lt;/code&gt; is just a weighted digraph, not a flow graph)   &lt;/p&gt;
&lt;p&gt;[prop] &lt;strong&gt;Augment path in &lt;/strong&gt;&lt;code&gt;G&lt;/code&gt;&lt;strong&gt; is equivalent to a path in &lt;/strong&gt;&lt;code&gt;Gr&lt;/code&gt; (&lt;code&gt;df&lt;/code&gt; of aug-path in &lt;code&gt;G&lt;/code&gt; = min edge weight in &lt;code&gt;Gr&lt;/code&gt;)&lt;strong&gt;.&lt;/strong&gt; &lt;br/&gt;
(但是实现的时候其实不用显式构造Gr, 只需BFS的时候修改一下即可) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;h3 id="apis"&gt;APIs&lt;/h3&gt;
&lt;p&gt;这里的API设计的非常合理... 导致每一部分的代码量都不大... NB   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;flow-edge:  &lt;br/&gt;
rmq. both calculate residual-cap and augmentation need to specify a &lt;em&gt;direction&lt;/em&gt;, so we need a index v as parameter for these 2 functions.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class FlowEdge{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private final int v, w;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private final double capacity;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private double flow=0.0;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    FlowEdge(int v, int w, double cap);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int from();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int to();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int other(int v);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    double capacity();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    double flow();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    double residualCapTo(int v);// residual capacity   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    void addFlowTo(int v, double delta);// augment residual flow   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;flow graph:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class FlowNetwork{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private Bag&amp;lt;FlowEdge&amp;gt;[] adj;//use adj-list representation for flow graph   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    FlowNetwork(int V);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    void addEdge(FlowEdge e);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Iterable&amp;lt;FlowEdge&amp;gt; adj(int v);// both incoming and outgoing edges   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    ...   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FF algo:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use a function &lt;code&gt;hasAugPath()&lt;/code&gt; to test termination   &lt;/li&gt;
&lt;li&gt;use a function &lt;code&gt;bottleNeck()&lt;/code&gt; to get delta   &lt;/li&gt;
&lt;li&gt;if a augpath is found, use two arrays &lt;code&gt;reached[]&lt;/code&gt; and &lt;code&gt;edgeTo[]&lt;/code&gt; to get the augpath (find the path &lt;em&gt;backwards&lt;/em&gt;).    &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;code:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FordFulkerson&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reached&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;reached&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;indicates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="c1"&gt;--&amp;gt;v exists in Gr, used in DFS   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FlowEdge&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;edgeTo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;edgeTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="c1"&gt;--&amp;gt;v   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;flow&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FordFulkerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FlowNetwork&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasAugPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bottleNeck&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;edgeTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;edgeTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addFlowTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;flow&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;augments&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bottleNeck&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;bottleneck&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;residual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;flow&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aut&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;path&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bottleneck&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9999999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reached&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aug&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exsit&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;edgeTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;bottleneck&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bottleneck&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;edgeTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bottleneck&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hasAugPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FlowNetwork&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BFS&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LinkedList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reached&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;G.V()&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edgeTo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FlowEdge&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;G.V()&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FlowEdge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;reached&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;residualCapTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;modified&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;BFS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;valid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;those&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;residualCap&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;edgeTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;reached&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reached&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BFS&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BFS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FF&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="6-maxflow-applications_1"&gt;6. Maxflow Applications&lt;/h1&gt;
&lt;p&gt;关键是建模很巧妙... &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;h3 id="ex1-bipartite-matching-pb"&gt;ex1. bipartite matching pb&lt;/h3&gt;
&lt;p&gt;二分图的最大匹配问题. (有点像marriage stable问题...但是不一样 因为没有preference order) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image013.png"/&gt; &lt;br/&gt;
⇒ is there a way to match all students to a job? &lt;br/&gt;
ie. &lt;em&gt;given a bipartite graph, find a perfect matching.&lt;/em&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image014.png"/&gt; &lt;br/&gt;
&lt;strong&gt;modeling&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;add source &lt;code&gt;s&lt;/code&gt; and target &lt;code&gt;t&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;all edges from &lt;code&gt;s&lt;/code&gt; to students: capacity=1   &lt;/li&gt;
&lt;li&gt;all edges from companies to &lt;code&gt;t&lt;/code&gt;: capacity=1   &lt;/li&gt;
&lt;li&gt;all edges from student to company: capacity=INF   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;⇒ find maxflow in the graph &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image015.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;when no perfect matching: mincut can explain why&lt;/strong&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image016.png"/&gt; &lt;br/&gt;
in the above case, student 2,4,5 can only be matched to 7,10 &lt;br/&gt;
⇒ mincut can help us find such cases!   &lt;/p&gt;
&lt;p&gt;&lt;em&gt;recall: how to get mincut from maxflow&lt;/em&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mincut = (A,B), where: &lt;br/&gt;
A:=vertices connected with s by a path with non blocking edges,  &lt;br/&gt;
B := the rest &lt;br/&gt;
(&lt;em&gt;blocking edges: full forward edge or empty backward edge on path&lt;/em&gt;)   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ex. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image017.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;let S=students on s side of mincut (in above case, &lt;em&gt;S={2,4,5}&lt;/em&gt;)   &lt;/li&gt;
&lt;li&gt;let T=companies on s side of mincut (in above case, T&lt;em&gt;={7,10}&lt;/em&gt;)   &lt;/li&gt;
&lt;li&gt;|S|&amp;gt;|T|, that's why no perfect matching!   &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ex2-baseball-elimination"&gt;ex2. baseball elimination&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image018.png"/&gt; &lt;br/&gt;
(前三列是目前成绩, 后面四列是接下来赛程矩阵) &lt;br/&gt;
Montreal is mathematically eliminated → easy to see &lt;br/&gt;
→ Philly is mathematically eliminated also !   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;another case:   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image019.png"/&gt; &lt;br/&gt;
Detroit is mathematically eliminated ! &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image020.png"/&gt; &lt;br/&gt;
whether team-4 still has a chance to win? &lt;br/&gt;
&lt;strong&gt;modelling&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;remaining games flow from s to t.    &lt;/li&gt;
&lt;li&gt;use team-pairs ans teams as vertices   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;carefully chosen capacities&lt;/em&gt;(see below)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week3_1/pasted_image021.png"/&gt; &lt;br/&gt;
⇒ team 4 could win iff all flow from s are full (ie. all match points can be repartitioned over other teams &lt;em&gt;without depassing team 4's maximum wins&lt;/em&gt;). &lt;br/&gt;
总之很巧妙....   &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 2-2 Shortest Paths</title><link href="https://x-wei.github.io/algoII_week2_2.html" rel="alternate"></link><published>2015-11-15T00:00:00+01:00</published><updated>2015-11-15T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-11-15:algoII_week2_2.html</id><summary type="html">&lt;h1 id="1-shortest-paths-apis"&gt;1. Shortest Paths APIs&lt;/h1&gt;
&lt;p&gt;context: &lt;em&gt;directe, weighted graphs&lt;/em&gt;.     &lt;/p&gt;
&lt;h3 id="shortest-path-variants"&gt;shortest path variants&lt;/h3&gt;
&lt;p&gt;in terms of vertices:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;source-sink: form one vertex to another   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;single source&lt;/strong&gt;: from one vertex to all others (considered in this lecture)   &lt;/li&gt;
&lt;li&gt;all pairs   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;constraints on edge weights:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nonnegative weights    &lt;/li&gt;
&lt;li&gt;arbitary weights   &lt;/li&gt;
&lt;li&gt;eculidean    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cycles:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no directed cycles   &lt;/li&gt;
&lt;li&gt;no negative cycles   &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="apis"&gt;APIs&lt;/h3&gt;
&lt;p&gt;for weighted directed edge:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class DirectedEdge{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    DirectedEdge(int v, int w, double weight);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int from();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int to();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    double weight();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;for edge-weighted digraph:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class EdgeWeightedDigraph{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private final Bag&amp;lt;DirectedEdge&amp;gt;[] adj;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    EdgeWeightedDigraph(int V);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    void addEdge(DirectedEdge e);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Iterable&amp;lt;DirectedEdge&amp;gt; adj(int v);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int V();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;for single source shortest-path:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class SP{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    SP(EdgeWeightedDigraph G, int s);//s is the source node   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    double distTo(int v);//dist from s to v   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Iterable&amp;lt;DirectedEdge&amp;gt; pathTo(int v);// shortest path from s to v   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="2-shortest-path-properties_1"&gt;2. Shortest path properties&lt;/h1&gt;
&lt;p&gt;goal: single-source shortest path &lt;br/&gt;
&lt;strong&gt;prop&lt;/strong&gt;. a &lt;strong&gt;shortest-path-tree&lt;/strong&gt; (SPT) exists.  &lt;br/&gt;
这个结论以前没见过... 不太evident吧... 没有太想明白 &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image.png"/&gt; &lt;br/&gt;
⇒ consequence: can represent this SPT by 2 vertex-indexted arrays:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;double distTo[v]&lt;/code&gt; = shortest path length s → v   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;DirectedEdge edgeTo[v]&lt;/code&gt; = last edge to v in shortest path, &lt;code&gt;edgeTo[s] = null&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;distTo&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DirectedEdge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;edgeTo&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DirectedEdge&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;distTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DirectedEdge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pathTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DirectedEdge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DirectedEdge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DirectedEdge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edgeTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;edgeTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e.from&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="edge-relaxation"&gt;Edge relaxation&lt;/h3&gt;
&lt;p&gt;dynamic prog:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;distTo[v] = length of &lt;strong&gt;known&lt;/strong&gt; shortest path from s to v   &lt;/li&gt;
&lt;li&gt;distTo[w] = length of &lt;strong&gt;known&lt;/strong&gt; shortest path from s to w   &lt;/li&gt;
&lt;li&gt;edgeTo[w] = last edge in the &lt;strong&gt;known&lt;/strong&gt; shortest path form s to w   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(consider edges one by one) &lt;br/&gt;
&lt;strong&gt;def&lt;/strong&gt;. edge e = v--&amp;gt;w &lt;strong&gt;relaxes&lt;/strong&gt; if e.weight+distTo[v] &amp;lt; distTo[w]. → update distTo[w] and edgeTo[w]. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;relax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DirectedEdge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;distTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;distTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]+&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;distTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;distTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]+&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;edgeTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="optimality-conditions"&gt;optimality conditions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;. optimality conditions &lt;br/&gt;
distTo[] is the solution &lt;em&gt;iff&lt;/em&gt;:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;distTo[s] = 0   &lt;/li&gt;
&lt;li&gt;distTo[v] is the weight of some path from  s to v   &lt;/li&gt;
&lt;li&gt;for any edge e = v → w, distTo[w] &amp;lt;= distTo[v]+e.weight()   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="generic-algo"&gt;Generic algo&lt;/h3&gt;
&lt;p&gt;just relax all edges... &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image004.png"/&gt; &lt;br/&gt;
&lt;strong&gt;prop&lt;/strong&gt;. the above generic algo gives the SPT from s.    &lt;/p&gt;
&lt;p&gt;implementations of the algo:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dijkstra (nonnegative edge)   &lt;/li&gt;
&lt;li&gt;Topological sort (!) (no directed cycles)   &lt;/li&gt;
&lt;li&gt;Bellman-Ford (no negative directed cycles)   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="3-dijkstras-algorithm_1"&gt;3. Dijkstra's Algorithm&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;(non-negative edges)&lt;/em&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;consider vertices in increasing distance from s.*    &lt;/li&gt;
&lt;li&gt;add vertex to the SPT, relax all edges from that vertex.    &lt;/li&gt;
&lt;li&gt;each time: take the closest vertex to s that is not in the SPT (ie. whose dist is not determined yet), add the vertex, and relax all its outgoing edges.    &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;. Dijkstra works. &lt;br/&gt;
pf.  &lt;br/&gt;
&lt;em&gt; each edge e = v → w is considered exactly once (when vertex v is added to SPT). distTo[w] &amp;lt;= distTo[v]+e.weight() after relaxing e &lt;br/&gt;
&lt;/em&gt; ineq holds until algo terminates &lt;br/&gt;
    * distTo[w] decrease monotonely, &lt;br/&gt;
    * distTo[v] will not change because each time we choose distTo[v] smallest, and all edges non-negative.  &lt;br/&gt;
* CQFD by optimality condition.   &lt;/p&gt;
&lt;h3 id="implementation"&gt;implementation&lt;/h3&gt;
&lt;p&gt;Use an &lt;code&gt;IndexMinPQ&lt;/code&gt; to store vertices.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DijkstraSP&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DirectedEdge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;edgeTo&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IndexMinPQ&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;DijkstraSP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EdgeWeightedDigraph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;G.V()&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edgeTo&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DirectedEdge&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;G.V()&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IndexMinPQ&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delMin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DirectedEdge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;relax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;decrease&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vertices&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;relax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DirectedEdge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]+&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]+&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;edgeTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decreaseKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;relax&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Dijkstra is in fact a Prim algorithm ! &lt;/strong&gt;&lt;em&gt;Both are algos that compute a spanning tree.&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in Prim: each time takes the vertex &lt;em&gt;closest to the tree &lt;/em&gt;(and is for undirected graph).   &lt;/li&gt;
&lt;li&gt;in Dijkstra: each time takes the vertex &lt;em&gt;closest to source s &lt;/em&gt;(and is for directed graph).   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image005.png"/&gt; &lt;br/&gt;
DFS BFS are also computing spanning tree!  &lt;br/&gt;
...NB!!   &lt;/p&gt;
&lt;h3 id="complexity"&gt;complexity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;V insertions to PQ (each vertex is added to the SPT)   &lt;/li&gt;
&lt;li&gt;V delMin from PQ    &lt;/li&gt;
&lt;li&gt;E decrease key   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ depends on the PQ implementation.  &lt;br/&gt;
in our implementation, &lt;strong&gt;O(ElogV)&lt;/strong&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;h1 id="4-edge-weighted-dags_1"&gt;4. Edge-Weighted DAGs&lt;/h1&gt;
&lt;p&gt;in a DAG, it's easier to find the shortest path ? &lt;br/&gt;
⇒ yes!  &lt;br/&gt;
simple algo:    &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;consider vertices in topological order   &lt;/li&gt;
&lt;li&gt;relax outgoing edges form this vertex.    &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="correctness"&gt;correctness&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;.   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;topo-sort algo computes SPT in any DAG (&lt;em&gt;even with negative weights&lt;/em&gt;) in time &lt;strong&gt;O(E+V) &lt;/strong&gt;&lt;em&gt;(linear time!)&lt;/em&gt;.    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;pf.&lt;/em&gt; &lt;br/&gt;
&lt;em&gt; each edge is relaxed exactely once. distTo[w] &amp;lt;= distTo[v]+e.weight() after relaxing e &lt;br/&gt;
&lt;/em&gt; ineq holds until the algo terminates because:  &lt;br/&gt;
    * distTo[w] decrease monotonely, &lt;br/&gt;
    * distTo[v] will not change because of topo-order, no edge pointing to v after v is relaxed.  &lt;br/&gt;
* CQFD   &lt;/p&gt;
&lt;h3 id="implementation_1"&gt;implementation&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class AsyclicSP{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    AsyclicSP(EdgeWeightedDigraph G, int s){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        // init dist[] and edgeTo[]...   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        Topological topo = new Topological(G);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        for(int v: topo.order())   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            for(DirectedEdge e:G.adj(v))   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                relax(e);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="application"&gt;application&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;seam-carving&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Resizing images &lt;em&gt;non-uniformly&lt;/em&gt; without distortion.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image008.png"/&gt; &lt;br/&gt;
好神奇! &lt;br/&gt;
Grid DAG of pixels, edges are pointed to 3 downward neighbors. &lt;br/&gt;
横向缩小: 删掉一个"seam" &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;longest path in DAG → &lt;em&gt;just negate all edge weights&lt;/em&gt;, as this algo is OK for negative edges.    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parallel job scheduling &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image010.png"/&gt; &lt;br/&gt;
感觉有点运筹的意思, 关键是建立一个DAG, 比较有技巧性:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add source and sink    &lt;/li&gt;
&lt;li&gt;split each job to 2 vertices (begin and end)   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image011.png"/&gt; &lt;br/&gt;
⇒ use longest path to schedule jobs   &lt;/p&gt;
&lt;h1 id="5-negative-weights_1"&gt;5. Negative Weights&lt;/h1&gt;
&lt;p&gt;只是给所有边增加weight并&lt;strong&gt;不能&lt;/strong&gt;解决负权边问题.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image013.png"/&gt; &lt;br/&gt;
⇒ need a different algo.   &lt;/p&gt;
&lt;p&gt;prop. SPT exists &lt;em&gt;iff&lt;/em&gt; there is no &lt;em&gt;negative cycles.&lt;/em&gt; &lt;/p&gt;
&lt;h3 id="bellman-ford"&gt;Bellman-Ford&lt;/h3&gt;
&lt;p&gt;一句话总结Bellman算法: 每次relax所有的边, 进行V次. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image014.png"/&gt; &lt;br/&gt;
(&lt;em&gt;因为relax k次以后, s到v的最短路径的长度小于等于k.&lt;/em&gt;)   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;. Bellman-Ford works, complexity is &lt;strong&gt;O(EV)&lt;/strong&gt;.  &lt;br/&gt;
pf.  &lt;br/&gt;
after i passes, found shortest path contain at most i edges.    &lt;/p&gt;
&lt;p&gt;code:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;BellmanFordSP&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;BellmanFordSP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EdgeWeightedDigraph&lt;/span&gt; &lt;span class="k"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;edgeTo&lt;/span&gt;&lt;span class="p"&gt;[]...&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DirectedEdge&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="n"&gt;relax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="improvement"&gt;improvement&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;if dist[v] is not changed during one pasee → no need to relax incoming edges any more.&lt;/em&gt; &lt;br/&gt;
    → much faster in practice.    &lt;/p&gt;
&lt;p&gt;FIFO implementation: maintain a queue of vertices whoses dist is changed.    &lt;/p&gt;
&lt;h3 id="finding-negative-cycle"&gt;Finding negative cycle&lt;/h3&gt;
&lt;p&gt;add two method to SP:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;boolean hasNegCycle();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;Iterable&amp;lt;DirectedEdge&amp;gt; negCycle();&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image016.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;.   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;if a vertex u is updated in phase V, there exists a negative cycle, and can track edgeTo[u] to find the cycle.    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原因是最短路径的长度小于V, 如果大于V则说明存在negative cycle.  &lt;/p&gt;
&lt;h3 id="negative-cycle-application"&gt;negative cycle application&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;arbitrage detection&lt;/em&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image018.png"/&gt; &lt;br/&gt;
建模: 
graph of currencies, edge weight = exchange weight (complete graph). &lt;br/&gt;
    ⇒ &lt;em&gt;find a cycle whose product of edge is &amp;gt;1.&lt;/em&gt; &lt;br/&gt;
        ⇒ &lt;strong&gt;take logs&lt;/strong&gt; to make a shortest-path pb. &lt;br/&gt;
            ⇒ take minus log, then try to find a negative cycle.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image020.png"/&gt; &lt;br/&gt;
NB!!   &lt;/p&gt;
&lt;h1 id="summery_1"&gt;Summery&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image015.png"/&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_2/pasted_image021.png"/&gt; &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 2-1 Minimum Spanning Trees</title><link href="https://x-wei.github.io/algoII_week2_1.html" rel="alternate"></link><published>2015-11-11T00:00:00+01:00</published><updated>2015-11-11T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-11-11:algoII_week2_1.html</id><summary type="html">&lt;h1 id="1-introduction-to-msts"&gt;1. Introduction to MSTs&lt;/h1&gt;
&lt;p&gt;Given: undirected connecte graph &lt;code&gt;G&lt;/code&gt; with positive edge weights.  &lt;br/&gt;
def. &lt;strong&gt;Spanning tree &lt;/strong&gt;&lt;code&gt;T&lt;/code&gt; &lt;br/&gt;
is a subgraph of &lt;code&gt;G&lt;/code&gt;, that is both tree (&lt;em&gt;connected, acyclic&lt;/em&gt;) and spanning(&lt;em&gt;all vertices are included&lt;/em&gt;).  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_1/pasted_image-0.png"/&gt; &lt;br/&gt;
⇒ Goal: find a spanning tree with minimum weight sum.   &lt;/p&gt;
&lt;h1 id="2-greedy-algorithm"&gt;2. Greedy Algorithm&lt;/h1&gt;
&lt;p&gt;assumptions for simplification:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edge weights are distinct   &lt;/li&gt;
&lt;li&gt;graph is connected   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ MST uniquely exists.   &lt;/p&gt;
&lt;h2 id="cut-property"&gt;cut property&lt;/h2&gt;
&lt;p&gt;def. a &lt;strong&gt;cut&lt;/strong&gt; of a graph is a partition of its vertices into 2 non-empty sets. &lt;br/&gt;
def. a &lt;strong&gt;crossing-edge&lt;/strong&gt; (wrt a cut) is an edge connecting vertex from one set to another. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_1/pasted_image001-0.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;prop. &lt;/strong&gt;Given any cut, the crossing edges with minimum weight &lt;em&gt;is in the MST&lt;/em&gt;.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_1/pasted_image002-0.png"/&gt; &lt;br/&gt;
&lt;em&gt;proof.&lt;/em&gt; &lt;br/&gt;
Given a cut. {S1,S2} are the two set of vertices,  let &lt;code&gt;e&lt;/code&gt; be the min-weighted edge among all crossing-edges.   &lt;/p&gt;
&lt;p&gt;If &lt;code&gt;e&lt;/code&gt; is not in the MST &lt;br/&gt;
   → exist another crossing-edge, &lt;code&gt;f&lt;/code&gt;, in the MST (otherwise not connected) &lt;br/&gt;
    → adding &lt;code&gt;e&lt;/code&gt; to the MST will create a cycle (tree property) &lt;br/&gt;
        → the edge &lt;code&gt;f&lt;/code&gt; will be in this cycle &lt;br/&gt;
        → removing &lt;code&gt;f&lt;/code&gt; and adding &lt;code&gt;e&lt;/code&gt; will give us another spanning tree (!) &lt;br/&gt;
                → this new spanning tree has smaller weight sum ⇒ contradiction, CQFD.   &lt;/p&gt;
&lt;h2 id="greedy-mst-algo"&gt;Greedy MST algo&lt;/h2&gt;
&lt;p&gt;[&lt;strong&gt;algo&lt;/strong&gt; ] Greedy MST  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;initialize: all edges not selected (colored gray)   &lt;/li&gt;
&lt;li&gt;find any cut with &lt;em&gt;all crossing-edge gray&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;use this cut and select the min-weighted crossing edge (color the edge as black)   &lt;/li&gt;
&lt;li&gt;repeat V-1 times.    &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;prop.&lt;/strong&gt; the greedy algorithm gets the MST.  &lt;br/&gt;
&lt;em&gt;pf.&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;any selected (black) edges are in the MST (according to the cut property)   &lt;/li&gt;
&lt;li&gt;If we haven't selected V-1 edges → there is always a cut with all crossing-edges gray. (证明algo不会卡死)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;em&gt;if edge weight not distinct, the proof fails, but can be fixed)&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;efficient implementations&lt;/strong&gt;:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to choose the cut each time?   &lt;/li&gt;
&lt;li&gt;how to find min-weighted crossing-edge?    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ Kruskal &amp;amp; Prim   &lt;/p&gt;
&lt;h1 id="3-edge-weighted-graph-api_1"&gt;3. Edge-Weighted Graph API&lt;/h1&gt;
&lt;h2 id="edge-api"&gt;Edge API&lt;/h2&gt;
&lt;p&gt;→ &lt;em&gt;Edge abstraction&lt;/em&gt;: make Edge comparable.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class Edge implements Comparable&amp;lt;Edge&amp;gt;{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Edge(int v, int w, double weight);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int either();// get one of the endpoint of edge (as we are in undirected graph contex here)   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int other(int v);// get the other endpoint    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int compareTo(Edge that);// compare by edge weight   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    double weight();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week2_1/pasted_image.png"/&gt; &lt;/p&gt;
&lt;h2 id="edge-weighted-graph-api"&gt;Edge-weighted Graph API&lt;/h2&gt;
&lt;p&gt;adj-list implementation: &lt;code&gt;Bag&amp;lt;Edge&amp;gt;[] adj;&lt;/code&gt;(for undirected graph, each edge appears twice in adj)   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EdgeWeightedGraph&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bag&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;EdgeWeightedGraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bag&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bag&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bag&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;addEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;instead&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;directly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;either&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Edges&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;incident&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Edges&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(allow self-loops and parallel edges)   &lt;/p&gt;
&lt;h2 id="mst-api"&gt;MST API&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class MST{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    MST(EdgeWeightedGraph G);//compute the MST   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Iterable&amp;lt;Edge&amp;gt; edges();// selected edges in the MST   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    double weight();// sum of all edge weights in MST   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="4-kruskals-algorithm_1"&gt;4.  Kruskal's Algorithm&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;[algo]&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;consider edges in ascending order of weight,   &lt;/li&gt;
&lt;li&gt;add the edge to MST &lt;em&gt;unless it creates a cycle&lt;/em&gt;.    &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the running of Kruskal: we have several small connect components and they merge with each other until we get MST.    &lt;/p&gt;
&lt;h2 id="correctness"&gt;correctness&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;prop. &lt;/strong&gt;Kruskal's algo works. &lt;br/&gt;
&lt;em&gt;pf&lt;/em&gt; &lt;br/&gt;
(idea: proove that Kruskal is a special case of the greedy algorithm, ie. how to select the specific cut) &lt;br/&gt;
suppose Kruskal's algo selects(colored black) an edge &lt;code&gt;e=v-w&lt;/code&gt; &lt;br/&gt;
→ select a cut = vertices connected to v in the (constructing) MST; and the rest vertices.  &lt;br/&gt;
    → for this cut, there is no black crossing edges &lt;br/&gt;
        → moreover among all crossing edges of the cut the edge e has the smallest weight!! (by def of Kruskal) CQFD   &lt;/p&gt;
&lt;h2 id="implementation"&gt;implementation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;how to test if adding an edge will create a cycle ?    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DFS from v to w? → O(V) &lt;br/&gt;
⇒ &lt;strong&gt;Union-Find&lt;/strong&gt; !  O(lg*V) ☺ (almost constant time)   &lt;/p&gt;
&lt;p&gt;if &lt;code&gt;find(v)==find(w)&lt;/code&gt;, then we know adding e will create a cycle.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;considering edges in order? → use a prority queue.    &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class KruskalMST extends MST{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private Bag&amp;lt;Edge&amp;gt; mst = new Bag&amp;lt;Edge&amp;gt;();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public KruskalMST(EdgeWeightedGraph G){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        MinPQ&amp;lt;Edge&amp;gt; pq = new MinPQ&amp;lt;Edge&amp;gt;();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        // build pq --&amp;gt; can be optimized to O(n) if build bottom-up   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        for(Edge e: G.edges()) pq.insert(e);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        UF uf = new UF(G.V());// build a UF of V elements   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        while(!pq.isEmpty() &amp;amp;&amp;amp; mst.size()&amp;lt;G.V()-1){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            Edge e = pq.delMin();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            int v = e.either(),w=e.other(v);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            if( uf.connecte(v,w) ) continue;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            uf.union(v,w);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            this.mst.add(e);           &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public Iterable&amp;lt;Edge&amp;gt; edges(){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        return this.mst;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="complexity"&gt;complexity&lt;/h2&gt;
&lt;p&gt;running time: O(ElogE) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_1/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;h1 id="5-prims-algorithm_1"&gt;5. Prim's Algorithm&lt;/h1&gt;
&lt;p&gt;since 1930...  &lt;br/&gt;
Idea: start from a vertex and &lt;em&gt;grows the tree &lt;/em&gt;&lt;code&gt;T&lt;/code&gt;&lt;em&gt; to MST.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[algo]&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Add to the tree T the edge &lt;em&gt;that have exactely one endpoint in T&lt;/em&gt; and with minimum weight,  &lt;/li&gt;
&lt;li&gt;repeat V-1 times.    &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the running of Prim: there is always ONE connnected component .    &lt;/p&gt;
&lt;h2 id="correctness_1"&gt;Correctness&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;. Prim's algo works. &lt;br/&gt;
&lt;em&gt;pf.&lt;/em&gt; &lt;br/&gt;
suppose edge e is the min-weighted edge connect a vertex in T with a vertex out of T.  &lt;br/&gt;
→ select the cut = vertices in the tree T; vertices out of T &lt;br/&gt;
→ by def, there is no black crossing edge &lt;br/&gt;
→ e is the min-weighed edge by def of Prim. CQFD   &lt;/p&gt;
&lt;h2 id="implementation_1"&gt;implementation&lt;/h2&gt;
&lt;p&gt;challenge: how to find such an edge (connect T and other vertex, with min weight) ? &lt;br/&gt;
⇒ priority queue    &lt;/p&gt;
&lt;h3 id="lazy-implementation"&gt;"lazy" implementation&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;[algo]&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Maintain a PQ of edges that connect T and the rest vertices.    &lt;/li&gt;
&lt;li&gt;&lt;code&gt;e = pq.delMin(), e = v-w&lt;/code&gt;,  if &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;w&lt;/code&gt; are both in T (as edges in pq might become obsolete as T grows) ⇒ &lt;em&gt;just disregard it&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;to maintain the pq: add all incident edges(with other endpoint not in T) of the newly added vertex to pq   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LazyPrimMST&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bag&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mst&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;LazyPrimMST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EdgeWeightedGraph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;marked&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;G.V()&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vertices&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;MinPQ&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MinPQ&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mst&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bag&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;marked&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vertex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delMin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;either&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marked&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;marked&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="k"&gt;ignore&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;obsolete&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;marked&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;newly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;added&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vertex&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;marked&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;marked&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e.other(v)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running time: &lt;strong&gt;O(ElgE)&lt;/strong&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_1/pasted_image002.png"/&gt; &lt;br/&gt;
space: &lt;strong&gt;O(E)&lt;/strong&gt; in worst time.   &lt;/p&gt;
&lt;h3 id="eager-implementation"&gt;"eager" implementation&lt;/h3&gt;
&lt;p&gt;Idea:    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;use a &lt;strong&gt;PQ of vertices&lt;/strong&gt;&lt;em&gt;, priority of vertex v := min-weight of edge that connects v to T.&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;[algo]&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Get from pq the vertex &lt;code&gt;v&lt;/code&gt; that is closest to T, add it to T. &lt;br/&gt;
Update pq -- consider &lt;code&gt;v&lt;/code&gt;'s incident edge &lt;code&gt;e=v-w:&lt;/code&gt; &lt;ul&gt;
&lt;li&gt;if w in T → ignore   &lt;/li&gt;
&lt;li&gt;else:   &lt;ul&gt;
&lt;li&gt;if w in pq → add w to pq   &lt;/li&gt;
&lt;li&gt;else → if &lt;code&gt;v-w&lt;/code&gt; has smaller weight than the current priority, update &lt;code&gt;w&lt;/code&gt;'s priority.      &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;repeat till get V-1 edges.    &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week2_1/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;p&gt;key implementation component: a &lt;a href="file:///home/wx/Dropbox/ZIM_NOTES/0._TmpNotes/Algorithms%2C_part_II/MinPQ.txt"&gt;MinPQ&lt;/a&gt; that supports priority(key) update.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;class IndexMinPQ&amp;lt;Key extends Comparable&amp;lt;Key&amp;gt;&amp;gt;{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    IndexMinPQ(int N);// indices of elements: 0...N-1   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    void insert(int i, Key key);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    void decreaseKey(int i, Key key);// update the key(priority) of element-i   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int delMin();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int size();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;implementation of such a PQ:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Use same code as standart PQ (maintain a heap[] array). &lt;br/&gt;
Elements are always accessed by "index", in range 0...N-1.
maintain 3 parallel arrays: &lt;code&gt;keys[], pq[], qp[]&lt;/code&gt;:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;keys[i]&lt;/code&gt;: is the priority of element i (the element with index=i)   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pq[i]&lt;/code&gt;: is the index of the element in the heap position i (ie. in heap[i] is pq[i]th element  )   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;qp[i]&lt;/code&gt;: is heap position of element i  ( ⇔ the ith element is in heap[qp[i]] )   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;to &lt;code&gt;decreaseKey(i,key)&lt;/code&gt;: change &lt;code&gt;keys[i]&lt;/code&gt;, then call &lt;code&gt;siftup(qp[i])&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week2_1/pasted_image004.png"/&gt; &lt;br/&gt;
summery of pq implementations:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_1/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;h1 id="6-mst-context_2"&gt;6. MST Context&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;unsolved pb: does a linear MST algo exists?   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(recap: for UF, tarjan has &lt;em&gt;prooved&lt;/em&gt; that linear algo doesn't exist — although Nlg*N is fast enough...) &lt;br/&gt;
@_@... &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week2_1/pasted_image007.png"/&gt; &lt;br/&gt;
(这个Yao是清华那个Yao吧?)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Euclidean MST   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given N points in plane, edge weight := Euclidean distance. (&lt;em&gt;dense graph, E = V2&lt;/em&gt;) &lt;br/&gt;
→ exploit geomerty, O(NlgN)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clustering   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;k-clustering (~ dist-fcn) &lt;br/&gt;
single-link clustering (def. dist of clusters = dist of 2 closest elements in each cluster) &lt;br/&gt;
→ Kruskal...   &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 1-2 Directed Graphs</title><link href="https://x-wei.github.io/algoII_week1_2.html" rel="alternate"></link><published>2015-11-09T00:00:00+01:00</published><updated>2015-11-09T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-11-09:algoII_week1_2.html</id><summary type="html">&lt;h1 id="1-intro-to-digraphs"&gt;1. Intro to digraphs&lt;/h1&gt;
&lt;p&gt;Has profound differences wrt undirected graphs.    &lt;/p&gt;
&lt;p&gt;def: digraph &lt;br/&gt;
&lt;em&gt; edges: have directions &lt;br/&gt;
&lt;/em&gt; vertex: distinguish indeg and outdeg   &lt;/p&gt;
&lt;p&gt;digraph pbs:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path/shortest path   &lt;/li&gt;
&lt;li&gt;topological sort: Can you draw a digraph so that all edges point upwards?   &lt;/li&gt;
&lt;li&gt;strong connectivity: Is there a directed path between all pairs of vertices?   &lt;/li&gt;
&lt;li&gt;transit closure   &lt;/li&gt;
&lt;li&gt;PageRank   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="2-digraph-api"&gt;2. Digraph API&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class Digraph{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Digraph(int V);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    void addEdge(int v, int w);// edge is directed   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Iterable&amp;lt;Interger&amp;gt; adj(int v);// vertices reached by outgoing edges   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int V();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Digraph reverse();// &amp;lt;--new methode wrt undirected graph   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;representation: adj-list, ie. an array of bags.  &lt;br/&gt;
&lt;code&gt;Bag&amp;lt;Integer&amp;gt;[] adj;// prec vertices&lt;/code&gt; &lt;/p&gt;
&lt;h1 id="3-digraph-search"&gt;3. Digraph Search&lt;/h1&gt;
&lt;p&gt;BFS and DFS can be applied to digraphs.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reachability   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;find all vertices reachable from vertex-s.  &lt;br/&gt;
use the same DFS as for undirected graphs.  &lt;br/&gt;
→ application: programme control-flow analyse, garbage collection.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;DFS is the basis for a lot of digraph pbs&lt;/em&gt;: 2-satisfiability, Euler path, strongly connected component.    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;multiple source shortest path:    &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week1_2/pasted_image.png"/&gt; &lt;br/&gt;
⇒ use DFS but &lt;em&gt;enque all vertices in the set&lt;/em&gt;.  &lt;br/&gt;
→ application: web crawler(DFS not suitable for crawling)   &lt;/p&gt;
&lt;h1 id="4-topological-sort"&gt;4. Topological Sort&lt;/h1&gt;
&lt;p&gt;application. precedence schedule, java compiler (cycled inheritance), ...   &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;topo-order&lt;/strong&gt; &lt;br/&gt;
is a permutation of vertices, where for each vertice v→w, w is behind v in the permutation.    &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;DAG&lt;/strong&gt; &lt;br/&gt;
directed acyclic graph. &lt;br/&gt;
&lt;strong&gt;prop. &lt;/strong&gt;for a digraph, topological order exists &lt;em&gt;iff&lt;/em&gt; graph is a DAG.    &lt;/p&gt;
&lt;p&gt;algo: ⇒ use DFS~  &lt;br/&gt;
&lt;em&gt;reverse DFS postorder&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;def.    &lt;strong&gt;postorder&lt;/strong&gt; &lt;br/&gt;
is the order of the vertices that we have &lt;em&gt;finished&lt;/em&gt; (ie. we have visited all reachable vertices from this vertex).   &lt;/p&gt;
&lt;h3 id="implementation"&gt;implementation&lt;/h3&gt;
&lt;p&gt;这个以前的blog写过...    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;revPostorder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stores&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vertices&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;order&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Digraph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="cm"&gt;/** now we know the vertex v is "finished" **   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    revPostorder.push(v);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;}   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;public Iterable&amp;lt;Integer&amp;gt; topoOrder(Digraph G){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    for(int v=0;v&amp;lt;G.V();v++)   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;        if(!visited(v)) dfs(G,v);// visit all cc   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    return revPostorder;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="proof"&gt;proof&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;prop. &lt;/strong&gt;reverse post-order of a DAG is in topological order.  &lt;br/&gt;
(这个证明蛮精彩) &lt;br/&gt;
&lt;strong&gt;pf.&lt;/strong&gt; &lt;br/&gt;
for any edge &lt;strong&gt;v→w&lt;/strong&gt;, when &lt;code&gt;dfs(v)&lt;/code&gt; is called:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;case 1: &lt;code&gt;dfs(w)&lt;/code&gt; is called and returned, so w is done before v in post-order;   &lt;/li&gt;
&lt;li&gt;case 2: &lt;code&gt;dfs(w)&lt;/code&gt; is not called, it will be (in)directly get called by &lt;code&gt;dfs(v)&lt;/code&gt;, so &lt;code&gt;dfs(w)&lt;/code&gt; finishes before &lt;code&gt;dfs(v)&lt;/code&gt;;   &lt;/li&gt;
&lt;li&gt;case 3: &lt;code&gt;dfs(w)&lt;/code&gt; is called but NOT returned (ie, w not &lt;em&gt;finished&lt;/em&gt;) → exist path from w to v ⇒ graph is not a DAG! (cycle detection)   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="5-strong-components_1"&gt;5. Strong Components&lt;/h1&gt;
&lt;p&gt;For undirected graphs: connected components can be solved with dfs or UF.    &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;Strongly-connected&lt;/strong&gt; &lt;br/&gt;
v and w are strongly-connected if exist path from v to w and w to v.  &lt;br/&gt;
→ is an equivalent relation.    &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;Strong Component&lt;/strong&gt; &lt;br/&gt;
subset of  V where each pair are strongly-connected.    &lt;/p&gt;
&lt;p&gt;Goal: compute all strong components(&lt;em&gt;scc&lt;/em&gt;) in a digraph.    &lt;/p&gt;
&lt;h2 id="linear-time-dfs-solution-tarjan-1972"&gt;linear time DFS solution: Tarjan (1972)&lt;/h2&gt;
&lt;p&gt;(developed version: a two-pass linear-time algorithm)   &lt;/p&gt;
&lt;p&gt;Intuition: &lt;em&gt;scc for G is the same for G.reverse().&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kernel DAG&lt;/strong&gt;: contract each scc into a single vertex.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week1_2/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;p&gt;Idea:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;compute topological-order in the kernel DAG.   &lt;/li&gt;
&lt;li&gt;run DFS, consider vertices in reverse-topo-order    &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[Algo]&lt;/strong&gt; &lt;br/&gt;
1. compute topo-order in &lt;code&gt;G.reverse&lt;/code&gt; (just a DFS in the reversed graph) &lt;br/&gt;
2. run DFS in original  &lt;code&gt;G&lt;/code&gt;, &lt;em&gt;visit unmarked vertices in topo-order of G.reverse&lt;/em&gt;. (instead of visiting vertices by their index)   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;⇒ &lt;strong&gt;each time we finish a dfs from a vertex, we get a scc!&lt;/strong&gt; &lt;br/&gt;
太精彩了!!! &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week1_2/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;proof: tricky, cf book...(貌似Werner课上讲过..)   &lt;/p&gt;
&lt;h2 id="implementation_1"&gt;implementation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SCC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;belongs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sccCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getSCC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Digraph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;topo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;order&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;topoOrderGR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;topoOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vertices&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;above&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;topo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;order&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;topoOrderGR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c1"&gt;-- only difference from the standard topo-order algo   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sccCount&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sccCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;everytime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Digraph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;touched&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vertices&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;marked&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sccId&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SCC&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;scc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sccCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;scc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sccCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 1-1 Undirected Graphs</title><link href="https://x-wei.github.io/algoII_week1_1.html" rel="alternate"></link><published>2015-11-08T00:00:00+01:00</published><updated>2015-11-08T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-11-08:algoII_week1_1.html</id><summary type="html">&lt;h1 id="1-intro-to-graphs"&gt;1. Intro to graphs&lt;/h1&gt;
&lt;p&gt;Graph: vertices connected by edges.    &lt;/p&gt;
&lt;p&gt;terminology:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;:  sequence of vertices connected by edges   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cycle&lt;/strong&gt;: path with same starting and ending vertex   &lt;/li&gt;
&lt;li&gt;two vertices are &lt;strong&gt;connected&lt;/strong&gt;: if there is a path between     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex of graph problems:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path: or connectivity   &lt;/li&gt;
&lt;li&gt;shortest path   &lt;/li&gt;
&lt;li&gt;cycle   &lt;/li&gt;
&lt;li&gt;Euler tour (ouii..)   &lt;/li&gt;
&lt;li&gt;Hamilton tour   &lt;/li&gt;
&lt;li&gt;MST   &lt;/li&gt;
&lt;li&gt;bi-connectivity: is there a vertex whose removal disconnects the graph?   &lt;/li&gt;
&lt;li&gt;planarity   &lt;/li&gt;
&lt;li&gt;isomorphism   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="2-graph-api"&gt;2. Graph API&lt;/h1&gt;
&lt;h2 id="graph-representation"&gt;graph representation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vertex representation:  use integers &lt;em&gt;between 0 and V-1&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;anormalies: self-loop and multiple edges are &lt;em&gt;possible&lt;/em&gt; &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class Graph{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Graph(int V);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    void addEdge(int v, int w);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Iterable&amp;lt;Integer&amp;gt; adj(int v);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int V();// nb of vertices   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int E();// nb of edges   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;print all edges:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week1_1/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;basic functions:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;static int degree(Graph g, int v){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int deg = 0;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for(int w:G.adj(v)) deg++;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return deg;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;static int nbOfSelfloops(Graph g){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int cnt = 0;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for(int v=0; v&amp;lt;G.V(); v++)   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        for(int w:G.adj(v))    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            if (w==v) cnt++;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return cnt/2;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="edge-representation"&gt;edge representation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;set-of-edge implementation: a list of all edges ⇒ can lead to inefficient implementation   &lt;/li&gt;
&lt;li&gt;adj-matrix implementation: maintain a 2d (V*V) boolean array ⇒ space complexity too heavy   &lt;/li&gt;
&lt;li&gt;adj-list implementation: vertex-indexed array, each array entry is a &lt;code&gt;Bag&lt;/code&gt; (类似桶bucket) ⇒ sutable for sparse graphs   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week1_1/pasted_image001.png"/&gt; &lt;br/&gt;
adj-list implementation:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bag&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bag&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bag&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cannot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bag&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;addEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;undirected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week1_1/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;h1 id="3-depth-first-search_1"&gt;3. Depth-First Search&lt;/h1&gt;
&lt;p&gt;Tremaux maze exploration: trace back when no unvisited vertices availiable.  &lt;br/&gt;
动画好看... &lt;br/&gt;
DFS goal: systematically search through a graph.  &lt;br/&gt;
&lt;strong&gt;design pattern&lt;/strong&gt;: &lt;em&gt;decouple&lt;/em&gt; graph data and graph processing.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class Paths{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Path(Graph G, int s);// graph G and source s   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    boolean hasPathTo(int v);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Iterable&amp;lt;Integer&amp;gt; pathTo(int v);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;algo:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoII_week1_1/pasted_image003.png"/&gt; &lt;br/&gt;
注意每次访问节点以前就将其mark.    &lt;/p&gt;
&lt;h2 id="implementation"&gt;implementation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用一个boolean数组&lt;code&gt;visited[]&lt;/code&gt;作为标记   &lt;/li&gt;
&lt;li&gt;为了找到一条具体的路径(ie, 一系列节点), 维护一个&lt;code&gt;prev[]&lt;/code&gt;数组, 存放当前节点是从哪个节点走过来的.    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoII_week1_1/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DFSpaths&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Paths&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pathTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="properties"&gt;properties&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;. &lt;br/&gt;
DFS visite all edges in time propotional to the sum of their degrees(ie. nb of edges).    &lt;/p&gt;
&lt;h1 id="4-breadth-first-search_1"&gt;4. Breadth-First Search&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;not&lt;/strong&gt; recursive algo. &lt;br/&gt;
&lt;em&gt;maintain a queue, add to queue for all vertices not-marked.&lt;/em&gt; &lt;/p&gt;
&lt;h2 id="implementation_1"&gt;implementation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;visited[]&lt;/code&gt; to mark vertices   &lt;/li&gt;
&lt;li&gt;use a &lt;code&gt;prev[]&lt;/code&gt; array to get explicit path   &lt;/li&gt;
&lt;li&gt;use a &lt;code&gt;dist[]&lt;/code&gt; array to record the shortest dist from v to source (can use &lt;code&gt;dist&lt;/code&gt; to replace &lt;code&gt;visited&lt;/code&gt;)   &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;G.V()&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;G.V()&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;G.V()&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dequeue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="property"&gt;property&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;prop.&lt;/strong&gt; &lt;br/&gt;
BFS computes the shortest path from s to all vertices using time propotional to E+V.    &lt;/p&gt;
&lt;p&gt;intuition: BFS examines nodes by increasing distance    &lt;/p&gt;
&lt;h1 id="5-connected-components_1"&gt;5. Connected Components&lt;/h1&gt;
&lt;p&gt;dealing with connectivity(equivalence) queries ⇒ answer in constant time (with &lt;em&gt;preprocessing&lt;/em&gt;).    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class CC{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    boolean connected(int v, int w);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int count();// nb of CCs   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int id(int v);//id for a CC   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⇒ Union-Find ? ⇒ &lt;em&gt;Use DFS!!&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;def. &lt;em&gt;connected component&lt;/em&gt; is a maximal set of connected vertices.    &lt;/p&gt;
&lt;p&gt;algo: for each unmarked vertex, run dfs(with increasing cc id)... &lt;br/&gt;
after the preprocessing, we can get the array &lt;code&gt;id[]&lt;/code&gt; and cc count &lt;code&gt;cnt&lt;/code&gt;...   &lt;/p&gt;
&lt;h1 id="6-graph-challenges"&gt;6. Graph Challenges&lt;/h1&gt;
&lt;p&gt;some typical pbs &lt;br/&gt;
&lt;strong&gt;pb1. bipartite graph&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Can we  divide vertices into 2 subsets, where all edge go from one subset to other.  &lt;br/&gt;
⇒ can be done with dfs. &lt;em&gt;cf. booksite&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pb2. cycle detection&lt;/strong&gt; &lt;br/&gt;
⇒ simple using dfs.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pb3. Euler cycle&lt;/strong&gt; &lt;br/&gt;
Find a cycle that uses all edges exactely once.  &lt;br/&gt;
[Euler] a graph is Eulerian &lt;strong&gt;iff&lt;/strong&gt; all vertices have even degree.  &lt;br/&gt;
⇒ typical diligent algo students can do. &lt;em&gt;cf. booksite&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pb4. Hamilton cycle&lt;/strong&gt; &lt;br/&gt;
Find cycle that visits each vertex exactly once.  &lt;br/&gt;
⇒ intractable (typical NP-complete pb)   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pb5. isomorphism of graphs&lt;/strong&gt; &lt;br/&gt;
Are two graphs identical except for vertex names? &lt;br/&gt;
⇒ no one knows...    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pb6. planary graph&lt;/strong&gt; &lt;br/&gt;
Lay out a graph in the plane without crossing edges? &lt;br/&gt;
⇒ expert level. exists linear time algo based on DFS by Tarjan, but too complicated.    &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>Approximate Retrieval(2): simHash</title><link href="https://x-wei.github.io/simhash.html" rel="alternate"></link><published>2015-10-08T17:30:00+02:00</published><updated>2015-10-08T17:30:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-10-08:simhash.html</id><summary type="html">&lt;p&gt;除了上次介绍的&lt;a href="http://x-wei.github.io/minhash.html"&gt;minhash&lt;/a&gt;方法以外, 还有一种常见的hash方法, 叫做simHash. 这里做简要介绍.  &lt;br/&gt;
这个hash函数的背景和上次一样, 还是考虑把文本抽象为ngram的集合:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/simhash/pasted_image.png"/&gt; &lt;br/&gt;
然后相似度依旧是Jaccard similarity:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/simhash/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;h2 id="simhash"&gt;simHash&lt;/h2&gt;
&lt;p&gt;simHash的方法听上去比minHash还要简单:    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对一个文档&lt;em&gt;d&lt;/em&gt;中的每一个term(ngram, shingle) &lt;em&gt;t&lt;/em&gt;, 计算其hashcode(比如用java内建的&lt;code&gt;Object.hashCode()&lt;/code&gt;函数) &lt;em&gt;hash(t)&lt;/em&gt;.    &lt;/li&gt;
&lt;li&gt;把d中所有term的&lt;em&gt;hash(t)&lt;/em&gt;合成为一个hashcode作为d的hashcode &lt;em&gt;simHash(d)&lt;/em&gt;: &lt;em&gt;simHash(d)&lt;/em&gt;的长度与&lt;em&gt;hash(t)&lt;/em&gt;相同, &lt;em&gt;simHash(d)&lt;/em&gt;的第k个bit的取值为所有&lt;em&gt;hash(t)&lt;/em&gt;第k个bit的&lt;strong&gt;众数&lt;/strong&gt;.    &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;写成数学表达式很吓人, 其实只不过不断在{0,1}和{-1,+1}之间变而已, 总之就是对所有hash(t)的每一位进行统计, 如果1多就放1, 否则就放0...  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/simhash/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;关于为什么simHash可以满足近邻hash的条件(即两个文档jacccard sim越大, 其simhash相等的可能性越大), 不知道... 不过可以参考这个链接: &lt;a href="http://matpalm.com/resemblance/simhash/"&gt;http://matpalm.com/resemblance/simhash/&lt;/a&gt; &lt;/p&gt;
&lt;h2 id="simhash-vs-minhash"&gt;simHash VS minHash&lt;/h2&gt;
&lt;p&gt;下面来比较一下二者的差别.  &lt;br/&gt;
首先是表示方式:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simHash只需要直接拿term的集合即可使用   &lt;/li&gt;
&lt;li&gt;minHash需要首先建立字典, 然后用一个binary的向量(长度为字典长度)表示一个文档   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其次是取值范围:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simHash得到的hash范围取决于应用到每个term上的hash函数的范围, simHash与所有term的hash位数相同.   &lt;/li&gt;
&lt;li&gt;minHash的范围等于字典的长度, 如果字典里有M个term那么minHash取值在1到M之间.    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是minHash也有优点:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要生成不同的simHash比较困难, 取决于应用在每个term上的hash函数有多少种.    &lt;/li&gt;
&lt;li&gt;生成不同的minHash非常容易: 每次shuffle就可以对一篇文章生成不同的minHash.    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以如果我们想要用多个hash来索引一个文章的时候, minHash可以很容易实现.    &lt;/p&gt;</summary><category term="ml"></category></entry><entry><title>minHash: 一种快速approximate retrieval方法</title><link href="https://x-wei.github.io/minhash.html" rel="alternate"></link><published>2015-09-27T11:00:00+02:00</published><updated>2015-09-27T11:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-09-27:minhash.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;approximate retrieval&lt;/strong&gt;(相似搜索)这个问题之前实习的时候就经常遇到: 如何快速在大量数据中如何找出相近的数据.    &lt;/p&gt;
&lt;p&gt;问题描述: 假设有N个数据, 并且对于他们有一个相似度(或距离)的度量函数&lt;code&gt;sim(i,j)&lt;/code&gt;, 我们的问题就是如何快速找出所有N个点中相似度较大的i和j组合.    &lt;/p&gt;
&lt;p&gt;乍一看这个问题必须要对所有的(i,j)计算相似度, 但是N^2的复杂度在N太大的情况下是不能够忍受的.    &lt;/p&gt;
&lt;h2 id="kdtree"&gt;kdtree&lt;/h2&gt;
&lt;p&gt;之前在algo-note里面遇到过&lt;a href="http://x-wei.github.io/algoI_week5_2.html"&gt;kdtree&lt;/a&gt;, 用它可以使得寻找nearest neighbor的复杂度减少到logN. 但是这种情况对于维度低一点(比如二三维)的情况合适, 维度到了成千上万的时候并不是很好的选择, 所以这里不多讨论.    &lt;/p&gt;
&lt;h2 id="simhash"&gt;simhash&lt;/h2&gt;
&lt;p&gt;另一个思路是, 使用某个hash函数, 对于每一个数据计算一个哈希值. 这个hash函数要满足: &lt;strong&gt;当i和j的相似度很高的时候, hash(i)和hash(j)的值(很可能)相同.&lt;/strong&gt; 这次介绍的minHash就是这样的一种方法.    &lt;/p&gt;
&lt;h2 id="jaccard-similarity"&gt;Jaccard similarity&lt;/h2&gt;
&lt;p&gt;明确问题含义, 首先需要定义相似度. 这里主要考虑文本相似度的问题, 假设字典D有M个term(term可以是单词, 也可以是n-gram或叫shingle): &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/minhash/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;一段文本(document i)可以用binary vectorization变为一个binary的向量:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/minhash/pasted_image001.png"/&gt; &lt;br/&gt;
(这里没有用TF或者TFIDF, 只用一个简单的binary向量化, 因为只有binary的时候才适合我们接下来的推导...)   &lt;/p&gt;
&lt;p&gt;每个document可以看作一些term的&lt;em&gt;集合&lt;/em&gt;, 集合之间的相似度有一个经典的度量: jaccard similarity. &lt;br/&gt;
对集合S1和S2, 他们的相似度定义为:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/minhash/pasted_image003.png"/&gt; &lt;br/&gt;
也很好理解, 重合部分比例越高相似度就越高, 另外jaccard-sim取值在0到1之间.    &lt;/p&gt;
&lt;p&gt;对于document i和j, 他们的向量形式分别是di和dj. 现在我们希望计算hash(di)和hash(dj), 使得:    &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/minhash/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;h2 id="minhash"&gt;minHash&lt;/h2&gt;
&lt;p&gt;min hash的思路是这样的, 首先生成一个随机的(1...M)的排序(permutation)π:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/minhash/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;p&gt;然后, 对于每个document d, 都按照这个permutation, 把d的分量从新排列:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/minhash/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;p&gt;然后定义&lt;code&gt;minHash(di)&lt;/code&gt;为permutation以后的di里的第一个不为0的位置:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/minhash/pasted_image008.png"/&gt; &lt;br/&gt;
(上面个公式里d的下标只是代表第i个文本, 并不代表分量... 我应该写上标的..) &lt;br/&gt;
所以&lt;code&gt;minHash()&lt;/code&gt;返回1到M之间的一个数.    &lt;/p&gt;
&lt;h2 id="proof"&gt;proof&lt;/h2&gt;
&lt;p&gt;现在证明一下为什么这样选择minHash函数可以保证两个文本的哈希值相等的概率为他们的jaccard similarity.    &lt;/p&gt;
&lt;p&gt;对于d2和d2, 我们分别查看π(d1)和π(d2)的每个分量, 这两个数有(11), (10), (01), (00)这四种可能, 分别记每种可能性的出现次数为a,b,c,d:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/minhash/pasted_image009.png"/&gt; &lt;br/&gt;
那么jaccard similarity可以表示为:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/minhash/pasted_image010.png"/&gt; &lt;br/&gt;
再看&lt;code&gt;minHash()&lt;/code&gt;是如何计算的, 当π(d1)_k和π(d2)_k都为0的时候会继续增加k, 一直到π(d1)_k和π(d2)_k中某一个为1.  &lt;br/&gt;
那么&lt;code&gt;minHash(d1)==minHash(d2)&lt;/code&gt;的情况就是二者都为1的情况, 这种情况的可能性为:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/minhash/pasted_image011.png"/&gt; &lt;br/&gt;
这个概率恰好就是jaccard similarity.    &lt;/p&gt;</summary><category term="ml"></category></entry><entry><title>lin-reg = max-likelihood: 贝叶斯视角看线性回归</title><link href="https://x-wei.github.io/linreg-bayes.html" rel="alternate"></link><published>2015-09-26T00:00:00+02:00</published><updated>2015-09-26T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-09-26:linreg-bayes.html</id><summary type="html">&lt;p&gt;几乎所有的ml课都是从线性回归讲起, ETH的课也不例外. 不过这次老师用了贝叶斯的视角讲这个问题, 自从高中接触丁老师讲的线性回归以来 第一次听到一个不同于最小二乘的解读, 感觉很有意思. 又想起来刘未鹏那篇非常棒的&lt;a href="http://mindhacks.cn/2008/09/21/the-magical-bayesian-method/"&gt;博客&lt;/a&gt;, 于是想记录一下.    &lt;/p&gt;
&lt;h2 id="notation"&gt;notation&lt;/h2&gt;
&lt;p&gt;首先有n个数据点:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image001.png"/&gt; &lt;br/&gt;
其中y是实数, 每个x有d个维度, 为了方便表示截距, 再给x加入一个始终等于1的维度:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image002.png"/&gt; &lt;br/&gt;
例子: y代表房价, x代表了房子的面积, 使用时间, 距离市中心的距离等因素.   &lt;/p&gt;
&lt;h2 id="least-square-viewpoint"&gt;least square viewpoint&lt;/h2&gt;
&lt;p&gt;在最小二乘的视角里, 线性回归是用一个x的线性函数拟合y:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image003.png"/&gt; &lt;br/&gt;
使得拟合结果和观测结果的误差尽量小.  &lt;br/&gt;
不过这次不说最小二乘, 所以接下来不讨论这个思路...   &lt;/p&gt;
&lt;h2 id="assumptions-in-bayes-viewpoint"&gt;assumptions in Bayes viewpoint&lt;/h2&gt;
&lt;p&gt;在贝叶斯视角里, 我们假设: &lt;br/&gt;
&lt;strong&gt;假设1. y = 某个x的线性函数 + 观测噪音&lt;/strong&gt; &lt;br/&gt;
即:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image006.png"/&gt; &lt;br/&gt;
其中εi是一个&lt;em&gt;随机变量&lt;/em&gt;, 所以y也是一个随机变量.  &lt;br/&gt;
另外再有一个比较强的假设: &lt;br/&gt;
&lt;strong&gt;假设2.  ε服从centered高斯分布, iid.&lt;/strong&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image007.png"/&gt; &lt;br/&gt;
(btw, 对一个随机变量建模, 一般来说, 连续随机变量就用高斯, 离散随机变量用泊松)   &lt;/p&gt;
&lt;h2 id="bayes-formula"&gt;Bayes formula&lt;/h2&gt;
&lt;p&gt;贝叶斯公式长这个样子:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image004.png"/&gt; &lt;br/&gt;
只看最左边和最右边的内容, 表达为:    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;posterior = likelihood * prior &lt;br/&gt;
后验概率 = 可能性 * 先验概率   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(上面其实应该是"正比于"而不是等号, 由于P(Y)我们并不关心, 所以可以直接忽略之)   &lt;/p&gt;
&lt;p&gt;公式里Y代表可以观察到结果, X代表结果背后不能直接观察的量(&lt;em&gt;不要和数据里的XY混淆...&lt;/em&gt;).  &lt;br/&gt;
贝叶斯公式的意义在于, 让我们从可观测的Y反推不可观测的X的概率. 既然我们已经得到了观测结果Y, 那么找到使得后验概率最大的X就说明我们在观测基础上得到了最可信的X的估计.    &lt;/p&gt;
&lt;p&gt;那么在我们这个问题里, X代表模型, 即某一个β的取值; Y代表观测结果, 即我们看到的n个数据点.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image005.png"/&gt; &lt;br/&gt;
所以我们的问题就是: 在已经有了这些观测点的基础之上, 应该选那个β的取值, 使得后验概率最大?   &lt;/p&gt;
&lt;h2 id="lin-reg-max-likelihood"&gt;lin-reg = max-likelihood&lt;/h2&gt;
&lt;p&gt;线性回归认为, 对于任意的β的取值, 其先验概率都是一样的, 所以在贝叶斯公式里可以忽略ℙ(X), 只需要考虑最大化likelihood ℙ(Y|​X)即可 — 再一次, 不要把贝叶斯的XY和数据的X和Y混淆...  &lt;br/&gt;
即选择β: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image015.png"/&gt; &lt;br/&gt;
由于随机变量y只是随机变量ε的一个函数(且给定β, ε和y一一对应):  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image008.png"/&gt; &lt;br/&gt;
所以可以最大化ε的likelihood:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image009.png"/&gt; &lt;br/&gt;
由于之前对ε有假设:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image010.png"/&gt; &lt;br/&gt;
那么:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image011.png"/&gt; &lt;br/&gt;
(不要以为ε独立于β: ε=y - βt x, 所以上面表达式里其实还是有β的. ) &lt;br/&gt;
⇒ 两边取log并加上负号:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image014.png"/&gt; &lt;br/&gt;
Voila, 所以极大似然=最小二乘!  &lt;br/&gt;
对, 饶了一圈还是最小二乘, 但是这样的意义变了, 明白了为什么要最小化平方误差这个值.   &lt;/p&gt;
&lt;h2 id="precise-solution-to-linreg"&gt;precise solution to linreg&lt;/h2&gt;
&lt;p&gt;(notation有点混乱了, 之前贝叶斯里面应该用AB而不是用XY的orz...) &lt;br/&gt;
每个x是一个列向量, 这里, 把所有数据用矩阵形式表示:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image016.png"/&gt; &lt;br/&gt;
矩阵表示的好处是平方误差可以用矩阵表示:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image017.png"/&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image018.png"/&gt; &lt;br/&gt;
对矩阵运算求偏导, 偏导为0的时候即可得到最优的β: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/linreg-bayes/pasted_image019.png"/&gt; &lt;/p&gt;</summary><category term="ml"></category></entry><entry><title>[Algorithms I] Week 6 Hash Tables</title><link href="https://x-wei.github.io/algoI_week6.html" rel="alternate"></link><published>2015-09-01T00:00:00+02:00</published><updated>2015-09-01T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-09-01:algoI_week6.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Can we do better than BST if we do not need ordered operations ?&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;(No compare methods, use equals method)   &lt;/p&gt;
&lt;p&gt;Idea: save items in an array.  &lt;br/&gt;
&lt;strong&gt;Hash function&lt;/strong&gt;: method for calclulating the array index of  a key.    &lt;/p&gt;
&lt;p&gt;Issues:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;computing hash function   &lt;/li&gt;
&lt;li&gt;equality tests   &lt;/li&gt;
&lt;li&gt;collision resolution   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Classic space-time tradeoff.&lt;/em&gt; &lt;/p&gt;
&lt;h1 id="1-hash-functions"&gt;1. Hash Functions&lt;/h1&gt;
&lt;p&gt;Goal: scramble the keys uniformly to produce a table index.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;effcient to compute   &lt;/li&gt;
&lt;li&gt;all indices are equally likely for any key   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;challenge: need different approach for different key types.    &lt;/p&gt;
&lt;h2 id="javas-hashing"&gt;Java's hashing&lt;/h2&gt;
&lt;p&gt;All java object has a methode &lt;code&gt;int hashCode()&lt;/code&gt; &lt;br/&gt;
requirement:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if x.equals(y) ⇒ x.hashCode()==y.hashCode()   &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(hopefully) if x.equals(y)==false ⇒ x.hashCode!=y.hashCode()   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Default implementation: &lt;em&gt;memory address&lt;/em&gt; for x.    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Custom implementations for standard types: Integer, Double, String, File, URL, Date...   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image.png"/&gt; &lt;br/&gt;
Strings: Horner's method — compute a polynome.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image001.png"/&gt; &lt;br/&gt;
recipe for user-defined types:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;h2 id="modeular-hasing"&gt;Modeular hasing&lt;/h2&gt;
&lt;p&gt;(hash code VS hash function)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Hash code&lt;/em&gt;: 32-bit integer between -2^31 and 2^31-1 &lt;em&gt;(can be negative!!)&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Hash function&lt;/em&gt;: integer between 0 and M-1 (used directly as array index, should &amp;gt;=0)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;BUG code:&lt;/strong&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private int hash(Key k){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return k.hashCode()%M;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;→ bug: &lt;em&gt;number returned can be negative !&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1-in-billion bug code:&lt;/strong&gt; &lt;br/&gt;
&lt;code&gt;return Math.abs(k.hashCode()) % M;&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;→ bug: Math.abs() returns negative numbers for -2^31 &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;correct code:&lt;/strong&gt; &lt;br/&gt;
just take the first 31 bits: x&amp;amp;0x7fffffff &lt;br/&gt;
&lt;code&gt;return k.hashCode()&amp;amp;0x7fffffff % M;&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;另一个hash的思路是用random(用hashcode作为随机种子)   &lt;/p&gt;
&lt;h2 id="uniform-hasing-assumption"&gt;uniform hasing assumption&lt;/h2&gt;
&lt;p&gt;each key is equally likely to hash to an integer between 0 and M-1   &lt;/p&gt;
&lt;p&gt;一些数学结论:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;h1 id="2-separate-chaining_1"&gt;2. Separate Chaining&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;one strategy for collision resolution.&lt;/em&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;idea&lt;/strong&gt;: Using a table of size M &amp;lt; N,  build a list for each of the table positions.    &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;h2 id="implementation"&gt;implementation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SeparateChainingHashST&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;97&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;Object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;no&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;creation&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nxt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hashCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="mh"&gt;0x7fffffff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nf"&gt;cast&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意内部类Node里用的是Object — 因为不能声明generic array.    &lt;/p&gt;
&lt;h2 id="analysis"&gt;analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;proposition&lt;/strong&gt; &lt;br/&gt;
Under the assumption of uniform hashing, the number of keys in a list is within a constant factor to N/M.  &lt;br/&gt;
&lt;em&gt;proof.&lt;/em&gt; &lt;br/&gt;
binominal distribution.   &lt;/p&gt;
&lt;p&gt;M times faster than sequential search &lt;br/&gt;
→ typical choice: M ~ N/5   &lt;/p&gt;
&lt;h1 id="3-linear-probing_1"&gt;3. Linear Probing&lt;/h1&gt;
&lt;p&gt;Another approch for collision resolution.    &lt;/p&gt;
&lt;p&gt;idea: &lt;strong&gt;open addressing&lt;/strong&gt; &lt;br/&gt;
Use an array of size &lt;strong&gt;M&amp;gt;N&lt;/strong&gt;, when a key collides, &lt;em&gt;find next open slot&lt;/em&gt;.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert: when occupied, move pointer until got open slot   &lt;/li&gt;
&lt;li&gt;search: when not found, move pointer until find or reach open slot   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;delete&lt;/em&gt;: set key to null, then for all items behind this key: set to null, then insert this key......   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;array M &lt;em&gt;must&lt;/em&gt; be larger than N ⇒ array resizing is necessary.    &lt;/p&gt;
&lt;h2 id="implementation_1"&gt;implementation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LinearProbingHashST&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Object&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;cannot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Object&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]!=&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;]!=&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;ugly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;cast&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="cluster"&gt;cluster&lt;/h2&gt;
&lt;p&gt;def. &lt;strong&gt;cluster&lt;/strong&gt; &lt;br/&gt;
A contiguous block of items.    &lt;/p&gt;
&lt;p&gt;New keys are more likely to hash into a cluster.    &lt;/p&gt;
&lt;p&gt;Knuth parking pb:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image008.png"/&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image010.png"/&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image009.png"/&gt; &lt;br/&gt;
(当年Knuth就是在证明了这个以后决定写那套书)   &lt;/p&gt;
&lt;p&gt;Typical choice: &lt;strong&gt;N/M ~ 1/2&lt;/strong&gt; (3/2 for search hit and 5/2 for search miss)   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;h1 id="4-hash-table-context_1"&gt;4. Hash Table Context&lt;/h1&gt;
&lt;p&gt;widely used in applicataions.    &lt;/p&gt;
&lt;p&gt;cost for computing hash VS cost for searching:  &lt;br/&gt;
hashCode() for strings in java 1.1: exemain only 8-9 evenly spaced characters to save time. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;p&gt;uniform hashing assumption: performance not guaranteed... &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image013.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image014.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;one-way hash functions&lt;/strong&gt; &lt;br/&gt;
Hard to find a key that hash to a desired value, or 2 keys having the same hash value.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image015.png"/&gt; &lt;br/&gt;
used for fingurprints or store passwords, but too expensive for ST implementations.    &lt;/p&gt;
&lt;h2 id="seperate-chaining-vs-linear-probing"&gt;Seperate chaining VS linear probing&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image016.png"/&gt; &lt;/p&gt;
&lt;h2 id="variations"&gt;variations&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image017.png"/&gt; &lt;/p&gt;
&lt;h2 id="st-choice-hash-tables-vs-balanced-search-trees"&gt;ST choice: hash tables VS balanced search trees&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week6/pasted_image018.png"/&gt; &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 5-2 Geometric Applications of BSTs</title><link href="https://x-wei.github.io/algoI_week5_2.html" rel="alternate"></link><published>2015-08-29T00:00:00+02:00</published><updated>2015-08-29T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-08-29:algoI_week5_2.html</id><summary type="html">&lt;h1 id="1-1d-range-search"&gt;1. 1d Range Search&lt;/h1&gt;
&lt;p&gt;Goal: &lt;em&gt;intersections&lt;/em&gt; of geometric objects.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image.png"/&gt; &lt;br/&gt;
Solution: &lt;strong&gt;BST&lt;/strong&gt; &lt;/p&gt;
&lt;h2 id="1d-range-search"&gt;1d range search&lt;/h2&gt;
&lt;p&gt;operations required:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert   &lt;/li&gt;
&lt;li&gt;search   &lt;/li&gt;
&lt;li&gt;delete   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;range search&lt;/em&gt;: all keys between k1 and k2   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;range count&lt;/em&gt;: how many keys are between k1 and k2   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ find points on an interval  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;h2 id="implementation-by-bst"&gt;implementation by BST&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;range count&lt;/strong&gt; &lt;br/&gt;
using the &lt;code&gt;rank()&lt;/code&gt; function for the BST (or use the size of a tree) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image002.png"/&gt; &lt;br/&gt;
注意什么时候要加1...   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public int size(Key hi, Key lo){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(contains(hi)) return rank(hi)-rank(lo)+1;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else return rank(hi) - rank(lo);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;range search&lt;/strong&gt; &lt;br/&gt;
类似inorder traversal的方式:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find in left subtree (if could fall into range)   &lt;/li&gt;
&lt;li&gt;check current node   &lt;/li&gt;
&lt;li&gt;find in right subtree   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image003.png"/&gt; &lt;br/&gt;
running time: R+lgN (R=nb of nodes in range)   &lt;/p&gt;
&lt;h1 id="2-line-segment-intersection_1"&gt;2. Line Segment Intersection&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Orthognal line segment intersection search&lt;/em&gt;:  &lt;br/&gt;
find all intersections given N horizontal/vertical lines &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Non-degeneracy assumption: all x-coord and y-coord are distinct.    &lt;/p&gt;
&lt;p&gt;naive algo: check all pairs...   &lt;/p&gt;
&lt;h2 id="sweep-line-algorithm"&gt;Sweep-line algorithm&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image006.png"/&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sweep a vertical line from left to right.    &lt;ul&gt;
&lt;li&gt;when hit the left end of horizontal-segment (h-seg) → insert into a BST   &lt;/li&gt;
&lt;li&gt;when hit the right end of a h-seg → delete from BST   &lt;/li&gt;
&lt;li&gt;when hit a vertical-seg: ⇒ 1d range search !    &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;关于怎么sweep的:&lt;/strong&gt; &lt;br/&gt;
没有仔细讲, 不过我觉得就是把所有的x坐标排好序, 有个&lt;a href="https://leetcode.com/problems/the-skyline-problem/"&gt;skyline问题&lt;/a&gt;也是涉及如何sweep的.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;proposition&lt;/strong&gt; &lt;br/&gt;
running time is NlgN+R (R=nb of intersections).  &lt;br/&gt;
&lt;em&gt;proof.&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sort by x-coord (or use PQ) → NlgN   &lt;/li&gt;
&lt;li&gt;insert/delete y-coord to BST → NlgN   &lt;/li&gt;
&lt;li&gt;range search → NlgN + R   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="3-kd-trees_1"&gt;3. Kd-trees&lt;/h1&gt;
&lt;p&gt;An extension of BST: &lt;em&gt;2d-keys&lt;/em&gt;.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert: insert 2d points   &lt;/li&gt;
&lt;li&gt;search   &lt;/li&gt;
&lt;li&gt;range search: &lt;em&gt;find all keys lying in a 2d rectangle (h-v rectangle)&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;range count   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="gird-implementation"&gt;gird implementation&lt;/h2&gt;
&lt;p&gt;divide space into a M-by-M grid (uniform squares). &lt;br/&gt;
space: N + M^2 &lt;br/&gt;
time: 1 + N/M^2  &lt;br/&gt;
→ choose square to balance space and time.  &lt;br/&gt;
problem: points are not uniformly distributed.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;h2 id="2d-tree"&gt;2d tree&lt;/h2&gt;
&lt;p&gt;Use a tree to represent the subdivision of the space.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2d tree&lt;/strong&gt;: recursively divide the space into 2 halfplanes &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;p&gt;construct the 2d tree by adding points: &lt;em&gt;alternating between horizontal and vertical partitioning for each level of tree&lt;/em&gt;.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;p&gt;Data structure: BST alternating x and y-coords as key.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;h2 id="range-search-for-2d-tree"&gt;Range search for 2d tree&lt;/h2&gt;
&lt;p&gt;find all points lying in a rectangle.  &lt;br/&gt;
依然类似tree traversal算法:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check point in node   &lt;/li&gt;
&lt;li&gt;find in left subtree (if could be in range — the rectangle &lt;em&gt;intersects&lt;/em&gt; the splitting line)   &lt;/li&gt;
&lt;li&gt;find in right subtree   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;analysis&lt;/strong&gt; &lt;br/&gt;
Typical case: R + lgN &lt;br/&gt;
worst case: R+ sqrt(N) (even if tree is balanced) &lt;br/&gt;
(proof is hard)   &lt;/p&gt;
&lt;h2 id="nearest-neighbour-seach"&gt;Nearest Neighbour seach&lt;/h2&gt;
&lt;p&gt;find closest point to a query point.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check dist from query point to node   &lt;/li&gt;
&lt;li&gt;check in left tree (&lt;em&gt;if could contain a closer point — 和两点连线与splitting line的角度有关系&lt;/em&gt;)   &lt;/li&gt;
&lt;li&gt;check in right tree   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;analysis&lt;/strong&gt; &lt;br/&gt;
typical case: lgN &lt;br/&gt;
worst case: N   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flocking boids&lt;/strong&gt; &lt;br/&gt;
3 simple rules to get a simulation of flocking.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image013.png"/&gt; &lt;/p&gt;
&lt;h2 id="kd-tree"&gt;Kd tree&lt;/h2&gt;
&lt;p&gt;partition the k-dim space into 2 halfspaces.  &lt;br/&gt;
cycle through k dimensions. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image014.png"/&gt; &lt;br/&gt;
(居然时一个本科生发现的!)   &lt;/p&gt;
&lt;p&gt;Nbody simulation: &lt;br/&gt;
treat clusters as an aggregated node   &lt;/p&gt;
&lt;h1 id="4-interval-search-tree_1"&gt;4. Interval search tree&lt;/h1&gt;
&lt;p&gt;1d interval search:　data are intervals   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert interval    &lt;/li&gt;
&lt;li&gt;search interval   &lt;/li&gt;
&lt;li&gt;delete interval   &lt;/li&gt;
&lt;li&gt;intersection query: find all intervals that intersects (lo,hi)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image015.png"/&gt; &lt;br/&gt;
Nondegeneracy assumption: all left endpoint of intervals are distinct.    &lt;/p&gt;
&lt;p&gt;API:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;put(Key lo, Key hi, Value val)   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;get(Key lo, Key hi)   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;delete(Key lo, Key hi)   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;Iterable&amp;lt;Key&amp;gt; intersects(Key lo, Key hi)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="interval-search-tree"&gt;Interval search tree:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;BST using left endpoint as key   &lt;/li&gt;
&lt;li&gt;in each node: store the &lt;em&gt;max right endpoint of the subtree&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image016.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;insert&lt;/strong&gt; &lt;br/&gt;
类似BST, 加上维护一下maxendpoint即可.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;search&lt;/strong&gt; &lt;br/&gt;
search &lt;em&gt;any one&lt;/em&gt; interval that intersects (lo,hi)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if node intersects, return   &lt;/li&gt;
&lt;li&gt;if left.maxendpoint &amp;lt; lo: go right   &lt;/li&gt;
&lt;li&gt;else: go left   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;*proof. * &lt;br/&gt;
主要证明一点: if no intersection to left ⇒ then no intersection to the right &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image018.png"/&gt; &lt;/p&gt;
&lt;h1 id="5-rectangle-intersection_1"&gt;5. Rectangle intersection&lt;/h1&gt;
&lt;p&gt;Goal:  find all intersection among N rectangles.  &lt;br/&gt;
(non degeneracy assumption: all x and y are distinct)    &lt;/p&gt;
&lt;p&gt;bottom line: linearithmic algo.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sweep-line algorithm:&lt;/strong&gt; &lt;br/&gt;
sweep vertical line from left to right.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when hit left part of a rect ⇒ put into an interval search tree   &lt;/li&gt;
&lt;li&gt;when hit right part of a rect ⇒ remove interval   &lt;/li&gt;
&lt;li&gt;every time befor adding ⇒ check intersection   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;reduces the 2d rect intersection pb to 1d interval search pb.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;complexity:  &lt;br/&gt;
NlgN+RlgN   &lt;/p&gt;
&lt;p&gt;summery:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_2/pasted_image019.png"/&gt; &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 5-1 Balanced Search Trees</title><link href="https://x-wei.github.io/algoI_week5_1.html" rel="alternate"></link><published>2015-08-26T16:00:00+02:00</published><updated>2015-08-26T16:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-08-26:algoI_week5_1.html</id><summary type="html">&lt;p&gt;goal: lgN for insert/search/delete operations (not necessarily &lt;em&gt;binary&lt;/em&gt; trees..) &lt;br/&gt;
3 algo: 2-3 tree, (left leaning) red-black tree, B-tree   &lt;/p&gt;
&lt;h1 id="1-2-3-search-trees"&gt;1. 2-3 Search Trees&lt;/h1&gt;
&lt;p&gt;def. &lt;strong&gt;2-3 tree&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allow 1 or 2 keys per node, &amp;amp; 2 or 3 children per node:    &lt;ul&gt;
&lt;li&gt;2-node: one key, 2 children (ordinary BST node)   &lt;/li&gt;
&lt;li&gt;3-node: 2 keys, 3 children (3 children: &lt;em&gt;less, between, more&lt;/em&gt;)   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;perfect balance&lt;/strong&gt;: every path from root to null link has the same length (2-3 tree的一个超好的性质, &lt;em&gt;类似于一个满二叉树&lt;/em&gt;!)   &lt;/li&gt;
&lt;li&gt;symmetric order: inorder traversal gives ascending order (和BST类似)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image.png"/&gt; &lt;br/&gt;
&lt;strong&gt;search&lt;/strong&gt; &lt;br/&gt;
Just follow the correct link... Natural generalization of search in BST...    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;insert&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;case 1: insert into a 2-node at bottom   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;just convert a 2-node into a 3-node   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;case 2: insert into a 3-node at bottom   &lt;ul&gt;
&lt;li&gt;create a temporary 4-node (three keys)   &lt;/li&gt;
&lt;li&gt;move middle key in 4-node into parent, split the rest two keys into two 2-nodes   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image001.png"/&gt; &lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image002.png"/&gt; &lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if parent becom a 3-node → continue the process   &lt;/li&gt;
&lt;li&gt;if arrived at the root (root is a 4-node with three keys): split it into three 2-nodes   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image004.png"/&gt; &lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;splitting a 4-node&lt;/strong&gt;: can be done in constant time (&lt;em&gt;local transformation&lt;/em&gt;).  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;h2 id="analysis"&gt;Analysis&lt;/h2&gt;
&lt;p&gt;Invariant: maintains symmetric order and perfect balance.  &lt;br/&gt;
&lt;em&gt;proof.&lt;/em&gt; &lt;br/&gt;
each transformation maintains the order and the balance, all possible transformations:  &lt;br/&gt;
这个图很好, 3-node的插入一共有三种情况: 自身是root/父亲是2-node/父亲是3-node &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;performance&lt;/strong&gt; &lt;br/&gt;
every path from root to null link has the same length.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;h2 id="implementation"&gt;Implementation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;direct implementation is complicated:    &lt;/li&gt;
&lt;li&gt;bottom line: &lt;em&gt;Could do it, but there's a better way.&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="2-red-black-bst_1"&gt;2. Red-Black BST&lt;/h1&gt;
&lt;p&gt;LLRB tree: left-leaning red-black tree.    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;BST representation of the 2-3 trees&lt;/em&gt; &lt;br/&gt;
&lt;strong&gt;use internal left-leaning links for 3 nodes&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;红色link即为internal left leaning link (红黑树就是这么来的), 用红色link连接起来的组成一个(虚拟的)3-node 或4-node.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3-node用一个red link表示:    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4-node用两个red link表示:    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image030.png"/&gt; ⇒ &lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image029.png"/&gt; or &lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image027.png"/&gt; or &lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image028.png"/&gt; &lt;/p&gt;
&lt;p&gt;example:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;h2 id="properties"&gt;properties&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;no node has two red links (不可以一个节点连两个red link)   &lt;/li&gt;
&lt;li&gt;every path from path to null link has the same number of &lt;em&gt;black&lt;/em&gt; links (想象所有red link都变为horizontal)   &lt;/li&gt;
&lt;li&gt;all red links lean left   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;h2 id="representation"&gt;representation&lt;/h2&gt;
&lt;p&gt;Each node has only one link from parent  &lt;br/&gt;
⇒ add a boolean to encode color of links (the color of the link &lt;em&gt;from parent&lt;/em&gt;).  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private class Node{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private Key key;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private Value val;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Node left, right;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    boolean color;//true means red     &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;private boolean isRed(Node nd){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if (nd==null) return false;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return nd.color;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;insert to parent 操作: 只需把color变为RED即表示该节点 被变成了和父节点一起的一个(虚拟)节点.    &lt;/p&gt;
&lt;h2 id="elementary-operations"&gt;elementary operations&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;left-rotation&lt;/strong&gt; &lt;br/&gt;
(def: &lt;em&gt;convert a right-learning red link to left.&lt;/em&gt; ) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image013.png"/&gt; &lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image014.png"/&gt; &lt;br/&gt;
(symmetric ordering and perfect black balance are maintained)    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private Node rotateLeft(Node h){    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Node s = h.right;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    h.right = s.left;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    s.left = h;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    s.color = h.color;   // not = BLACK   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    h.color = RED;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return s;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;right-rotation&lt;/strong&gt; &lt;br/&gt;
(temporarily turn a left-leaning red link to right) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image015.png"/&gt; &lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image016.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;private Node rotateRight(Node h){...}&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;right rotation 是为了应对这种情况:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image024.png"/&gt; rotateRight(c) ⇒ &lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image023.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;color-flip&lt;/strong&gt; &lt;br/&gt;
(split a 4-node, with three kyes — two red links) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image017.png"/&gt; &lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image018.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private void filpColor(Node h){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    h.color = RED;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    h.left.color = BLACK;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    h.right.color = BLACK;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="implementation_1"&gt;Implementation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Basic strategy&lt;/strong&gt; &lt;br/&gt;
Maintain &lt;em&gt;one-to-one correspondence&lt;/em&gt; with 2-3 tree by applying elementary operations.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;search&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Exactly&lt;/em&gt; the same as elementary BST. ( ⇒ The same code for floor and ceiling)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;insert&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Each insert will generate a red link&lt;/strong&gt; (then should rotate to make it legal)   &lt;/p&gt;
&lt;p&gt;插入的时候有两种可能:    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;insert into a 2-node at the bottom   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image025.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;standart BST insert   &lt;/li&gt;
&lt;li&gt;if have red right link: rotateLeft   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image021.png"/&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;insert into a 3-node    &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有三种可能: insert into left/middle/right, right最简单, left捎复杂, middle最复杂, 见下图:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image026.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;standard BST insert and color nodes   &lt;/li&gt;
&lt;li&gt;if necessary, rotate to balance 4-node, 比如:    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image031.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flip colors to pass red link to upper level   &lt;/li&gt;
&lt;li&gt;if necessary, rotate to make all links left-leaning    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image032.png"/&gt; &lt;br/&gt;
ex2: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image033.png"/&gt; &lt;/p&gt;
&lt;p&gt;视频最后一段的demo太帅了! 叹为观止!!   &lt;/p&gt;
&lt;h2 id="code"&gt;Code&lt;/h2&gt;
&lt;p&gt;原来&lt;strong&gt;只有4种(其实是3种)情况要调整&lt;/strong&gt;:    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;left = black, right = red&lt;/em&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image034.png"/&gt;    ⇒ rotateLeft(a)   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;left =red, left.right = red [这个不会出现, 因为这对于下一层来说是case 1..]&lt;/em&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image039.png"/&gt;    ⇒ rotateLeft(e) ⇒ 变为case 3    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;left = red, left.left = red&lt;/em&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image035.png"/&gt;    ⇒ rotateRight(s) ⇒ 变为case 4   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;left = red. right = red&lt;/em&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image036.png"/&gt;        ⇒ flipColor(r)   &lt;/p&gt;
&lt;p&gt;几个状态之间的转化:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image038.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只要三行代码即可处理LLRB tree !! 老爷子牛逼...... &lt;/strong&gt; &lt;br/&gt;
(这个也是在2007年algo第四版的时候才刚刚弄出来的, 以前的代码要复杂)   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private Node put(Node nd, Key k, Value v){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(nd==null) return new Node(k,v,RED);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int cmp = k.compareTo(nd.key);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(cmp==0) nd.val = v; // 这里不急着返回 -- same trick as for BSTs..   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else if(cmp&amp;lt;0) nd.left = put(nd.left, k, v);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else nd.right = put(nd.right, k, v);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    // modifications to maintain LLRB tree property:    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if( isRed(nd.right) &amp;amp;&amp;amp; !isRed(nd.left) ) nd = rotateLeft(nd);//case 1   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    //if( isRed(nd.left) &amp;amp;&amp;amp; isRed(nd.left.right) ) nd.left = rotateLeft(nd.left);// case 2 -- never happen...   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if( isRed(nd.left) &amp;amp;&amp;amp; isRed(nd.left.right) ) nd = rotateRight(nd);// case 3   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if( isRed(nd.left) &amp;amp;&amp;amp; isRed(nd.right) ) flipColor(nd);//case 4   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return nd;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这三行代码越看越精妙......    &lt;/p&gt;
&lt;h2 id="analysis_1"&gt;Analysis&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image041.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;worst case&lt;/strong&gt;: the left path is &lt;em&gt;alternating red and black&lt;/em&gt;. &lt;br/&gt;
⇒ longest path &amp;lt;= 2 * shortest path  (height&amp;lt;= 2lgN)   &lt;/p&gt;
&lt;p&gt;practical applications: height ~ 1.0 lgN   &lt;/p&gt;
&lt;p&gt;summery:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image042.png"/&gt; &lt;/p&gt;
&lt;h1 id="3-b-trees_1"&gt;3. B-trees&lt;/h1&gt;
&lt;p&gt;setting: data access in file system.  &lt;br/&gt;
&lt;em&gt;Probe is much expensive than accessing data within a page.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Goal: access data using a minimum number of probes.   &lt;/p&gt;
&lt;h2 id="b-tree"&gt;B-tree&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;def.&lt;/strong&gt; &lt;br/&gt;
external nodes: contain just keys, not links &lt;br/&gt;
internal nodes: contain key-link pairs   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;def. B-tree&lt;/strong&gt; &lt;br/&gt;
Generalize 2-3 trees by allowing up to M-1 keys per node:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;= 2 keys in root   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;= M/2 keys in other nodes   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;external nodes contain client keys   &lt;/li&gt;
&lt;li&gt;internal nodes contain copies of keys to guide search   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image043.png"/&gt; &lt;/p&gt;
&lt;h2 id="searching"&gt;Searching&lt;/h2&gt;
&lt;p&gt;similar to BST/2-3tree &lt;br/&gt;
ex. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image044.png"/&gt; &lt;/p&gt;
&lt;p&gt;(Choose M as large as possible so that M links fit into a page)   &lt;/p&gt;
&lt;h2 id="insertion"&gt;Insertion&lt;/h2&gt;
&lt;p&gt;similar to 2-3 tree &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image045.png"/&gt; &lt;/p&gt;
&lt;h2 id="analysis_2"&gt;Analysis&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image046.png"/&gt; &lt;/p&gt;
&lt;h2 id="system-implementations"&gt;System implementations&lt;/h2&gt;
&lt;p&gt;system implementations of RBtree. &lt;br/&gt;
java:  &lt;br/&gt;
&lt;code&gt;java.util.TreeMap&lt;/code&gt;, &lt;code&gt;java.util.TreeSet&lt;/code&gt;.   &lt;/p&gt;
&lt;p&gt;八卦1: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week5_1/pasted_image047.png"/&gt; &lt;/p&gt;
&lt;p&gt;八卦2: 
Sedgewick 的朋友, &lt;a href="https://fr.wikipedia.org/wiki/Philippe_Flajolet"&gt;Philippe Flajolet&lt;/a&gt;, 是一个X!    &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 4-2b Binary Search Trees</title><link href="https://x-wei.github.io/algoI_week4_2b.html" rel="alternate"></link><published>2015-08-26T00:00:00+02:00</published><updated>2015-08-26T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-08-26:algoI_week4_2b.html</id><summary type="html">&lt;p&gt;(BST是锻炼递归代码的好题目)   &lt;/p&gt;
&lt;h1 id="1-binary-search-trees"&gt;1. Binary Search Trees&lt;/h1&gt;
&lt;p&gt;def. &lt;strong&gt;BST&lt;/strong&gt; &lt;br/&gt;
A binary tree where each node has a key:  &lt;br/&gt;
for every node, the key is larger than &lt;em&gt;all nodes in left&lt;/em&gt; subtree, smaller than &lt;em&gt;all nodes in right&lt;/em&gt; subtree.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_2b/pasted_image.png"/&gt; &lt;br/&gt;
Fields: key, val, left, right   &lt;/p&gt;
&lt;h2 id="implementation"&gt;Implementation&lt;/h2&gt;
&lt;p&gt;An inner class of BST nodes:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private class Node{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private Key key;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private Value val;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private Node left, right;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    public Node(Key k, Value v){...}   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;skeleton implementation of BST:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class BST&amp;lt;Key implements Comparable&amp;lt;Key&amp;gt;, Value&amp;gt;{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;private Node root;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;private class Node{...}   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public Value get(Key k){...}   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public void put(Key k, Value v){}   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public void delete(Key k){}   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public Iterable&amp;lt;Key&amp;gt; iterator(){}   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;search&lt;/strong&gt; &lt;br/&gt;
recursive version:  &lt;br/&gt;
(或者把这个函数写到Node类里面也可以. )   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private Value get(Node nd, Key k){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(nd==null) return null; // search miss   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int cmp = k.compareTo(nd.key);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(cmp==0) return nd.val; // search hit   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else if (cmp&amp;gt;0) return get(nd.right, k);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else return get(nd.left, k);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;non-recursive version:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public Value get(Key k){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Node nd=root;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    while(root!=null){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        int cmp = k.compareTo(nd.key);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if (cmp==0) return nd.val;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        else if(cmp&amp;gt;0) nd = nd.right;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        else nd = nd.left;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return null;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;insert&lt;/strong&gt; &lt;br/&gt;
recursive version:  &lt;br/&gt;
(注意这个recursive函数的返回值不是void! 这里是一个trick: 返回的是在分叉以前的那个节点)   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private Node put(Node nd, Key k, Value v){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(nd==null) return new Node(k, v);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int cmp = k.compareTo(nd.key);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(cmp==0) nd.val = v;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else if(cmp&amp;gt;0) nd.right = put(nd.right, k, v);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else nd.left = put(nd.left, k, v);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return nd;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;non-recursive version: &lt;br/&gt;
不如递归版本优美...   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public void put(Key k, Value v){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Node nd = root;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    while(true){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        int cmp = k.compareTo(nd.key);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if(cmp==0) {   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            nd.val = v; break;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        else if(cmp&amp;gt;0){    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            if(nd.right!=null) nd = nd.right;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            else {nd.right = new Node(k,v); break;}   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        else if (nd.left!=null) {    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            if(nd.left!=null) nd = nd.left;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            else {nd.left = new Node(k,v); break;}   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="analysis"&gt;Analysis&lt;/h2&gt;
&lt;p&gt;complexity: depth of the BST.    &lt;/p&gt;
&lt;p&gt;shape of BST: depends on how the keys come in (order of insertion).  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_2b/pasted_image001.png"/&gt; &lt;br/&gt;
if keys come in &lt;em&gt;random&lt;/em&gt; order: could be pretty well balanced.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BST and quick-sort partitionning&lt;/strong&gt; &lt;br/&gt;
&lt;em&gt;The root of BST is just the pivot in quick sort partitioning  * &lt;br/&gt;
if all keys are distinct ⇒ one-to-one correspondence between quick sort and BST.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_2b/pasted_image002.png"/&gt; &lt;br/&gt;
⇒ &lt;strong&gt;proposition&lt;/strong&gt; &lt;br/&gt;
if all keys are distinct and come in randome order, the average number of compares for a search/insert is ~2lnN (or 1.39lgN).  &lt;br/&gt;
&lt;/em&gt;proof.* &lt;br/&gt;
证明见quicksort那里的数学推导...    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;proposition &lt;/strong&gt;(Reed, 2003) &lt;br/&gt;
N distinct keys come in random order, average tree height = 4.300lnN   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Worst-case:&lt;/strong&gt; &lt;br/&gt;
The tree becomes just like a linked list: ~N for insertion and search   &lt;/p&gt;
&lt;h1 id="2-oredered-operations-in-bst_1"&gt;2. Oredered Operations in BST&lt;/h1&gt;
&lt;p&gt;task: ordered opeartions   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;min()/max()&lt;/code&gt;: min/max key   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteMin()/deleteMax()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;floor(Key k)/ceiling(Key k)&lt;/code&gt;: largest key &amp;lt;=k / smallest key &amp;gt;=k   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;rank(Key k)&lt;/code&gt;: nb of keys &amp;lt; key   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;select(int i)&lt;/code&gt;: key with rank=i   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Iterator&amp;lt;Key&amp;gt; keys(lo, hi)&lt;/code&gt;: iterates through [lo, hi]   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="minmax"&gt;min/max&lt;/h2&gt;
&lt;p&gt;easy &lt;br/&gt;
min: left-most &lt;br/&gt;
max: right-most &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_2b/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;h2 id="floorceiling"&gt;floor/ceiling&lt;/h2&gt;
&lt;p&gt;a little more complexed...    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;floor (ceiling is similar)&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if k==nd.key   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;return nd.val   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if k&amp;lt;nd.key   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the floor &lt;em&gt;must&lt;/em&gt; be in the left subtree   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if k&amp;gt;nd.key   &lt;ul&gt;
&lt;li&gt;如果min(nd.right) &amp;gt; k: 返回nd.val   &lt;/li&gt;
&lt;li&gt;如果min(nd.right) &amp;lt;= k: go to right   &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public Value floor(Node nd, Key k){// largest element with key &amp;lt;= k       &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;int cmp = k.compareTo(nd.key);         &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;if(cmp==0) return nd.val;//case 1   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;else if(cmp&amp;lt;0) return floor(nd.left, k);//case 2   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;if (nd.right==null || min(nd.right).compareTo(k)&amp;gt;0) //case 3   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return nd.val;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;else return floor(nd.right);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他提供的版本和我写的不一样: 递归函数floor返回的也是一个Node:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_2b/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;h2 id="rankselect"&gt;rank/select&lt;/h2&gt;
&lt;p&gt;In each node, store the number of nodes in the subtree: &lt;em&gt;add an extra field&lt;/em&gt;.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;size&lt;/strong&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private class Node{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private int count;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    //...   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public int size(){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return size(root);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public int size(Node nd){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(nd==null) return 0;// this is why we do not put size() inside the class Node!   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return nd.count;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public void put(Node nd, Key k, Value v){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    //.....   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    nd.count = size(nd.left)+size(nd.right)+1;//maintain count for each node   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return nd;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;rank&lt;/strong&gt; &lt;br/&gt;
(return nb of keys &amp;lt; k)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if nd.key==k   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;return size(nd.left)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if nd.key&amp;gt;k   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;return rank(nd.left, k)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if nd.key&amp;lt;k   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;return size(nd.left)+1+rank(nd,right, k)   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private int rank(Node nd, Key k){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(nd==null) return 0;//remember null case   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int cmp = k.compareTo(nd.key);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(cmp==0) return size(nd.left)   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else if (cmp&amp;lt;0) return rank(nd.left, k);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else return size(nd.left)+1+rank(nd.right,k);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;select() similar...   &lt;/p&gt;
&lt;h2 id="iteration"&gt;iteration&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Inorder traversal 中序遍历&lt;/strong&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public Iterable&amp;lt;Key&amp;gt; keys(){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Queue&amp;lt;Key&amp;gt; q = new Queue&amp;lt;Key&amp;gt;();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    inorder(root, q);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return q;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;private void inorder(Node nd, Queue&amp;lt;Key&amp;gt; q){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(nd==null) return;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    inorder(nd.left);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    q.enqueue(nd.key);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    inorder(nd.right);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week4_2b/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;property&lt;/strong&gt; &lt;br/&gt;
inorder-traversal gives the keys &lt;em&gt;in ascending order&lt;/em&gt;.  &lt;br/&gt;
(proof by induction)   &lt;/p&gt;
&lt;h1 id="3-deletions-in-bst_1"&gt;3. Deletions in BST&lt;/h1&gt;
&lt;p&gt;one final function to implement: delete(Key k), deleteMin(), deleteMax() &lt;br/&gt;
→ and remember to update the count field...   &lt;/p&gt;
&lt;p&gt;(感觉这篇文章其实就讲的很清楚了: &lt;a href="http://www.algolist.net/Data_structures/Binary_search_tree/Removal"&gt;http://www.algolist.net/Data_structures/Binary_search_tree/Removal&lt;/a&gt;   这个在递归函数里使用了parent这个参数)   &lt;/p&gt;
&lt;h2 id="lazy-approch"&gt;lazy approch&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;put(k, null)&lt;/code&gt;, and leave the key in the tree (tombstone) &lt;br/&gt;
→ not good if have large number of tombstons...    &lt;/p&gt;
&lt;h2 id="deleteminmax"&gt;deleteMin/Max&lt;/h2&gt;
&lt;p&gt;go the the left-most node → replace it with its right node.  &lt;br/&gt;
Recusive function with the &lt;em&gt;returning-node trick&lt;/em&gt;:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private Node deleteMin(Node nd){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(nd==null) return null; // this might not happen   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(nd.left==null) return nd.right;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else nd.left = deleteMin(nd.left);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    nd.count = size(nd.left)+1+size(right);//remember to maintain the count field   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return nd;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个递归的技巧又一次使用了.   &lt;/p&gt;
&lt;h2 id="hibbard-deletion"&gt;Hibbard deletion&lt;/h2&gt;
&lt;p&gt;first find node with the key to delete, 3 cases:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 children:    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;simply set parent link to null &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_2b/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 child:    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;replace parent link with the child &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_2b/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2 children (most subtle)&lt;/strong&gt; &lt;ul&gt;
&lt;li&gt;first replace node key with smallest key in right subtree   &lt;/li&gt;
&lt;li&gt;remove the smallest key in right subtree   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week4_2b/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;code of Hibbard deletion&lt;/strong&gt; &lt;br/&gt;
Again (for the 3rd time) use the &lt;em&gt;return-nd trick&lt;/em&gt;...   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private Node delete(Node nd, Key k){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(nd==null) return null;// search miss   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int cmp = k.compareTo(nd.key);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(cmp&amp;gt;0) nd.right = delete(nd.right, k);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else if(cmp&amp;lt;0) nd.left = delete(nd.left,k);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    else{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        //if nd is the node to delete   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if(nd.left==null) return nd.right;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        if(nd.right==null) return nd.left;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        Key k2 = min(nd.right);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        nd.key = k2;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        nd.right = delete(nd.right, k2);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    nd.count = size(nd.left)+1+size(nd.right);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return nd;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public void delete(Key k){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    root = delete(root, k);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;感觉用了recursive return-nd 这个trick的实现很漂亮.... 比那篇博客里放一个参数进递归函数以及用auxroot的办法要好不少...    &lt;/p&gt;
&lt;h2 id="analysis_1"&gt;Analysis&lt;/h2&gt;
&lt;p&gt;problem: &lt;em&gt;not symmetric&lt;/em&gt; &lt;br/&gt;
If random insert and delete for a while ⇒ tree become much less balanced ! Tree height tend to be sqrt(N).    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;summery&lt;/strong&gt; &lt;br/&gt;
BST is much better in average case, but not guaranteed for worst case.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_2b/pasted_image009.png"/&gt; &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 4-2a Elementry Symbol Tables</title><link href="https://x-wei.github.io/algoI_week4_2a.html" rel="alternate"></link><published>2015-08-25T00:00:00+02:00</published><updated>2015-08-25T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-08-25:algoI_week4_2a.html</id><summary type="html">&lt;h1 id="1-symbol-table-api"&gt;1. Symbol Table API&lt;/h1&gt;
&lt;p&gt;key-value pair abstraction    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;insert&lt;/strong&gt; a value with a key   &lt;/li&gt;
&lt;li&gt;given a key, &lt;strong&gt;search&lt;/strong&gt; for its value   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="association-array-abstraction"&gt;Association array abstraction&lt;/h2&gt;
&lt;p&gt;Associate a value to a key — generalized array: &lt;em&gt;a[key]=val&lt;/em&gt;.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class ST&amp;lt;Key, Value&amp;gt;{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    void put(Key k, Value v);//remove key if value=null   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Value get(Key k);//return null if key is absent   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    void delete(Key k);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    boolean contains(Key k);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    boolean isEmpty();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int size();   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Iterable&amp;lt;Key&amp;gt; keys();//better to return an ordered sequence of keys   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;conventions:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;values are not null   &lt;/li&gt;
&lt;li&gt;get() returns null if key not present   &lt;/li&gt;
&lt;li&gt;put() can &lt;em&gt;overwrite&lt;/em&gt; older value   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ some one-line implementations:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contains: &lt;code&gt;return get(k)!=null;&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;delete: &lt;code&gt;put(k, null);&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Assume keys to be comparable: &lt;code&gt;class ST&amp;lt;Key implements Comparable&amp;lt;Key&amp;gt;, Value&amp;gt;&lt;/code&gt;— can thus use &lt;code&gt;compareTo()&lt;/code&gt; method.  &lt;br/&gt;
Else →  we can only use the &lt;code&gt;equals()&lt;/code&gt; method...  &lt;br/&gt;
Be careful when implementing the equals method: 坑不少...  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_2a/pasted_image.png"/&gt; &lt;/p&gt;
&lt;h1 id="2-elementary-implementations_1"&gt;2. Elementary implementations&lt;/h1&gt;
&lt;p&gt;naive implementations   &lt;/p&gt;
&lt;h2 id="using-unordered-linked-list"&gt;using unordered linked list&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;ListNode{key, value, next}&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;search: scan through all keys ~N   &lt;/li&gt;
&lt;li&gt;insert: scan through, if not found, add to front ~N   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week4_2a/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;h2 id="using-ordered-array"&gt;using ordered array&lt;/h2&gt;
&lt;p&gt;using 2 arrays: &lt;em&gt;keys[] (sorted), vals[]&lt;/em&gt; &lt;br/&gt;
⇒ can improve performance by binary search   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;search operation&lt;/strong&gt; &lt;br/&gt;
write a function rank() that returns the number of keys &amp;lt; k searched.  &lt;br/&gt;
找不到的时候: &lt;em&gt;比k小的元素个数=lo (lo&amp;gt;hi, 可以想想当hi=lo以后是怎么移动的)&lt;/em&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compareTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using rank() to implement the get() method:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compareTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;insert operation&lt;/strong&gt; &lt;br/&gt;
Like insertion sort, time complexity is ~N for each insert.    &lt;/p&gt;
&lt;p&gt;summery:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_2a/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;h1 id="3-ordered-opeartions_1"&gt;3. Ordered Opeartions&lt;/h1&gt;
&lt;p&gt;When keys are comparable ⇒ provide &lt;em&gt;more functionalities&lt;/em&gt; in the API.  &lt;br/&gt;
for example:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;min()/max()&lt;/code&gt;: min/max key   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteMin()/deleteMax()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;floor(Key k)/ceiling(Key k)&lt;/code&gt;: largest key &amp;lt;=k / smallest key &amp;gt;=k   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;rank(Key k)&lt;/code&gt;: nb of keys &amp;lt; key   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;select(int i)&lt;/code&gt;: key with rank=i   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Iterator&amp;lt;Key&amp;gt; keys(lo, hi)&lt;/code&gt;: iterates through [lo, hi]   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week4_2a/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week4_2a/pasted_image003.png"/&gt; &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 4-1 Priority Queue</title><link href="https://x-wei.github.io/algoI_week4_1.html" rel="alternate"></link><published>2015-08-24T00:00:00+02:00</published><updated>2015-08-24T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-08-24:algoI_week4_1.html</id><summary type="html">&lt;h1 id="1-api-and-elementary-implementations"&gt;1. API and elementary implementations&lt;/h1&gt;
&lt;p&gt;Collection: data struct for inserting and deleting items (ex. stack and queue).  &lt;br/&gt;
Priority queue: a special kind of collection — remove &lt;em&gt;largest/smallest&lt;/em&gt; element.    &lt;/p&gt;
&lt;p&gt;API:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="k"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Kye&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MaxPQ&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Key&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;Key&lt;/span&gt; &lt;span class="n"&gt;delMax&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nb"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;     &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;Key&lt;/span&gt; &lt;span class="k"&gt;max&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="pq-client-example"&gt;PQ client example&lt;/h2&gt;
&lt;p&gt;find &lt;em&gt;M largest&lt;/em&gt; elements from N items. (N is too huge to store) &lt;br/&gt;
⇒ 思路: 用 &lt;strong&gt;Min&lt;/strong&gt;&lt;em&gt;PQ&lt;/em&gt;, 当size&amp;gt;M时删掉最小元素 — 最后剩下的就是最大的M个元素了.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image.png"/&gt; &lt;/p&gt;
&lt;h2 id="elementarynaive-implementations"&gt;elementary(naive) implementations&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;unordered array implementation&lt;/strong&gt; &lt;br/&gt;
insert ~1,  &lt;br/&gt;
remove ~N   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ordered array implementation&lt;/strong&gt; &lt;br/&gt;
insert ~N — ~ insertion sort, &lt;br/&gt;
remove ~1   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;goal&lt;/strong&gt;:  &lt;br/&gt;
insert O(lgN) &amp;amp; remove max O(lgN)   &lt;/p&gt;
&lt;h1 id="2-binary-heaps_1"&gt;2. Binary Heaps&lt;/h1&gt;
&lt;p&gt;binary heap: a special kind of &lt;em&gt;complete binary tree&lt;/em&gt;.    &lt;/p&gt;
&lt;p&gt;def. "&lt;strong&gt;complete binary tree"&lt;/strong&gt; &lt;br/&gt;
All level except the last level are full, all nodes in the last level are as far left as possible.   &lt;br/&gt;
完全二叉树大概长这个样子:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;p&gt;property: a complete binary tree with N items has height = lgN.    &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;binary heap&lt;/strong&gt; &lt;br/&gt;
Binary heap is a complete binary tree that satisfies: &lt;em&gt;each node &amp;gt;= any of its 2 children&lt;/em&gt; ("heap ordering").    &lt;/p&gt;
&lt;p&gt;property of binary heap:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;max element is root   &lt;/li&gt;
&lt;li&gt;height is lgN   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;each node still makes a heap&lt;/em&gt; (use this property to construct heap from bottom up)   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="array-representation-of-binary-heap"&gt;Array representation of binary heap&lt;/h2&gt;
&lt;p&gt;Use an array &lt;code&gt;a[]&lt;/code&gt; to represent a complete binary tree: very easy to get children and parent.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index starting from 1&lt;/strong&gt; (root = a[1], do not use a[0])    &lt;/li&gt;
&lt;li&gt;for node at index &lt;code&gt;i&lt;/code&gt;, its children are: &lt;code&gt;i*2&lt;/code&gt; and &lt;code&gt;i*2+1&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;for node at index &lt;code&gt;i&lt;/code&gt; (i&amp;gt;1), its parent is: &lt;code&gt;i/2&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;h2 id="implementation"&gt;Implementation&lt;/h2&gt;
&lt;p&gt;简言之就是:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;p&gt;内部成员变量:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class MaxPQ&amp;lt;Key implements Comparable&amp;lt;Key&amp;gt;&amp;gt;{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private Key[] a;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    private int N;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;siftup (swim)&lt;/strong&gt; &lt;br/&gt;
if a node is larger than its parent: &lt;em&gt;exchange with parent until heap ordering is restored.&lt;/em&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k/2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;exch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⇒ &lt;strong&gt;use siftup for inserting elements&lt;/strong&gt; &lt;br/&gt;
when inserting an element, first append it to the end of the array, then siftup the element to its right position.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public void insert(Key k){    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;a[N++]=x;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;swim(N);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;siftdown (sink)&lt;/strong&gt; &lt;br/&gt;
if a node is smaller than its children: &lt;em&gt;exchange it with the bigger child.&lt;/em&gt; 用公司高层变动来类比很形象...    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maxIndex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k*2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;maxIndex&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k*2+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maxIndex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxIndex&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;exch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;maxIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maxIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;⇒ use siftdown for deleting max operation&lt;/strong&gt; &lt;br/&gt;
First put a[N] to the position of root, then sink. (注意要防止loitering)   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;delMax&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N--&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avoid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loitering&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="analysis"&gt;Analysis&lt;/h2&gt;
&lt;p&gt;insert: ~lgN &lt;br/&gt;
remove max: ~lgN   &lt;/p&gt;
&lt;p&gt;improvements:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use a &lt;strong&gt;d-way heap&lt;/strong&gt; instead of a 2-way heap (for ex. 3-way heap, the children of i are i&lt;em&gt;3, i&lt;/em&gt;3+1, i*3+2, the parent of i is i/3)   &lt;/li&gt;
&lt;li&gt;Fibonacci heap: insert is &lt;em&gt;~1&lt;/em&gt;, remove max still ~lgN, (but too complicated to use in practice).    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;p&gt;considerations:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use immutable keys to avoid client from changing the keys (&lt;code&gt;final&lt;/code&gt; keyword in java)   &lt;/li&gt;
&lt;li&gt;underflow/overflow: throw exceptions for delMax() when empty, use resizing array for implementation.   &lt;/li&gt;
&lt;li&gt;expand the API with other operations: remove an arbitrary item, change the prority of an item (like handling an array)...   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="3-heapsort_1"&gt;3. Heapsort&lt;/h1&gt;
&lt;p&gt;Basic idea:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a max heap with all N entries &lt;strong&gt;("heap-construction")&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;then repeatedly remove all N items &lt;strong&gt;("sortdown")&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="implementation_1"&gt;Implementation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;heap construction&lt;/strong&gt; &lt;br/&gt;
Construct the heap using a &lt;strong&gt;bottom-up&lt;/strong&gt; method: build the heaps with small size first.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one-node heaps (jus leaf node of heap): need not consider   &lt;/li&gt;
&lt;li&gt;larger heaps: children(subtrees) are already heap-order → just perform sink operation for root   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ &lt;em&gt;sink elements at indices from N/2 to 1&lt;/em&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;for(int k=N/2; k&amp;gt;=1; k++)   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;sink(k);&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;→ complexity is &lt;strong&gt;linear&lt;/strong&gt;, see analysis below.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;heap destruction &lt;/strong&gt; &lt;br/&gt;
now that we have a max-heap, to get the sorted array &lt;em&gt;in-place,&lt;/em&gt; simply do:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;while(N&amp;gt;1){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;exch(a,1, N--);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;sink(1);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="analysis_1"&gt;Analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;proposition&lt;/strong&gt; &lt;br/&gt;
Heap construction uses &lt;strong&gt;&amp;lt;2N&lt;/strong&gt; compares and exchanges.  &lt;br/&gt;
&lt;em&gt;proof&lt;/em&gt; &lt;br/&gt;
一个有h层的heap, 高度为k的subtree有 2^(h-k)个, 每个subtree最多可以交换k次(从root交换到最底层)  &lt;br/&gt;
→ 每一层最多有 k*2^(h-k) 次交换  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image007.png"/&gt; &lt;br/&gt;
(第一个等式可以用数学归纳法证...)  &lt;br/&gt;
&lt;a href=""&gt;详细证明见http://algs4.cs.princeton.edu/24pq/&lt;/a&gt;  (Q20答案)   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;proposition&lt;/strong&gt; &lt;br/&gt;
Heapsort use &amp;lt; 2NlgN compares and exchanges.    &lt;/p&gt;
&lt;p&gt;Heapsort is the first &lt;em&gt;in-place&lt;/em&gt; sorting algorithm with NlgN &lt;em&gt;worst-case&lt;/em&gt; performance.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;p&gt;⇒ heapsort is &lt;em&gt;optimal for time and space&lt;/em&gt;, but:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inner loop is longer than quicksort   &lt;/li&gt;
&lt;li&gt;poor use of cache memory (too many references to cache — look far away from the array entry when going down through the tree)   &lt;/li&gt;
&lt;li&gt;not stable: because it does long-distance exchanges   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Summary:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;h1 id="4-event-driven-simulation_1"&gt;4. Event-driven simulation&lt;/h1&gt;
&lt;p&gt;Goal: simulating the motion of N particles in elastic collision (using a priority queue).  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;h2 id="model"&gt;model&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image009.png"/&gt; &lt;br/&gt;
bouncing balls (without collision) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;p&gt;Ball class:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;p&gt;challenge: which objects to check? How to do it efficently ?   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time driven simulation&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;upate the position of balls every &lt;code&gt;dt&lt;/code&gt; seconds   &lt;/li&gt;
&lt;li&gt;if overlap detected: figure how the velocity change and continue the simulation.    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;problem with time-driven simulation:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1/2*N^2 overlap check per time unit   &lt;/li&gt;
&lt;li&gt;if dt small: too much calculation   &lt;/li&gt;
&lt;li&gt;if dt too large: might miss collisions   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="event-driven-simulation"&gt;Event driven simulation&lt;/h2&gt;
&lt;p&gt;change state only when something happens   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;particles move in straight line before collision   &lt;/li&gt;
&lt;li&gt;→ collision time can be &lt;em&gt;predicted&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;maintain PQ for collisions, key=collision time    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;collision prediction&lt;/strong&gt; &lt;br/&gt;
input: each particle has radius &lt;code&gt;s&lt;/code&gt;, position &lt;code&gt;(rx, ry)&lt;/code&gt;, velocity &lt;code&gt;(vx, vy)&lt;/code&gt;. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image013.png"/&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image014.png"/&gt; &lt;br/&gt;
(美国高中物理这么凶残?...)   &lt;/p&gt;
&lt;h2 id="implementation_2"&gt;Implementation&lt;/h2&gt;
&lt;p&gt;anyway, 这个是封装好的类: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image015.png"/&gt; &lt;br/&gt;
注意, 使用了count记录一个particle到目前为止的碰撞次数.    &lt;/p&gt;
&lt;p&gt;initialization: &lt;strong&gt;quadratic&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fill PQ with all &lt;em&gt;potential&lt;/em&gt;  particle-particle collisions   &lt;/li&gt;
&lt;li&gt;Fill (the same) PQ with all &lt;em&gt;potential&lt;/em&gt;  particle-wall collisions   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Main loop &lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get next event from PQ, event time = t   &lt;/li&gt;
&lt;li&gt;ignore if the event is &lt;em&gt;invalidated&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;advance all particles to time t   &lt;/li&gt;
&lt;li&gt;update velocities   &lt;/li&gt;
&lt;li&gt;predict future collisions and insert to PQ   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image018.png"/&gt; &lt;br/&gt;
判断invalidate:  &lt;br/&gt;
一个event构造(predict)时记录粒子构造时刻的碰撞次数(countA, countB), &lt;br/&gt;
然后在调用invalidate的时候, 如果粒子的碰撞次数发生了改变, 则返回false.  &lt;br/&gt;
(详见他们的代码: &lt;a href="http://algs4.cs.princeton.edu/61event/CollisionSystem.java.html"&gt;http://algs4.cs.princeton.edu/61event/CollisionSystem.java.html&lt;/a&gt;)   &lt;/p&gt;
&lt;p&gt;Event class:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image016.png"/&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week4_1/pasted_image017.png"/&gt; &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 3-2 Quicksort</title><link href="https://x-wei.github.io/algoI_week3_2.html" rel="alternate"></link><published>2015-08-22T00:00:00+02:00</published><updated>2015-08-22T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-08-22:algoI_week3_2.html</id><summary type="html">&lt;p&gt;(maybe best algorithm for sorting.)   &lt;/p&gt;
&lt;h1 id="1-quicksort"&gt;1. Quicksort&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Idea:&lt;/strong&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;shuffle the array     &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Partition&lt;/em&gt; the array into two subarrays to left and right of pivot  (*now pivot is &lt;strong&gt;*in its final position&lt;/strong&gt;)   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;no larger entry to the left of pivot   &lt;br/&gt;
no smaller entry to the right of pivot     &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sort each subarray recursively     &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image.png"/&gt; &lt;/p&gt;
&lt;h2 id="implemetation"&gt;Implemetation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The partition process:&lt;/strong&gt; &lt;br/&gt;
这个方法也比较巧妙.  &lt;br/&gt;
Use 2 pointers i and j (个人觉得用hi, lo, pivot更好...) :    &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image001.png"/&gt; &lt;br/&gt;
→ a[i]&amp;gt;=a[lo], a[j]&amp;lt;&lt;strong&gt;=&lt;/strong&gt;a[lo] (注意是大于&lt;strong&gt;等于&lt;/strong&gt;/小于&lt;strong&gt;等于&lt;/strong&gt;)    &lt;br/&gt;
⇒ exchange i and j    &lt;br/&gt;
→ Scan until i and j cross (ie. j&amp;lt;=i)    &lt;br/&gt;
⇒ finally exchange lo with &lt;strong&gt;j&lt;/strong&gt; &lt;br/&gt;
函数的签名定义的好: 把lo到hi部分的数组分成两部分, 并返回分割点的index.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="c1"&gt;--; //a[j]&amp;lt;=a[lo]   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="c1"&gt;--);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;exch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;its&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个函数其实并不好写对:     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test for cross pointers is not trival (ex. edge case: the pivot is the smallest/largest entry in the range)   &lt;/li&gt;
&lt;li&gt;i&amp;lt;=hi is necessary !    &lt;/li&gt;
&lt;li&gt;for keys equal to a[lo]: better to stop at them   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;invariance:    &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quicksort:   &lt;/strong&gt; &lt;br/&gt;
使用partition函数和辅助sort函数(recursive).  注意在整个流程开始以前先shuffle一下.     &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;private static void sort(Comparable[] a, int lo, int hi){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    if(hi&amp;lt;=lo) return;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int pivot = partition(a, lo, hi);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    sort(a,lo,pivot-1);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    sort(a,pivot+1,hi);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    return;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;public static void sort(Comparable[] a){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    StdRandom.shuffle(a); // don't forget to shuffle the array   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    sort(a,0,a.length-1);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The randomness is preserved: the subarrays after partitionning is still randomly ordered.      &lt;/p&gt;
&lt;h2 id="analysis"&gt;Analysis&lt;/h2&gt;
&lt;p&gt;Performance: ~40% faster than mergesort.      &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Best case&lt;/strong&gt; &lt;/p&gt;
&lt;h1 id="compares-nlgn_1"&gt;compares = NlgN&lt;/h1&gt;
&lt;p&gt;(each partition will divide the array in half)     &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Worst case  &lt;/strong&gt; &lt;/p&gt;
&lt;h1 id="compares-12n2"&gt;compares = 1/2*N^2&lt;/h1&gt;
&lt;p&gt;N+(N-1)+...+1 &lt;br/&gt;
if the array is already in order, &lt;em&gt;each partition will have one subarray of length=0&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Average case  &lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;proposition  &lt;/strong&gt; &lt;br/&gt;
On average, for array with N distinct keys, the #compares =  ~2NlnN, #exchanges = ~1/2&lt;em&gt;NlnN.    &lt;br/&gt;
&lt;/em&gt;Proof.*    &lt;br/&gt;
C(N) := # compares for N entries   &lt;br/&gt;
pivot 在N个数离的排名是uniform的    &lt;br/&gt;
接下来的数学推到很漂亮(不过可能没啥用..)     &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image003.png"/&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image004.png"/&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image006.png"/&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(上面最后一行写错了... 是2NlnN...orz)
random shuffle: probalistic guarantee against worst case.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pitfalls    &lt;/strong&gt; &lt;br/&gt;
implementations will get &lt;em&gt;quadratic&lt;/em&gt; performance if array:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is sorted or reverse sorted   &lt;/li&gt;
&lt;li&gt;has many duplicates (even if randomized)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Staility  &lt;/strong&gt; &lt;br/&gt;
Quicksort is &lt;strong&gt;NOT&lt;/strong&gt; stable.   &lt;br/&gt;
partitionning can make long range exchanges   &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;h2 id="practical-improvements"&gt;Practical improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cutoff to insertion sort for &amp;lt;10 items    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ ~20% improvement    &lt;br/&gt;
Or we can leave the small subarrays unsorted and sort them at last using insertion sort      &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;estimate median by sampling 3 items       &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image008.png"/&gt; &lt;br/&gt;
 → 10% improvement     &lt;/p&gt;
&lt;h1 id="2-selection_1"&gt;2. Selection&lt;/h1&gt;
&lt;p&gt;Goal: &lt;em&gt;given un array, find the kth largest item.&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upper bound for this problem: NlgN (just sort the array)    &lt;/li&gt;
&lt;li&gt;for small k (ex k=1,2,3), the upper bound is N (one-pass/two-pass)     &lt;/li&gt;
&lt;li&gt;Lower bound is N: at least have to look at everything     &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="quick-select"&gt;Quick select&lt;/h2&gt;
&lt;p&gt;Algo proposed also by Hoare:      &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;partition the array into two arrays left of pivot and right of pivot.      &lt;/li&gt;
&lt;li&gt;if pivot==k: return      &lt;/li&gt;
&lt;li&gt;continue the partition for just one of the subarrays       &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;类似于二分查找的过程....  &lt;br/&gt;
注意这里&lt;strong&gt;是不用递归的&lt;/strong&gt;! 因为partition函数返回的直接就是pivot&lt;em&gt;在整个数组里的&lt;/em&gt;位置!    &lt;/p&gt;
&lt;h2 id="implementation"&gt;Implementation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;privater&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;StdRandom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;这里不太理解为什么会在hi&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;lo的时候直接返回a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="analysis_1"&gt;Analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Proposition  &lt;/strong&gt; &lt;br/&gt;
Quick selection takes &lt;strong&gt;linear&lt;/strong&gt; time on average.   &lt;br/&gt;
*proof  * &lt;br/&gt;
intuitively, each partition will ct the subarray size in half:  &lt;br/&gt;
N+N/2+N/4+... = 2N   &lt;br/&gt;
formal analysis 略...   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;worst case&lt;/strong&gt;: quadratic (but very rare to happen)   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theoretical results&lt;/strong&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;h1 id="3-duplicate-keys_1"&gt;3. Duplicate keys&lt;/h1&gt;
&lt;p&gt;if array contains many duplicate keys.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;huge array     &lt;/li&gt;
&lt;li&gt;small number of distinct keys     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;for mergesort  &lt;/strong&gt; &lt;br/&gt;
insensitive... always ~NlgN compares.     &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;for quicksort  &lt;/strong&gt; &lt;br/&gt;
Will get &lt;em&gt;quadratic&lt;/em&gt; time if not stop on equal keys. (found in 1990s)    &lt;br/&gt;
mistake: put all items equal to pivot *to just one side   * &lt;br/&gt;
→ N^2 compares if all keys are equal from lo to hi.  &lt;br/&gt;
correct: put all items equal to pivot in their final place.    &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;h2 id="3-way-partitionning"&gt;3-way partitionning&lt;/h2&gt;
&lt;p&gt;(by Dijkstra)   &lt;br/&gt;
partition the array into 3 parts:     &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;p&gt;Dijkstra's 3-way partition algo:  &lt;br/&gt;
使用3个指针: lt指向中间部分的左边界, gt指向右边界;  i指针从左向右扫描, 算法很subtle:     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lt=lo, gt=hi, i=lo   &lt;/li&gt;
&lt;li&gt;if a[i]==v : i++   &lt;/li&gt;
&lt;li&gt;if a[i]&amp;lt;v: exch(i,lt), i++, lt++   &lt;/li&gt;
&lt;li&gt;if a[i]&amp;gt;v: exch(i,gt), gt--    &lt;/li&gt;
&lt;li&gt;repeat until i and gt cross (i&amp;gt;gt)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;invariance&lt;/em&gt;&lt;/strong&gt;:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[lo, lt)&lt;/code&gt; &lt;strong&gt;&lt;em&gt;all &amp;lt; v&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[lt, i)&lt;/code&gt; &lt;strong&gt;&lt;em&gt;all == v&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(gt, hi]&lt;/code&gt; &lt;strong&gt;&lt;em&gt;all &amp;gt;v&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image013.png"/&gt; &lt;/p&gt;
&lt;h2 id="implementation-3-way-quick-sort"&gt;Implementation: 3-way quick sort&lt;/h2&gt;
&lt;p&gt;不必再写partition函数, 直接在sort递归函数里面.     &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image014.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;递归函数别忘了先写终止条件&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;不能写&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;exch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;exch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;--);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image015.png"/&gt; &lt;br/&gt;
当N个数有很多重复的时候, lower bound可以变小于NlgN:     &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image016.png"/&gt; &lt;br/&gt;
And Sedgewick proved that the 3-wy partition is propotional to the lower bound....     &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image017.png"/&gt; &lt;/p&gt;
&lt;h1 id="4-system-sorts_1"&gt;4. System Sorts&lt;/h1&gt;
&lt;p&gt;Arrays.sort() in java:   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;import java.util.Arrays;&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image018.png"/&gt; &lt;br/&gt;
quicksort for primitive arrays, mergesort for objects: java设计者认为如果用obj array表示空间不是问题...   &lt;/p&gt;
&lt;p&gt;Pb in java's system sort: killer input exsit (havn't shuffle)...    &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image020.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image021.png"/&gt; &lt;br/&gt;
总结一下学过的5/6种排序:     &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_2/pasted_image022.png"/&gt; &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 3-1 Mergesort</title><link href="https://x-wei.github.io/algoI_week3_1.html" rel="alternate"></link><published>2015-08-21T00:00:00+02:00</published><updated>2015-08-21T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-08-21:algoI_week3_1.html</id><summary type="html">&lt;p&gt;Two classical sorting algorithms: mergesort, quicksort.    &lt;/p&gt;
&lt;h1 id="1-mergesort"&gt;1. Mergesort&lt;/h1&gt;
&lt;p&gt;Divide and conquer: top 10 algorithms of the 20th century, invented by von Neumann.     &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Idea&lt;/strong&gt;:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;divide array into 2 halves   &lt;/li&gt;
&lt;li&gt;recursively sort each half   &lt;/li&gt;
&lt;li&gt;merge two sorted halves   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="implementation"&gt;Implementation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Merge&lt;/strong&gt;:  &lt;br/&gt;
Goal: a[lo] to a[mid] and a[mid+1] to a[hi] are sorted ⇒ get a[lo] to a[hi] sorted.  &lt;br/&gt;
→&lt;em&gt;use an auxiliary array to copy data&lt;/em&gt;: using 3 indices i,j,k.     &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image.png"/&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k++&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j++&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k++&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i++&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k++&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i++&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k++&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j++&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;note: we use &lt;code&gt;if(less(aux[j],aux[i]))&lt;/code&gt;instead of&lt;code&gt;if(less(aux[j],aux[i]))&lt;/code&gt;, because less(a,b) == true iff a&amp;lt;b (strict), and we want to make mergesort &lt;strong&gt;stable&lt;/strong&gt;. See section (5) below.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assertion&lt;/strong&gt; &lt;br/&gt;
We can also add &lt;em&gt;assertions&lt;/em&gt;: &lt;code&gt;assert isSorted(a, lo, mid); assert isSorted(a,mid+1, hi);&lt;/code&gt; &lt;br/&gt;
Enable/disable assertion at runtime:  &lt;br/&gt;
&lt;code&gt;java -ea MyProgram&lt;/code&gt; //enable assertion &lt;br/&gt;
&lt;code&gt;java -da MyProgram&lt;/code&gt; //disable assertion: &lt;strong&gt;default&lt;/strong&gt; &lt;br/&gt;
Best practice:  &lt;br/&gt;
use assertions to check interval invariants; &lt;br/&gt;
do NOT use assert for external argument checking !    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mergesort   &lt;/strong&gt; &lt;br/&gt;
为了mergesort需要写两个辅助函数: merge和sort(recursive):   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;MergeSort&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;AbstractSort&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;length&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;before&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有几点注意的:    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注意递归终止条件是&lt;code&gt;hi&amp;lt;=lo&lt;/code&gt;, 不是&lt;code&gt;==&lt;/code&gt;.    &lt;/li&gt;
&lt;li&gt;实现的代码不难, 但是定义好辅助函数的参数并不简单... 比如在merge里使用了mid作为参数.    &lt;/li&gt;
&lt;li&gt;aux的数组直接写在了函数参数里面, 好处是可以防止反复声明数组带来的开销.   &lt;/li&gt;
&lt;li&gt;发现他们写的时候mid都是写成: &lt;code&gt;mid = lo+(hi-lo)/2&lt;/code&gt;, &lt;a href="http://stackoverflow.com/questions/25571359/why-we-write-lohi-lo-2-in-binary-search"&gt;查了一下&lt;/a&gt;发现这样的原因是为了防止hi+lo整数溢出...嗯有道理.    &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="analysis"&gt;Analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;proposition (time)&lt;/strong&gt; &lt;br/&gt;
Mergesort takes at most NlgN compares and 6NlgN array access.  &lt;br/&gt;
&lt;em&gt;Proof.&lt;/em&gt; &lt;br/&gt;
def: C(N)=#compares for N elements, A(N)=#array access for N elements, the recurrence eq:  &lt;br/&gt;
C(N) &amp;lt;= 2&lt;em&gt;C(N/2) + N; C(1) = 0  (最多N次比较: 每个a[]的数都由比较得到)    &lt;br/&gt;
A(N) &amp;lt;= 2&lt;/em&gt;A(N/2) + 6N; A(1) = 0 (~~这里不太理解为什么是6N, 怎么数都是4N或者5N啊?......~~2N复制到aux, 2N复制回去, 2N比较)    &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image001.png"/&gt; &lt;br/&gt;
(上图蓝色的一列是extra cost)      &lt;br/&gt;
或者用递推公式, 发现D(N)/N的递推关系:     &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image002.png"/&gt; &lt;br/&gt;
或者用数学归纳法:    &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proposition(memory)&lt;/strong&gt; &lt;br/&gt;
Mergesort takes N extra memory. &lt;br/&gt;
⇒ mergesort is NOT &lt;em&gt;in-place&lt;/em&gt; sorting method.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;def&lt;/strong&gt;. &lt;em&gt;"in-place"&lt;/em&gt; &lt;br/&gt;
A sorting algo is in-place if it uses &amp;lt;C*lgN extra memory.  &lt;br/&gt;
ex. insertion sort, shellsort, selection sort...   &lt;/p&gt;
&lt;h2 id="practical-improvements"&gt;Practical improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;use insertion sort for small arrays:     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cutoff to insertion sort for &amp;lt;7 items.    &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image004.png"/&gt; &lt;br/&gt;
⇒ lead to 20% improvement!     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stop if alread sorted: *a[mid]&amp;lt;a[mid+1]!   *   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switch the role of &lt;code&gt;a[]&lt;/code&gt; and &lt;code&gt;aux[]&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image006.png"/&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;h1 id="2-bottom-up-mergesort_1"&gt;2. Bottom-up Mergesort&lt;/h1&gt;
&lt;p&gt;bottom-up version of mergesort &lt;em&gt;without recursion&lt;/em&gt;.  &lt;br/&gt;
Idea:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pass and merge subarrays of size 1 in pairs      &lt;/li&gt;
&lt;li&gt;repeat for subarrays of size 2,4,8,....      &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;h2 id="implementation_1"&gt;implementation&lt;/h2&gt;
&lt;p&gt;看着上面那个图好写一点... 就是每次用更大的size来两两merge一遍数组   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public static void sort(Comparable[] a){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Comparable[] aux = new Comparable[a.length];   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for(int sz=1;sz&amp;lt;a.length;sz*=2){   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        for(int i=0;i&amp;lt;a.length-sz;i+=sz*2)   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            merge( a,aux,i,i+sz-1,Math.min(i+sz*2-1) );//&amp;lt;-注意mid和hi的计算方法   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="3-sorting-complexity_1"&gt;3. Sorting Complexity&lt;/h1&gt;
&lt;p&gt;some items:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;computational model: allowed operations, (ex. &lt;em&gt;decision tree for compare based sorting&lt;/em&gt;).     &lt;/li&gt;
&lt;li&gt;cost model: operation counts.    &lt;/li&gt;
&lt;li&gt;upper bound: cost guarantee (ex. NlgN for mergesort). .    &lt;/li&gt;
&lt;li&gt;lower bound: limit on cost guarantee for all algorithms (no algorithm can do better).    &lt;/li&gt;
&lt;li&gt;Optimal algorithm: algo with best cost guarantee. (upper bound=lower bound)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;证明lower bound 的方法很有意思:    &lt;/p&gt;
&lt;h2 id="lower-bound-for-sorting"&gt;lower bound for sorting&lt;/h2&gt;
&lt;p&gt;(binary) decision tree for the case of 3 distinct items:      &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;p&gt;each possible ordering is a leaf of the decision tree → there are N! possible orderings → tree height should be lg(N!) = NlgN (cf. &lt;a href="https://en.wikipedia.org/wiki/Stirling%27s_approximation"&gt;https://en.wikipedia.org/wiki/Stirling%27s_approximation&lt;/a&gt;)    &lt;br/&gt;
&lt;strong&gt;proposition.  &lt;/strong&gt; &lt;br/&gt;
Any compare-based sorting algorithm must have at least lg(N!)~NlgN compares in the worst case. (for N distinct keys)        &lt;br/&gt;
&lt;em&gt;proof.&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;binary tree of height h has at most 2^h leaves     &lt;/li&gt;
&lt;li&gt;N! possible orderings → at least N! leaves     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image010.png"/&gt; &lt;br/&gt;
 So, lower bound for sorting = ~NlgN ⇒ &lt;em&gt;mergesort &lt;strong&gt;&lt;em&gt;is&lt;/em&gt;&lt;/strong&gt; an asymptotical optimal algorithm&lt;/em&gt;. (In terms of time complexity, the shortcoming of mergesort is always the extra space usage)   &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image011.png"/&gt; &lt;br/&gt;
 但是并不是说NlgN是&lt;em&gt;所有&lt;/em&gt;排序问题的下界:   &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image012.png"/&gt; &lt;/p&gt;
&lt;h1 id="4-comparators_1"&gt;4. Comparators&lt;/h1&gt;
&lt;p&gt;Java mechenism for comparing same data on different ways.    &lt;/p&gt;
&lt;h2 id="comparable-interface"&gt;Comparable interface&lt;/h2&gt;
&lt;p&gt;→Sorting using &lt;em&gt;natural order&lt;/em&gt; for a data type. &lt;br/&gt;
    public class Data implements Comparable&lt;date&gt;{ &lt;br/&gt;
    public int compareTo(Date that){ &lt;br/&gt;
    //...} &lt;br/&gt;
    }   &lt;/date&gt;&lt;/p&gt;
&lt;h2 id="comparator-interface"&gt;Comparator interface&lt;/h2&gt;
&lt;p&gt;→Sorting using  an &lt;em&gt;alternative order&lt;/em&gt;. (total order property is required...)   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public interface Comparator&amp;lt;Key&amp;gt;{   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    int compare(Key v, Key w);   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Comparator can be passed as arguments in java system sort:   &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image013.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using Comparators in our sorting algos   &lt;/strong&gt; &lt;br/&gt;
Use another signature:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;change Comparable to Object   &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add Comparator in arguments   &lt;/p&gt;
&lt;p&gt;public static void sort(Object[] a, Comparator comparator); &lt;br/&gt;
public static boolean less(Comparator c, Object v, Object w);    &lt;/p&gt;
&lt;p&gt;public static void exch(Object[] a, int i, int j);   &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implementing a comparator    &lt;/strong&gt; &lt;br/&gt;
Add static comparator to a class:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the declaration of a class, define an inner class that implements the Comparator interface,    &lt;/li&gt;
&lt;li&gt;Then declare an instance of this inner class as a static final variable...   &lt;/li&gt;
&lt;li&gt;note: the inner class should be &lt;strong&gt;static&lt;/strong&gt; also.      &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image014.png"/&gt; &lt;br/&gt;
以上的方法目的是为某个类提供预先定义好的comparator(比如&lt;code&gt;String.CASE_INSENSITIVE_ORDER&lt;/code&gt;), 另外也可以直接再声明一个类作为comparator, 然后实例化这个类传进去, 就像之前做过的那样.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application: Graham scan algo for convex hull  &lt;/strong&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image015.png"/&gt; &lt;br/&gt;
We can get the result of compare by calling &lt;code&gt;ccw(a,b,c)&lt;/code&gt; : &lt;br/&gt;
*ccw(p,q1,q2)=true ⇔ q2&amp;gt;q1 in terms of polar angle wrt p. (别忘了p是y坐标最小的点, 否则还要讨论角坐标为负数的情况, 见下图).    * &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image016.png"/&gt; &lt;/p&gt;
&lt;h1 id="5-stability_1"&gt;5. Stability&lt;/h1&gt;
&lt;p&gt;Typical application: first sort by student name then by section.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;def. :stable"&lt;/strong&gt; &lt;br/&gt;
&lt;em&gt;A stable sort preserves the relative order for items with equal keys.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Insertion sort and mergesort are stable, whereas selection sort and shell sort are not.&lt;/em&gt; (And always need to carefully check code: "less than" vs. "less than or equal to").   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;insertion sort:&lt;/strong&gt; &lt;br/&gt;
stable &lt;br/&gt;
proof: we never move equal items pass each other: &lt;code&gt;if(less(a[j], a[j-1])) exch(...)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;selection sort:  &lt;/strong&gt; &lt;br/&gt;
not stable   &lt;br/&gt;
counter example:  &lt;br/&gt;
when exchanging A1 and B1, we move B1 behind B2    &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image017.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;shell sort:  &lt;/strong&gt; &lt;br/&gt;
counter example: long-dist exchanges   &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week3_1/pasted_image018.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;merge sort:   &lt;/strong&gt; &lt;br/&gt;
stable &lt;br/&gt;
proof: suffices to verify that merge operation is stable, if keys are equal, always take element from left subarray.    &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 2-2 Elementary Sorts</title><link href="https://x-wei.github.io/algoI_week2_2.html" rel="alternate"></link><published>2015-08-18T00:00:00+02:00</published><updated>2015-08-18T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-08-18:algoI_week2_2.html</id><summary type="html">&lt;h1 id="1-introduction"&gt;1. Introduction&lt;/h1&gt;
&lt;p&gt;rearanging array of size N into ascending order &lt;br/&gt;
test client code: &lt;code&gt;Insertion.sort(a);&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;sort &lt;em&gt;any&lt;/em&gt; datatype &lt;/p&gt;
&lt;h3 id="callback"&gt;callback&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;callback = reference to executable code&lt;/em&gt; &lt;br/&gt;
i.e. passing functions as argument to sort() method&lt;br/&gt;
sort() function calls object's &lt;code&gt;compareTo()&lt;/code&gt; method  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image.png"/&gt; &lt;br/&gt;
→ implement the &lt;code&gt;Comparable&lt;/code&gt; interface:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    public class XX implements Comparable&amp;lt;XX&amp;gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    ...&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the interface: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    public interface Comparable&amp;lt;Item&amp;gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        public int compareTo(Item that);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;compareTo():&lt;br/&gt;
return -1 (if this&amp;lt;that)/+1/0; 
needs a &lt;em&gt;total order.&lt;/em&gt; 
→ in the sort() implementation:&lt;br/&gt;
has not dependencies on type of data.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compareTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="helper-functions"&gt;helper functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;less&lt;/p&gt;
&lt;p&gt;private static boolean less(Comparable v, Comparable u){
returnv.compareTo(u)&amp;lt;0;
}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;exch&lt;/p&gt;
&lt;p&gt;private void exch(Comparable[] a, int i, int j) {
        Comparable swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;isSorted&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;test if sorted
if algo passes the test using only less ant swap, then it's correct. &lt;/p&gt;
&lt;h1 id="2-selection-sort_1"&gt;2. Selection Sort&lt;/h1&gt;
&lt;p&gt;Idea: each time&lt;em&gt;: find the minimum from the remaining items.&lt;/em&gt;
&lt;strong&gt;a[min] is the smallest element to right of a[i] ⇒ swap a[i] and a[min]&lt;/strong&gt; (elements to left of i are sorted) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;h2 id="invariants"&gt;invariants&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;entries to the left of i are in sorted order, and are fixed (&lt;em&gt;in final position&lt;/em&gt;) ever since&lt;/li&gt;
&lt;li&gt;no entry to the right of i is smaller than any entry to the left of i&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="implementation"&gt;implementation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SelectionSort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AbstractSorting&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;exch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="analysis"&gt;analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;proposition:&lt;/strong&gt;
selection sort uses &lt;em&gt;N-1 + N-2 + ... + 1 = ~N^2/2&lt;/em&gt; compares, and &lt;em&gt;N&lt;/em&gt; exchanges. 
→ quadratic time&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;insensitive&lt;/strong&gt; to input: quadratic time &lt;em&gt;even if input is already sorted.&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;data movement is &lt;em&gt;minimum&lt;/em&gt;: linear time of exchanges (every exchange puts an item to its final position)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="3-insertion-sort_1"&gt;3. Insertion sort&lt;/h1&gt;
&lt;p&gt;quite different performance characteritics than selection sort. &lt;/p&gt;
&lt;p&gt;Idea: &lt;strong&gt;In iteration i: move all entries larger than a[i] to its left.&lt;/strong&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;h2 id="invariants_1"&gt;invariants&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;entries to the left of i are in ascending order (but &lt;em&gt;not&lt;/em&gt; in final position)&lt;/li&gt;
&lt;li&gt;entries to the right of i are not yet been seen   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image005.png"/&gt; &lt;/p&gt;
&lt;h2 id="implementation_1"&gt;implementation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;publc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;InsertionSorting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AbstractSorting&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="c1"&gt;--){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j-1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;exch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="analysis_1"&gt;analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;proposition &lt;/strong&gt;(average case): &lt;br/&gt;
(the performance &lt;em&gt;on average&lt;/em&gt; — &lt;em&gt;for randomly sorted array&lt;/em&gt; ) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image007.png"/&gt; &lt;br/&gt;
&lt;em&gt;proof:&lt;/em&gt;
&lt;em&gt;expect each entry to move halfway back&lt;/em&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image008.png"/&gt; &lt;/p&gt;
&lt;h3 id="best-case-and-worst-case"&gt;best case and worst case&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;best case&lt;/strong&gt;
if array already sorted min ascending order: 
&lt;em&gt;N-1 compares, 0 exchanges.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;worst case&lt;/strong&gt;
if array sorted in descending order: 
every element goes all the way back → 1/2&lt;em&gt;N^2 compares,  1/2&lt;/em&gt;N^2 exchanges&lt;/p&gt;
&lt;h3 id="partially-sorted-arrays"&gt;partially  sorted arrays&lt;/h3&gt;
&lt;p&gt;def.&lt;strong&gt;" inversion"&lt;/strong&gt;
an inversion is a pair of entries that are out of order. &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;"partially sorted"&lt;/strong&gt;&lt;br/&gt;
An array is called partially sorted if the &lt;em&gt;number of inversions is &amp;lt;= c&lt;/em&gt;N. *&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;proposition. &lt;/strong&gt;&lt;br/&gt;
&lt;strong&gt;Insertion sort runs in linear time for partially sorted array.&lt;/strong&gt;
&lt;em&gt;proof.&lt;/em&gt;
&lt;em&gt;number of exchanges = number of inversions. &lt;/em&gt;
&lt;em&gt;number of compares = number of exchanges + N-1&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="4-shell-sort_2"&gt;4. Shell Sort&lt;/h1&gt;
&lt;p&gt;First non-trival sorting methode: an improvement of insertion sort. &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;"h-sorted array"&lt;/strong&gt;&lt;br/&gt;
an array is h-sorted if every h-interleaved subarray is sorted. (h=1: just a sorted array)  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;p&gt;Idea: move entries &amp;gt;1 position at a time by &lt;em&gt;h-sorting&lt;/em&gt; the array, then decrease h.   &lt;/p&gt;
&lt;p&gt;use decreasing sequences of value h:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image010.png"/&gt; &lt;/p&gt;
&lt;h2 id="implementation_2"&gt;implementation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;How to h -sort  &lt;/strong&gt;&lt;br/&gt;
simply insertion sort with &lt;em&gt;stride length=h&lt;/em&gt;.&lt;br/&gt;
why insertion sort: &lt;br/&gt;
for big h: small subarray &lt;br/&gt;
for small h: nearly in order   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;proposition&lt;/strong&gt;&lt;br/&gt;
A g-sorted array &lt;em&gt;remains g-sorted&lt;/em&gt; after h-sorting it.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image011.png"/&gt; &lt;br/&gt;
(subtle to prove...)  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;which sequence of h to use&lt;/strong&gt;
&lt;code&gt;3x+1&lt;/code&gt; sequence proposed by Knuth. &lt;em&gt;1,4,13,40....&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ShellSort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AbstractSort&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;beginning&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;performs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j-h&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;exch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isHsorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparable&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i-h&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每次hsort, 外围的循环是&lt;code&gt;for(int i= h;i&amp;lt;N;i+=h)&lt;/code&gt;, 需要理解一下: i移动一次以后, 进行的是另一个subarray 的插入排序, 当移动到N-1的时候所有subarray的插入排序才结束. (也就是说不是先完成一个subarray的插入排序再完成另一个, 这些是插入排序是同步进行的)&lt;/p&gt;
&lt;h2 id="analysis_2"&gt;analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;proposition (for worst case   )&lt;/strong&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image012.png"/&gt; &lt;br/&gt;
→ better than quadratic time !     &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;property  (found in practice)&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="of-compares-cte-n-of-h-used_1"&gt;of compares &amp;lt; Cte * N * (# of &lt;em&gt;h&lt;/em&gt; used )&lt;/h1&gt;
&lt;p&gt;→ #compares &amp;lt; NlgN * Cte &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image013.png"/&gt; &lt;br/&gt;
*accurate model has not been discovered  *&lt;/p&gt;
&lt;p&gt;(所以shellsort在实际使用中几乎和快速排序一样快! — 尽管没有数学证明来保证)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;why we are interested in shell sort&lt;/strong&gt;
useful in practice: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fast for medium sized arrays (beat even the classical sophistiated algorithms)  &lt;/li&gt;
&lt;li&gt;tiny code volumn (used in embeded systems)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lead to interesting questions for 50 years: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asymptotic growth rate ?&lt;/li&gt;
&lt;li&gt;best sequence of h ?&lt;/li&gt;
&lt;li&gt;average case performance ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="5-shuffling"&gt;5. shuffling&lt;/h1&gt;
&lt;h2 id="shuffle-array-using-sort"&gt;shuffle array using sort&lt;/h2&gt;
&lt;p&gt;one way to shuffle an array: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;for each array entry, generate a random real number&lt;/li&gt;
&lt;li&gt;sort the array of real numbers&lt;/li&gt;
&lt;li&gt;⇒ the original array is shuffled !&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;proposition  &lt;/strong&gt;&lt;br/&gt;
this shuffle sort produces a uniformly random permutation of input array &lt;br/&gt;
&lt;em&gt;drawback:  cost for sorting...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Goal: get uniformly random permutation in &lt;em&gt;linear time&lt;/em&gt;.   &lt;/p&gt;
&lt;h2 id="knuth-shuffle"&gt;Knuth shuffle&lt;/h2&gt;
&lt;p&gt;algo:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;for i = [0,N):&lt;br/&gt;
    - r = rand( [0~i&lt;strong&gt;]&lt;/strong&gt; ) or rand( &lt;strong&gt;[&lt;/strong&gt;i, N-1] ) &lt;br/&gt;
    - swap a[r] and a[i]   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image014.png"/&gt;&lt;/p&gt;
&lt;p&gt;implementation: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public static void shuffle(Object[] a){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    for(int i=0;i&amp;lt;a.length;i++){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        int r = StdRandom.uniform(i+1);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        exch(a,r,i);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }   &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;proposition&lt;/strong&gt;&lt;br/&gt;
Knuth algo produces an uniformly random permutation of input array. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;proof.&lt;/em&gt;&lt;br/&gt;
Sufficient to prove that, for card i and position j, the proba(card i comes to position j) = 1/N. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;if i&amp;lt;=j, P = 1/j * j/(j+1) * (j+1)/(j+2) * ... * (N-1)/N&lt;/li&gt;
&lt;li&gt;if j&amp;lt;i, P = 1/i * i/(i+1) * (i+1)/(i+2) * ... * (N-1)/N&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;CQFD.&lt;/p&gt;
&lt;h2 id="example-online-poker"&gt;example: online poker&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.cigital.com/papers/download/developer_gambling.php"&gt;https://www.cigital.com/papers/download/developer_gambling.php&lt;/a&gt;  ←那个扑克网站已经被黑出翔了...  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image015.png"/&gt; &lt;br/&gt;
bugs: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;r never get 52 (52th card never moved)&lt;/li&gt;
&lt;li&gt;r = rand(N) instead of rand(0~i), → shuffle not uniform&lt;/li&gt;
&lt;li&gt;random() uses 32bit seed: only 2^32 possible shuffles, &lt;em&gt;2^32&amp;lt;52!&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;seed = millisec from midnight, ~86*10^6 suffles&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="6-convex-hull_1"&gt;6. Convex Hull&lt;/h1&gt;
&lt;p&gt;application of sorting for the field of computational geometry.  &lt;/p&gt;
&lt;h2 id="convex-hull"&gt;convex hull&lt;/h2&gt;
&lt;p&gt;smallest polygoneenclosing all N points. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image017.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input: N points&lt;/li&gt;
&lt;li&gt;output: sequence of &lt;em&gt;vertices&lt;/em&gt; in counterclockwise (&lt;em&gt;ccw&lt;/em&gt;) order. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;application: robot motion planning; farest pair.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;geometric properties&lt;/strong&gt;:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can traverse convex hull by making only ccw turns&lt;/li&gt;
&lt;li&gt;let p be the point with lowest y-coord, wrt p, vertices appear in increasing order of polar angle.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image018.png"/&gt; &lt;/p&gt;
&lt;h2 id="algo"&gt;Algo&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Graham scan algorithm:&lt;/strong&gt;&lt;br/&gt;
    * choose p with smallest y coord &lt;br/&gt;
    * &lt;em&gt;sort points by polar angle&lt;/em&gt; with p &lt;br/&gt;
    * consider points in order (stack is used), &lt;em&gt;discard unless creates a ccw turn&lt;/em&gt;.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image019.png"/&gt; &lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image020.png"/&gt; &lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image021.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CCW&lt;/strong&gt; &lt;br/&gt;
given three points a b c, returns if a→b→c is a CCW turn.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image023.png"/&gt; &lt;br/&gt;
(assumption: no 3 points on a line)&lt;br/&gt;
 ⇒ calculate &lt;em&gt;cross product of ab and bc ⇒ determinants!&lt;/em&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_2/pasted_image024.png"/&gt; &lt;br/&gt;
area&amp;gt;0 ⇔ CCW   &lt;/p&gt;
&lt;h2 id="implementation_3"&gt;implementation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Point2D&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nb"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;ccw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Point2D&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Point2D&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Point2D&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;area2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;area2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;convex hull:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Point2D&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GrahamScan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Point2D&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="cm"&gt;/* assumes that points are sorted by polar angle in p[]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    Stack&amp;lt;Point2D&amp;gt; hull = new Stack&amp;lt;Point2D&amp;gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    hull.push(p[0]);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    hull.push(p[1]);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    for(int i=2;i&amp;lt;p.length;i++){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;        Point2D b = hull.pop(), a = hull.peek(), c = p[i];&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;        while(!Point2D.ccw(a,b,c)){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;            b = hull.pop();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;            a = hull.peek();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;        //now a,b,c makes a ccw turn:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;        hull.push(b);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;        hull.push(c);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;running time: &lt;em&gt;NlgN for sorting and linear for the rest.&lt;/em&gt; &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 2-1 Stacks and Queues</title><link href="https://x-wei.github.io/algoI_week2_1.html" rel="alternate"></link><published>2015-07-09T00:00:00+02:00</published><updated>2015-07-09T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-07-09:algoI_week2_1.html</id><summary type="html">&lt;p&gt;fundamental data types: stacks and queues
operations: 
&lt;strong&gt;insert, remove, test empy, iterate,&lt;/strong&gt;...  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_1/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;module programming: seperate interface and implementation&lt;/p&gt;
&lt;h1 id="1-stacks"&gt;1. Stacks&lt;/h1&gt;
&lt;p&gt;ex. a stack of strings&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;API: &lt;/p&gt;
&lt;p&gt;public interface StackoOfStrings{
    void push(String item);
    String pop();
    boolean isEmpty();
    //int size();
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="implementation-1-using-a-linkedlist"&gt;implementation 1: using a linkedlist&lt;/h3&gt;
&lt;p&gt;insert/remove from the top of the linkedlist&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;inner class&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;class ListNode{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    String item;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    ListNode next;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implementation  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;LinkedStackOfStrings&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;StackoOfStrings&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="n"&gt;nxt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="k"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;LinkedStackOfStrings&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;nd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;first&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;firstItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;firstItem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nb"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;first&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;complexity: const time for every operation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="array-implementation"&gt;array implementation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;use array (of length N) to store items → defect: stack has limited capacity&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;keep a pointer *top: &lt;strong&gt;*pointing to the next empty space to push &lt;/strong&gt;(top 的定义很重要)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;problems of the array implementation: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;underflow: pop from an empty stack  &lt;/li&gt;
&lt;li&gt;overflow: size larger than capacity ⇒ resizing  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;loitering&lt;/strong&gt;: holding a ref to an obj which is no longer needed:
ex. &lt;code&gt;return s[top--]&lt;/code&gt;
java system will not know that s[top] is no longer needed ⇒ have to clear it explicitely
⇒   &lt;/p&gt;
&lt;p&gt;String item = s[top--]; 
s[top]=null; 
return item&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implementation (containg resizing array operations)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ArrayStackOfStrings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;implements&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;StackOfStrings&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;top&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ArrayStackOfStrings&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tuned&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;top&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vois&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;helper&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;functoin&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;top&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;doubling&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lenth&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;top++&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;--top&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="ow"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;top&lt;/span&gt;&lt;span class="c1"&gt;--!&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;top&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;top&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="k"&gt;top&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;necessary&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="2-resizing-arrays_1"&gt;2. Resizing Arrays&lt;/h1&gt;
&lt;p&gt;resolving the overflow pb: grow and shrink the array
→ need to copy all items when changing array size
⇒ pb: &lt;em&gt;ensure that sizing happens infrequently&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="resizing-strategy"&gt;resizing strategy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;repeated doubling:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(initial capacity=1) when array is full, double the size&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;amortized&lt;/em&gt; complexity for inserting N:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;N+(2+4+8+...+N) ~3N&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shrinking array&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ shrink the array by half when array is &lt;strong&gt;1/4 full&lt;/strong&gt;
not half full → &lt;em&gt;thrashing&lt;/em&gt; will happen if push-pop-push-pop when array is full &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_1/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[invariant]&lt;/strong&gt;: array always 20%~100% full&lt;/li&gt;
&lt;li&gt;complexity:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;in an amortized sense&lt;/em&gt;, will be constant &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_1/pasted_image002.png"/&gt; &lt;br/&gt;
&lt;strong&gt;proposition&lt;/strong&gt;: from empty stack, M operations of push/pop taked time propotional to M&lt;/p&gt;
&lt;h3 id="comparison-resizable-array-vs-linkedlist"&gt;comparison: resizable array vs linkedlist&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;linkedlist implementation: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;operations takes const time even in worst time
extra time and space for dealing with linkes &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;resizing array implementation:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;operation taked const &lt;em&gt;amortized&lt;/em&gt; time
but in worst case takes linear time (ex. to be evited for critical systems)
less wasted space&lt;/p&gt;
&lt;h2 id="3-queues_1"&gt;3. Queues&lt;/h2&gt;
&lt;p&gt;FIFO data structure
API&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public interface QueueOfStrings{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    void enqueue(String item);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    String dequeue();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    boolean isEmpty();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    //int size();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="linked-list-implementation"&gt;linked list implementation&lt;/h3&gt;
&lt;p&gt;maintain &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; node pointers: 
pointing to 2 points of queue (&lt;code&gt;first&lt;/code&gt; for dequeue, &lt;code&gt;last&lt;/code&gt; for enqueue ) &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_1/pasted_image003.png"/&gt; &lt;br/&gt;
→ &lt;em&gt;take care of corner cases&lt;/em&gt;: 
- empty queue: first is null (and last is also null) 
- just one item in queue: first and last &lt;em&gt;point to the same node&lt;/em&gt;
(总之first和last的定义很重要)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    public class LinkedQueueOfStrings implements QueueOfStrings{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        class Node{...  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        private Node first,last;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        public LinkedQueueOfStrings(){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            first = null;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        public void enqueue(String item){//same as push&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            Node nd = new Node(item,null);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            if(isEmpty()){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                last = nd;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            first = last;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            else{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                last.next = nd;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                last = nd;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        public String dequeue(){//same as pop in stack&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            String firstItem = first.item;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            first = first.next;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            if(isEmpty())&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                last=null;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            return firstItem;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        public boolean isEmpty(){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;            return first==null;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="resizing-array-implementation"&gt;resizing array implementation&lt;/h3&gt;
&lt;p&gt;maintain &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt;: 
&lt;code&gt;head&lt;/code&gt; is the queue head, &lt;code&gt;tail&lt;/code&gt; is the &lt;em&gt;next empty position&lt;/em&gt; for the next element to enqueue
→ trick: head and tail should take &lt;em&gt;mod capacity + &lt;/em&gt;resizing array &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_1/pasted_image004.png"/&gt; &lt;br/&gt;
不知道写的对不对: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ArrayQueueOfStrings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;implements&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QueueOfStrings&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LinkedQueueOfStrings&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newsz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;q2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;newsz&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;q2&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j++&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dequeue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;firstItem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;firstItem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="4-generics_2"&gt;4. Generics&lt;/h1&gt;
&lt;p&gt;queues/stacks for other types of data ⇒ &lt;em&gt;generics 泛型&lt;/em&gt;(java 1.5 才引进泛型机制...)
use &lt;em&gt;type paramater&lt;/em&gt;→ avoid casting, and discover type mismatch errors &lt;em&gt;at compile time&lt;/em&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    public interface Stack&amp;lt;Item&amp;gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        public void push(Item item);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        public Item pop();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        public boolean isEmpty();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="a-pb-with-array-implementation"&gt;a pb with array implementation&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;java不支持创立泛型数组&lt;/strong&gt;
generic array creation is not allowed. 不可以new 一个泛型数组!
&lt;code&gt;s = new Item[capacity];&lt;/code&gt;会报错 &lt;br/&gt;
⇒ use an ugly &lt;em&gt;cast&lt;/em&gt;:
&lt;code&gt;s = (Item[]) new Object[capacity];&lt;/code&gt;
(will get warning: "unchecked cast" → java被黑了... )&lt;/p&gt;
&lt;h3 id="autoboxing-for-primitive-types"&gt;autoboxing for primitive types&lt;/h3&gt;
&lt;p&gt;each primitive type has a &lt;em&gt;wrapper class&lt;/em&gt;
ex. int ↔ Integer
autoboxing: automatic cast between a primitive type and its wrapper class. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_1/pasted_image005.png"/&gt; &lt;br/&gt;
(syntactic sugar 语法糖 i.e. 对语言功能没有影响只是方便使用)&lt;br/&gt;
btw: &lt;a href="https://zh.wikipedia.org/wiki/%E8%AF%AD%E6%B3%95%E7%B3%96"&gt;https://zh.wikipedia.org/wiki/%E8%AF%AD%E6%B3%95%E7%B3%96&lt;/a&gt; (居然还有语法盐和语法糖精......)&lt;/p&gt;
&lt;h1 id="5-iterators_1"&gt;5. Iterators&lt;/h1&gt;
&lt;h3 id="interface"&gt;Interface&lt;/h3&gt;
&lt;p&gt;support iteration over stacks and queues, &lt;em&gt;without revealing the internal representation&lt;/em&gt; of stack/queue
⇒ implement the &lt;code&gt;Iterable&lt;/code&gt; interface&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Iterable&lt;/code&gt; interface: can return an *Iterator *&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public interface Iterable{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Iterator&amp;lt;Item&amp;gt; iterator();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iterator interface: hasNext() and next() interface&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public interface Iterator&amp;lt;Item&amp;gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    boolean hasNext();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    Item next();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    void remove();//optional, bad practice to use it&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to make a data structure Interable → elegant client code   &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week2_1/pasted_image006.png"/&gt; &lt;br/&gt;
&lt;strong&gt;how-to:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;implement &lt;code&gt;Iterable&lt;/code&gt; interface&lt;/li&gt;
&lt;li&gt;write a &lt;em&gt;private inner class&lt;/em&gt; XXIterator that implment the &lt;code&gt;Iterator&lt;/code&gt; interface.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ex. &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_1/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;h3 id="bag-data-structure"&gt;Bag data structure&lt;/h3&gt;
&lt;p&gt;Supports adding and iterating through without caring about the order.&lt;br/&gt;
API: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    public class&amp;lt;Item&amp;gt; Bag implements Iterable&amp;lt;Item&amp;gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        public void add(Item);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;        int size(); &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;can be implemented by stack or queue(without pop/dequeue)&lt;/p&gt;
&lt;h1 id="6-applications_1"&gt;6. Applications&lt;/h1&gt;
&lt;h3 id="java-collections-library"&gt;Java collections library&lt;/h3&gt;
&lt;p&gt;List interface: &lt;code&gt;java.util.List&lt;/code&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_1/pasted_image008.png"/&gt; &lt;br/&gt;
implementations: &lt;code&gt;ArrayList&lt;/code&gt;, &lt;code&gt;LinkedList&lt;/code&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pb with the java's implementation of stacks and queues:  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Stack&lt;/code&gt; class also implements List interface (&lt;code&gt;get()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;contains()&lt;/code&gt; are implemented);&lt;br/&gt;
&lt;code&gt;Queue&lt;/code&gt; is an interface rather than a class...&lt;br/&gt;
⇒ &lt;strong&gt;poorly designed API  &lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="stacks-applications"&gt;Stacks applications&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;function calls: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week2_1/pasted_image009.png"/&gt; &lt;br/&gt;
recursion: can always use an explicit stack to remove recursion&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;arithemic evaluation (Dijkstra)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;四种类型: 左括号, 右括号, 数字, 算子  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_1/pasted_image010.png"/&gt;&lt;br/&gt;
最后一行应该是value stack.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week2_1/pasted_image011.png"/&gt; &lt;/p&gt;
&lt;p&gt;⇒ 后缀表达式, 逆波兰式......&lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week1-Lab: Percolation</title><link href="https://x-wei.github.io/algoI_week1_lab.html" rel="alternate"></link><published>2015-07-07T00:00:00+02:00</published><updated>2015-07-07T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-07-07:algoI_week1_lab.html</id><summary type="html">&lt;h1 id="model-problem"&gt;model &amp;amp; problem&lt;/h1&gt;
&lt;p&gt;(原文描述太啰嗦了)&lt;br/&gt;
A system using an N-by-N grid of sites. &lt;br/&gt;
→ Each site is either open or blocked. &lt;br/&gt;
→ A &lt;strong&gt;full&lt;/strong&gt; site is an open site that can be connected to an open site in the top row via a chain of neighboring open sites. (这个full的定义有玄机 而且导致后面写程序时有个问题, 看论坛想了半天才想出来, 见后文.)&lt;br/&gt;
→ We say the system &lt;strong&gt;percolates&lt;/strong&gt; if there is a path of connected open sites form the top row to the bottom row.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/file:///home/wx/Dropbox/ZIM_NOTES/0._TmpNotes/Algorithms%2C_4th_ed/Week1-Assignment-Percolation/pasted_image.png"/&gt; &lt;/p&gt;
&lt;p&gt;⇒ pb: if sites are independently set to be open with probability &lt;strong&gt;p&lt;/strong&gt;, what is the probability that the system percolates? &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/file:///home/wx/Dropbox/ZIM_NOTES/0._TmpNotes/Algorithms%2C_4th_ed/Week1-Assignment-Percolation/pasted_image001.png"/&gt; &lt;br/&gt;
→ When N is sufficiently large, there is a threshold value **p&lt;strong&gt;&lt;em&gt; such that when p &amp;lt; p&lt;/em&gt; a random N-by-N grid almost never percolates, and when p &amp;gt; p&lt;em&gt;, a random N-by-N grid almost always percolates. &lt;br/&gt;
→ No mathematical solution for determining the percolation threshold p&lt;/em&gt; has yet been derived. &lt;br/&gt;
⇒ Your task is to *write a computer program to estimate p&lt;/strong&gt;.   &lt;/p&gt;
&lt;h1 id="method"&gt;Method&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class Percolation {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;   public Percolation(int N)               // create N-by-N grid, with all sites blocked&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;   public void open(int i, int j)          // open site (row i, column j) if it is not open already&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;   public boolean isOpen(int i, int j)     // is site (row i, column j) open?&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;   public boolean isFull(int i, int j)     // is site (row i, column j) full?&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;   public boolean percolates()             // does the system percolate?&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;   public static void main(String[] args   // test client (optional)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Corner cases: the row and column indices i and j are integers between 1 and N. &lt;strong&gt;1≤i,j≤N&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;if i/j out of range: &lt;code&gt;java.lang.IndexOutOfBoundsException&lt;/code&gt;
if N&amp;lt;=0 in constructor: &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Performance requirements: N2 for constructor, const for other operations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monte Carlo simulation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all sites init to be closed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ randomly choose a blocked site (i,j) and open it 
→ &lt;em&gt;repeat until percolates&lt;/em&gt; ⇒ the fraction of opened sites is an estimation of p*&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex. 20*20 grid, when percolated: &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/file:///home/wx/Dropbox/ZIM_NOTES/0._TmpNotes/Algorithms%2C_4th_ed/Week1-Assignment-Percolation/pasted_image002.png"/&gt; &lt;br/&gt;
⇒ estimated p* = 204/400=0.51&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;repeat the estimation for T times, get T estimations &lt;/p&gt;
&lt;p&gt;→ get mean and std:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/file:///home/wx/Dropbox/ZIM_NOTES/0._TmpNotes/Algorithms%2C_4th_ed/Week1-Assignment-Percolation/pasted_image003.png"/&gt; &lt;br/&gt;
→ 95% 置信区间: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/file:///home/wx/Dropbox/ZIM_NOTES/0._TmpNotes/Algorithms%2C_4th_ed/Week1-Assignment-Percolation/pasted_image004.png"/&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create API for this simulation: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public class PercolationStats {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;   public PercolationStats(int N, int T)     // perform T independent experiments on an N-by-N grid&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;   public double mean()                      // sample mean of percolation threshold&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;   public double stddev()                    // sample standard deviation of percolation threshold&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;   public double confidenceLo()              // low  endpoint of 95% confidence interval&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;   public double confidenceHi()              // high endpoint of 95% confidence interval&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;   public static void main(String[] args)    // test client (described below)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-if  N ≤ 0 or T ≤ 0: &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;&lt;br/&gt;
-&lt;code&gt;main()&lt;/code&gt; : takes two command-line arguments N and T&lt;br/&gt;
⇒ performs T independent computational experiments on an N-by-N grid, and prints out the mean, standard deviation, and the 95% confidence interval for p*. &lt;br/&gt;
(Use &lt;a href="http://introcs.cs.princeton.edu/java/stdlib/javadoc/StdRandom.html"&gt;standard random&lt;/a&gt; from our standard libraries to generate random numbers; use &lt;a href="http://introcs.cs.princeton.edu/java/stdlib/javadoc/StdStats.html"&gt;standard statistics&lt;/a&gt; to compute the sample mean and standard deviation. &lt;br/&gt;
Here is the algo API: &lt;a href="http://algs4.cs.princeton.edu/code/index.php"&gt;http://algs4.cs.princeton.edu/code/index.php&lt;/a&gt;)  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="code"&gt;Code&lt;/h1&gt;
&lt;p&gt;注意一定要用它们提供的那些库, 否则自己写的话代码就长了.... &lt;br/&gt;
shuffle, mean, stddev什么的直接用他们的函数库就可以做到. &lt;br/&gt;
&lt;a href="http://algs4.cs.princeton.edu/code/index.php"&gt;http://algs4.cs.princeton.edu/code/index.php&lt;/a&gt; &lt;br/&gt;
另外UF也是用他们写好的, WeightedQuickUnionUF.   &lt;/p&gt;
&lt;p&gt;按照提示, 除了格子的N^2个节点以外再增加两个节点: 顶部和底部的虚拟节点. 这里写的时候注意一开始也是不恩能够把它们与第一行/最后一行相连的 — 要在一个格子open以后再相连. &lt;/p&gt;
&lt;h3 id="backwashwen-ti"&gt;backwash问题&lt;/h3&gt;
&lt;p&gt;这次题目有一点比较困难就是, 需要实现isFull()函数, 这个函数判断一个格子(i,j)是否和顶部相连. 这里如果直接用UF的connected()判断是否和顶部虚拟节点相连的话是有问题的, 如下图: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/file:///home/wx/Dropbox/ZIM_NOTES/0._TmpNotes/Algorithms%2C_4th_ed/Week1-Assignment-Percolation/pasted_image005.png"/&gt; &lt;br/&gt;
白色格子表示格子是open的, 蓝色格子表示格子是open并且是&lt;em&gt;full&lt;/em&gt;的(i.e. 和顶部相连的), 左边图片里的状态是对的, 右边图片里底下部分的格子状态则不对: 如左下角的格子, 其实是没有和顶部联通的, 如果我们用两个虚拟节点的话, 由于底部虚拟节点和顶部虚拟节点相连, 所以和底部虚拟节点相连的左下角部分就被判断成了full的. &lt;/p&gt;
&lt;p&gt;这个问题一开始我以为可以很简单解决, 后来发现没那么容易... (注意题目还要求isFull()也要在常数时间给出结果).&lt;br/&gt;
一个不优雅的办法是, 建立两个UF, 一个用来判断percolation, 另一个UF里没有底部虚拟节点所以可以专门用来判断isFull(). &lt;/p&gt;
&lt;p&gt;这样解决的话使可以通过测试, 不过非常不好看, 另外一个UF的内存占用是8N^2(内部有size[]和id[]两个int数组), 比较大. &lt;/p&gt;
&lt;p&gt;在论坛上找了半天, 看了一些人的分享终于想到了这个非常妙的办法: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UF只建立顶部虚拟节点, 不建立底部虚拟节点. &lt;/li&gt;
&lt;li&gt;判断isFull只需要用UF的connected()一下就好了&lt;/li&gt;
&lt;li&gt;问题是怎么判断percolation: &lt;br/&gt;
    a. 建立一个数组 &lt;code&gt;boolean connectedToBottom[]&lt;/code&gt;, 指示某一点是否和底部相连 &lt;br/&gt;
    b. trick在这里: 不必修改一个联通分支的所有点的&lt;code&gt;connectedToBottom&lt;/code&gt;的值, &lt;strong&gt;只需要修改联通分支的root(UF的find)即可&lt;/strong&gt;. 在进行union的时候先查看两个component的root是不是连到底部, 然后有一个连到底部的话, 在union以后把合并后的联通分支的&lt;code&gt;connectedToBottom&lt;/code&gt;状态改为true即可 &lt;br/&gt;
    c. 然后判断percolate: 先找到顶部虚拟节点锁在component的root, 然后看这个root是否连到底部即可!   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样用一个boolean数组(N^2内存)代替了一个新的UF(8N^2内存), 而且实现也更加优雅.  &lt;br/&gt;
非常有意思的练习...&lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 1-2 Analysis of Algorithms</title><link href="https://x-wei.github.io/algoI_week1_2.html" rel="alternate"></link><published>2015-07-02T00:00:00+02:00</published><updated>2015-07-02T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-07-02:algoI_week1_2.html</id><summary type="html">&lt;h1 id="1-introduction"&gt;1. Introduction&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image.png"/&gt;&lt;/p&gt;
&lt;h1 id="2-observations"&gt;2. Observations&lt;/h1&gt;
&lt;p&gt;ex. &lt;strong&gt;3-SUM pb&lt;/strong&gt;&lt;br/&gt;
&lt;em&gt;given N distinct numbers, how many triples sum up to 0? (pb related to computatioal geogtry)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brute force method:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]+&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]+&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;mesuring running time:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;stdlib.jar里面提供了一个&lt;code&gt;Stopwatch&lt;/code&gt;类用于记录运行时间.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;log-log plot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;T(N) = running time for input of size N&lt;br/&gt;
log(N)-log(T(N)) plot:&lt;br/&gt;
often get a straight line — power law  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;doubling ratio&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(for checking the power law relationship, checking the power order)&lt;br/&gt;
each time double the size of input, then take log of the time ratio of 2 runs: log( T(2N)/T(N) )  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image003.png"/&gt; &lt;/p&gt;
&lt;h1 id="3mathematical-models"&gt;3.Mathematical Models&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;total running time: sum of cost*frequency of operations &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cost of some basic operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;array allocation: c*N (because all array entries have to be set to 0/false/null)&lt;/li&gt;
&lt;li&gt;string concatenation: c*N (proportional to the length  of string !)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;simplification&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;crude analysis&lt;br/&gt;
ignore lower terms &lt;strong&gt;tilde notation&lt;/strong&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image005.png"/&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;estimating discrete sum by relaxation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Replace the sum with an integral, and use calculus — 很机智...   &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;h1 id="4-order-of-growth-classification"&gt;4. Order of Growth Classification&lt;/h1&gt;
&lt;p&gt;(discard the leading coefficient when considering the growth order)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only a small set of growth functions: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;1, logN, N, NlogN, N^2, N^3, 2^N&lt;/code&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image007.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exemples:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;binary search ⇒ logN&lt;br/&gt;
divide and conquer ⇒ NlogN&lt;br/&gt;
exhaustive search ⇒ 2^N &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image008.png"/&gt;&lt;/p&gt;
&lt;p&gt;practical performance: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image009.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ex. &lt;strong&gt;binary search&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;public int binearch(int arr[], int key){//arr[] already sorted
    int lo=0,hi=arr.length;
    while(i&amp;lt;j){
        int m = (lo+hi)/2;
        if(arr[m]==key) return m;
        else if(arr[m]&amp;lt;key) lo=m+1;
        else hi=m-1;
    }
    return -1;
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(→ Bug in Java's Arrays.binarySearch() discovered in 2006......) &lt;br/&gt;
→ invariant: if key in arr, arr[lo]&amp;lt;=key&amp;lt;=arr[hi] &lt;br/&gt;
&lt;strong&gt;proposition. &lt;/strong&gt;binary search uses at most logN+1 compares to search a sorted array of size N.
&lt;strong&gt;pf. &lt;/strong&gt;
denote &lt;em&gt;T(N)&lt;/em&gt; := nb of compares for array with size &amp;lt;=N&lt;br/&gt;
→ T(1)=1&lt;br/&gt;
→ recurrence relation: T(N)&amp;lt;=T(N/2)+1&lt;br/&gt;
⇒ T(N)=logN  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;a faster 3-SUM&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ first sort the array &lt;em&gt;(~NlogN)&lt;/em&gt;&lt;br/&gt;
→ for any pair a[i] and a[j], do binary search for -(a[i]+a[j])   &lt;em&gt;~(N2LogN)&lt;/em&gt;&lt;br/&gt;
⇒ reduce from N3 to N2logN ! (for 8k numbers, running time goes from 51s to 0.96s)  &lt;/p&gt;
&lt;h1 id="5-theory-of-algorithms"&gt;5. Theory of Algorithms&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;types of analysis&lt;/p&gt;
&lt;p&gt;-best case
-worst case
-average case(random input, "expected cost")&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;notations&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;big Theta/big O/big Omega&lt;/strong&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image010.png"/&gt; &lt;br/&gt;
    - big O: &lt;em&gt;upper bound  → * once a specific algo is found, find an upper bound&lt;br/&gt;
    - big Omega: &lt;/em&gt;lower bound   &lt;em&gt;→ proove that no algo can do better&lt;br/&gt;
    - big Theta: symptotic growth (same order, optimal algo)  → lower and upper bound &lt;/em&gt;match* &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image011.png"/&gt; &lt;br/&gt;
⇒ in this course: use tilde notation: contain leading constants for highest order term&lt;/p&gt;
&lt;h1 id="6-memory"&gt;6. Memory&lt;/h1&gt;
&lt;p&gt;KB: 2^10 bytes&lt;br/&gt;
MB: 2^20 bytes (1 million) 
GB: 2^30 bytes (1 billion) 
64-bit machines: &lt;em&gt;8 byte pointers&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;typical memory usage:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for primary types: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image012.png"/&gt;&lt;br/&gt;
for arrays  (with &lt;em&gt;array overhead=24bytes&lt;/em&gt;) :  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image013.png"/&gt; &lt;br/&gt;
&lt;em&gt;Obj overhead: 16 bytes&lt;/em&gt; (obj的大小=16+obj内部filed的大小)&lt;br/&gt;
&lt;em&gt;references&lt;/em&gt;: 8 bytes (ex. inner class has a ref to encolsing class)&lt;br/&gt;
&lt;em&gt;padding&lt;/em&gt;: each obj uses a multiply of 8 bytes (obj大小=8 bytes的整数倍)    &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image014.png"/&gt; &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_2/pasted_image015.png"/&gt; &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Spark MOOC note] lab4. Predicting Movie Ratings</title><link href="https://x-wei.github.io/sparkmooc_notelab4.html" rel="alternate"></link><published>2015-06-30T00:00:00+02:00</published><updated>2015-06-30T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-06-30:sparkmooc_notelab4.html</id><summary type="html">&lt;h1 id="part-0-preliminaries"&gt;Part 0: Preliminaries&lt;/h1&gt;
&lt;p&gt;Each line in the ratings dataset (&lt;em&gt;ratings.dat.gz&lt;/em&gt;) is formatted as: &lt;br/&gt;
&lt;code&gt;UserID::MovieID::Rating::Timestamp&lt;/code&gt; ⇒ tuples of &lt;code&gt;(UserID, MovieID, Rating)&lt;/code&gt;in &lt;em&gt;ratingsRDD&lt;/em&gt; &lt;br/&gt;
Each line in the movies (&lt;em&gt;movies.dat&lt;/em&gt;) dataset is formatted as: &lt;br/&gt;
&lt;code&gt;MovieID::Title::Genres&lt;/code&gt; ⇒ tuples of &lt;code&gt;(MovieID, Title)&lt;/code&gt; in &lt;em&gt;ratingsRDD&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;487650 ratings and 3883 movies&lt;/p&gt;
&lt;p&gt;⇒ Since the key is an integer and the value is a unicode string, we can use a function to combine them into a single unicode string (e.g., &lt;code&gt;unicode('%.3f' % key) + ' ' + value&lt;/code&gt;) before sorting the RDD using &lt;code&gt;sortBy()&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="part-1-basic-recommendations"&gt;Part 1: Basic Recommendations&lt;/h1&gt;
&lt;p&gt;naive method: &lt;em&gt;always recommend the movies with the highest average rating...&lt;/em&gt;
⇒ 20 movies with the highest average rating and more than 500 reviews&lt;/p&gt;
&lt;p&gt;&lt;em&gt;movieNameWithAvgRatingsRDD&lt;/em&gt;: &lt;code&gt;(avgRating, Title, nbRatings)&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="part-2-collaborative-filtering"&gt;Part 2: Collaborative Filtering&lt;/h1&gt;
&lt;p&gt;MLlib: &lt;a href="https://spark.apache.org/mllib/"&gt;https://spark.apache.org/mllib/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Collaborative filtering&lt;/em&gt; is a method of making automatic predictions (filtering) about the interests of a user by collecting preferences or taste information from many users (collaborating). The underlying assumption of the collaborative filtering approach is that if a person A has the same opinion as a person B on an issue, A is more likely to have B's opinion on a different issue x than to have the opinion on x of a person chosen randomly. &lt;/p&gt;
&lt;p&gt;一图胜千言: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lab4/Collaborative_filtering.gif"/&gt;&lt;/p&gt;
&lt;h3 id="matrix-factorization"&gt;Matrix Factorization&lt;/h3&gt;
&lt;p&gt;CF问题实际上是矩阵分解的问题: 
We have a matrix whose entries are movie ratings by users (shown in red in the diagram below). Each column represents a user (shown in green) and each row represents a particular movie (shown in blue).&lt;/p&gt;
&lt;p&gt;其中&lt;em&gt;rating矩阵&lt;/em&gt;(用户/电影矩阵)只有一些项的值存在(即用户打分的那些项), 所以要用分解后的两个矩阵之乘积来估计rating矩阵中的缺失项.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;With collaborative filtering, the idea is to approximate the ratings matrix by factorizing it as the product of two matrices: one that describes properties of each user (shown in green), and one that describes properties of each movie (shown in blue).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lab4/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;若N个用户, M个电影 ⇒ 把rating矩阵(N&lt;em&gt;M)分解为 一个N&lt;/em&gt;d矩阵(&lt;em&gt;user矩阵&lt;/em&gt;)与一个d&lt;em&gt;M(&lt;/em&gt;movie矩阵*)矩阵之积. &lt;/p&gt;
&lt;p&gt;其中d个维度可以有(隐含的)意义: 比如f[j]第一个维度代表了电影j中动作片的成分, f[i]的第一个维度表示用户i对动作片的喜爱程度, 以此类推... 所以f[i]与f[j]的内积就可以是用户i对电影j的评分的一个不错的预测. &lt;/p&gt;
&lt;p&gt;假设&lt;em&gt;f[j]已知&lt;/em&gt;, 那么f[i]要满足: 对那些用户i已经打过分的电影(即r_ij存在)上的估计偏差最小:   &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lab4/pasted_image.png"/&gt; &lt;br/&gt;
(后面加上的那一项是正则项: 不希望f[i]的模过大)&lt;/p&gt;
&lt;p&gt;不过前面的假设, "f[j]已知"这个条件其实并不成立 ⇒ &lt;strong&gt;Alternating Least Squares algorithm&lt;/strong&gt;: 交替优化f[i]和f[j]的取值, 每次固定一个, 而优化另一个, 交替进行, 直到收敛(好像Kmeans也是利用的这种方法). &lt;/p&gt;
&lt;p&gt;&lt;em&gt;first randomly filling the users matrix with values and then optimizing the value of the movies such that the error is minimized. Then, it holds the movies matrix constrant and optimizes the value of the user's matrix.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="train-test-validation-split"&gt;train-test-validation split&lt;/h3&gt;
&lt;p&gt;⇒ break up the ratingsRDD dataset into three pieces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A training set (RDD), which we will use to train models&lt;/li&gt;
&lt;li&gt;A validation set (RDD), which we will use to choose the best model&lt;/li&gt;
&lt;li&gt;A test set (RDD), which we will use for our experiments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;trainingRDD, validationRDD, testRDD = ratingsRDD.randomSplit([6, 2, 2], seed=0L)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="root-mean-square-error-rmse"&gt;Root Mean Square Error (RMSE)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lab4/pasted_image003.png"/&gt; &lt;br/&gt;
compute the sum of squared error given predictedRDD and actualRDD RDDs. 
Both RDDs consist of tuples of the form (UserID, MovieID, Rating)&lt;/p&gt;
&lt;h3 id="alternating-least-square-of-mlllib"&gt;alternating least square of MLllib&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://spark.apache.org/docs/latest/api/python/pyspark.mllib.html#pyspark.mllib.recommendation.ALS"&gt;https://spark.apache.org/docs/latest/api/python/pyspark.mllib.html#pyspark.mllib.recommendation.ALS&lt;/a&gt;
ALS takes a training dataset (RDD) and several parameters that control the model creation process.&lt;/p&gt;
&lt;p&gt;The most important parameter to ALS.train() is the &lt;em&gt;rank&lt;/em&gt;, which is the number of rows in the Users matrix (green in the diagram above) or the number of columns in the Movies matrix (blue in the diagram above). (In general, a lower rank will mean higher error on the training dataset, but a high rank may lead to overfitting.)&lt;/p&gt;
&lt;p&gt;貌似ALS接受一个(userid, itemid, rating)的RDD作为输入, 预测时接受一个(userid, itemid)的RDD作为输入, 返回一个(userid, itemid, rating)的RDD.  (也就是说, 前面的notation在这里继续被使用了).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;model = ALS.train(trainingRDD, rank, seed=seed, iterations=iterations,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;                      lambda_=regularizationParameter)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;predictedRatingsRDD = model.predictAll(validationForPredictRDD)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以在这里查看job详情: &lt;a href="http://localhost:4040/jobs/"&gt;http://localhost:4040/jobs/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="compare-model"&gt;compare model&lt;/h3&gt;
&lt;p&gt;Looking at the RMSE for the results predicted by the model versus the values in the test set is one way to evalute the quality of our model. &lt;em&gt;Another way to evaluate the model is to evaluate the error from a test set where every rating is the average rating for the training set.&lt;/em&gt;
⇒ 这里没有太理解, 难道是说test set 的平均rating预测结果和training set的平均rating应该比较接近么?? 
⇒ 终于明白了: "&lt;em&gt;Your model more accurately predicts the ratings than using just the average rating, as the model's RMSE is significantly lower than the RMSE when using the average rating.&lt;/em&gt;"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;求一个tuple rdd最后一列的和的时候, 需要先map成最后一列再reduce: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;trainingRDD.map(lambda x:x[-1]).reduce(lambda x,y:x+y)&lt;/code&gt;&lt;br/&gt;
直接写&lt;code&gt;reduce(lambda x,y:x[-1]+y[-1])&lt;/code&gt;貌似是不行的&lt;/p&gt;</summary><category term="spark"></category></entry><entry><title>[Algorithms I] Week 1-1 Union-Find</title><link href="https://x-wei.github.io/algoI_week1_1.html" rel="alternate"></link><published>2015-06-27T00:00:00+02:00</published><updated>2015-06-27T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-06-27:algoI_week1_1.html</id><summary type="html">&lt;h1 id="1-dynamic-connectivity-pb"&gt;1. Dynamic Connectivity pb&lt;/h1&gt;
&lt;h3 id="pb-statement"&gt;pb statement&lt;/h3&gt;
&lt;p&gt;a set of N obj, &lt;em&gt;indexed by 0,1,...,N-1&lt;/em&gt;
⇒ 
&lt;em&gt; UNION: connect objects &lt;code&gt;void union(int p, int q)&lt;/code&gt;
&lt;/em&gt; FIND: is there a path connecting 2 obj?  &lt;code&gt;boolean connected(int p, int q)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ex: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;connect components&lt;/strong&gt;(联通分支): max set of obj that are mutually connected. &lt;/p&gt;
&lt;h3 id="uf-api"&gt;UF API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;union(p,q): connect 2 obj&lt;/li&gt;
&lt;li&gt;connected(p,q): test if p and q are connected &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;find(p)&lt;/strong&gt;: find the &lt;em&gt;component id&lt;/em&gt; of p&lt;/li&gt;
&lt;li&gt;count(): nb of components&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意:
命名不是很好, 这里的&lt;code&gt;find()&lt;/code&gt;函数不对应FIND query, &lt;code&gt;connected()&lt;/code&gt;函数才是真正的FIND query, find()函数是为了connected()函数而做的一个辅助函数(find(p): return the root of the node p )
在connected里就可以调用find: &lt;code&gt;return find(p)==find(q)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;应该是interface更好一些... &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;public interface UF{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;void union(int p, int q);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;boolean connected(int p, int q);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;//int find(int p);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;//int count();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试client: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;h1 id="2-quick-find_1"&gt;2. Quick Find&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;"eager approach"&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="data-structure"&gt;data structure&lt;/h3&gt;
&lt;p&gt;⇒ an int array &lt;code&gt;id[]&lt;/code&gt;
initialized to &lt;em&gt;id[p]=p for all p&lt;/em&gt;
interpretation: &lt;em&gt;id[p] = &lt;strong&gt;&lt;em&gt;component id of obj p&lt;/em&gt;&lt;/strong&gt;
⇒ p and q are connected &lt;/em&gt;iff* id[p]==id[q] (ie. find very fast)
没有用find()函数  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image002.png"/&gt; &lt;/p&gt;
&lt;h3 id="uf-operations"&gt;UF operations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FIND:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;connected(p,q):&lt;/code&gt; very fast, just check id[p] and id[q]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UNION:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;when merging 2 components :
&lt;code&gt;union(p,q)&lt;/code&gt;: &lt;code&gt;id[p]=id[q]&lt;/code&gt;(总是让第一个参数p的id变为第二个参数q的id), &lt;br/&gt;
⇒ then have to modify &lt;em&gt;all entries&lt;/em&gt; with id equal to &lt;code&gt;id[p]&lt;/code&gt; !&lt;br/&gt;
⇒ too many entries to change  &lt;/p&gt;
&lt;h3 id="implementation"&gt;implementation&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(class  QuickFindUF implements UF)&lt;/em&gt;&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;p&gt;complexity: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FIND: cte&lt;/li&gt;
&lt;li&gt;UNION: lin...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;if N obj + N unions ⇒ &lt;em&gt;quad time !&lt;/em&gt;&lt;br/&gt;
btw, 程序运行速度: &lt;strong&gt;~10^9/s&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="3-quick-union_1"&gt;3. Quick Union&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;"lazy approach"&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="data-structure_1"&gt;data structure&lt;/h3&gt;
&lt;p&gt;⇒ also an int array &lt;code&gt;id[]&lt;/code&gt;
considering a set of &lt;em&gt;trees, &lt;/em&gt;此时每个联通分支都是一个tree&lt;br/&gt;
interpretation: &lt;em&gt;id[p] = &lt;em&gt;&lt;strong&gt;parent index of obj p &lt;/strong&gt;(觉得这个数组叫做father更好....)&lt;br/&gt;
⇒ p is a root node &lt;/em&gt;iff&lt;/em&gt; id[p]==p&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image005.png"/&gt;&lt;/p&gt;
&lt;h3 id="uf-operations_1"&gt;UF operations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FIND:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;connected(p,q):&lt;/code&gt;check if &lt;em&gt;root of p == root of q&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UNION: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;union(p,q):&lt;/code&gt;just set p's root to be &lt;em&gt;child&lt;/em&gt; of q's root (把第一个参数p的那棵树放入第二个参数q的树的根节点作为子树)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;root():&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前两个的操作都需要一个函数查找一个节点的root,  需要写一个函数实现, 也很简单, 一路找parent即可:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="implementation_1"&gt;implementation&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;h3 id="complexity"&gt;complexity&lt;/h3&gt;
&lt;p&gt;in the worst case (all elements is in a list form), root() is ~N, so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FIND: lin&lt;/li&gt;
&lt;li&gt;UNION: lin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;quick find和quick union的问题: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image009.png"/&gt;&lt;/p&gt;
&lt;h1 id="4-quick-union-improvements_1"&gt;4. Quick Union Improvements&lt;/h1&gt;
&lt;h2 id="improvement1-weighting"&gt;improvement1: weighting&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;keep track of tree size&lt;/em&gt; ⇒ balance by taking the small tree be a child of the large tree  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image010.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image011.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ add an extra array: &lt;code&gt;sz[]&lt;/code&gt; sz[i] is the size of the tree with root i&lt;/p&gt;
&lt;h3 id="implementation_2"&gt;implementation&lt;/h3&gt;
&lt;p&gt;(数组&lt;code&gt;int  sz[]&lt;/code&gt; 初始全部为1)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;依然需要&lt;code&gt;root()&lt;/code&gt;函数.&lt;/p&gt;
&lt;p&gt;private int root(int p){
    while(p!=id[p]) p=id[p];
    return p;
}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FIND &lt;/p&gt;
&lt;p&gt;public boolean connected(int p, int q){
    return root(p)==root(q);
}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UNION&lt;/p&gt;
&lt;p&gt;public void  union(int p, int q){
    int rp = root(p), rq=root(q);
    if(rp==rq) return; // 
    if (sz[rp]&amp;lt;sz[rq]){
        id[rp]=rq;
        sz[rq]+=sz[rp];
    }
    else{...}
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="complexity_1"&gt;complexity&lt;/h3&gt;
&lt;p&gt;FIND: proportional to &lt;em&gt;depth of p and&lt;/em&gt; q in their tree
UNION: const if p and q are root&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;proposition&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the max depth of weightedQuickUnion is &lt;strong&gt;lgN&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[pf] considering a node &lt;code&gt;x&lt;/code&gt;, in tree &lt;code&gt;T1&lt;/code&gt;, &lt;code&gt;dep(x)&lt;/code&gt; is x's depth in its tree.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image012.png"/&gt; &lt;br/&gt;
→   &lt;code&gt;dep(x)&lt;/code&gt; will increase by 1, iff &lt;code&gt;T1&lt;/code&gt; is merged into another tree &lt;code&gt;T2&lt;/code&gt; (and by the algo, shoud have |T1|&amp;lt;=|T2| )&lt;br/&gt;
→   x's tree's size become |T1|+|T2| &amp;gt;= 2&lt;em&gt;|T1| 
⇒   everytime dep(x) increased by 1, x's tree's size will &lt;/em&gt;at least double*&lt;br/&gt;
at first dep(x)=1, if dep(x) increases lgN times, the size of the tree will be &amp;gt;=  N &lt;br/&gt;
CQFD.&lt;/p&gt;
&lt;p&gt;so the &lt;code&gt;root()&lt;/code&gt; function takes only lgN time. 
&lt;strong&gt;conclusion&lt;/strong&gt;: both UNION and FIND will be in &lt;strong&gt;lgN &lt;/strong&gt;time. &lt;/p&gt;
&lt;h2 id="improvement-2-path-compression_1"&gt;improvement 2: path compression&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;imporve the root() function: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;when looking for root of a node ⇒ link &lt;em&gt;all nodes in the path &lt;/em&gt;up to the root. &lt;br/&gt;
⇒ just a constant extra time compared to old implementation. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2 pass implementation: &lt;/p&gt;
&lt;p&gt;private int root(int p){
    int r = p;
    while(r!=id[r]) r=id[r];
    while(p!=r){
        int t = p;
        p=id[p];
        id[t]=r;
    }
    return r;
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;flatens the tree greatly. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;single pass implementation: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;just make all other node &lt;em&gt;point to its grandparent&lt;/em&gt; (halving the path length)
⇒ not as flatening as before, but in practice will almost be the same. 
just one extra line of code: 
    private int root(int p){
        while(p!=id[p]){ 
            id[p] = id[ id[p] ];
            p=id[p];  &lt;br/&gt;
        }
        return p;
    }&lt;/p&gt;
&lt;h3 id="complexity_2"&gt;complexity&lt;/h3&gt;
&lt;p&gt;(for weighet quick union with path compression — &lt;em&gt;WQUPC&lt;/em&gt;)&lt;br/&gt;
very very small: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image013.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lg*()&lt;/strong&gt; function: "&lt;em&gt;iterated log function&lt;/em&gt;", lg&lt;em&gt;(N) = the number of time to take log to get to 1
lg&lt;/em&gt;()几乎可以看成常数了:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image014.png"/&gt; &lt;br/&gt;
ex. &lt;em&gt;lg&lt;/em&gt;(65536) = 4* (x^16=65536)&lt;br/&gt;
because: lg(65536)=16 ; lg(16) = 4; lg(4)=2; lg(2)=1. &lt;br/&gt;
&lt;strong&gt;⇒ N obj, M unions will take (almost) linear time&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image015.png"/&gt; &lt;br/&gt;
(有人证明了不存在&lt;em&gt;理论上&lt;/em&gt;linear的算法. )&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;conclusion&lt;/strong&gt;: both UNION and FIND will be in &lt;strong&gt;constant time&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="summery_1"&gt;summery&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image017.png"/&gt; &lt;br/&gt;
上面这个表格好像quick union的部分有问题? 最坏情况下应该是N+MN吧??&lt;br/&gt;
书上是这么写的:  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image016.png"/&gt;&lt;/p&gt;
&lt;p&gt;WQUCF reduce 30 years to 6 seconds. &lt;/p&gt;
&lt;h1 id="5-union-find-application_1"&gt;5. Union Find Application&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image018.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;percolation&lt;/li&gt;
&lt;li&gt;dynamic connectivity&lt;/li&gt;
&lt;li&gt;Kruskal MST algo&lt;/li&gt;
&lt;li&gt;Games (GO)&lt;/li&gt;
&lt;li&gt;.......&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="percolation"&gt;percolation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;model: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;N&lt;em&gt;N grid of sites&lt;br/&gt;
⇒ each site is open with proba=&lt;/em&gt;p*&lt;br/&gt;
⇒ sys &lt;strong&gt;percolate&lt;/strong&gt; iff bottom and top are connected by open sites.  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image019.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;question: the &lt;em&gt;percolation probability&lt;/em&gt; as a function of &lt;em&gt;p &lt;/em&gt;(&lt;strong&gt;phase transition&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image020.png"/&gt; &lt;br/&gt;
nobody knows how to get the threshold mathematically&lt;br/&gt;
⇒ run &lt;em&gt;simulations&lt;/em&gt; to find out the phase transition &lt;em&gt;threshold&lt;/em&gt;.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monte Carlo simulation   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ all sites initilized to be &lt;em&gt;closed&lt;/em&gt;&lt;br/&gt;
→ randomly open sites &lt;em&gt;one by one&lt;/em&gt; &lt;br/&gt;
→ when the sys percolates, the &lt;em&gt;vacancy percentage&lt;/em&gt; is an estimate of &lt;em&gt;p&lt;/em&gt; &lt;br/&gt;
*(run above simulation for millions of times)   &lt;/p&gt;
&lt;h3 id="implementation_3"&gt;implementation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;N^2 sites, named 0 to N^2-1  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image022.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add 2 more vertual sites: one on top, one on bottom   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/algoI_week1_1/pasted_image021.png"/&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;openning a site: union to adjcent open sites (at most 4 unions)&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category></entry><entry><title>[Spark MOOC note] Lec8. Exploratory Data Analysis and Machine Learning</title><link href="https://x-wei.github.io/sparkmooc_note_lec8.html" rel="alternate"></link><published>2015-06-23T00:00:00+02:00</published><updated>2015-06-23T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-06-23:sparkmooc_note_lec8.html</id><summary type="html">&lt;h2 id="statistics-business-questions-and-learning-techniques"&gt;STATISTICS, BUSINESS QUESTIONS, AND LEARNING TECHNIQUES&lt;/h2&gt;
&lt;p&gt;2 different kinds of statistics: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;descriptive statistics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. median — describes data, &lt;em&gt;but cannot generalize beyong that&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inferential statistics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. &lt;em&gt;t-testing — inferences beyond the data&lt;/em&gt;
techniques leveraged for machine learning and prediction&lt;/p&gt;
&lt;p&gt;supervised learning (clf, reg), unsupervised learning (clustering, dim-reduction)
 → UL often used in a larger SL pb (ex. &lt;em&gt;auto-encoder&lt;/em&gt;)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec8/pasted_image.png"/&gt;&lt;/p&gt;
&lt;h2 id="exploratory-data-analysis"&gt;EXPLORATORY DATA ANALYSIS&lt;/h2&gt;
&lt;p&gt;5-number summary:&lt;/p&gt;
&lt;p&gt;The five-number summary is a descriptive statistic that provides information about a set of observations. It consists of the five most important sample percentiles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The sample minimum (smallest observation)&lt;/li&gt;
&lt;li&gt;The lower quartile or first quartile&lt;/li&gt;
&lt;li&gt;The median (middle value)&lt;/li&gt;
&lt;li&gt;The upper quartile or third quartile&lt;/li&gt;
&lt;li&gt;The sample maximum (largest observation)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec8/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;→ box plot: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec8/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;h2 id="the-r-language-and-normal-distributions"&gt;THE R LANGUAGE AND NORMAL DISTRIBUTIONS&lt;/h2&gt;
&lt;p&gt;R: intractive exploration and visulization of data + statistical models and distributions + CRAN&lt;/p&gt;
&lt;p&gt;Central Limit Th: sum/mean of n iid random variables 
many statistical test assume data to be normally distributed&lt;/p&gt;
&lt;h2 id="distributions"&gt;DISTRIBUTIONS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;poissons distribution: accurrence freq&lt;/li&gt;
&lt;li&gt;exponential distribution: interval between 2 (poissons) events&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Zipf/Pareto/Yule distributions&lt;/em&gt;: frequencies of different terms in a document, or web site visits&lt;/li&gt;
&lt;li&gt;binomial/multinomial distribution: nb of count of events&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rhine-paradox"&gt;RHINE PARADOX&lt;/h2&gt;
&lt;h2 id="sparks-machine-learning-toolkit"&gt;SPARK'S MACHINE LEARNING TOOLKIT&lt;/h2&gt;
&lt;p&gt;mllib: scalable, distributed ML library, &lt;em&gt;sklearn-like&lt;/em&gt; ML toolkit
&lt;a href="https://spark.apache.org/docs/latest/mllib-guide.html"&gt;https://spark.apache.org/docs/latest/mllib-guide.html&lt;/a&gt;
lab: &lt;em&gt;collaborative filtering — &lt;/em&gt;matrix factorisation&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec8/pasted_image005.png"/&gt;&lt;br/&gt;
⇒ &lt;em&gt;alternating&lt;/em&gt; least square(ALS):  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec8/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;trouble with summary stats&lt;/strong&gt;: &lt;em&gt;Anscombe's Quartet&lt;/em&gt;
→ have same statistics property&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec8/pasted_image002.png"/&gt;&lt;br/&gt;
→ quite different in fact: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec8/pasted_image003.png"/&gt;&lt;br/&gt;
&lt;strong&gt;Takeaways&lt;/strong&gt;:&lt;br/&gt;
&lt;em&gt;•  Important to look at data graphically before analyzing it   &lt;/em&gt;
&lt;em&gt;•  Basic statistics properties often fail to capture real-world complexities&lt;/em&gt; &lt;/p&gt;
&lt;h2 id="lab3-text-analysis-and-entity-resolution"&gt;Lab3. Text Analysis and Entity Resolution&lt;/h2&gt;
&lt;p&gt;Entity Resolution (ER) refers to the task of finding records in a data set that refer to the same entity across different data sources (e.g., data files, books, websites, databases). ER is necessary when joining data sets based on entities that may or may not share a common identifier (e.g., database key, URI, National identification number), as may be the case due to differences in record shape, storage location, and/or curator style or preference. A data set that has undergone ER may be referred to as being cross-linked.&lt;/p&gt;
&lt;p&gt;The file format of an Amazon line is:
"id","title","description","manufacturer","price"
The file format of a Google line is:
"id","name","description","manufacturer","price"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;re.split&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;re.split()有个很讨厌的地方: 字符串以句号等结尾时, 最后总是会出现一个空字符串:
    &amp;gt;&amp;gt;&amp;gt; re.split('\W+', 'Words, words, words.')
    ['Words', 'words', 'words', '']
解决办法就是用个filter:　
&lt;code&gt;filter(None,re.split(split_regex, string.lower()) )&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tfidf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TF rewards tokens that appear many times in the same document. It is computed as the frequency of a token in a document. IDF rewards tokens that are rare overall in a dataset. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cosine similarity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The metric of string distance we will use is called cosine similarity. We will treat each document as a vector in some high dimensional space. Then, to compare two documents we compute the cosine of the angle between their two document vectors. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flatMap&lt;/code&gt;: 一行变多行, 别忘了...&lt;/li&gt;
&lt;li&gt;broadcast variable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;we define the broadcast variable in the driver and then we can refer to it in each worker. Spark saves the broadcast variable at each worker, so it is only sent once.
声明广播变量的办法也很简单, 只要:
 &lt;code&gt;idfsSmallBroadcast = sc.broadcast(idfsSmallWeights)&lt;/code&gt;
然后用的时候要改成&lt;code&gt;xx.value&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EXCEPT语句&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;找了一下没发现spark有SQL的EXCEPT语句(就是和join相反), 于是只好这么写了:
    nonDupsRDD = (sims
                  .leftOuterJoin(goldStandard)
                 .filter(lambda x: x[1][1]==None)
                 .map(lambda x:(x[0],x[1][0])))
用leftouterjoin 然后再只保留为None的那些... 应该不是最佳写法吧...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用的ER办法(cosine similarity)的复杂度是O2 太高了...
⇒ An &lt;strong&gt;inverted index&lt;/strong&gt; is a data structure that will allow us to avoid making quadratically many token comparisons. It maps each token in the dataset to &lt;em&gt;the list of documents that contain the token&lt;/em&gt;. So, instead of comparing, record by record, each token to every other token to see if they match, we will use inverted indices to &lt;em&gt;look up records(documents) that match on a particular token&lt;/em&gt;.
这种操作的基础是: 有很多向量的support是完全不重合的 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.&lt;code&gt;collectAsMap()&lt;/code&gt;: 把pair rdd变为map&lt;/li&gt;
&lt;li&gt;groupByKey(): 这个也用上了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lab4前后做了四个小时 不过很有意思... 第五部分出现out of memory error就没办法了...&lt;/p&gt;</summary><category term="spark"></category></entry><entry><title>[Spark MOOC note] Lec7. Data Quality</title><link href="https://x-wei.github.io/sparkmooc_note_lec7.html" rel="alternate"></link><published>2015-06-22T00:00:00+02:00</published><updated>2015-06-22T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-06-22:sparkmooc_note_lec7.html</id><summary type="html">&lt;h2 id="data-cleaning"&gt;DATA CLEANING&lt;/h2&gt;
&lt;p&gt;ex. 
deal with missing data, entity resolution, unit mismatch, ... &lt;/p&gt;
&lt;p&gt;deal with non-ideal samples ⇒ tradeoff between simplicity and accuracy. &lt;/p&gt;
&lt;h2 id="data-quality-problems"&gt;DATA QUALITY PROBLEMS&lt;/h2&gt;
&lt;p&gt;data quality problems: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conversions in complex pipelines can mess up data &lt;/li&gt;
&lt;li&gt;Combining multiple datasets can result in errrors&lt;/li&gt;
&lt;li&gt;Data degrades in accuracy or loses value over time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还提供了一些工具帮助cleaning data: &lt;a href="http://vis.stanford.edu/wrangler/"&gt;http://vis.stanford.edu/wrangler/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="example-ages-of-students-in-this-course"&gt;EXAMPLE: AGES OF STUDENTS IN THIS COURSE&lt;/h2&gt;
&lt;p&gt;(students' ages are self-reported...)&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec7/pasted_image.png"/&gt;&lt;/p&gt;
&lt;h2 id="data-cleaning-makes-everything-okay"&gt;DATA CLEANING MAKES EVERYTHING OKAY?&lt;/h2&gt;
&lt;p&gt;ex. the appearance of a hole in the ozone layer. &lt;/p&gt;
&lt;h2 id="dirty-data-problems"&gt;DIRTY DATA PROBLEMS&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec7/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;Data Quality Continuum:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec7/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;h2 id="data-gathering"&gt;DATA GATHERING&lt;/h2&gt;
&lt;p&gt;solutions in the data gathering stage: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;re-emptive (先发制人) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;integrity checks&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;retrospective&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;duplicate removal&lt;/p&gt;
&lt;h2 id="data-delivery"&gt;DATA DELIVERY&lt;/h2&gt;
&lt;p&gt;solutions: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec7/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;h2 id="data-storage"&gt;DATA STORAGE&lt;/h2&gt;
&lt;p&gt;physical pb: storage is cheap → use data redundancy 
logical pb: poor metadata, etc&lt;/p&gt;
&lt;p&gt;⇒ solutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;publish &lt;em&gt;data specifications&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;data mining tools&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="data-retrieval"&gt;DATA RETRIEVAL&lt;/h2&gt;
&lt;p&gt;...总之就是各种方面都会引起data quality pb... &lt;/p&gt;
&lt;h2 id="data-quality-constraints"&gt;DATA QUALITY CONSTRAINTS&lt;/h2&gt;
&lt;p&gt;static constraints: 
ex. nulls not allowed, field domains&lt;/p&gt;
&lt;p&gt;data constraints follow a 80-20 rule: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec7/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data quality metrics&lt;/strong&gt;: ...
ex. in lab2, examine log lines that are not correctly parsed.&lt;/p&gt;
&lt;h2 id="technical-approaches-to-data-quality"&gt;TECHNICAL APPROACHES TO DATA QUALITY&lt;/h2&gt;
&lt;p&gt;ex. entity resolution in lab3&lt;/p&gt;
&lt;h2 id="example-dedupcleaning"&gt;EXAMPLE: DEDUP/CLEANING&lt;/h2&gt;
&lt;p&gt;bing shopping被黑了
convert to &lt;em&gt;canonical form &lt;/em&gt;(ex. mailing address)&lt;/p&gt;</summary><category term="spark"></category></entry><entry><title>[Spark MOOC note] Lec6. Structured Data</title><link href="https://x-wei.github.io/sparkmooc_note_lec6.html" rel="alternate"></link><published>2015-06-18T00:00:00+02:00</published><updated>2015-06-18T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-06-18:sparkmooc_note_lec6.html</id><summary type="html">&lt;h2 id="relational-database"&gt;RELATIONAL DATABASE&lt;/h2&gt;
&lt;p&gt;review: key data management concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data model &lt;/li&gt;
&lt;li&gt;schema&lt;/li&gt;
&lt;li&gt;&lt;em&gt;relational data model&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;structured data: have a specific schema to start with&lt;/p&gt;
&lt;p&gt;relationl database: a set of relations.
2 parts to a Relation: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;schema: name of relation, name and type of columns&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec6//pasted_image.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;instance: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;any data at given time 
(&lt;em&gt;cardinality&lt;/em&gt;:=nb of rows, &lt;em&gt;degree&lt;/em&gt;:=nb of fields)&lt;/p&gt;
&lt;h2 id="large-databases"&gt;LARGE DATABASES&lt;/h2&gt;
&lt;h2 id="relational-database-example-and-discussion"&gt;RELATIONAL DATABASE EXAMPLE AND DISCUSSION&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec6//pasted_image001.png"/&gt; &lt;br/&gt;
cardinality=3
degree=5&lt;/p&gt;
&lt;p&gt;advantages of Relational Databases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;well-def structure&lt;/li&gt;
&lt;li&gt;maintain indices for high performance&lt;/li&gt;
&lt;li&gt;consistancy maintained by transactions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;disadvantages: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;limited, rigid structure&lt;/li&gt;
&lt;li&gt;most disk space taken by large indices&lt;/li&gt;
&lt;li&gt;transactions are slow&lt;/li&gt;
&lt;li&gt;poor support for &lt;em&gt;sparse data&lt;/em&gt;(which is common)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="structured-query-language-sql"&gt;STRUCTURED QUERY LANGUAGE (SQL)&lt;/h2&gt;
&lt;p&gt;supported by &lt;strong&gt;DataFrame&lt;/strong&gt; of pyspark &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec6//pasted_image002.png"/&gt;&lt;/p&gt;
&lt;h2 id="joins-in-sql"&gt;JOINS IN SQL&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec6//pasted_image003.png"/&gt;
cross join: carteian product&lt;/p&gt;
&lt;h2 id="explicit-sql-joins"&gt;EXPLICIT SQL JOINS&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec6//pasted_image004.png"/&gt;
explicit version is preferred&lt;/p&gt;
&lt;h2 id="types-of-sql-joins"&gt;TYPES OF SQL JOINS&lt;/h2&gt;
&lt;p&gt;⇒ controls how &lt;em&gt;unmatched&lt;/em&gt; keys are handled&lt;/p&gt;
&lt;p&gt;LEFT OUTER JOIN: 
keys appearring in left table but not in right table will be included with NULL as value&lt;/p&gt;
&lt;h2 id="joins-in-spark"&gt;JOINS IN SPARK&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;for spark DataFrame: support inner/left outer/semi-join&lt;/li&gt;
&lt;li&gt;for &lt;em&gt;pair RDDs&lt;/em&gt;: support inner join(), leftOuterJoin(), fullOuterJoin()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;join ex:
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec6//pasted_image005.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec6//pasted_image006.png"/&gt;&lt;/p&gt;
&lt;p&gt;outerjoin ex:
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec6//pasted_image007.png"/&gt;&lt;/p&gt;
&lt;p&gt;fullouterjoin ex:
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec6//pasted_image008.png"/&gt;&lt;/p&gt;
&lt;h2 id="lab-2-web-server-log-analysis-with-apache-spark"&gt;Lab 2 - Web Server Log Analysis with Apache Spark&lt;/h2&gt;
&lt;p&gt;Apache Common Log Format (CLF):&lt;br/&gt;
&lt;code&gt;127.0.0.1 - - [01/Aug/1995:00:00:01 -0400] "GET /images/launch-logo.gif HTTP/1.0" 200 1839&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Row(
host          = match.group(1),
client_identd = match.group(2),
user_id       = match.group(3),
date_time     = parse_apache_time(match.group(4)),
method        = match.group(5),
endpoint      = match.group(6),
protocol      = match.group(7),
response_code = int(match.group(8)),
content_size  = size 
)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;distinctByKey&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个pair RDD按照key来distinct不知道有没有distinctByKey之类的东西, 只好写成这样, 不知是不是对的: 
&lt;code&gt;dayHostCount = dayGroupedHosts.map(lambda group : (group[0], len(set(group[1])) ) )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;...总体来说很有意思的一个lab...&lt;/p&gt;</summary><category term="spark"></category></entry><entry><title>[Spark MOOC note] Lec5. Semi-structured Data</title><link href="https://x-wei.github.io/sparkmooc_note_lec5.html" rel="alternate"></link><published>2015-06-17T00:00:00+02:00</published><updated>2015-06-17T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-06-17:sparkmooc_note_lec5.html</id><summary type="html">&lt;h2 id="key-data-management-concepts"&gt;KEY DATA MANAGEMENT CONCEPTS&lt;/h2&gt;
&lt;p&gt;data model: collection of concepts for describing data
schema: a description of a particular collection of data using a given data model&lt;/p&gt;
&lt;p&gt;structure spectrum: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec5/pasted_image.png"/&gt;
semi-structured data: apply schema &lt;strong&gt;after&lt;/strong&gt; creating data. &lt;/p&gt;
&lt;h2 id="files"&gt;FILES&lt;/h2&gt;
&lt;p&gt;files: named collection of bytes, in hierarchical namespace (but: In a Content-Addressable Storage system files are stored, arranged, and accessed based on their content or metadata, not in hierarchy)&lt;/p&gt;
&lt;h2 id="semi-structured-tabular-data"&gt;SEMI-STRUCTURED TABULAR DATA&lt;/h2&gt;
&lt;p&gt;table: a collection of rows and columns, each row has an &lt;em&gt;index&lt;/em&gt;, each column has a &lt;em&gt;name&lt;/em&gt;. 
cell: by a pair (row, col), values can be missing, types are &lt;em&gt;inffered&lt;/em&gt; from content&lt;/p&gt;
&lt;p&gt;CSV:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec5/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;PDB:(filed name can be repeated on multuple lines)  &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec5/pasted_image001.png"/&gt; &lt;/p&gt;
&lt;h2 id="challenges-with-tabular-data"&gt;CHALLENGES WITH TABULAR DATA&lt;/h2&gt;
&lt;p&gt;challenges: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec5/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;challenges for tabular data &lt;em&gt;from multiple source&lt;/em&gt;: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec5/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;p&gt;challenges for tabular data &lt;em&gt;from sensors&lt;/em&gt;: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec5/pasted_image005.png"/&gt;&lt;/p&gt;
&lt;h2 id="pandas-and-semi-structured-data-in-pyspark"&gt;PANDAS AND SEMI-STRUCTURED DATA IN PYSPARK&lt;/h2&gt;
&lt;p&gt;pandas &lt;code&gt;DataFrame&lt;/code&gt;: represented as python dict (colname → series)
pandas &lt;code&gt;Series&lt;/code&gt;: 1D labeled array capable of holding any data type&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;spark DataFrame&lt;/strong&gt;: &lt;em&gt;Distributed&lt;/em&gt; collection of data organized into named columns. 
types of columns are inferred from values. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec5/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;p&gt;Using dataframes can be 5 times faster than using RDDs: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec5/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;h2 id="semi-structured-log-files"&gt;SEMI-STRUCTURED LOG FILES&lt;/h2&gt;
&lt;p&gt;ex. Apache web server log format&lt;/p&gt;
&lt;h2 id="exploring-a-web-server-access-log"&gt;EXPLORING A WEB SERVER ACCESS LOG&lt;/h2&gt;
&lt;p&gt;NASA http server access log&lt;br/&gt;
&lt;a href="http://ita.ee.lbl.gov/html/contrib/NASA-HTTP.html"&gt;http://ita.ee.lbl.gov/html/contrib/NASA-HTTP.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="data-mining-log-files"&gt;DATA MINING LOG FILES&lt;/h2&gt;
&lt;p&gt;Data mining log files is a data exploration process that often involves searching through the data for unusual events, a task that can be done using dashboards for visualizing anomalies. The data being analyzed usually includes machine resource usage data and application queue information.&lt;/p&gt;
&lt;h2 id="file-performance"&gt;FILE PERFORMANCE&lt;/h2&gt;
&lt;p&gt;binary/text performance benchmark:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec5/pasted_image008.png"/&gt;&lt;br/&gt;
⇒&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read and write times are comparable &lt;/li&gt;
&lt;li&gt;binary files are mach faster than palin text files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;compression performance benchmark:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/sparkmooc_note_lec5/pasted_image009.png"/&gt;&lt;br/&gt;
⇒ &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;write times are much larger than read times &lt;/li&gt;
&lt;li&gt;small range of compressed file size&lt;/li&gt;
&lt;li&gt;binary still much faster than text &lt;/li&gt;
&lt;li&gt;LZ4 compression ~= raw IO speed&lt;/li&gt;
&lt;/ul&gt;</summary><category term="spark"></category></entry><entry><title>[Spark MOOC note] Lec4. Spark Essentials</title><link href="https://x-wei.github.io/sparkmooc_note_lec4.html" rel="alternate"></link><published>2015-06-16T00:00:00+02:00</published><updated>2015-06-16T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2015-06-16:sparkmooc_note_lec4.html</id><summary type="html">&lt;h2 id="python-spark-pyspark"&gt;PYTHON SPARK (PYSPARK)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;a spark prog has 2 programs:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dirver program: runs on driver machine&lt;/li&gt;
&lt;li&gt;worker program: runs on local threads or cluster nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a spark prog first creates a &lt;strong&gt;SparkContext object:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tells how and where to access a cluster&lt;/li&gt;
&lt;li&gt;shell will automatically create &lt;strong&gt;the sc varible&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;in iPython: use constructor to create a &lt;code&gt;SparkContext&lt;/code&gt; obj&lt;/li&gt;
&lt;li&gt;⇒ use this SparkContext obj to create RDDs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Master:&lt;br/&gt;
The &lt;code&gt;master&lt;/code&gt; parameter (for a SparkContext) determines which type and size of cluster to use
&lt;img alt="" class="img-responsive" src="../images/./sparkmooc_note_lec4/pasted_image.png"/&gt;&lt;/p&gt;
&lt;h2 id="rdds"&gt;RDDs&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Resilient Distributed Dataset&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;immutable once created&lt;/li&gt;
&lt;li&gt;spark tracks linege information to compute lost data efficiently&lt;/li&gt;
&lt;li&gt;operations on collections of elements in parallel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;to create RDDs&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;paralizing existing python collections&lt;/li&gt;
&lt;li&gt;transforming existing RDDs&lt;/li&gt;
&lt;li&gt;from files&lt;/li&gt;
&lt;li&gt;can specify the number of partitions for an RDD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./sparkmooc_note_lec4/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;2 types of operations on RDD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tranformation: lazy, &lt;em&gt;executed only one action runs on it&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;action&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Working with RDD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create an RDD&lt;/li&gt;
&lt;li&gt;apply transformations to that RDD (ex. map, filter)&lt;/li&gt;
&lt;li&gt;apply actions on RDD (collect, count)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex code:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;data = [1,2,3,4]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;rDD = sc.paralize(data, 4)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;distFile = sc.textFile("readme.txt", 4) // elements are lines in the file&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="spark-transformations"&gt;SPARK TRANSFORMATIONS&lt;/h2&gt;
&lt;p&gt;to create new dataset from existing one (lazy)&lt;/p&gt;
&lt;p&gt;examples of transformations: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/./sparkmooc_note_lec4/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;h2 id="python-lambda-functions"&gt;PYTHON LAMBDA FUNCTIONS&lt;/h2&gt;
&lt;p&gt;single expression&lt;/p&gt;
&lt;h2 id="transformations"&gt;TRANSFORMATIONS&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./sparkmooc_note_lec4/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;p&gt;⇒ spark truns the function litral into a cloture, balck code runs in driver, green code in workers&lt;/p&gt;
&lt;h2 id="spark-actions"&gt;SPARK ACTIONS&lt;/h2&gt;
&lt;p&gt;cause spark to execute recipe to transform source. 
&lt;img alt="" class="img-responsive" src="../images/./sparkmooc_note_lec4/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;h2 id="spark-programming-model"&gt;SPARK PROGRAMMING MODEL&lt;/h2&gt;
&lt;h2 id="caching-rdds"&gt;CACHING RDDS&lt;/h2&gt;
&lt;p&gt;to avoid having to reload data: &lt;code&gt;rdd.cache()&lt;/code&gt;⇒ read from memory instead of disk&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/./sparkmooc_note_lec4/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;h2 id="spark-program-lifecycle"&gt;SPARK PROGRAM LIFECYCLE&lt;/h2&gt;
&lt;p&gt;create/paralise ⇒ transform ⇒ [cache] ⇒ action&lt;/p&gt;
&lt;h2 id="spark-key-value-rdds"&gt;SPARK KEY-VALUE RDDS&lt;/h2&gt;
&lt;p&gt;each element of a &lt;em&gt;pair RDD&lt;/em&gt; is a pair tuple&lt;/p&gt;
&lt;p&gt;key-value transformations: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/./sparkmooc_note_lec4/pasted_image008.png"/&gt;&lt;/p&gt;
&lt;p&gt;ex:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/./sparkmooc_note_lec4/pasted_image009.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./sparkmooc_note_lec4/pasted_image010.png"/&gt;&lt;/p&gt;
&lt;p&gt;careful using &lt;code&gt;groupByKey&lt;/code&gt;: create lots of data traffic and iterables at works&lt;/p&gt;
&lt;h2 id="pyspark-closures"&gt;PYSPARK CLOSURES&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;one closure per worker is sent &lt;em&gt;with every task&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;no communication between workers&lt;/li&gt;
&lt;li&gt;changes to global vars will not effect driver / other workers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ pbs: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inefficient to send large data to each job&lt;/li&gt;
&lt;li&gt;one-way: driver → worker&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;pyspark shared vaiables&lt;/strong&gt;: 
2 types: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Broadcase variables&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;send large, read-only variables to all workers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accumulators&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;aggregate values from worker to drivers &lt;/li&gt;
&lt;li&gt;only driver can access its value&lt;/li&gt;
&lt;li&gt;for workers the accumulators are write-only&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="spark-broadcast-variables"&gt;SPARK BROADCAST VARIABLES&lt;/h2&gt;
&lt;p&gt;ex. give every worker a large dataset &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/./sparkmooc_note_lec4/pasted_image011.png"/&gt;&lt;/p&gt;
&lt;h2 id="spark-accumulators"&gt;SPARK ACCUMULATORS&lt;/h2&gt;
&lt;p&gt;can only be "add" to by associative operation &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/./sparkmooc_note_lec4/pasted_image012.png"/&gt;&lt;/p&gt;
&lt;p&gt;careful to use accumulators in transformations: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/./sparkmooc_note_lec4/pasted_image013.png"/&gt;&lt;/p&gt;
&lt;h2 id="lab1"&gt;Lab1&lt;/h2&gt;
&lt;p&gt;VB更新以后虚拟机打不开了, 解决办法在: &lt;br/&gt;
&lt;a href="http://bbs.deepin.org/forum.php?mod=viewthread&amp;amp;tid=26001"&gt;http://bbs.deepin.org/forum.php?mod=viewthread&amp;amp;tid=26001&lt;/a&gt;&lt;/p&gt;</summary><category term="spark"></category></entry></feed>