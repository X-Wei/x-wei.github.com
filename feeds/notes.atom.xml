<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mx's Blog</title><link href="http://x-wei.github.io" rel="alternate"></link><link href="http://x-wei.github.io/feeds/notes.atom.xml" rel="self"></link><id>http://x-wei.github.io</id><updated>2016-07-26T23:48:00+02:00</updated><entry><title>R语言从入门到放弃 (2). 向量(列表)及函数</title><link href="http://x-wei.github.io/Rnotes-2-seq_func.html" rel="alternate"></link><published>2016-07-26T23:48:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/Rnotes-2-seq_func.html</id><summary type="html">&lt;p&gt;首先, R似乎默认所有的变量都为向量vector, 即使一个单独的数字也是长度为1的, 所以&lt;code&gt;1&lt;/code&gt;等价于&lt;code&gt;c(1)&lt;/code&gt;.  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; a &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; a
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;a&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; a&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;a&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;double&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# means &amp;quot;double vector&amp;quot; (I think)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;fancy indexing&lt;/h2&gt;
&lt;p&gt;R的vector/list/matrix支持类似numpy(稍有不同)的fancy indexing, 以下是例子: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# slicing&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="c1"&gt;# EXCLUDING first 3 elements&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="m"&gt;5&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;  &lt;span class="m"&gt;7&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# EXCLUDING first element&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;  &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="m"&gt;5&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;  &lt;span class="m"&gt;7&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v&lt;span class="p"&gt;[&lt;/span&gt;v&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# indexing using logical array&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;

&lt;span class="c1"&gt;# works also for lists&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; l &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; l&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;

&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;

&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下是矩阵的fancy indexing例子: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; nrow&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ncol&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mat
     &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="m"&gt;7&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="m"&gt;8&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="m"&gt;3&lt;/span&gt;    &lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="m"&gt;9&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mat&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mat&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mat&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
     &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="m"&gt;8&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="m"&gt;3&lt;/span&gt;    &lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="m"&gt;9&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mat&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;names / dimnames&lt;/h2&gt;
&lt;p&gt;好玩的是可以用&lt;code&gt;names&lt;/code&gt;/&lt;code&gt;dimnames&lt;/code&gt;函数给每个值加上一个名字: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;v&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elem&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; sep&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;v&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v
 elem&lt;span class="m"&gt;-1&lt;/span&gt;  elem&lt;span class="m"&gt;-2&lt;/span&gt;  elem&lt;span class="m"&gt;-3&lt;/span&gt;  elem&lt;span class="m"&gt;-4&lt;/span&gt;  elem&lt;span class="m"&gt;-5&lt;/span&gt;  elem&lt;span class="m"&gt;-6&lt;/span&gt;  elem&lt;span class="m"&gt;-7&lt;/span&gt;  elem&lt;span class="m"&gt;-8&lt;/span&gt;  elem&lt;span class="m"&gt;-9&lt;/span&gt; elem&lt;span class="m"&gt;-10&lt;/span&gt; 
      &lt;span class="m"&gt;1&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;       &lt;span class="m"&gt;3&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;5&lt;/span&gt;       &lt;span class="m"&gt;6&lt;/span&gt;       &lt;span class="m"&gt;7&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="m"&gt;9&lt;/span&gt;      &lt;span class="m"&gt;10&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;v&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elem&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; sep&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;v&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v
 elem_1  elem_2  elem_3  elem_4  elem_5  elem_6  elem_7  elem_8  elem_9 elem_10 
      &lt;span class="m"&gt;1&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;       &lt;span class="m"&gt;3&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;       &lt;span class="m"&gt;5&lt;/span&gt;       &lt;span class="m"&gt;6&lt;/span&gt;       &lt;span class="m"&gt;7&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="m"&gt;9&lt;/span&gt;      &lt;span class="m"&gt;10&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v&lt;span class="o"&gt;$&lt;/span&gt;elem_1
Error &lt;span class="kr"&gt;in&lt;/span&gt; v&lt;span class="o"&gt;$&lt;/span&gt;elem_1 &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; operator is invalid &lt;span class="kr"&gt;for&lt;/span&gt; atomic vectors
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elem_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
elem_1 
     &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;l&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elem&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; sep&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;l&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; l&lt;span class="o"&gt;$&lt;/span&gt;elem_1
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; l&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;elem_1
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; l&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elem_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;elem_1
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面例子看到, vector不能使用&lt;code&gt;$&lt;/code&gt;来获得"field", 但是list可以, 这是list和vector的一个区别. &lt;/p&gt;
&lt;p&gt;下面是矩阵的例子: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;dimnames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mat&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kp"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;sep&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kp"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mat&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="kp"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;col&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;sep&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kp"&gt;ncol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mat&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mat
      col_1 col_2 col_3
row_1     &lt;span class="m"&gt;1&lt;/span&gt;     &lt;span class="m"&gt;4&lt;/span&gt;     &lt;span class="m"&gt;7&lt;/span&gt;
row_2     &lt;span class="m"&gt;2&lt;/span&gt;     &lt;span class="m"&gt;5&lt;/span&gt;     &lt;span class="m"&gt;8&lt;/span&gt;
row_3     &lt;span class="m"&gt;3&lt;/span&gt;     &lt;span class="m"&gt;6&lt;/span&gt;     &lt;span class="m"&gt;9&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mat&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;row_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;col_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;c()&lt;/h2&gt;
&lt;p&gt;关于&lt;code&gt;c&lt;/code&gt;这个函数, 值得一提的除了它自动"展开"参数的list/vector以外(上次博客提到), 还有就是它会自动cast, 文档里是这么说的: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The output type is determined from the highest type of the components in the hierarchy NULL &amp;lt; raw &amp;lt; logical &amp;lt; integer &amp;lt; double &amp;lt; complex &amp;lt; character &amp;lt; list &amp;lt; expression. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中的logical, integer, character都属于(atomic) vector, list和他们不同, 见后文. &lt;/p&gt;
&lt;p&gt;以下是例子: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; c(1,2,TRUE) # logical &amp;lt; integer
[1] 1 2 1
&amp;gt; c(1,2,&amp;quot;char&amp;quot;) # integer &amp;lt; character
[1] &amp;quot;1&amp;quot;    &amp;quot;2&amp;quot;    &amp;quot;char&amp;quot;
&amp;gt; c(1,2,list(1)) # integer &amp;lt; list
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 1
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;vector VS list ( matrix VS data.frame )&lt;/h2&gt;
&lt;p&gt;用于集合主要是vector和list, 他们的区别是: &lt;strong&gt;vector只能存放同样类型的元素, 而list可以存放不同类型的元素&lt;/strong&gt;&lt;em&gt;.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;vector可以是: numeric, logical, char... 类比一下, vector类似java里的array, list类似python的list. &lt;/p&gt;
&lt;p&gt;另外访问第i个元素, vector是 &lt;code&gt;v[i]&lt;/code&gt;, 而list需要用两个括号 &lt;code&gt;l[[i]]&lt;/code&gt;(&lt;code&gt;l[i]&lt;/code&gt;还是一个list, &lt;code&gt;l[[i]]&lt;/code&gt;才是想要的东西... )&lt;/p&gt;
&lt;p&gt;看例子: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; c(1,2,3) # numeric vector
[1] 1 2 3
&amp;gt; c(1,2,&amp;quot;a&amp;quot;) # c() 自动cast把前两个数字转成了char, 变成一个char类型的vector
[1] &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;a&amp;quot;
&amp;gt; list(1,2,&amp;quot;a&amp;quot;) # list
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] &amp;quot;a&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同理, matrix和data.frame也类似, matrix的所有元素必须相同, 而data.frame可以每一列各不相同(不过一列之中需要相同). 另外data.frame也支持用&lt;code&gt;$&lt;/code&gt;选取一列, matrix则不支持.&lt;/p&gt;
&lt;h2&gt;functions&lt;/h2&gt;
&lt;p&gt;R的函数定义为如下形式, 注意, 函数体的最后一句就是返回值, 不用显示写"return" (类似scala).&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;myfunnction &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;params&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;...&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  the.return.value
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外注意到上面函数定义, 参数里有三个点&lt;code&gt;...&lt;/code&gt;, 这个不是必须的, 它的的作用见下一节. &lt;/p&gt;
&lt;p&gt;R是函数式语言: 一个function可以作为参数传递, 例子就是&lt;code&gt;apply&lt;/code&gt;, 见下一节.&lt;/p&gt;
&lt;h2&gt;apply/lapply/sapply&lt;/h2&gt;
&lt;h3&gt;apply&lt;/h3&gt;
&lt;p&gt;apply这个函数的doc写到用法为: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;apply(X, MARGIN, FUN, ...)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X&lt;/code&gt;是操作的数据(&lt;strong&gt;一般为matrix&lt;/strong&gt;), &lt;code&gt;MARGIN&lt;/code&gt;为选择对行或列操作(类似numpy的&lt;code&gt;axis&lt;/code&gt;参数), &lt;code&gt;FUN&lt;/code&gt;就是作为参数传入的函数了. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; nrow&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ncol&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mat
     &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="m"&gt;7&lt;/span&gt;   &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="m"&gt;8&lt;/span&gt;   &lt;span class="m"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="m"&gt;3&lt;/span&gt;    &lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="m"&gt;9&lt;/span&gt;   &lt;span class="m"&gt;12&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mat&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# apply on row&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mat&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# apply on col&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;33&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里类似做reduce操作, 而MARGIN就是指定要reduce哪一个维度. &lt;/p&gt;
&lt;p&gt;另外文档里的三个点&lt;code&gt;...&lt;/code&gt;很有意思, 它是&lt;strong&gt;参数FUN的额外参数&lt;/strong&gt; ! 下面是一个例子, 给FUN传入了一个匿名函数: &lt;code&gt;function(x,power) sum(x^power)&lt;/code&gt;, 它计算x里元素的power次方, 然后加起来. 所以在apply里可以指定FUN这个&lt;code&gt;power&lt;/code&gt;参数的数值, 这就对应着apply用法里的这三个点&lt;code&gt;...&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; apply(mat, 1, function(x,power) sum(x^power), power=1 )
[1] 22 26 30
&amp;gt; apply(mat, 1, function(x,power) sum(x^power), power=2 )
[1] 166 214 270
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;lapply/sapply&lt;/h3&gt;
&lt;p&gt;如果说上面&lt;code&gt;apply&lt;/code&gt;一般用在matrix上, 用于将一个matrix &lt;strong&gt;reduce&lt;/strong&gt;为向量的话, &lt;code&gt;lapply/sapply&lt;/code&gt;就是&lt;strong&gt;map&lt;/strong&gt;操作了: 作用在一个vector/list上, 返回对每一个元素进行操作后的新list. &lt;/p&gt;
&lt;p&gt;它们的区别大概是: lapply返回list, sapply返回vector. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; sq &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; x&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; l &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;v&lt;span class="p"&gt;,&lt;/span&gt; sq&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# lapply returns a list&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;

&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;

&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;l&lt;span class="p"&gt;,&lt;/span&gt; sq&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# lapply returns a list&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;

&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;

&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;v&lt;span class="p"&gt;,&lt;/span&gt; sq&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# sapply returns a vector&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;l&lt;span class="p"&gt;,&lt;/span&gt; sq&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# sapply returns a vector&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="R"></category></entry><entry><title>R语言从入门到放弃 (1). 基础</title><link href="http://x-wei.github.io/Rnotes-1-basics.html" rel="alternate"></link><published>2016-07-26T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/Rnotes-1-basics.html</id><summary type="html">&lt;p&gt;这个"从入门到放弃"系列是为了应付eth的&lt;a href="https://stat.ethz.ch/education/semesters/ss2016/CompStat"&gt;computational statistics&lt;/a&gt;这门课... 对R无爱... &lt;/p&gt;
&lt;h2&gt;terminology&lt;/h2&gt;
&lt;p&gt;首先在stat里面有一些叫法和以前不太一样: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;predictor variable&lt;/code&gt;: 就是机器学习里面说的feature (Xi)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;response variable&lt;/code&gt;: 就是要预测的东西(y)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Rstudio&lt;/h2&gt;
&lt;p&gt;这个是用R编程的标配, 确实很方便, 不用可惜. 另外R markdown也不错, 可以边写markdown边运行代码, 建议编辑器窗口里新建rmd文件. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认有四个窗口:  编辑器, 变量, 命令行, 画图/帮助. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="Rnotes-1-basics/pasted_image.png" /&gt;&lt;/p&gt;
&lt;h2&gt;快捷键&lt;/h2&gt;
&lt;p&gt;一些常用的快捷键: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alt+-&lt;/code&gt;: 用于输入赋值符号&lt;code&gt;&amp;lt;-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(编辑器窗口中) &lt;code&gt;ctrl+enter&lt;/code&gt;: (在console里)执行光标所在的行, 等同于按钮"run"&lt;/li&gt;
&lt;li&gt;(r markdown编辑器窗口中) &lt;code&gt;ctrl+alt+I&lt;/code&gt;: 插入一个R代码的chunk&lt;/li&gt;
&lt;li&gt;(r markdown编辑器窗口中) &lt;code&gt;ctrl+shift+enter&lt;/code&gt;: 运行当前code chunk&lt;/li&gt;
&lt;li&gt;(选中一个函数名) &lt;code&gt;F1&lt;/code&gt;: 在右下角帮助窗口里显示相关文档. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;获得文档也可以输入: &lt;code&gt;?funcname&lt;/code&gt; 或者 &lt;code&gt;help(funcname)&lt;/code&gt; 输入 &lt;code&gt;??funcname&lt;/code&gt; 则是非精确匹配的查找.
另外获得例子可以使用&lt;code&gt;demo()&lt;/code&gt;, 例如: &lt;code&gt;demo(graphs)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;R 文档&lt;/h2&gt;
&lt;p&gt;下面是一个R文档的例子(运行&lt;code&gt;?lm&lt;/code&gt;得到): &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="Rnotes-1-basics/pasted_image002.png" /&gt;&lt;/p&gt;
&lt;p&gt;章节Arguments里介绍了每个参数的意义和用法, 然后往下翻还有一个Values章节: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="Rnotes-1-basics/pasted_image003.png" /&gt;&lt;/p&gt;
&lt;p&gt;Values里的每一项是这个函数的返回值(object)的内容, 比如要获得一个lm object的参数, 只需要: &lt;code&gt;lm_obj$coefficients&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;R 101&lt;/h2&gt;
&lt;p&gt;首先, R非常让我非常不习惯的一点是: 在R里面, dot&lt;code&gt;.&lt;/code&gt;&lt;strong&gt;只是一个普通的字符&lt;/strong&gt;, 它的用法和python里的下划线&lt;code&gt;_&lt;/code&gt;类似, 只是起到分割函数名里的单词而已... 在其他语言里, dot&lt;code&gt;.&lt;/code&gt;一般都是用来调用函数或者获取field的. 所以见到&lt;code&gt;cv.ss&lt;/code&gt;之类的名字的时候别以为是变量cv的一个field... 这个就相当于python里一个叫&lt;code&gt;cv_ss&lt;/code&gt;的变量...&lt;/p&gt;
&lt;p&gt;获取一个object的field, 在R里面是用dollar&lt;code&gt;$&lt;/code&gt;(另外R里的object似乎并没有method!) . &lt;/p&gt;
&lt;p&gt;另外, 赋值使用的是&lt;code&gt;&amp;lt;-&lt;/code&gt;, 等号似乎只在指定函数参数的时候用到. &lt;/p&gt;
&lt;h2&gt;常用函数&lt;/h2&gt;
&lt;p&gt;接下来列举一些常用的函数, 它们的详细用法可以看文档... &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c(...)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;combine values into vector/list. 
注意的是它会自动把list/vector参数展开: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; c(1,2,3)
[1] 1 2 3
&amp;gt; c(c(1,2),3)
[1] 1 2 3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;利用这个性质, 可以这样向一个列表(向量)添加东西: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;l &amp;lt;- c(l, new_element)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;numeric(l)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成长度为l的(全0)向量. 经常用这个命令生成一个"数组" 然后用一个循环向里面写入东西. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; numeric(5)
[1] 0 0 0 0 0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获取向量第i个元素: &lt;code&gt;vec[i]&lt;/code&gt;(btw, R index是从1开始的)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;matrix(v, nrow=nr, ncol=nc)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成一个矩阵, 全部初始化为v, nr行, nc列. 
获取i行j列: &lt;code&gt;mat[i,j]&lt;/code&gt;
获取第i行: &lt;code&gt;mat[i,]&lt;/code&gt; 第j列: &lt;code&gt;mat[,j]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;seq(from, to, by)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类似py的range函数...  另外&lt;code&gt;1:n&lt;/code&gt;是&lt;code&gt;seq(1,n,by=1)&lt;/code&gt;的简写&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; seq(1,10, 2)
[1] 1 3 5 7 9
&amp;gt; 1:5
[1] 1 2 3 4 5
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for循环: &lt;code&gt;for(i in 1:n){...&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rep&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直接看例子: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; rep(1, 10)
 [1] 1 1 1 1 1 1 1 1 1 1
&amp;gt; rep(c(1,2), 10)
 [1] 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2
&amp;gt; rep(c(1,2), each=10)
 [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;length(lst)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用来获得一个向量/列表的长度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dim(mat)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;获得一个矩阵的维度, 类似numpy的&lt;code&gt;mat.shape&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cbind/rbind&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按行/列合成矩阵&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; cbind(c(1,2),c(3,4))
     [,1] [,2]
[1,]    1    3
[2,]    2    4
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;str&lt;/code&gt;/&lt;code&gt;summary&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输出一个obj的信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat&lt;/code&gt;/&lt;code&gt;print&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打印, 区别是&lt;code&gt;cat&lt;/code&gt;可以依次打印多个字符串/对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;which&lt;/code&gt;/&lt;code&gt;which.max&lt;/code&gt;/&lt;code&gt;which.min&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;which.max/min类似于argmax/min&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; which(2&amp;gt;c(1,2,1))
[1] 1 3
&amp;gt; which.max(c(1,2,1))
[1] 2
&amp;gt; which.min(c(1,2,1))
[1] 1
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;paste&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个函数可以用来给一个数组的前面加一个前缀, 看例子: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; paste(&amp;quot;a&amp;quot;, 1:5, sep=&amp;quot;-&amp;quot;)
[1] &amp;quot;a-1&amp;quot; &amp;quot;a-2&amp;quot; &amp;quot;a-3&amp;quot; &amp;quot;a-4&amp;quot; &amp;quot;a-5&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;operators: with &lt;code&gt;%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些运算符需要用%包裹起来, 比如:
- &lt;code&gt;%%&lt;/code&gt;: 取模
- &lt;code&gt;%*%&lt;/code&gt;: 矩阵相乘
- &lt;code&gt;%/%&lt;/code&gt;: 整数相除(类似java里int的除法)
- &lt;code&gt;a %in% b&lt;/code&gt;: 判断元素是否属于b&lt;/p&gt;</summary><category term="R"></category></entry><entry><title>[Functional Programming Principles in Scala] Lec4: Types and Pattern Matching</title><link href="http://x-wei.github.io/progfun1_lec4_pattern_matching.html" rel="alternate"></link><published>2016-07-17T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/progfun1_lec4_pattern_matching.html</id><summary type="html">&lt;h2&gt;4.1 - Objects Everywhere&lt;/h2&gt;
&lt;p&gt;scala is &lt;em&gt;pure&lt;/em&gt; OO: every value is an obj, every operation is a method of obj.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;scala.Int&lt;/code&gt; &lt;code&gt;scala.Boolean&lt;/code&gt; maps to JVM standard primitive types.  &lt;/p&gt;
&lt;p&gt;Implement &lt;code&gt;Boolean&lt;/code&gt; withous primitive type in scala:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image.png" /&gt; &lt;/p&gt;
&lt;p&gt;Then defin &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;true&lt;/code&gt; as objects, give implementation for &lt;code&gt;ifThenElse()&lt;/code&gt; funciton:  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;object true extends Boolean{ 
    def ifThenElse[T](t: =&amp;gt;T, e: =&amp;gt;T) = t 
} 
object false extends Boolean{ 
    def ifThenElse[T](t: =&amp;gt;T, e: =&amp;gt;T) = e 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4.2 - Functions as Objects&lt;/h2&gt;
&lt;p&gt;Function values are treated as objects in scala.&lt;br /&gt;
the type &lt;code&gt;A =&amp;gt; B&lt;/code&gt; is an abbrevation for &lt;code&gt;scala.Function1[A, B]&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image001.png" /&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Functions are objects with &lt;/strong&gt;&lt;code&gt;apply&lt;/code&gt;&lt;strong&gt; methods.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;anonymous function &lt;code&gt;(x: Int) =&amp;gt; x*x&lt;/code&gt; is expanded to :  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;new Function1[Int, Int]{ 
def apply(x: Int) = x*x 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;function call &lt;code&gt;f(a,b)&lt;/code&gt; is expanded to:  &lt;code&gt;f.apply(a,b)&lt;/code&gt; 
&lt;code&gt;List(1,2)&lt;/code&gt; is expanded to : &lt;code&gt;List.apply(1,2)&lt;/code&gt; &lt;/p&gt;
&lt;h2&gt;4.3 - Subtyping and Generics&lt;/h2&gt;
&lt;p&gt;2 forms of polymorphism: &lt;em&gt;subtyping and generics&lt;/em&gt; &lt;/p&gt;
&lt;h3&gt;Type Bounds&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image003.png" /&gt; 
&lt;code&gt;assertAllPos&lt;/code&gt; taks either &lt;code&gt;EmptySet&lt;/code&gt; or &lt;code&gt;NonEmptySet&lt;/code&gt;, the return type is EmptySet (when para=EmptySet) or NonEmptySet (when para=NonEmpty).&lt;br /&gt;
To express this situation:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;def assertAllPos[S &amp;lt;: IntSet](r: S): S = ...&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Here &lt;code&gt;&amp;lt;: IntSet&lt;/code&gt; means IntSet is an upper bound of the type parameter.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image004.png" /&gt; 
and we can mix the two notations:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;[S &amp;gt;: NonEmpty &amp;lt;: IntSet]&lt;/code&gt; &lt;/p&gt;
&lt;h3&gt;Covariance&lt;/h3&gt;
&lt;p&gt;Given &lt;code&gt;NonEmpty &amp;lt;: IntSet&lt;/code&gt;,&lt;br /&gt;
should we have: &lt;code&gt;List[NonEmpty] &amp;lt;: List[IntSet]&lt;/code&gt; ? &lt;/p&gt;
&lt;p&gt;In this case the typse are called *covariant. * &lt;/p&gt;
&lt;p&gt;In java, arrays are covariant: &lt;code&gt;NonEmpty[] &amp;lt;: IntSet[]&lt;/code&gt; 
but this might cause problems:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image005.png" /&gt; &lt;/p&gt;
&lt;p&gt;will get ArrayStoreException in 3rd line.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Liskov substitution principle&lt;/strong&gt;: when a type can be a subtype of another  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If A&amp;lt;:B, then everything one can do with an object of type B, one should also be able to do it with object of type A.&lt;/em&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In scala the Array is not covariant: &lt;code&gt;Array[IntSet]&lt;/code&gt; is not supertype of &lt;code&gt;Array[NonEmpty]&lt;/code&gt; &lt;/p&gt;
&lt;h2&gt;4.5 - Decomposition&lt;/h2&gt;
&lt;p&gt;ex: arithmetic expression interpreter: a tree of numbers and sums, both are subtype of &lt;code&gt;Expr&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;1st try: test and accessor methods &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image006.png" /&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image007.png" /&gt; &lt;/p&gt;
&lt;p&gt;→ tedious... And to add more operands need to add many more methods...  &lt;/p&gt;
&lt;p&gt;2nd try: (non-solution) 
type testing and type casting 
&lt;code&gt;isinstantceof&lt;/code&gt;, &lt;code&gt;asinstanceof&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image008.png" /&gt; &lt;/p&gt;
&lt;p&gt;discouraged in scala. &lt;/p&gt;
&lt;p&gt;1st solution: &lt;strong&gt;OO decomposition&lt;/strong&gt; 
add &lt;code&gt;eval&lt;/code&gt; method to class Expr. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image009.png" /&gt; &lt;/p&gt;
&lt;p&gt;limitation: if we want to simplify an expression,  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image010.png" /&gt; &lt;/p&gt;
&lt;p&gt;⇒ there is no local simplification ! &lt;/p&gt;
&lt;p&gt;⇒ &lt;strong&gt;pattern matching&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;4.6 - Pattern Matching&lt;/h2&gt;
&lt;p&gt;goal: &lt;em&gt;reverse&lt;/em&gt; the construction process.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;which subclass it is? &lt;/li&gt;
&lt;li&gt;what were the arguments? &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;case classes&lt;/h3&gt;
&lt;p&gt;add &lt;code&gt;case&lt;/code&gt; in class definition. 
ex. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;case class Number(n: Int) extends Expr 
case class Sum(e1: Expr, e2: Expr) extends Expr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;adding &lt;code&gt;case&lt;/code&gt; adds &lt;em&gt;companion objects&lt;/em&gt; with &lt;code&gt;apply&lt;/code&gt; methods:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image011.png" /&gt; &lt;/p&gt;
&lt;p&gt;according to the expansion, &lt;code&gt;Number(2)&lt;/code&gt; is equal to &lt;code&gt;Number.apply(2)&lt;/code&gt; which is actaully &lt;code&gt;new Numver(2)&lt;/code&gt; &lt;/p&gt;
&lt;h3&gt;pattern matching&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;match&lt;/code&gt;: extension of &lt;code&gt;switch&lt;/code&gt; in java, ex:  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def eval(e: Expr): Int = e match{ 
    case Number(n) =&amp;gt; n 
    case Sum(e1, e2) =&amp;gt; e1 + e2 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image012.png" /&gt; &lt;/p&gt;
&lt;p&gt;patterns include:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;constructor, ex. &lt;code&gt;Number(n)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;variable, ex. &lt;code&gt;n, e1, e2&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;wildcard patters, ex. &lt;code&gt;_&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;constant, ex. &lt;code&gt;1, true&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;or their combination, ex &lt;code&gt;Sum(Number(1),  Var(x))&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The whole match expression is replaced with the expression to the rhs of the first match pattern.  &lt;/p&gt;
&lt;p&gt;exercice: implement a &lt;code&gt;show&lt;/code&gt; function. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def show(e: Expr): String = e match { 
    case Number(n) =&amp;gt; n.toString 
    case Sum(l, r) =&amp;gt; show(l) + &amp;quot;+&amp;quot; + show(r) 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4.7 - Lists&lt;/h2&gt;
&lt;p&gt;example:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image013.png" /&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image014.png" /&gt; &lt;/p&gt;
&lt;p&gt;difference between List and Array:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lists are immutable, elements cannot change &lt;/li&gt;
&lt;li&gt;Lists are recursive, arrays are flat &lt;/li&gt;
&lt;li&gt;both are homogeneous, all elements of the same type &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All &lt;code&gt;List&lt;/code&gt;s in scala are constructed with:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Empty list &lt;code&gt;Nil&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;construction op &lt;code&gt;::&lt;/code&gt;(pronunced: cons), &lt;code&gt;x::xs&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image015.png" /&gt; &lt;/p&gt;
&lt;p&gt;convention in scala: operators ending with &lt;code&gt;:&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;are &lt;em&gt;right-associative&lt;/em&gt;. &lt;code&gt;a::b::c&lt;/code&gt; is equal to &lt;code&gt;a::(b::c)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;seen as method calls from the right-hand operand. &lt;code&gt;1::2::Nil&lt;/code&gt; equal to &lt;code&gt;Nil.::(2).::(1)&lt;/code&gt; ( &lt;code&gt;::&lt;/code&gt; is prepend operation) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;operations on lists:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;head &lt;/li&gt;
&lt;li&gt;tail &lt;/li&gt;
&lt;li&gt;isEmpty &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;list in pattern matching: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image016.png" /&gt; &lt;/p&gt;
&lt;p&gt;ex. insertion sort of lists &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec4_pattern_matching/pasted_image017.png" /&gt; &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def isort(xs: List[Int]): List[Int] = xs match{ 
    case List() =&amp;gt; List() 
    case y::ys =&amp;gt; insert(y, isort(ys)) 
} 
def insert(x:Int, xs:List[Int]): List[Int] = xs match{ 
    case List() =&amp;gt; List(x) 
    case y::ys =&amp;gt; if(x&amp;lt;=y) x::xs else y::insert(y, ys) 
}
&lt;/pre&gt;&lt;/div&gt;</summary><category term="scala"></category></entry><entry><title>[Functional Programming Principles in Scala] Lec3: Data and Abstraction</title><link href="http://x-wei.github.io/progfun1_lec3_data_abstraction.html" rel="alternate"></link><published>2016-06-28T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/progfun1_lec3_data_abstraction.html</id><summary type="html">&lt;p&gt;This week, we'll cover traits, and we'll learn how to organize classes into hierarchies. We'll cover the hierarchy of standard Scala types, and see how to organize classes and traits into packages. Finally, we'll touch upon the different sorts of polymorphism in Scala. &lt;/p&gt;
&lt;h2&gt;3.1 - Class Hierarchies&lt;/h2&gt;
&lt;h3&gt;abstract class&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abstract class IntSet { 
  def incl(x: Int): IntSet 
  def contains(x: Int): Boolean 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;abstract class:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contains members without implementation &lt;/li&gt;
&lt;li&gt;cannot be created with &lt;code&gt;new&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;class Extensions&lt;/h3&gt;
&lt;p&gt;implement the integer set abstract class with BST 
2 types of trees: &lt;code&gt;Empty&lt;/code&gt; and &lt;code&gt;NonEmpty&lt;/code&gt; &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;IntSet&lt;/span&gt; { 
  &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;incl&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Int&lt;/span&gt;): &lt;span class="n"&gt;IntSet&lt;/span&gt; = &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NonEmpty&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;, &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt;, &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt;)

  &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nb"&gt;contains&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Int&lt;/span&gt;): &lt;span class="n"&gt;Boolean&lt;/span&gt; = &lt;span class="n"&gt;false&lt;/span&gt; 
}

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;NonEmpty&lt;/span&gt;(&lt;span class="n"&gt;elem:&lt;/span&gt; &lt;span class="nb"&gt;Int&lt;/span&gt;, &lt;span class="n"&gt;left:&lt;/span&gt; &lt;span class="n"&gt;IntSet&lt;/span&gt;, &lt;span class="n"&gt;right:&lt;/span&gt; &lt;span class="n"&gt;IntSet&lt;/span&gt;) &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;IntSet&lt;/span&gt; { 
  &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;incl&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Int&lt;/span&gt;): &lt;span class="n"&gt;IntSet&lt;/span&gt; = 
    &lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="o"&gt;x&lt;/span&gt; == &lt;span class="n"&gt;elem&lt;/span&gt;) &lt;span class="n"&gt;this&lt;/span&gt; 
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="n"&gt;elem&lt;/span&gt; &amp;gt; &lt;span class="o"&gt;x&lt;/span&gt;) &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NonEmpty&lt;/span&gt;(&lt;span class="n"&gt;elem&lt;/span&gt;, &lt;span class="n"&gt;left&lt;/span&gt;.&lt;span class="n"&gt;incl&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;), &lt;span class="n"&gt;right&lt;/span&gt;)// &lt;span class="n"&gt;immutable&lt;/span&gt;! 
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NonEmpty&lt;/span&gt;(&lt;span class="n"&gt;elem&lt;/span&gt;, &lt;span class="n"&gt;left&lt;/span&gt;, &lt;span class="n"&gt;right&lt;/span&gt;.&lt;span class="n"&gt;incl&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;))

  &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nb"&gt;contains&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;: &lt;span class="nb"&gt;Int&lt;/span&gt;): &lt;span class="n"&gt;Boolean&lt;/span&gt; = 
    &lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="n"&gt;elem&lt;/span&gt; == &lt;span class="o"&gt;x&lt;/span&gt;) &lt;span class="nb"&gt;true&lt;/span&gt; 
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="n"&gt;elem&lt;/span&gt; &amp;gt; &lt;span class="o"&gt;x&lt;/span&gt;) &lt;span class="n"&gt;left&lt;/span&gt;.&lt;span class="nb"&gt;contains&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;) 
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;.&lt;span class="nb"&gt;contains&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;) 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;root class of all classes: &lt;code&gt;Object&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;replace concrete defintion of super class: &lt;code&gt;override&lt;/code&gt; is mandantory. &lt;/p&gt;
&lt;h3&gt;Object&lt;/h3&gt;
&lt;p&gt;in the previous example, seems only one single &lt;code&gt;Empty&lt;/code&gt; set is needed.&lt;br /&gt;
⇒ define &lt;code&gt;Empty&lt;/code&gt; as &lt;strong&gt;singleton object&lt;/strong&gt; 
no other &lt;code&gt;Empty&lt;/code&gt; instances can be created, object is a &lt;em&gt;value.&lt;/em&gt; &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;object Empty extends IntSet { 
  override def incl(x: Int): IntSet = new NonEmpty(x, Empty, Empty)

  override def contains(x: Int): Boolean = false

  override def toString = &amp;quot;.&amp;quot; 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Program&lt;/h3&gt;
&lt;p&gt;create standalone scala applicatoins.&lt;br /&gt;
Each such applications contains an &lt;code&gt;object&lt;/code&gt; with a &lt;code&gt;main(args:Array[String])&lt;/code&gt; method &lt;/p&gt;
&lt;h3&gt;exercice: implement union&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;union(other:IntSet): IntSet&lt;/code&gt; &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;override def union(other: IntSet): IntSet = 
  left union (right union (other incl elem))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;why this recursive call terminates ?&lt;br /&gt;
every call to &lt;code&gt;union&lt;/code&gt; is on a &lt;em&gt;smaller&lt;/em&gt; IntSet ! &lt;/p&gt;
&lt;p&gt;写成这样就会stackoverflow: &lt;code&gt;other.incl(elem).union(left).union(right)&lt;/code&gt;&lt;br /&gt;
讨论见: &lt;a href="https://www.coursera.org/learn/progfun1/discussions/weeks/3/threads/AzJ-4CLYEeag6wpD-92Rcw"&gt;https://www.coursera.org/learn/progfun1/discussions/weeks/3/threads/AzJ-4CLYEeag6wpD-92Rcw&lt;/a&gt; 
(需要点"view earlier replies"才有) 
&lt;img alt="" src="progfun1_lec3_data_abstraction/pasted_image012.png" /&gt; &lt;/p&gt;
&lt;h3&gt;Dynamic Binding&lt;/h3&gt;
&lt;p&gt;behavior depends on the runtime type of the object.  &lt;/p&gt;
&lt;p&gt;~ higher-order functions &lt;/p&gt;
&lt;h2&gt;Lecture 3.2 - How Classes Are Organized&lt;/h2&gt;
&lt;h3&gt;package&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="n"&gt;imports&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;week3.Rational&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;week3.&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Rational&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;wildcard&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt;  
&lt;span class="nn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;week3._&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;can import either from a package or from an object &lt;/p&gt;
&lt;p&gt;automatically imported in scala:&lt;br /&gt;
&lt;img alt="" src="progfun1_lec3_data_abstraction/pasted_image001.png" /&gt; 
ex: 
&lt;img alt="" src="progfun1_lec3_data_abstraction/pasted_image002.png" /&gt; &lt;/p&gt;
&lt;p&gt;scaladoc: &lt;a href="http://www.scala-lang.org/files/archive/api/current/#package"&gt;http://www.scala-lang.org/files/archive/api/current/#package&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;Traits&lt;/h3&gt;
&lt;p&gt;in scala/java, a class has only one super class (single inheritance).&lt;br /&gt;
have several supertypes? ⇒ trait! &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one class can extend many traits (concated by &lt;code&gt;with&lt;/code&gt;)  — like java &lt;code&gt;interface&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec3_data_abstraction/pasted_image003.png" /&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;traits can contain fileds and concrete methods &lt;/li&gt;
&lt;li&gt;on the other hand, traits cannot have (value) parameters, but classes can &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;scala class hierchy&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec3_data_abstraction/pasted_image004.png" /&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Any&lt;/code&gt;: base class of all &lt;/li&gt;
&lt;li&gt;&lt;code&gt;AnyVal&lt;/code&gt;: primitive types (&lt;code&gt;Int, Unit, Boolean,...&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;AnyRef&lt;/code&gt;: (=alias of &lt;code&gt;java.lang.Object&lt;/code&gt;) all reference types (&lt;code&gt;String, List, Seq, Iterable,...&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nothing&lt;/code&gt;: bottom of the hierchy, &lt;em&gt;is subtype of every type&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Null&lt;/code&gt;: &lt;em&gt;subtype of every reference type, &lt;/em&gt;&lt;code&gt;null&lt;/code&gt;'s type is &lt;code&gt;Null&lt;/code&gt;, not compatible with &lt;code&gt;AnyVal&lt;/code&gt; types.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;exception: &lt;code&gt;throw Exc&lt;/code&gt;, the typeof &lt;code&gt;Exc&lt;/code&gt; is &lt;code&gt;Nothing&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;exercice:&lt;br /&gt;
&lt;code&gt;if (true) 1 else false&lt;/code&gt; ⇒ type = &lt;code&gt;AnyVal&lt;/code&gt; &lt;/p&gt;
&lt;h2&gt;Lecture 3.3 - Polymorphism&lt;/h2&gt;
&lt;h3&gt;cons-list&lt;/h3&gt;
&lt;p&gt;immutable linked list 
&lt;img alt="" src="progfun1_lec3_data_abstraction/pasted_image005.png" /&gt; 
&lt;img alt="" src="progfun1_lec3_data_abstraction/pasted_image006.png" /&gt; 
implement this in scala: 
&lt;img alt="" src="progfun1_lec3_data_abstraction/pasted_image007.png" /&gt; &lt;/p&gt;
&lt;p&gt;the &lt;code&gt;val&lt;/code&gt; in the class definition: &lt;strong&gt;defines at the same time parameter and field of a class&lt;/strong&gt;, equivalent to:&lt;br /&gt;
&lt;img alt="" src="progfun1_lec3_data_abstraction/pasted_image008.png" /&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;type parameters&lt;/strong&gt; (generic) 
&lt;img alt="" src="progfun1_lec3_data_abstraction/pasted_image009.png" /&gt; &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;trait List[T]{ 
  def isEmpty : Boolean 
  def head: T 
  def tail: List[T] 
}

class Cons[T](val head:T, val tail: List[T]) extends List[T] { 
  def isEmpty(): Boolean = false 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;head and tail are implemented in the parameters(fields), difference between &lt;code&gt;val&lt;/code&gt; and &lt;code&gt;def&lt;/code&gt; only consist in the initialization (CBN, CBV). &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Nil&lt;/span&gt;[&lt;span class="n"&gt;T&lt;/span&gt;] &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="nb"&gt;List&lt;/span&gt;[&lt;span class="n"&gt;T&lt;/span&gt;]{ 
  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isEmpty&lt;/span&gt; = &lt;span class="n"&gt;false&lt;/span&gt; 
  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;head:&lt;/span&gt; &lt;span class="n"&gt;Nothing&lt;/span&gt; = &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NoSuchElementException&lt;/span&gt;(&lt;span class="s"&gt;&amp;quot;Nil.head&amp;quot;&lt;/span&gt;) 
  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;tail:&lt;/span&gt; &lt;span class="n"&gt;Nothing&lt;/span&gt; = &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NoSuchElementException&lt;/span&gt;(&lt;span class="s"&gt;&amp;quot;Nil.tail&amp;quot;&lt;/span&gt;) 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;use nothing as return type, and throw an exception.  &lt;/p&gt;
&lt;h3&gt;generic functions&lt;/h3&gt;
&lt;p&gt;type parameters can be applied to functions.&lt;br /&gt;
&lt;img alt="" src="progfun1_lec3_data_abstraction/pasted_image011.png" /&gt; 
sometime the type parameter can be deduced by scala compiler.&lt;br /&gt;
ex. &lt;code&gt;singleton(2); singleton(true)&lt;/code&gt; &lt;/p&gt;
&lt;h3&gt;Types and Evaulation&lt;/h3&gt;
&lt;p&gt;type parameters don't affect evaluation.&lt;br /&gt;
can assume type parameters are removed before the evaluation (&lt;em&gt;type erasure&lt;/em&gt;).  &lt;/p&gt;
&lt;h3&gt;Polymorphism&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;subtyping: instances of subclass can be passed to a base class &lt;/li&gt;
&lt;li&gt;generics: function/class with type parameters &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;exercice: write a function &lt;code&gt;nth(n: Int, list: List)&lt;/code&gt; &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def nth[T](n: Int, list:List[T]): T =  
  if(list.isEmpty) throw new IndexOutOfBoundsException() 
  else if (n==0) list.head 
  else nth(n-1, list.tail)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Programming Assignment: Object-Oriented Sets&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;TweetSet&lt;/code&gt;: an abstract class &lt;code&gt;TweetSet&lt;/code&gt; with two concrete subclasses,&lt;code&gt;Empty&lt;/code&gt; which represents an empty set, and &lt;code&gt;NonEmpty(elem: Tweet, left: TweetSet, right: TweetSet&lt;/code&gt;), which represents a non-empty set as a binary tree rooted at elem. The tweets are indexed by their text bodies: the bodies of all tweets on the left are lexicographically smaller than elem and all bodies of elements on the right are lexicographically greater. &lt;/p&gt;</summary><category term="scala"></category></entry><entry><title>[Functional Programming Principles in Scala] Lec2: Higher Order Functions</title><link href="http://x-wei.github.io/progfun1_lec2_highorder_func.html" rel="alternate"></link><published>2016-06-23T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/progfun1_lec2_highorder_func.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;This week, we'll learn about functions as first-class values, and higher order functions. We'll also learn about Scala's syntax and how it's formally defined. Finally, we'll learn about methods, classes, and data abstraction through the design of a data structure for rational numbers. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;2.1 - Higher-Order Functions&lt;/h2&gt;
&lt;p&gt;higher order functions: functions that takes functions as parameter or returns functions.  &lt;/p&gt;
&lt;p&gt;example:&lt;br /&gt;
&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image.png" /&gt; 
⇒ put the &lt;code&gt;f&lt;/code&gt; as a parameter &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def sum(f:Int =&amp;gt; Int, a: Int, b: Int):Int = { 
  if(a&amp;gt;b) 0 
  else f(a) + sum(f, a+1, b) 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;function types&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;A =&amp;gt; B&lt;/code&gt; is a function that takes &lt;code&gt;A&lt;/code&gt; as parameter and returns &lt;code&gt;B&lt;/code&gt;. &lt;/p&gt;
&lt;h3&gt;Anonymous functions&lt;/h3&gt;
&lt;p&gt;"literals" for functions, syntactic sugar. 
ex.   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;(x: Int, y: Int) =&amp;gt; x+y&lt;/code&gt; 
&lt;code&gt;(x: Int) =&amp;gt; x*x&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;use anon functions in previous &lt;code&gt;sum()&lt;/code&gt; function:  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sum(x=&amp;gt;x, 1, 10) 
sum(x=&amp;gt;x*x, 1, 10)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;exercice: turn &lt;code&gt;sum()&lt;/code&gt; into tailrec fashion. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def sum2(f:Int =&amp;gt; Int, a: Int, b: Int):Int = { 
  @tailrec 
  def sumTR(a: Int, acc: Int): Int = { 
    if (a &amp;gt; b) acc 
    else sumTR(a + 1, acc + f(a)) 
  } 
  sumTR(a, 0) 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(note: using namescoping to eliminate parameters in inner functions) &lt;/p&gt;
&lt;h2&gt;2.2 - Currying&lt;/h2&gt;
&lt;p&gt;define a function that &lt;em&gt;returns  a funtion&lt;/em&gt; &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def sum3(f:Int =&amp;gt; Int): (Int, Int)=&amp;gt;Int = { 
  def sumF(a:Int, b:Int):Int = { 
    if(a&amp;gt;b) 0 
    else f(a) + sum3(f, a+1, b) 
  } 
  sumF 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;when calling this function:&lt;br /&gt;
&lt;code&gt;sum3(cube)(1,10)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;syntactic sugar: shorter version of functions that return functions: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def sum3(f:Int =&amp;gt; Int)(a:Int, b:Int):Int = { 
    if(a&amp;gt;b) 0 
    else f(a) + sum3(f)(a+1, b) 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;question: what is type of &lt;code&gt;sum3&lt;/code&gt;? 
→ &lt;code&gt;Int =&amp;gt; Int =&amp;gt; (Int, Int) =&amp;gt; Int&lt;/code&gt; 
note: functional types are &lt;em&gt;associated to the right&lt;/em&gt;,&lt;br /&gt;
&lt;code&gt;Int =&amp;gt; Int =&amp;gt; Int&lt;/code&gt; is equivalent to &lt;code&gt;Int =&amp;gt; (Int =&amp;gt; Int)&lt;/code&gt; &lt;/p&gt;
&lt;h3&gt;"currying"&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image002.png" /&gt; 
&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image003.png" /&gt; &lt;/p&gt;
&lt;p&gt;exercice:&lt;br /&gt;
&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image005.png" /&gt; &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def product(f: Int =&amp;gt; Int)(a: Int, b: Int): Int = { 
  if (a &amp;gt; b) 1 
  else a * product(f)(a + 1, b) 
} 
product(x=&amp;gt;x)(1,10)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image006.png" /&gt; &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def fact(n:Int) = product(x=&amp;gt;x)(1,n) 
fact(10)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image007.png" /&gt; 
    def more_general(op: (Int,Int) =&amp;gt; Int, default: Int) 
                    (f: Int=&amp;gt; Int)(a:Int, b:Int):Int = { 
      if(a&amp;gt;b) default 
      else op(a, more_general(op, default)(f)(a + 1, b)) 
    } 
    more_general((x,y)=&amp;gt;x+y, 0)(x=&amp;gt;x)(1,10) &lt;/p&gt;
&lt;p&gt;老师的解法:&lt;br /&gt;
    def map_reduce(f:Int=&amp;gt; Int, op:(Int, Int)=&amp;gt;Int, default:Int) 
                  (a:Int, b:Int):Int = { 
      if(a&amp;gt;b) default 
      else op(f(a), map_reduce(f, op, default)(a+1,b)) 
    } 
    def factorial2(n:Int):Int = map_reduce(x=&amp;gt;x, (a,b)=&amp;gt; a*b, 1)(1,n) 
    factorial2(10) &lt;/p&gt;
&lt;h2&gt;2.3 - Example: Finding Fixed Points&lt;/h2&gt;
&lt;p&gt;find the fix point of a function: x = f(x) 
&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image008.png" /&gt; &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;val tol = 0.001 
def isCloseEnough(x:Double, y:Double):Boolean = 
  math.abs((x-y)/x)&amp;lt;tol 
def fixedPoint(f: Double=&amp;gt;Double)(firstGuess:Double):Double = { 
  def iterate(guess:Double):Double = { 
    if(isCloseEnough(guess, f(guess))) guess 
    else iterate(f(guess)) 
  } 
  iterate(firstGuess) 
} 
fixedPoint(x=&amp;gt;1+x/2)(1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;using the fixepoint function for &lt;code&gt;sqrt&lt;/code&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sqrt(x) = y such that: x=y*y &lt;/li&gt;
&lt;li&gt;=y such that y = x/y &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;=&lt;em&gt;fixed point for the function f(y)=x/y&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;def sqrt(x:Double):Double = fixedPoint(y=&amp;gt;x/y)(1) 
sqrt(2) &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ doesn't converge! ⇒ guess oscillates between 1 and 2... 
average damping: prevent the estimate from varying to much. 
⇒  &lt;em&gt;by taking the average of successive values&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;def sqrt2(x: Double): Double = fixedPoint(y =&amp;gt; (y + x / y) / 2)(1)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;abstract this damping technique: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def avgDamping(f:Double=&amp;gt; Double)(x:Double):Double = 
  (f(x)+x)/2 
def sqrt2(x: Double): Double = fixedPoint(avgDamping(y=&amp;gt;x/y))(1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;summary: The highest level of abstraction is not always the best, but it is important to know the techniques of abstraction, so as to use them when appropriate. &lt;/p&gt;
&lt;h2&gt;2.4 - Scala Syntax Summary&lt;/h2&gt;
&lt;p&gt;notations(EBNF): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt; denotes an alternative &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[...]&lt;/code&gt; an option (0 or 1) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;{...}&lt;/code&gt; a repetition (0 or more) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Types&lt;/strong&gt; 
&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image009.png" /&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expressions&lt;/strong&gt; 
&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image010.png" /&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definitions&lt;/strong&gt; 
&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image011.png" /&gt; &lt;/p&gt;
&lt;h2&gt;2.5 - Functions and Data&lt;/h2&gt;
&lt;p&gt;example. &lt;em&gt;rational numbers&lt;/em&gt; (x/y) 
define a class:  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Rational&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;:&lt;span class="n"&gt;Int&lt;/span&gt;, &lt;span class="n"&gt;y:Int&lt;/span&gt;){ 
  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;numer&lt;/span&gt; = &lt;span class="o"&gt;x&lt;/span&gt; 
  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;denom&lt;/span&gt; = &lt;span class="n"&gt;y&lt;/span&gt; 
} 
&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;x&lt;/span&gt; = &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rational&lt;/span&gt;(&lt;span class="mi"&gt;1&lt;/span&gt;,&lt;span class="mi"&gt;2&lt;/span&gt;) 
&lt;span class="o"&gt;x&lt;/span&gt;.&lt;span class="n"&gt;numer&lt;/span&gt; 
&lt;span class="o"&gt;x&lt;/span&gt;.&lt;span class="n"&gt;denom&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;this definition creates both a class and the constructor.&lt;br /&gt;
now implement arithmetic: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def add(that: Rational) = 
  new Rational(numer * that.denom + denom * that.numer, that.denom * denom)

def neg = new Rational(-numer, denom)

def sub(that: Rational) = 
  add(that.neg)

override def toString = numer + &amp;quot;/&amp;quot; + denom
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2.6 - More Fun With Rationals&lt;/h2&gt;
&lt;p&gt;simplify the rationals &lt;em&gt;at construction&lt;/em&gt;:  add private members:  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b) 
private val g = gcd(x, y) 
def numer = x/g 
def denom = y/g
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;other options:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;replace &lt;code&gt;g&lt;/code&gt; with &lt;code&gt;gcd(x,y)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;turn &lt;code&gt;numer&lt;/code&gt; and &lt;code&gt;denom&lt;/code&gt; into &lt;code&gt;val&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;add less and max function:  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def less(that:Rational) = 
  this.numer*that.denom &amp;lt; this.denom*that.numer

def max(that:Rational) = if(this.less(that)) that else this
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;preconditions&lt;/h3&gt;
&lt;p&gt;ex: avoid divide by 0.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;require(y!=0, "denominator must be non zero")&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;→ &lt;em&gt;java.lang.IllegalArgumentException: requirement failed: denominator must be non zero&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;require&lt;/code&gt;is a test to perform when the class is initialized.&lt;br /&gt;
similar: &lt;code&gt;assert()&lt;/code&gt; &lt;/p&gt;
&lt;h3&gt;constructor&lt;/h3&gt;
&lt;p&gt;in scala a class implicitly introduces a &lt;strong&gt;primary constructor:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;takes parameters of the class&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;em&gt;executes all statements in the class body&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;to add another constructor: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;def this(x:Int) = this(x,1)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;exercice:&lt;br /&gt;
&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image012.png" /&gt; &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;override def toString = { 
  val g = gcd(numer, denom) 
  numer/g + &amp;quot;/&amp;quot; + denom/g 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2.7 - Evaluation and Operators&lt;/h2&gt;
&lt;h2&gt;evaluation for class/object&lt;/h2&gt;
&lt;p&gt;extend the substitution model to classes and objects 
&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image014.png" /&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image015.png" /&gt; 
&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image016.png" /&gt; 
&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image017.png" /&gt; &lt;/p&gt;
&lt;p&gt;examples:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image019.png" /&gt; &lt;/p&gt;
&lt;h2&gt;operator overloading&lt;/h2&gt;
&lt;h3&gt;infix ops&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;any method with one parameter can be used as an infix operator.&lt;/strong&gt; 
&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image020.png" /&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;scala identifiers can bu symbolic:&lt;/em&gt; 
&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image021.png" /&gt; &lt;/p&gt;
&lt;p&gt;⇒ change names to &lt;code&gt;+, &amp;lt;, -,&lt;/code&gt; use in this way: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x + y 
x &amp;lt; y 
x max y 
x - y - z
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;unitary ops&lt;/h3&gt;
&lt;p&gt;now change the &lt;code&gt;neg&lt;/code&gt; method: prefix operator, and might be confused with the sub(&lt;code&gt;-&lt;/code&gt;) 
⇒ it's name is special: &lt;code&gt;unary_-&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;def unary_- = new Rational(-numer, denom)&lt;/code&gt; &lt;/p&gt;
&lt;h3&gt;precedence of ops&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;the precedence of an op is defined by its first letter&lt;/strong&gt; 
order (by increasing precedence): &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec2_highorder_func/pasted_image022.png" /&gt; 
quite the same as in java &lt;/p&gt;
&lt;h2&gt;Programming Assignment: Functional Sets&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Mathematically, we call the function which takes an integer as argument and which returns a boolean indicating whether the given integer belongs to a set, the characteristic function of the set. For example, we can characterize the set of negative integers by the characteristic function (x: Int) =&amp;gt; x &amp;lt; 0. &lt;/p&gt;
&lt;p&gt;Therefore, we choose to represent a set by its characterisitc function and define a type alias for this representation: &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type Set = Int =&amp;gt; Boolean 
def contains(s: Set, elem: Int): Boolean = s(elem)
&lt;/pre&gt;&lt;/div&gt;</summary><category term="scala"></category></entry><entry><title>[Functional Programming Principles in Scala] Lec1: Functions &amp; Evaluation</title><link href="http://x-wei.github.io/progfun1_lec1_fun_and_eval.html" rel="alternate"></link><published>2016-06-21T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/progfun1_lec1_fun_and_eval.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;In this week, we'll learn the difference between functional imperative programming. We step through the basics of Scala; covering expressions, evaluation, conditionals, functions, and recursion  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;1.1 - Programming Paradigms&lt;/h2&gt;
&lt;p&gt;imperative programming:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;modify mutable variables  &lt;/li&gt;
&lt;li&gt;using assignments  &lt;/li&gt;
&lt;li&gt;control structures: if-else, loops, break, continue, return, etc.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;~~~&amp;gt; Von Neumann computer:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;em&gt;conceptualize data structures word-by-word. ⇒ need higher level abstractions (theories).&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image001.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;theory doesn't describe mutations!&lt;/strong&gt;&lt;br /&gt;
ex. theories of polynomials  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image002.png" /&gt;  &lt;/p&gt;
&lt;p&gt;To implement high-level concepts following their math theories, &lt;strong&gt;there's no place for mutation&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image003.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Functional programming&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image004.png" /&gt;&lt;br /&gt;
functions in FP language are 1st-class citizens.  &lt;/p&gt;
&lt;h2&gt;1.2 - Elements of Programming&lt;/h2&gt;
&lt;p&gt;in a language:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;primitive expressions  &lt;/li&gt;
&lt;li&gt;operators to combin expressions  &lt;/li&gt;
&lt;li&gt;abstract expressions: introduce a name for an expression  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;primitive types in scala are written capatilized:   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image005.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;REPL&lt;/h3&gt;
&lt;p&gt;interactive shell: write expressions and respond its value  &lt;/p&gt;
&lt;h3&gt;Evaluation&lt;/h3&gt;
&lt;p&gt;evaluation: &lt;strong&gt;expression → value&lt;/strong&gt;&lt;br /&gt;
evaluation stops onces it results in a &lt;em&gt;value.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;evaluate non-primitive expressions:&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;take the left-most operator  &lt;/li&gt;
&lt;li&gt;take (left and right) operands   &lt;/li&gt;
&lt;li&gt;apply the operator to operands  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;evaluate names:&lt;/strong&gt;&lt;br /&gt;
replace the name with the rhs of its &lt;em&gt;definition.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;definitions can have parameters.&lt;br /&gt;
ex. variable/return types are &lt;em&gt;after&lt;/em&gt; their names, seperated by a &lt;code&gt;:&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;def power(x: Double, y: Int): Double = ...&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;evaluate a parameterized function:&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image006.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image007.png" /&gt;  &lt;/p&gt;
&lt;p&gt;This scheme is called "&lt;strong&gt;substition model&lt;/strong&gt;" — formalized in the lambda calculus. This can be applied as long as there is no &lt;em&gt;side effects&lt;/em&gt;(ex. modify variable &lt;code&gt;c++&lt;/code&gt;)&lt;em&gt;.&lt;/em&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Termination&lt;/strong&gt;&lt;br /&gt;
Q: does every expression evaluates to a value? &lt;br /&gt;
NO, ex. &lt;br /&gt;
&lt;code&gt;def loop: Int = loop&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;change evaluation strategy&lt;/strong&gt;&lt;br /&gt;
do &lt;em&gt;not&lt;/em&gt; reduce argument values before rewrite function application.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image008.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;call-by-name and call-by-value&lt;/h2&gt;
&lt;p&gt;the above evaluation schemes.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;call-by-value: reduce argument values before rewrite function application.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;advantage: it evaluates every function argument only once.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;call-by-name: do not reduce arg values  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;advantage: a function argument is not evaluated if the corresponding parameter is unused in the evaluation&lt;br /&gt;
of the function body.  &lt;/p&gt;
&lt;p&gt;ex.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image009.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;1.3 - Evaluation Strategies and Termination&lt;/h2&gt;
&lt;p&gt;CBV and CBN:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image010.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image011.png" /&gt;  &lt;/p&gt;
&lt;p&gt;ex.   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def first(x: Int, y: Int) = x  
first(1, loop)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in scala:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;normally use call-by-value (more efficient than call-by-name because it avoid repeated computation of CBN).  &lt;/li&gt;
&lt;li&gt;but: &lt;strong&gt;if a  &lt;/strong&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;strong&gt; before a parameter type&lt;/strong&gt;, that parameter is called &lt;em&gt;by-name&lt;/em&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex.   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def constOne(x: Int, y: =&amp;gt; Int) = 1  
constOne(1+2, loop)  
constOne(loop, 1)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;1.4 - Conditionals and Value Definitions&lt;/h2&gt;
&lt;h3&gt;conditional expressions&lt;/h3&gt;
&lt;p&gt;the &lt;code&gt;if-else&lt;/code&gt; expression&lt;br /&gt;
the &lt;code&gt;if-else&lt;/code&gt; is an expression, not statement.&lt;br /&gt;
ex. &lt;code&gt;def abs(x: Int): Int = if (x&amp;gt;=0) x else -x&lt;/code&gt;&lt;br /&gt;
the &lt;code&gt;x&amp;gt;=0&lt;/code&gt; is a boolean expression, sometimes called &lt;strong&gt;predicates&lt;/strong&gt;.  &lt;/p&gt;
&lt;h3&gt;CBN and CBV for definition&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;def&lt;/code&gt; form is by name, its rhs is evaluated at each use  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;val&lt;/code&gt; is by value, evaluted at the definiton  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex.  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scala&amp;gt; def loop:Boolean = loop  
loop: Boolean

scala&amp;gt; def x = loop  
x: Boolean

scala&amp;gt; val x = loop  
Execution interrupted by signal.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;exercice: implement &lt;code&gt;and(x,y)&lt;/code&gt;  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scala&amp;gt; def and(x:Boolean, y: =&amp;gt; Boolean) = if(x) y else false  
and: (x: Boolean, y: =&amp;gt; Boolean)Boolean

scala&amp;gt; and(false, loop)  
res3: Boolean = false
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;1.5 - Example: square roots with Newton's method&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image012.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;def sqrt(x: Double): Double = ...&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;need helper (recursive) functions.   &lt;/p&gt;
&lt;p&gt;note: in scala the &lt;em&gt;return type of recursive functions&lt;/em&gt; must be given.  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def improve(guess: Double, x: Double): Double =  
  (x / guess + guess) / 2.0

def isGoodGuess(guess: Double, x: Double): Boolean =  
  math.abs((guess * guess - x)/x)&amp;lt;0.001

def sqrtItr(guess: Double, x: Double): Double = {  
  if (isGoodGuess(guess, x)) guess  
  else sqrtItr(improve(guess, x), x)  
}

def sqrt(x:Double): Double = sqrtItr(1, x)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;1.6 - Blocks and Lexical Scope&lt;/h2&gt;
&lt;h3&gt;nested functions&lt;/h3&gt;
&lt;p&gt;put aux functions inside a function.   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def sqrt(x:Double): Double = {  
  def improve(guess: Double, x: Double): Double =  
    (x / guess + guess) / 2.0

  def isGoodGuess(guess: Double, x: Double): Boolean =  
    math.abs((guess * guess - x)/x)&amp;lt;0.001

  def sqrtItr(guess: Double, x: Double): Double = {  
    if (isGoodGuess(guess, x)) guess  
    else sqrtItr(improve(guess, x), x)  
  }

  sqrtItr(1, x)  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;blocks and visibility&lt;/h3&gt;
&lt;p&gt;blocks: delimited by braces &lt;code&gt;{...}&lt;/code&gt;&lt;br /&gt;
The last element of a block is an expression that defines its value.&lt;br /&gt;
Blocks are themselves expressions; &lt;em&gt;a block may appear everywhere an expression can&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image013.png" /&gt;   &lt;/p&gt;
&lt;p&gt;ex.  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;val x = 0  
def f(y: Int) = y +1  
val result = {  
  val x = f(3);  
  x * x  
} + x // result = 16
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ex. eliminate the parameter &lt;code&gt;x&lt;/code&gt; of helper functions inside the &lt;code&gt;sqrt&lt;/code&gt; function  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def sqrt(x:Double): Double = {  
  def improve(guess: Double): Double =  
    (x / guess + guess) / 2.0

  def isGoodGuess(guess: Double): Boolean =  
    math.abs((guess * guess - x)/x)&amp;lt;0.001

  def sqrtItr(guess: Double): Double = {  
    if (isGoodGuess(guess)) guess  
    else sqrtItr(improve(guess))  
  }

  sqrtItr(1)  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;about multiline expressions: put the operator in the first line to avoid ambguity.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image014.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;1.7 - Tail Recursion&lt;/h2&gt;
&lt;p&gt;review: evaluation of function application.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image015.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image016.png" /&gt;  &lt;/p&gt;
&lt;p&gt;ex1. gcd  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def gcd(a:Int, b:Int): Int=  
  if(b==0) a else gcd(b, a%b)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image017.png" /&gt;  &lt;/p&gt;
&lt;p&gt;ex2. factorial  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def factorial(n:Int): Int =  
  if(n==0) 1 else n*factorial(n-1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="progfun1_lec1_fun_and_eval/pasted_image018.png" /&gt;  &lt;/p&gt;
&lt;p&gt;difference from the &lt;code&gt;gcd&lt;/code&gt; case:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in &lt;code&gt;gcd&lt;/code&gt;, the expression is reduced to a &lt;code&gt;gcd()&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;in &lt;code&gt;factorial&lt;/code&gt;, &lt;em&gt;add one more element to the expression in each step&lt;/em&gt;!  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;tail recursion&lt;/h3&gt;
&lt;p&gt;if &lt;strong&gt;a function calls itself  as its last action&lt;/strong&gt;, then the function's stack can be reused. &lt;br /&gt;
⇒ tail recursion functions are iterative process.   &lt;/p&gt;
&lt;p&gt;In general, if &lt;strong&gt;the last action of a function consists of calling a function (which may be the same)&lt;/strong&gt;, one stack frame would be sufficient for both functions. Such calls are called &lt;em&gt;tail-calls&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;tail-recursive function:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;more efficient  &lt;/li&gt;
&lt;li&gt;can avoid stackoverflow  &lt;/li&gt;
&lt;li&gt;might not be as clear as a non-tailrec version   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;add &lt;code&gt;@tailrec&lt;/code&gt;annotation to the function, if its not tailrec, an error will be shown.    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@tailrec  
def gcd(a: Int, b: Int): Int = ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;exercice: turn factorial into tailrec fashion. &lt;br /&gt;
→ idea: use an &lt;strong&gt;accumulator &lt;/strong&gt;(partial result) &lt;code&gt;acc&lt;/code&gt; .  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def factorialTR(n:Int):Int = {  
  @tailrec  
  def fact(n:Int, acc:Int):Int = {  
    if(n==0) acc  
    else fact(n-1, n*acc)  
  }  
  fact(n, 1)  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Programming Assignment: Recursion&lt;/h2&gt;
&lt;p&gt;三道递归的练习题...  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  /**  
    * Exercise 1  
    */  
  def pascal(c: Int, r: Int): Int = {  
    if (c == 0 || c == r) 1  
    else pascal(c, r - 1) + pascal(c - 1, r - 1)  
  }

  /**  
    * Exercise 2  
    */  
  def balance(chars: List[Char]): Boolean = {  
    def balance_rec(chars: List[Char], acc: Int): Boolean = {  
      if (acc&amp;lt;0) false  
      else if (chars.isEmpty) acc == 0  
      else if (chars.head == &amp;#39;(&amp;#39;) balance_rec(chars.tail, acc+1)  
      else if (chars.head == &amp;#39;)&amp;#39;) balance_rec(chars.tail, acc-1)  
      else balance_rec(chars.tail, acc)  
    }

    balance_rec(chars, 0)  
  }

  /**  
    * Exercise 3  
    */  
  def countChange(money: Int, coins: List[Int]): Int = {  
    if(money==0 ) 1  
    else if(coins.isEmpty || money&amp;lt;0) 0  
    else countChange(money, coins.tail) + countChange(money-coins.head, coins)  
  }
&lt;/pre&gt;&lt;/div&gt;</summary><category term="scala"></category></entry><entry><title>[Functional Programming Principles in Scala] Lec0: Getting Started</title><link href="http://x-wei.github.io/progfun1_lec0_setup.html" rel="alternate"></link><published>2016-06-20T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/progfun1_lec0_setup.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Get up and running with Scala on your computer. Complete an example assignment to familiarize yourself with our unique way of submitting assignments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Tool setup&lt;/h1&gt;
&lt;h3&gt;IntelliJ&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;use worksheet as a better REPL&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;SBT&lt;/h3&gt;
&lt;p&gt;navigate to the directory of the assignment you are working on, then start &lt;code&gt;sbt&lt;/code&gt;. 
(when first running &lt;code&gt;sbt&lt;/code&gt;, will take 5~10 minutes to download files...)&lt;/p&gt;
&lt;h4&gt;REPL&lt;/h4&gt;
&lt;p&gt;type &lt;code&gt;console&lt;/code&gt; to enter scala REPL, hit &lt;code&gt;ctrl-d&lt;/code&gt; to exit REPL. &lt;/p&gt;
&lt;h4&gt;Compile / run / test&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;compile&lt;/code&gt;: The compile task will compile the source code of the assignment which is located in the directory &lt;code&gt;src/main/scala&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt;: The directory &lt;code&gt;src/test/scala&lt;/code&gt; contains unit tests for the project. In order to run these tests in sbt, you can use the test command.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run&lt;/code&gt;: If your project has an object with a main method (or an object extending the trait App), then you can run the code in sbt easily by typing run. In case sbt finds multiple main methods, it will ask you which one you'd like to execute.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;submit&lt;/h4&gt;
&lt;p&gt;submitting assignments in sbt: 
&lt;code&gt;submit your@email.com YourSubmissionPassWord&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;Scala tutorial&lt;/h1&gt;
&lt;h3&gt;Classes, Traits, Objects and Packages&lt;/h3&gt;
&lt;h4&gt;Classes&lt;/h4&gt;
&lt;p&gt;Classes in Scala are very similar to classes in Java. They are templates containing fields and methods. Like in Java, classes can be instantiated using the new construct, there can be many “instances” (or “objects”) of the same class.&lt;/p&gt;
&lt;p&gt;In Scala there exists &lt;strong&gt;a special kind of class named case classes&lt;/strong&gt;. You will learn about case classes during the course.&lt;/p&gt;
&lt;p&gt;Classes in Scala &lt;strong&gt;cannot have static members&lt;/strong&gt;. You can use &lt;em&gt;objects&lt;/em&gt; (see below) to achieve similar functionality as with static members in Java.&lt;/p&gt;
&lt;h4&gt;Traits&lt;/h4&gt;
&lt;p&gt;Traits are like &lt;strong&gt;interfaces&lt;/strong&gt; in Java, but they &lt;em&gt;can also contain concrete members&lt;/em&gt;, i.e. method implementations or field definitions.&lt;/p&gt;
&lt;h4&gt;Objects&lt;/h4&gt;
&lt;p&gt;Object in Scala are like classes, but for every object definition there is only one single instance. &lt;em&gt;It is not possible to create instances of objects using new&lt;/em&gt;, instead you can just access the members (methods or fields) of an object using its name.&lt;/p&gt;
&lt;h4&gt;Packages&lt;/h4&gt;
&lt;p&gt;Adding a statement such as package foo.bar at the top of a file makes the code in a file part of the package foo.bar. You can then do import foo.bar._ to make everything from package foo.bar available in your code. The content of a package can be scattered across many files. If you define a class MyClass in package foo.bar, you can import that specific class (and not anything else from that package) with import foo.bar.MyClass.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In Scala, everything can be imported, not only class names&lt;/em&gt;. So for instance if you have an object baz in package foo.bar, then import foo.bar.baz._ would import all the members of that object.&lt;/p&gt;
&lt;h3&gt;Hello, World! in Scala&lt;/h3&gt;
&lt;p&gt;In Scala, the main or &lt;em&gt;entry point method is defined in an object&lt;/em&gt;. An object can be made executable by either adding extending the type &lt;code&gt;App&lt;/code&gt; or by adding a method &lt;code&gt;def main(args: Array[String])&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here are two ways to define a program which outputs “Hello, World!” in Scala:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;object HelloWorld extends App {
  println(&amp;quot;Hello, World!&amp;quot;)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;object HelloWorld {
  def main(args: Array[String]) {
    println(&amp;quot;Hello, World!&amp;quot;)
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Source Files, Classfiles and the JVM&lt;/h3&gt;
&lt;p&gt;Scala source code is stored in text files with the extension &lt;code&gt;.scala&lt;/code&gt;. Typically Scala programmers create one source file for each class, or one source file for a class hierarchy: In fact, Scala &lt;em&gt;allows multiple classes and objects to be defined in the same source file&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The name of a Scala source file can be chosen &lt;em&gt;freely&lt;/em&gt;, but it is recommended to use the name of a class which is defined in that file.&lt;/li&gt;
&lt;li&gt;Package hierarchies should be reflected in directory structure: a source file defining class C in package foo.bar should be stored in a subdirectory as foo/bar/C.scala. Scala does not really enforce this convention, but some tools such as the Scala IDE for eclipse might have problems otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The scala compiler compiles &lt;code&gt;.scala&lt;/code&gt; source files to &lt;code&gt;.class&lt;/code&gt; files, like the Java compiler. Classfiles are binary files containing machine code for the Java Virtual Machine. In order to run a Scala program, the JVM has to know the directory where classfiles are stored. This parameter is called the “classpath”.&lt;/p&gt;
&lt;p&gt;If you are using eclipse or sbt to compile and run your Scala code, you don’t need to do any of the above manually - these tools take care of invoking the Scala compiler and the JVM with the correct arguments.&lt;/p&gt;
&lt;h1&gt;Scala Style Guide&lt;/h1&gt;
&lt;p&gt;style checker: &lt;a href="http://www.scalastyle.org/"&gt;http://www.scalastyle.org/&lt;/a&gt;
(in IntelliJ: You can enable scalastyle in Intellij by selecting Settings-&amp;gt;Editor-&amp;gt;Inspections, then searching for Scala style inspections.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Avoid Casts and Type Tests&lt;/em&gt;: Never use isInstanceOf or asInstanceOf - there’s always a better solution.&lt;/li&gt;
&lt;li&gt;Indentation &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Line Length and Whitespace&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Use local Values to simplify complex Expressions&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Choose meaningful Names for Methods and Values&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Common Subexpressions&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;*Don’t Copy-Paste Code!: factor out common parts into separate methods instead of copying code around. *&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Scala doesn’t require Semicolons&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Don’t submit Code with “print” Statements: the final code should be free of debugging statements.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Avoid using Return&lt;/em&gt;: often don’t need to use explicit returns. &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Avoid mutable local Variables&lt;/em&gt;: You can often rewrite code that uses mutable local variables to code with helper functions that take accumulators.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Eliminate redundant “If” Expressions&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Cheatsheet&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/lampepfl/progfun-wiki/blob/gh-pages/CheatSheet.md"&gt;https://github.com/lampepfl/progfun-wiki/blob/gh-pages/CheatSheet.md&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Example Assignment&lt;/h1&gt;
&lt;h3&gt;implementation&lt;/h3&gt;
&lt;p&gt;implement &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;sum&lt;/code&gt; method for &lt;code&gt;List[Int]&lt;/code&gt;. 
trick: use recursion. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def sum(xs: List[Int]): Int = {
    if (xs.isEmpty) 0
    else xs.head + sum(xs.tail)
}

def max(xs: List[Int]): Int = {
    if (xs.isEmpty) throw new java.util.NoSuchElementException()
    max(xs, Int.MinValue)
}
def max(xs: List[Int], m: Int): Int = {
    if (xs.isEmpty) m
    else if (xs.head &amp;gt; m) max(xs.tail, xs.head)
    else max(xs.tail, m)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;ScalaTest&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A test suite is simply a collection of individual tests for some specific component of a program. A test suite is created by defining a class which extends the type &lt;code&gt;org.scalatest.FunSuite&lt;/code&gt;. When running ScalaTest, it will automatically find this class and execute all of its tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You have two options for running this test suite:
- Start the sbt console and run the "&lt;code&gt;test&lt;/code&gt;" command
- Right-click this file in eclipse and chose "Run As" - "JUnit Test"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tests are written using the &lt;code&gt;test&lt;/code&gt; operator which takes two arguments:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A description of the test. This description has to be unique, no two tests can have the same description. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;The test body, a piece of Scala code that implements the test 
The most common way to implement a test body is using the method &lt;code&gt;assert&lt;/code&gt; which tests that its argument evaluates to &lt;code&gt;true&lt;/code&gt;. So one of the simplest successful tests is the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;test("one plus one is two")(assert(1 + 1 == 2))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In Scala, it is allowed to pass an argument to a method using the block  syntax, i.e. &lt;code&gt;{ argument }&lt;/code&gt; instead of parentheses&lt;code&gt;(argument)&lt;/code&gt;.
This allows tests to be written in a more readable manner:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test(&amp;quot;one plus one is three?&amp;quot;) {
    assert(1 + 1 == 3) // This assertion fails! Go ahead and fix it.
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One problem with the previous (failing) test is that ScalaTest will      &lt;br /&gt;
only tell you that a test failed, but it will not tell you what was      &lt;br /&gt;
the reason for the failure. The output looks like this:                    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{{{                                                                        
   [info] - one plus one is three? *** FAILED ***                          
}}}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This situation can be improved by &lt;strong&gt;using a special equality operator &lt;/strong&gt;&lt;code&gt;===&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; (this is only possible in ScalaTest). So if you  run the next test, ScalaTest will show the following output:               &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{{{                                                                        
   [info] - details why one plus one is not three *** FAILED ***           
   [info]   2 did not equal 3 (ListsSuite.scala:67)                        
}}}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;We recommend to always use the &lt;/strong&gt;&lt;code&gt;===&lt;/code&gt;&lt;strong&gt; equality operator when writing tests.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;In order to test the exceptional behavior of a methods, ScalaTest offers the &lt;code&gt;intercept&lt;/code&gt;operation.                                              &lt;/p&gt;
&lt;p&gt;In the following example, we test the fact that the method &lt;code&gt;intNotZero&lt;/code&gt; throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if its argument is &lt;code&gt;0&lt;/code&gt;.     &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def intNotZero(x: Int): Int = {
    if (x == 0) throw new IllegalArgumentException(&amp;quot;zero is not allowed&amp;quot;)
    else x
  }     
test(&amp;quot;intNotZero throws an exception if its argument is 0&amp;quot;) {
    intercept[IllegalArgumentException] {
      intNotZero(0)
    }
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is allowed to have multiple &lt;code&gt;assert&lt;/code&gt; statements inside one test, however it is recommended to write an individual &lt;code&gt;test&lt;/code&gt; statement for every tested aspect of a method.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  test(&amp;quot;sum of a few numbers&amp;quot;) {
    assert(sum(List(1,2,0)) === 3)
  }
  test(&amp;quot;sum of empty list&amp;quot;){
    assert(sum(List())===0)
  }
  test(&amp;quot;sum of negative numbers&amp;quot;){
    assert(sum(List(-1,-1,-1)) === -3)
  }

  test(&amp;quot;max of a few numbers&amp;quot;) {
    assert(max(List(3, 7, 2)) === 7)
  }
  test(&amp;quot;max of empty list throws NoSuchElementException&amp;quot;){
    intercept[NoSuchElementException]{
      max(List())
    }
  }
&lt;/pre&gt;&lt;/div&gt;</summary><category term="scala"></category></entry><entry><title>(DeepLearning MOOC) Lesson 4: Deep Models for Text and Sequences</title><link href="http://x-wei.github.io/dlMOOC_L4.html" rel="alternate"></link><published>2016-06-07T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/dlMOOC_L4.html</id><summary type="html">&lt;p&gt;problems with text:   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;often very rare word is important, e.g. &lt;em&gt;retinopathy&lt;/em&gt;  &lt;/li&gt;
&lt;li&gt;ambiguity: e.g. &lt;em&gt;cat&lt;/em&gt; and &lt;em&gt;kitty&lt;/em&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;→ need a lot of labeled data ⇒ not realistic. &lt;br /&gt;
⇒ &lt;strong&gt;unsupervised learning&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;similar words appear in similar context. &lt;br /&gt;
embedding: map words to small vectors&lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image.png" /&gt;&lt;br /&gt;
measure the closeness by cosine distance: &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image003.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;word2vec&lt;/h2&gt;
&lt;p&gt;initial: random vector&lt;br /&gt;
→ train model to predict nearby word. &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image001.png" /&gt;&lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image004.png" /&gt;&lt;br /&gt;
pb: too many words in dictionary → softmax too slow&lt;br /&gt;
⇒ random sample the non-target words &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image005.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="dlMOOC_L4/pasted_image006.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;tSNE&lt;/h2&gt;
&lt;p&gt;dimension reduction (not PCA) that preserves the neighborhood structure (close vector → close in 2d as well). &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image002.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;RNN&lt;/h2&gt;
&lt;p&gt;treat varaible length sequences of words. &lt;br /&gt;
use the current word (Xi) and the last prediction as input. &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image007.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;backprop for RNN&lt;/h2&gt;
&lt;p&gt;apply highly correlated derivatives to W → not good for SGD. &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image008.png" /&gt;  &lt;/p&gt;
&lt;p&gt;pb if we use highly correlated updates: grad either explod or it disappear quickly.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="dlMOOC_L4/pasted_image009.png" /&gt;  &lt;/p&gt;
&lt;p&gt;fix grad-exploding: &lt;em&gt;clip&lt;/em&gt;&lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image010.png" /&gt;  &lt;/p&gt;
&lt;p&gt;grad-vanishing: memory loss in RNN&lt;br /&gt;
⇒ LSTM  &lt;/p&gt;
&lt;h2&gt;LSTM&lt;/h2&gt;
&lt;p&gt;in RNN: replace the NN by a LSTM cell&lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image011.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="dlMOOC_L4/pasted_image013.png" /&gt;&lt;br /&gt;
represent the system with memory by a diagram with logical gates:   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="dlMOOC_L4/pasted_image014.png" /&gt;&lt;br /&gt;
change the decision variables to continous:&lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image012.png" /&gt;&lt;br /&gt;
a logistic regression in each gate: controls when to remember and when to forget things. &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image015.png" /&gt;&lt;br /&gt;
&lt;a href="http://blog.csdn.net/dark_scope/article/details/47056361"&gt;http://blog.csdn.net/dark_scope/article/details/47056361&lt;/a&gt;&lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image024.png" /&gt;&lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image023.png" /&gt;  &lt;/p&gt;
&lt;p&gt;regularization for LSTM:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L2 regularization: OK  &lt;/li&gt;
&lt;li&gt;dropout: OK when used for input/output (X and Y), but NOT use to the recurrent in/out.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;beam search&lt;/h2&gt;
&lt;p&gt;beam search is for &lt;em&gt;generating&lt;/em&gt; sequences by RNN.   &lt;/p&gt;
&lt;p&gt;Greedy approach: at each step, &lt;em&gt;sample&lt;/em&gt; from the predicted distribution of the RNN. &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image017.png" /&gt;&lt;br /&gt;
smarter approach: &lt;br /&gt;
predict more steps and pick the seq with largest proba. &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image018.png" /&gt;&lt;br /&gt;
pb with this: the number of possible seq grows exponentially &lt;br /&gt;
⇒ just keep the few most promising seqs → "&lt;strong&gt;Beam search"&lt;/strong&gt;&lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image016.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;seq to seq&lt;/h2&gt;
&lt;p&gt;RNN: model to map vaiable length seq to fix-length vectors. &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image021.png" /&gt;&lt;br /&gt;
Beam search: sequence generation (map fix-length vectors to seq)&lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image019.png" /&gt;  &lt;/p&gt;
&lt;p&gt;concat them together: seq to seq system&lt;br /&gt;
&lt;img alt="" src="dlMOOC_L4/pasted_image022.png" /&gt;  &lt;/p&gt;
&lt;p&gt;e.g. &lt;br /&gt;
translation, speech recognation, image captionning  &lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>(DeepLearning MOOC) Lesson 3: Convolutional Neural Networks</title><link href="http://x-wei.github.io/dlMOOC_L3.html" rel="alternate"></link><published>2016-06-06T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/dlMOOC_L3.html</id><summary type="html">&lt;p&gt;statistical invariance → &lt;strong&gt;weight sharing&lt;/strong&gt;&lt;br /&gt;
e.g. image colors, translation invariance...   &lt;/p&gt;
&lt;h2&gt;convnet&lt;/h2&gt;
&lt;p&gt;is NNs that share their weights across space.   &lt;/p&gt;
&lt;p&gt;convolution: slide a small patch of NN over the image to produce a new "image"&lt;br /&gt;
&lt;img alt="" src="dlMOOC_L3/pasted_image.png" /&gt;  &lt;/p&gt;
&lt;p&gt;convnet forms a pyramid, each "stack of pincake" get larger depth and smaller area. &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L3/pasted_image001.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;convolutional lingo&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="dlMOOC_L3/pasted_image002.png" /&gt;  &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;patch (kernel)&lt;/strong&gt;&lt;br /&gt;
small NN that slides over the image.   &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;depth&lt;/strong&gt;&lt;br /&gt;
number of pincakes in stack.   &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;feature map&lt;/strong&gt;&lt;br /&gt;
each "pincake" in stack.   &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;stride&lt;/strong&gt;&lt;br /&gt;
nb of pixels that you shift each time you move your filter. &lt;br /&gt;
e.g. stride=1 → output almost the same size as the input; stride=2 → output about half size  &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;padding&lt;/strong&gt;&lt;br /&gt;
the way you treat the edge of image.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;valid padding&lt;/em&gt;: don't go pass the edge  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;same padding&lt;/em&gt;: go off the image and pad with 0s (output size=input size)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="dlMOOC_L3/pasted_image003.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="dlMOOC_L3/pasted_image004.png" /&gt;  &lt;/p&gt;
&lt;p&gt;once got "deep and narrow" representation by convolution, connect to a normal (regular) fully-conncected NN. &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L3/pasted_image005.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;pooling&lt;/h2&gt;
&lt;p&gt;better way to reduce the spatial extend (i.e. size) of the feature map. &lt;br /&gt;
simple convnet: use large stride to reduce the feature map size. ⇒ &lt;em&gt;aggressive&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;pooling&lt;/strong&gt;: use small stride (ex. stride=1), then &lt;em&gt;take convolutions in neighbourhood and combine them&lt;/em&gt;.&lt;br /&gt;
&lt;img alt="" src="dlMOOC_L3/pasted_image006.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;max pooling&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="dlMOOC_L3/pasted_image007.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;average pooling&lt;/strong&gt;&lt;br /&gt;
&lt;img alt="" src="dlMOOC_L3/pasted_image008.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;1x1 convolution&lt;/h2&gt;
&lt;p&gt;classic convolution = &lt;em&gt;linear&lt;/em&gt; classifier over a small patch of image&lt;br /&gt;
&lt;strong&gt;add a 1x1 convolution in the middle&lt;/strong&gt; ⇒ a mini-dnn over the patch. &lt;br /&gt;
cheap: not convolution, just matrix multiplication. &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L3/pasted_image009.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;inception module&lt;/h2&gt;
&lt;p&gt;between each layers, just do both pooling and 1x1 conv, and 3x3 and 5x5.. conv, and concatenate them together. &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L3/pasted_image010.png" /&gt;&lt;br /&gt;
benefit: total number of parameters is small, yet performance better.   &lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>(DeepLearning MOOC) Lesson 2: Deep Neural Networks</title><link href="http://x-wei.github.io/dlMOOC_L2.html" rel="alternate"></link><published>2016-06-05T18:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/dlMOOC_L2.html</id><summary type="html">&lt;h2&gt;Linear models&lt;/h2&gt;
&lt;p&gt;matrix multiplication: fast with GPU&lt;br /&gt;
numerically stable&lt;br /&gt;
cannot cocatenate linear units → equivalent to one big matrix...  &lt;/p&gt;
&lt;p&gt;⇒ add non-linear units in between   &lt;/p&gt;
&lt;h2&gt;rectified linear units (RELU)&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="dlMOOC_L2/pasted_image.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="dlMOOC_L2/pasted_image002.png" /&gt;  &lt;/p&gt;
&lt;p&gt;chain rule: efficient computationally&lt;br /&gt;
&lt;img alt="" src="dlMOOC_L2/pasted_image003.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="dlMOOC_L2/pasted_image004.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;back propagation&lt;/h2&gt;
&lt;p&gt;easy to compute the gradient as long as the function Y(X) is made of simple blocks with simple deritivates. &lt;br /&gt;
most deep-learning framework can do it automatically for you.   &lt;/p&gt;
&lt;p&gt;N.B. The backprop block takes 2x memory/compute wrt the forward prop blocks. &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L2/pasted_image005.png" /&gt;  &lt;/p&gt;
&lt;p&gt;first neural network: RELU units between linear classifiers: &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L2/pasted_image001.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;Tensor flow&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;tensors&lt;/code&gt; define computations, and they are nodes in a computation &lt;code&gt;graph&lt;/code&gt;. &lt;br /&gt;
To actually run the optimization, use &lt;code&gt;sessions&lt;/code&gt;...  &lt;/p&gt;
&lt;p&gt;define a computation graph:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;batch_size = 128  
num_hidden = 1024

graph = tf.Graph()  
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed  
  # at run time with a training minibatch.  
  tf_train_dataset = tf.placeholder(tf.float32,  
                                    shape=(batch_size, image_size * image_size))  
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))  
  tf_valid_dataset = tf.constant(valid_dataset)  
  tf_test_dataset = tf.constant(test_dataset)

  # Variables for linear layer 1  
  W1 = tf.Variable(  
    tf.truncated_normal([image_size * image_size, num_hidden]))  
  b1 = tf.Variable(tf.zeros([num_hidden]))

  # Hidden RELU input computation  
  y1 = tf.matmul(tf_train_dataset, W1) + b1  
  # Hidden RELU output computation  
  X1 = tf.nn.relu(y1)

  # Variables for linear layer 2  
  W2 = tf.Variable(  
    tf.truncated_normal([num_hidden, num_labels]))#W2  
  b2 = tf.Variable(tf.zeros([num_labels])) #b2  
  # logit (y2) output  
  logits = tf.matmul(X1, W2) + b2  
  loss = tf.reduce_mean(  
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))

  def getlogits(X):  
    y1 = tf.matmul(X, W1) + b1  
    X1 = tf.nn.relu(y1)  
    return tf.matmul(X1, W2) + b2

  # Optimizer.  
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

  # Predictions for the training, validation, and test data.  
  train_prediction = tf.nn.softmax(logits)  
  valid_prediction = tf.nn.softmax( getlogits(tf_valid_dataset) )  
  test_prediction = tf.nn.softmax( getlogits(tf_test_dataset))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;run sgd optimization:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;num_steps = 3001

with tf.Session(graph=graph) as session:  
  tf.initialize_all_variables().run()  
  print(&amp;quot;Initialized&amp;quot;)  
  for step in range(num_steps):  
    # Pick an offset within the training data, which has been randomized.  
    # Note: we could use better randomization across epochs.  
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)  
    # Generate a minibatch.  
    batch_data = train_dataset[offset:(offset + batch_size), :]  
    batch_labels = train_labels[offset:(offset + batch_size), :]  
    # Prepare a dictionary telling the session where to feed the minibatch.  
    # The key of the dictionary is the placeholder node of the graph to be fed,  
    # and the value is the numpy array to feed to it.  
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}  
    _, l, predictions = session.run(  
      [optimizer, loss, train_prediction], feed_dict=feed_dict)  
    if (step % 500 == 0):  
      print(&amp;quot;Minibatch loss at step %d: %f&amp;quot; % (step, l))  
      print(&amp;quot;Minibatch accuracy: %.1f%%&amp;quot; % accuracy(predictions, batch_labels))  
      print(&amp;quot;Validation accuracy: %.1f%%&amp;quot; % accuracy(  
        valid_prediction.eval(), valid_labels))  
  print(&amp;quot;Test accuracy: %.1f%%&amp;quot; % accuracy(test_prediction.eval(), test_labels))
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Regularization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;early termination: stop when cannot improve in validation performance.   &lt;/li&gt;
&lt;li&gt;L2 regularization: adding L2 norm of   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="dlMOOC_L2/pasted_image006.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;Dropout&lt;/h2&gt;
&lt;p&gt;def. &lt;strong&gt;activation&lt;/strong&gt; is the output of last layer that flows into the next layer. &lt;br /&gt;
dropout: &lt;em&gt;randomly set half of activations to 0&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;rational: forcing your model to learn reduadant representations (consus over an ensemble of nns...)... &lt;br /&gt;
&lt;img alt="" src="dlMOOC_L2/pasted_image007.png" /&gt;  &lt;/p&gt;
&lt;p&gt;N.B.&lt;br /&gt;
for evaluation no longer dropout, &lt;code&gt;ye&lt;/code&gt; = average of activations, trick to let &lt;code&gt;ye=E(yt)&lt;/code&gt;, in training, multiply the remaining activations by 2.&lt;br /&gt;
&lt;img alt="" src="dlMOOC_L2/pasted_image008.png" /&gt;  &lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>(DeepLearning MOOC) Lesson 1: From Machine Learning to Deep Learning</title><link href="http://x-wei.github.io/dlMOOC_L1.html" rel="alternate"></link><published>2016-06-05T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/dlMOOC_L1.html</id><summary type="html">&lt;p&gt;这是udacity上deeplearning的笔记, 做得非常粗糙, 而且这门课也只是介绍性质的... 
&lt;a href="https://www.udacity.com/course/deep-learning--ud730"&gt;https://www.udacity.com/course/deep-learning--ud730&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Softmax function&lt;/h2&gt;
&lt;p&gt;socres &lt;code&gt;yi&lt;/code&gt; ⇒ probabilities &lt;code&gt;pi&lt;/code&gt;
&lt;img alt="" src="dlMOOC_L1/pasted_image.png" /&gt;&lt;/p&gt;
&lt;p&gt;property: &lt;strong&gt;smaller scores ⇒ less certain about result&lt;/strong&gt;
&lt;img alt="" src="dlMOOC_L1/pasted_image001.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Onehot encoding&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="dlMOOC_L1/pasted_image002.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Cross entropy&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;measure how well the probability vector &lt;/em&gt;&lt;code&gt;S&lt;/code&gt;&lt;em&gt; corresponds to the label vector &lt;/em&gt;&lt;code&gt;L&lt;/code&gt;&lt;em&gt;.&lt;/em&gt; 
⇒ cross entropy &lt;code&gt;D(S,L)&lt;/code&gt;&lt;em&gt;( D&amp;gt;=0, the smaller the better)&lt;/em&gt;
&lt;img alt="" src="dlMOOC_L1/pasted_image003.png" /&gt;&lt;/p&gt;
&lt;p&gt;N.B. &lt;code&gt;D(S,L)&lt;/code&gt; is not symmetric (never log 0 ) &lt;/p&gt;
&lt;p&gt;recap ("multinominal logistic classificaton"): 
&lt;img alt="" src="dlMOOC_L1/pasted_image004.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Minimizing cross entropy&lt;/h2&gt;
&lt;p&gt;take avg D as loss function: 
&lt;img alt="" src="dlMOOC_L1/pasted_image008.png" /&gt;
⇒ optimization, for example, by grad-desc: 
&lt;img alt="" src="dlMOOC_L1/pasted_image007.png" /&gt;&lt;/p&gt;
&lt;p&gt;for the moment, take the optimizer as black box. &lt;/p&gt;
&lt;p&gt;two practical problems: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;how to feed img pixels to classifiers &lt;/li&gt;
&lt;li&gt;how to initialize the optimization&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;numerical stability&lt;/h2&gt;
&lt;p&gt;adding very small values to very large values will introduce a lot of errors ! 
ex. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = 1e9
&amp;gt;&amp;gt;&amp;gt; for _ in xrange(1000000):
...     a += 1e-6
&amp;gt;&amp;gt;&amp;gt; a - 1e9
0.95367431640625
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;⇒ the result is not 1... &lt;/p&gt;
&lt;p&gt;⇒ normalize input ! ⇒ &lt;strong&gt;0 mean, 1 variance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;this make optimizers easier to find optimum. 
&lt;img alt="" src="dlMOOC_L1/pasted_image009.png" /&gt;&lt;/p&gt;
&lt;p&gt;normalization for images: 
&lt;img alt="" src="dlMOOC_L1/pasted_image010.png" /&gt;&lt;/p&gt;
&lt;h2&gt;weight initialization&lt;/h2&gt;
&lt;p&gt;draw init w/b from a &lt;code&gt;Gaussian(0, sigma)&lt;/code&gt;, sigma → magtitude of initial output. 
small sigma means small outputs → uncertain about result. 
⇒ take small sigma for initialization 
&lt;img alt="" src="dlMOOC_L1/pasted_image011.png" /&gt;&lt;/p&gt;
&lt;p&gt;recap: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="dlMOOC_L1/pasted_image012.png" /&gt;
⇒ feed this loss fcn to the optimizer &lt;/p&gt;
&lt;h2&gt;training, validation and test dataset&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;rule of thumb (30)&lt;/strong&gt;: 
a change that affects 30 examples in the validation set is statically significant. 
⇒ in most cases use &amp;gt;30000 samples in validation set → changes in 0.1% is significant. &lt;/p&gt;
&lt;h2&gt;SGD&lt;/h2&gt;
&lt;p&gt;rule of thumb: computing &lt;code&gt;grad(L)&lt;/code&gt; takes 3x time than computing loss fcn &lt;code&gt;L&lt;/code&gt;. → pb for scaling.. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="dlMOOC_L1/pasted_image014.png" /&gt;
SGD is the only fast enough model in practice. &lt;/p&gt;
&lt;p&gt;tricks to help SGD: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;normalize data (0 mean, uni-var)&lt;/li&gt;
&lt;li&gt;randomly initialize weights&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;momentum&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;learning rate decay&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Momentum&lt;/h2&gt;
&lt;p&gt;SGD: many small steps in random directions → general direction is more accurate. 
⇒ keep a running average of the gradients&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="dlMOOC_L1/pasted_image015.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Learning rate decay&lt;/h2&gt;
&lt;p&gt;take smaller and smaller steps (alpha decays)
e.g. alpha decays exponentially...&lt;img alt="" src="dlMOOC_L1/pasted_image016.png" /&gt;&lt;/p&gt;
&lt;h2&gt;parameter tuning&lt;/h2&gt;
&lt;p&gt;how quickly you learning != how well you train.. 
&lt;img alt="" src="dlMOOC_L1/pasted_image017.png" /&gt;
balck magics in deep learning: 
&lt;img alt="" src="dlMOOC_L1/pasted_image018.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adagrad&lt;/strong&gt;
variant of SGD, implicitly decays momentum and learning rate. &lt;/p&gt;
&lt;p&gt;recap: 
&lt;img alt="" src="dlMOOC_L1/pasted_image019.png" /&gt;&lt;/p&gt;</summary><category term="deep learning"></category></entry><entry><title>[Algorithms II] Week 6-3 Intractability</title><link href="http://x-wei.github.io/algoII_week6_3_intractability.html" rel="alternate"></link><published>2016-02-23T00:00:00+01:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoII_week6_3_intractability.html</id><summary type="html">&lt;h1&gt;1. Introduction to Intractability&lt;/h1&gt;
&lt;p&gt;recall model of computation: DFA &lt;br /&gt;
a &lt;em&gt;univeral&lt;/em&gt; model of computation: turing machine  &lt;br /&gt;
→ no more powerful model of computation.  &lt;br /&gt;
Turing machine can compute any function that can be computed by a physically harnessable process of the natural world.    &lt;/p&gt;
&lt;p&gt;bottom line: turing machine is a simple and universal model of computation.    &lt;/p&gt;
&lt;p&gt;Q. which algos are &lt;em&gt;useful in practice&lt;/em&gt;?   &lt;/p&gt;
&lt;p&gt;useful in practice = polynomial time for all inputs   &lt;/p&gt;
&lt;p&gt;def. a pb is &lt;strong&gt;intractable&lt;/strong&gt; if it cannot be solved in polynomial time.    &lt;/p&gt;
&lt;p&gt;2 pbs that &lt;em&gt;can be proved&lt;/em&gt; to require exp time:    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Given a constant-size programme, does it halt in &amp;lt;=K steps ?   &lt;/li&gt;
&lt;li&gt;Given a N*N chess board position, can the first player force a win ?   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Bad news: very few pbs can be proved to require exp time...   &lt;/p&gt;
&lt;h1&gt;2. Search Problems&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Four fundamental problems: &lt;/strong&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LSLOVE&lt;/strong&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given a system of linear equations, find a solution &lt;br /&gt;
var: real numbers &lt;br /&gt;
→ guassian elimination   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LP&lt;/strong&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given a system of linear inequaties, find a solution. (not necessarily find the opt) &lt;br /&gt;
var: real numbers   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ILP&lt;/strong&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given a system of linear inequaties, find a &lt;strong&gt;0-1&lt;/strong&gt; solution.  &lt;br /&gt;
var: 0 or 1   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SAT&lt;/strong&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given a system of &lt;em&gt;boolean equations&lt;/em&gt;, find a binary solution.    &lt;/p&gt;
&lt;p&gt;Which ones of the 4 foundamental pbs have poly-time solutions?   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LSLOVE: Gaussian elimination works in O(n3)   &lt;/li&gt;
&lt;li&gt;LP: Ellipsoid works in poly-time (simplex also poly-time &lt;em&gt;in practice&lt;/em&gt;..)   &lt;/li&gt;
&lt;li&gt;ILP, SAT: No poly-time algorithm known (or believed to exist) !   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All 4 pbs are examples of search problems.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Search pb&lt;/strong&gt;: given an instance &lt;code&gt;I&lt;/code&gt;, find a solution &lt;code&gt;S&lt;/code&gt; / report there's no solution.  &lt;br /&gt;
&lt;em&gt;requirement&lt;/em&gt;: able to efficiently (poly-time) &lt;em&gt;check&lt;/em&gt; that &lt;code&gt;S&lt;/code&gt; is a solution. (that's the case for the above 4 fundamental pbs)   &lt;/p&gt;
&lt;p&gt;another example:  &lt;br /&gt;
&lt;strong&gt;FACTOR&lt;/strong&gt;: given a n-bit integer, find a nontrival factor.  &lt;br /&gt;
(given a solution, simply need to long-divide to check...)   &lt;/p&gt;
&lt;h1&gt;3. P vs. NP&lt;/h1&gt;
&lt;p&gt;def. &lt;strong&gt;NP&lt;/strong&gt; is the class of all search pbs. (ie. solution be checked efficiently)  &lt;br /&gt;
NB: classical definition limits to yes-no pbs... &lt;br /&gt;
Significance: NP pbs are what scientists and engineers &lt;em&gt;aspire to compute feasibly&lt;/em&gt;. &lt;br /&gt;
examples:  &lt;br /&gt;
&lt;img alt="" src="algoII_week6_3_intractability/pasted_image.png" /&gt;   &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;P&lt;/strong&gt; is the class of search pbs that &lt;em&gt;are solvable&lt;/em&gt; in poly-time.    &lt;/p&gt;
&lt;p&gt;(What scientists and engineers &lt;em&gt;do compute feasibly&lt;/em&gt;.)   &lt;/p&gt;
&lt;p&gt;examples: &lt;br /&gt;
&lt;img alt="" src="algoII_week6_3_intractability/pasted_image001.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nondeterminism&lt;/strong&gt; &lt;br /&gt;
Nondeterminism machine can &lt;em&gt;guess&lt;/em&gt; the solution (donot exist in natural world..). → NFA tries to simulate such a machine... &lt;br /&gt;
Ex. &lt;code&gt;int[] a = new int[N];&lt;/code&gt; &lt;br /&gt;
・ Java: initializes entries to 0 . &lt;br /&gt;
・ Nondeterministic machine: &lt;em&gt;initializes entries to the solution!&lt;/em&gt; &lt;br /&gt;
&lt;img alt="" src="algoII_week6_3_intractability/pasted_image002.png" /&gt;   &lt;/p&gt;
&lt;p&gt;NP: &lt;em&gt;Search problems solvable in poly time on a nondeterministic Turing machine&lt;/em&gt;.    &lt;/p&gt;
&lt;p&gt;Extended Church-Turing thesis: &lt;br /&gt;
P: Search pbs solvable in poly time &lt;em&gt;in natural world&lt;/em&gt;.    &lt;/p&gt;
&lt;p&gt;do we have non-determinism in natural world? ---&amp;gt; natural computers ?  &lt;br /&gt;
ex. STEINER tree: set of segments connecting given N points.  &lt;br /&gt;
use soap → doesn't really work... &lt;br /&gt;
&lt;img alt="" src="algoII_week6_3_intractability/pasted_image003.png" /&gt;   &lt;/p&gt;
&lt;p&gt;another example for P/NP: automating creativity &lt;br /&gt;
&lt;em&gt;being creative VS appreciating creativity&lt;/em&gt; &lt;br /&gt;
&lt;img alt="" src="algoII_week6_3_intractability/pasted_image004.png" /&gt;   &lt;/p&gt;
&lt;p&gt;The central question: does P=NP?  &lt;br /&gt;
(can you alway avoid brute-force searching and do better?) &lt;br /&gt;
&lt;img alt="" src="algoII_week6_3_intractability/pasted_image005.png" /&gt; &lt;br /&gt;
Millennium prize by Clay instute. &lt;br /&gt;
(among all ways of earning 1M dollars, this might be the most complicated way... @_@...)   &lt;/p&gt;
&lt;h1&gt;4. Classifying Problems&lt;/h1&gt;
&lt;p&gt;classify pbs like classifying elements into perodic table.    &lt;/p&gt;
&lt;p&gt;key pb: satisfiablity &lt;br /&gt;
SAT. given a sys of boolean eq, find a solution.    &lt;/p&gt;
&lt;p&gt;exhaustive search: try 2^n possible solutions.  &lt;br /&gt;
conjecture: no poly-time algo for SAT (ie. intractable)   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assumption&lt;/strong&gt;: assume the intractability for SAT. &lt;br /&gt;
Tool: reduction &lt;br /&gt;
def. pb X reduces to pb Y: we can solve pb X with the algo for pb Y.  &lt;br /&gt;
&lt;img alt="" src="algoII_week6_3_intractability/pasted_image006.png" /&gt;   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;if SAT poly-reduces to pb Y ⇒ pb Y in (probably) intractable.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;SAT poly-reduces to ILP&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_3_intractability/pasted_image007.png" /&gt; &lt;br /&gt;
(all SAT pb can be reduced to 3SAT)   &lt;/p&gt;
&lt;p&gt;⇒ can be converted to an ILP pb:  &lt;br /&gt;
for each eq, introduce a var Ci: &lt;br /&gt;
&lt;img alt="" src="algoII_week6_3_intractability/pasted_image009.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_3_intractability/pasted_image008.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_3_intractability/pasted_image010.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_3_intractability/pasted_image011.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;5. NP-Completeness&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;def. an NP pb is &lt;strong&gt;NP-complete&lt;/strong&gt; if all pbs in NP poly-reduces to it.    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;prop. &lt;em&gt;SAT id NP-complete.&lt;/em&gt; &lt;br /&gt;
any pb in NP poly-reduces to SAT (reverse direction as last lecture) &lt;br /&gt;
pf sketch: convert non-dertiministic turing machine notation to SAT notation...   &lt;/p&gt;
&lt;p&gt;cor. poly time algo for SAT iff P=NP...   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_3_intractability/pasted_image012.png" /&gt;   &lt;/p&gt;
&lt;p&gt;⇒ there pbs are equivalent !    &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_3_intractability/pasted_image013.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_3_intractability/pasted_image014.png" /&gt; &lt;br /&gt;
summary:  &lt;br /&gt;
&lt;img alt="" src="algoII_week6_3_intractability/pasted_image015.png" /&gt;   &lt;/p&gt;
&lt;p&gt;==... &lt;br /&gt;
&lt;img alt="" src="algoII_week6_3_intractability/pasted_image016.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;6. Coping with Intractability&lt;/h1&gt;
&lt;h3&gt;exploit intractability&lt;/h3&gt;
&lt;p&gt;cryptography ecopoits the hardness of FACTOR pb &lt;br /&gt;
&lt;img alt="" src="algoII_week6_3_intractability/pasted_image017.png" /&gt;   &lt;/p&gt;
&lt;p&gt;Can factor an n-bit integer in n 3 steps on a "&lt;em&gt;quantum computer&lt;/em&gt;.”   &lt;/p&gt;
&lt;h3&gt;Coping with intractability&lt;/h3&gt;
&lt;p&gt;relax one of desired features...   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;special cases   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_3_intractability/pasted_image018.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Develop a heuristic, and hope it produces a good solution.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;no guarantee &lt;br /&gt;
ex. TSP   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Approximation algorithm. Find solution of provably good quality.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_3_intractability/pasted_image019.png" /&gt;   &lt;/p&gt;
&lt;h3&gt;Halmiton path&lt;/h3&gt;
&lt;p&gt;remark: Euler path (each edge once) easy, Halmiton path (each vertex once) NPC... &lt;br /&gt;
dfs solution for Halmiton path:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Halmiton{   
    private boolean[] marked;   
    private int count=0; // nb of Halmiton paths   
    public Halmiton(Graph G){   
        marked = new boolean[G.V()];   
        for (int v=0; v&amp;lt;G.V(); v++)   
            dfs(G,1,1);    
    }   
    private void dfs(Graph G, int v, int depth){   
        if(depth==G.V()) count++;   
        marked[v]=true;   
        for(int w: G.adj(v))    
            if(marked[w]==false) dfs(G, w, depth+1);   
        marked[v]=flase; // backtrack   
    }   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="algoII_week6_3_intractability/pasted_image020.png" /&gt;   &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 6-2 Linear Programming</title><link href="http://x-wei.github.io/algoII_week6_2_LP.html" rel="alternate"></link><published>2016-02-21T17:00:00+01:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoII_week6_2_LP.html</id><summary type="html">&lt;p&gt;simplex algo: top 10 algo of the 20th century (ever?).   &lt;/p&gt;
&lt;p&gt;what is linear programming:  &lt;br /&gt;
&lt;em&gt;a general problem-solving model&lt;/em&gt; that works for:  &lt;br /&gt;
shortest-path, maxflow, MST, matching, assignment, ...   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_2_LP/pasted_image.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;1. Brewer-'s Problem&lt;/h1&gt;
&lt;p&gt;toy example: choose products to maximize profit.  &lt;br /&gt;
... &lt;br /&gt;
&lt;em&gt;feasible region&lt;/em&gt;: a convex polygon.  &lt;br /&gt;
&lt;img alt="" src="algoII_week6_2_LP/pasted_image002.png" /&gt;   &lt;/p&gt;
&lt;p&gt;⇒ optimum solution appears at an extreme point.    &lt;/p&gt;
&lt;p&gt;standard form of LP   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n non-neg variables (j=1..n)   &lt;/li&gt;
&lt;li&gt;m linear euqations (i=1..m)   &lt;/li&gt;
&lt;li&gt;input: a_ij, c_j, b_i   &lt;/li&gt;
&lt;li&gt;output: x_j   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_2_LP/pasted_image003.png" /&gt; &lt;br /&gt;
to convert &lt;em&gt;inequality&lt;/em&gt; to &lt;em&gt;equality (as in the standard form above)&lt;/em&gt;: add slack var!  &lt;br /&gt;
&lt;img alt="" src="algoII_week6_2_LP/pasted_image004.png" /&gt;   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def. convex set &lt;br /&gt;
for any a and b in set ⇒ 1/2(a+b) is also in set.    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;extreme point:    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def. &lt;strong&gt;extreme point&lt;/strong&gt; &lt;br /&gt;
is a point in set that cannot be written as 1/2(a+b) with a b distinct.    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;extreme point property:  &lt;br /&gt;
if there exists an potimal solution, then there exists one that is an extreme point.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nb of extreme point is finite   &lt;/li&gt;
&lt;li&gt;but this nb can be exponential   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;greedy property:  &lt;br /&gt;
&lt;em&gt;extreme point is optimal iff no better adj extreme points.&lt;/em&gt;  &lt;br /&gt;
&lt;img alt="" src="algoII_week6_2_LP/pasted_image005.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;2. Simplex Algorithm&lt;/h1&gt;
&lt;p&gt;algo. simplex   &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;start at some point   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pivot&lt;/strong&gt; from one extreme point to an adj one (never decrease the obj fcn)   &lt;/li&gt;
&lt;li&gt;repeat until optimal   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;We're using the "basis" and "pivoting" to solve LP. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def. &lt;strong&gt;basis&lt;/strong&gt; (基变量) is a subset (size=m) of the n variables.    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;vars in basis are always non-zero...   &lt;/p&gt;
&lt;p&gt;basic feasible solution:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set n-m non-basis vars to 0   &lt;/li&gt;
&lt;li&gt;solve for remaining m vars (with m constraints)   &lt;/li&gt;
&lt;li&gt;if unique and feasible (matrix invertable)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;algo:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initial basic-feasible-solution: start slack vars as basis.    &lt;/li&gt;
&lt;li&gt;choose a non-basic var as &lt;strong&gt;pivot&lt;/strong&gt;, add it into basis, take some basis var out   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. pick B as pivot var using constraint 2 (2nd equation): &lt;br /&gt;
&lt;img alt="" src="algoII_week6_2_LP/pasted_image006.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;why picking var B? → its obj coeff is positive   &lt;/li&gt;
&lt;li&gt;why pivot on 2nd constraint (5A+15B+Sc=480)? →    &lt;ul&gt;
&lt;li&gt;RHS &amp;gt; 0 (preserves feasibility)   &lt;/li&gt;
&lt;li&gt;minimum ratio rule: min(480/15, 160/4, 1190/20)   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;stop when no obj-coeff is positive   &lt;/p&gt;
&lt;h1&gt;3. Simplex Implementations&lt;/h1&gt;
&lt;p&gt;encode standard LP formulation into java 2d array:  &lt;br /&gt;
&lt;img alt="" src="algoII_week6_2_LP/pasted_image007.png" /&gt;   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Simplex{   
    private double[][] a;   
    private int m,n;   
    public Simplex(double[][] A, double[] b, double[] c){   
        m = b.length;   
        n = c.length;   
        a = new double[m+1][n+m+1];   
        for(int i=0; i&amp;lt;m; i++)   
            for(int j=0; j&amp;lt;n; j++)   
                a[i][j] = A[i][j];   
    for(int j=n; j&amp;lt;m+n; j++) a[j-n][j] = 1;      
    for(int j=0; j&amp;lt;m; j++) a[j][n+m] = b[j];    
    for(int j=0; j&amp;lt;n; j++) a[m][j] = c[j];    
    }   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;simplex algo: just transform initial 2d array into final solution.    &lt;/p&gt;
&lt;h3&gt;choosing pivot variable (find entering column)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Bland's rule.&lt;/strong&gt; find the first column whose obj-coeff is positive.    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private int bland(){   
    for(int q=0; q&amp;lt;m+n; q++)   
        if(a[m][q]&amp;gt;0) return q;   
    return -1;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;choosing pivot constraint (find entering row)&lt;/h3&gt;
&lt;p&gt;minimum ratio rule (if a tie, choose first row).    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private int minRatioRule(int q){   
    int p = -1;   
    for(int i=0; i&amp;lt;m; i++){   
        if (a[i][q]&amp;lt;=0) continue;   
        else if (p==-1) p=i;   
        else if (a[i][m+n]/a[i][q] &amp;lt; a[p][m+n]/a[p][q])    
            p=i;   
    }   
    return p;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;do the pivot (column q, row p)&lt;/h3&gt;
&lt;p&gt;like Guassian elimination:    &lt;/p&gt;
&lt;p&gt;make var q disappear on each row (except for row p); &lt;br /&gt;
on row p: make var q's coeff become 1.   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public void pivot(int p, int q){   
    for(int i=0; i&amp;lt;m; i++)   
        for(int j=0; j&amp;lt;m+n; j++)   
            if (i!=p &amp;amp;&amp;amp; j!=q)   
                a[i][j] -= a[p][j]*a[i][q]/a[p][q];   
    for(int i=0; i&amp;lt;m; i++)    
        if(i!=p) a[i][q] = 0;   
        for(int j=0; j&amp;lt;m+n; j++)   
        if(j!=q) a[p][j] /= a[p][q];   
    a[p][q] = 1;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;so the simplex algo is:    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public void solve(){   
    while(true){   
        int q = bland();    
        if(q==-1) break; // optimal if -1   
        int p = minRatioRule(q);   
        if(p==-1) break; // unbounded if -1   
        pivot(p,q);   
    }   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;final solution is just in the array: &lt;br /&gt;
&lt;img alt="" src="algoII_week6_2_LP/pasted_image008.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;remarkable property&lt;/strong&gt; &lt;br /&gt;
&lt;em&gt;in typical applications&lt;/em&gt;, simplex terminates after at most 2(m+n) pivots. — whereas nb of extreme points is exp in n !! &lt;br /&gt;
ie. LINEAR time in practice!!   &lt;/p&gt;
&lt;p&gt;other pivot rules:  &lt;br /&gt;
&lt;img alt="" src="algoII_week6_2_LP/pasted_image009.png" /&gt;   &lt;/p&gt;
&lt;h3&gt;degeneracy&lt;/h3&gt;
&lt;p&gt;when choosing new basis, still stay in the same extreme point...  &lt;br /&gt;
&lt;img alt="" src="algoII_week6_2_LP/pasted_image010.png" /&gt; &lt;br /&gt;
→ might cause cycling &lt;br /&gt;
→ bland's rule guarantees finite number of pivots   &lt;/p&gt;
&lt;p&gt;further improvement:  &lt;br /&gt;
&lt;img alt="" src="algoII_week6_2_LP/pasted_image012.png" /&gt;   &lt;/p&gt;
&lt;p&gt;Best practice. &lt;em&gt;Don't implement it yourself......&lt;/em&gt;   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_2_LP/pasted_image013.png" /&gt; &lt;br /&gt;
(AMPL是个好东西...)   &lt;/p&gt;
&lt;p&gt;算法的力量:  &lt;br /&gt;
&lt;img alt="" src="algoII_week6_2_LP/pasted_image014.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_2_LP/pasted_image015.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;4. Linear Programming Reductions&lt;/h1&gt;
&lt;h3&gt;reduction to std form (equalities)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Minimization problem: max -1*obj   &lt;/li&gt;
&lt;li&gt;ineq constraints: add slack var   &lt;/li&gt;
&lt;li&gt;unbounded var X: replace with X=X0-X1, X0&amp;gt;=0, X1&amp;gt;=0   &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;modeling of LP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;identify variables   &lt;/li&gt;
&lt;li&gt;define constraints   &lt;/li&gt;
&lt;li&gt;define objective fcn   &lt;/li&gt;
&lt;li&gt;convert to std form   &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;maxflow by LP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;variables: x_uv = flow on edge uv   &lt;/li&gt;
&lt;li&gt;constraints: capacity, flow conservation   &lt;/li&gt;
&lt;li&gt;obj: net flow to t   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_2_LP/pasted_image016.png" /&gt;   &lt;/p&gt;
&lt;p&gt;can use LP to solve mincost maxflow easily...   &lt;/p&gt;
&lt;h3&gt;max cardinality bipartite matching by LP&lt;/h3&gt;
&lt;p&gt;input: bipartite graph &lt;br /&gt;
goal: max cardinatlity matching (set of vertex-disjoint edges) &lt;br /&gt;
&lt;img alt="" src="algoII_week6_2_LP/pasted_image017.png" /&gt; &lt;br /&gt;
can be reduced to maxflow (见algolab...)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;var: x_ij = indicator of person i assigned to job j (0&amp;lt;=x_ij&amp;lt;=1)   &lt;/li&gt;
&lt;li&gt;constraints: vertex-disjoint   &lt;/li&gt;
&lt;li&gt;obj: sum of all x_ij   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_2_LP/pasted_image018.png" /&gt;   &lt;/p&gt;
&lt;p&gt;non-trival: cause this is an INTEGER LP...    &lt;/p&gt;
&lt;p&gt;Th (Von Neumann) (and Poincare?..)  &lt;br /&gt;
if all RHS=1 ⇒ &lt;em&gt;all extreme points of the polyhedron have integer coord&lt;/em&gt;.   &lt;/p&gt;
&lt;h3&gt;and many others...&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_2_LP/pasted_image019.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;the profound question: Is there a universal problem-solving model ?&lt;/strong&gt; &lt;br /&gt;
→ P/NP...   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"For the time being, the closest thing that we have to universal problem-solving model is LP "&lt;/strong&gt;   &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="algorithm"></category></entry><entry><title>[python进阶课程] 面向对象编程</title><link href="http://x-wei.github.io/imooc_py_oop.html" rel="alternate"></link><published>2016-02-19T14:00:00+01:00</published><author><name>mx</name></author><id>http://x-wei.github.io/imooc_py_oop.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.imooc.com/learn/317"&gt;http://www.imooc.com/learn/317&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;模块和包&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;包&lt;/strong&gt;: 文件夹 (可以有多级), 且包含&lt;code&gt;__init__.py&lt;/code&gt;文件(每层都要有) 
&lt;strong&gt;模块&lt;/strong&gt;: py文件&lt;/p&gt;
&lt;p&gt;代码分开放在多个py文件(&lt;strong&gt;模块&lt;/strong&gt;名=文件名). 同名变量互不影响. &lt;/p&gt;
&lt;p&gt;模块名冲突: 把同名模块放在不同&lt;strong&gt;包&lt;/strong&gt;中. &lt;/p&gt;
&lt;h3&gt;导入模块&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;引用时: 使用完整的路径(包+模块名). ex. &lt;code&gt;p1.util.f()&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;动态导入模块&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cStringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述代码先尝试从cStringIO导入，如果失败了（比如cStringIO没有被安装），再尝试从StringIO导入。这样，如果cStringIO模块存在，则我们将获得更快的运行速度，如果cStringIO不存在，则顶多代码运行速度会变慢，但不会影响代码的正常执行。&lt;/p&gt;
&lt;h3&gt;使用__future__&lt;/h3&gt;
&lt;p&gt;Python的新版本会引入新的功能，但是，实际上这些功能在上一个老版本中就已经存在了。要“试用”某一新的特性，就可以通过导入__future__模块的某些功能来实现。&lt;/p&gt;
&lt;p&gt;ex. 在Python 2.7中引入3.x的除法规则，导入__future__的division：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;division&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mf"&gt;3.3333333333333335&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;安装第三方模块&lt;/h2&gt;
&lt;p&gt;模块管理工具: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;easy_install&lt;/li&gt;
&lt;li&gt;pip (推荐) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查找第三方模块: &lt;a href="https://pypi.python.org/pypi"&gt;https://pypi.python.org/pypi&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;面向对象编程基础&lt;/h1&gt;
&lt;p&gt;OOP: 数据的封装  &lt;/p&gt;
&lt;h3&gt;初始化实例属性&lt;/h3&gt;
&lt;p&gt;当创建实例时，&lt;code&gt;__init__()&lt;/code&gt;方法被自动调用, 第一个参数必须是 self（也可以用别的名字，但建议使用习惯用法, 第一个参数self被Python解释器作为实例的引用），后续参数则可以自由指定，和定义函数没有任何区别。&lt;br /&gt;
相应地，创建实例时，就必须要提供除 self 以外的参数.   &lt;/p&gt;
&lt;p&gt;用&lt;code&gt;setattr&lt;/code&gt;让&lt;code&gt;__init__&lt;/code&gt;接受任意的kw参数:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;setattr(object, name, value)&lt;/code&gt;&lt;br /&gt;
This is the counterpart of getattr(). The arguments are an object, a string and an arbitrary value. The string may name an existing attribute or a new attribute. The function assigns the value to the attribute, provided the object allows it. For example, setattr(x, 'foobar', 123) is equivalent to x.foobar = 123.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;gender&lt;/span&gt;, &lt;span class="n"&gt;birth&lt;/span&gt;, **&lt;span class="n"&gt;kw&lt;/span&gt;):  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;gender&lt;/span&gt; = &lt;span class="n"&gt;gender&lt;/span&gt;  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;birth&lt;/span&gt; = &lt;span class="n"&gt;birth&lt;/span&gt;  
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;, &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kw&lt;/span&gt;.&lt;span class="n"&gt;iteritems&lt;/span&gt;():  
            &lt;span class="n"&gt;setattr&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;k&lt;/span&gt;, &lt;span class="n"&gt;v&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;访问限制&lt;/h3&gt;
&lt;p&gt;Python对属性权限的控制是通过&lt;strong&gt;属性名&lt;/strong&gt;来实现的.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个属性由双下划线开头(&lt;code&gt;__&lt;/code&gt;)，该属性就无法被外部访问。  &lt;/li&gt;
&lt;li&gt;但是，如果一个属性以"&lt;code&gt;__xxx__&lt;/code&gt;"的形式定义，那它又可以被外部访问了，以"&lt;code&gt;__xxx__&lt;/code&gt;"定义的属性在Python的类中被称为特殊属性有很多预定义的特殊属性可以使用，通常我们不要把普通属性用"&lt;strong&gt;xxx&lt;/strong&gt;"定义。  &lt;/li&gt;
&lt;li&gt;以单下划线开头的属性"&lt;code&gt;_xxx&lt;/code&gt;"虽然也可以被外部访问，但是，按照习惯，他们不应该被外部访问。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;创建类属性&lt;/h3&gt;
&lt;p&gt;绑定在一个实例上的属性不会影响其他实例，但是，类本身也是一个对象，如果在类上绑定一个属性，则所有实例都可以访问类的属性，并且，所有实例访问的类属性都是同一个！也就是说，实例属性每个实例各自拥有，互相独立，而&lt;em&gt;类属性有且只有一份&lt;/em&gt;。&lt;br /&gt;
定义类属性可以直接在 class 中定义：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
    &lt;span class="n"&gt;address&lt;/span&gt; = &lt;span class="s"&gt;&amp;#39;Earth&amp;#39;&lt;/span&gt;  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;):  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为类属性是直接绑定在类上的，所以，访问类属性不需要创建实例，就可以直接访问.  对一个实例调用类的属性也是可以访问的，所有实例都可以访问到它所属的类的属性.  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print Person.address  
print p1.address
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;类属性和实例属性名字冲突怎么办&lt;/strong&gt;&lt;br /&gt;
当实例属性和类属性重名时，实例属性优先级高，它将屏蔽掉对类属性的访问。&lt;br /&gt;
可见，千万&lt;em&gt;不要在实例上修改类属性&lt;/em&gt;，它实际上并没有修改类属性，而是给实例绑定了一个实例属性。  &lt;/p&gt;
&lt;h3&gt;定义实例方法&lt;/h3&gt;
&lt;p&gt;实例的方法就是在类中定义的函数，它的&lt;strong&gt;第一个参数永远是&lt;/strong&gt; &lt;code&gt;self&lt;/code&gt;，指向调用该方法的实例本身，其他参数和一个普通函数是完全一样的. 在实例方法内部，可以访问所有实例属性，这样，如果外部需要访问私有属性，可以通过方法调用获得，这种数据封装的形式除了能保护内部数据一致性外，还可以简化外部调用的难度。  &lt;/p&gt;
&lt;p&gt;我们在 class 中定义的实例方法其实也是属性，它实际上是一个函数对象. 因为方法也是一个属性，所以，它也可以动态地添加到实例上，只是需要用 types.MethodType() 把一个函数变为一个方法...  &lt;/p&gt;
&lt;h3&gt;定义类方法&lt;/h3&gt;
&lt;p&gt;和属性类似，方法也分实例方法和类方法。&lt;br /&gt;
在class中定义的全部是实例方法，实例方法第一个参数 self 是实例本身。&lt;br /&gt;
要在class中定义类方法，需要这么写：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
    &lt;span class="nb"&gt;count&lt;/span&gt; = &lt;span class="mi"&gt;0&lt;/span&gt;  
    &lt;span class="nv"&gt;@classmethod&lt;/span&gt;  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;how_many&lt;/span&gt;(&lt;span class="n"&gt;cls&lt;/span&gt;):  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;.&lt;span class="nb"&gt;count&lt;/span&gt;  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;):  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;  
        &lt;span class="n"&gt;Person&lt;/span&gt;.&lt;span class="nb"&gt;count&lt;/span&gt; = &lt;span class="n"&gt;Person&lt;/span&gt;.&lt;span class="nb"&gt;count&lt;/span&gt; + &lt;span class="mi"&gt;1&lt;/span&gt;  
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;.&lt;span class="n"&gt;how_many&lt;/span&gt;()  
&lt;span class="n"&gt;p1&lt;/span&gt; = &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;)  
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;.&lt;span class="n"&gt;how_many&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过标记一个 &lt;code&gt;@classmethod&lt;/code&gt;，该方法将绑定到 Person 类上，而非类的实例。类方法的第一个参数将传入类本身，通常将参数名命名为 &lt;code&gt;cls&lt;/code&gt;，上面的 cls.count 实际上相当于 Person.count。  &lt;/p&gt;
&lt;h1&gt;类的继承&lt;/h1&gt;
&lt;p&gt;代码复用&lt;br /&gt;
&lt;img alt="" src="imooc_py_oop/pasted_image.png" /&gt;&lt;br /&gt;
python的继承:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总是从某个类继承(最上层是&lt;code&gt;object&lt;/code&gt;)  &lt;/li&gt;
&lt;li&gt;不要忘记&lt;code&gt;super.__init__&lt;/code&gt;调用  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;super(SubCls, self)将返回当前类继承的父类, 注意self参数已在super()中传入，在__init__()中将隐式传递，不需要写出（也不能写）。&lt;br /&gt;
        def &lt;strong&gt;init&lt;/strong&gt;(self, args):&lt;br /&gt;
            super(SubCls, self).&lt;strong&gt;init&lt;/strong&gt;(args)&lt;br /&gt;
            pass  &lt;/p&gt;
&lt;h3&gt;判断类型&lt;/h3&gt;
&lt;p&gt;函数&lt;code&gt;isinstance()&lt;/code&gt;可以判断一个变量的类型，既可以用在Python内置的数据类型如str、list、dict，也可以用在我们自定义的类，它们本质上都是数据类型。  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(p, Person)  
True    # p是Person类型  
&amp;gt;&amp;gt;&amp;gt; isinstance(p, Student)  
False   # p不是Student类型  
&amp;gt;&amp;gt;&amp;gt; isinstance(p, Teacher)  
False   # p不是Teacher类型  
&amp;gt;&amp;gt;&amp;gt; isinstance(s, Person)  
True    # s是Person类型
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在一条继承链上，一个实例可以看成它本身的类型，也可以看成它父类的类型。  &lt;/p&gt;
&lt;h3&gt;多态&lt;/h3&gt;
&lt;p&gt;调用 s.whoAmI()总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止。  &lt;/p&gt;
&lt;p&gt;由于Python是动态语言，所以，传递给函数 who_am_i(x)的参数 x 不一定是 Person 或 Person 的子类型。任何数据类型的实例都可以，只要它有一个whoAmI()的方法即可：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;whoAmI&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;I am a book&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是动态语言和静态语言（例如Java）最大的差别之一。动态语言调用实例方法，不检查类型，&lt;strong&gt;只要方法存在，参数正确，就可以调用&lt;/strong&gt;。  &lt;/p&gt;
&lt;h3&gt;多重继承&lt;/h3&gt;
&lt;p&gt;除了从一个父类继承外，Python允许&lt;em&gt;从多个父类继承&lt;/em&gt;，称为多重继承。  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;a&lt;/span&gt;):  
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;init A...&amp;#39;&lt;/span&gt;  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;a&lt;/span&gt; = &lt;span class="n"&gt;a&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;(&lt;span class="n"&gt;A&lt;/span&gt;):  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;a&lt;/span&gt;):  
        &lt;span class="n"&gt;super&lt;/span&gt;(&lt;span class="n"&gt;B&lt;/span&gt;, &lt;span class="k"&gt;self&lt;/span&gt;).&lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="n"&gt;a&lt;/span&gt;)  
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;init B...&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;(&lt;span class="n"&gt;A&lt;/span&gt;):  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;a&lt;/span&gt;):  
        &lt;span class="n"&gt;super&lt;/span&gt;(&lt;span class="n"&gt;C&lt;/span&gt;, &lt;span class="k"&gt;self&lt;/span&gt;).&lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="n"&gt;a&lt;/span&gt;)  
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;init C...&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;(&lt;span class="n"&gt;B&lt;/span&gt;, &lt;span class="n"&gt;C&lt;/span&gt;):  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;a&lt;/span&gt;):  
        &lt;span class="n"&gt;super&lt;/span&gt;(&lt;span class="n"&gt;D&lt;/span&gt;, &lt;span class="k"&gt;self&lt;/span&gt;).&lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="n"&gt;a&lt;/span&gt;)  
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;init D...&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="imooc_py_oop/pasted_image001.png" /&gt;&lt;br /&gt;
D 同时继承自 B 和 C，也就是 D 拥有了 A、B、C 的全部功能。多重继承通过 super()调用__init__()方法时，A 虽然被继承了两次，但&lt;code&gt;__init__()&lt;/code&gt;只调用一次：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; d = D(&amp;#39;d&amp;#39;)  
init A...  
init C...  
init B...  
init D...
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;获取对象信息&lt;/h3&gt;
&lt;p&gt;首先可以用 &lt;code&gt;type()&lt;/code&gt; 函数获取变量的类型，它返回一个 Type 对象：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; type(123)  
&amp;lt;type &amp;#39;int&amp;#39;&amp;gt;  
&amp;gt;&amp;gt;&amp;gt; s = Student(&amp;#39;Bob&amp;#39;, &amp;#39;Male&amp;#39;, 88)  
&amp;gt;&amp;gt;&amp;gt; type(s)  
&amp;lt;class &amp;#39;__main__.Student&amp;#39;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其次，可以用 &lt;code&gt;dir()&lt;/code&gt; 函数获取变量的所有属性：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; dir(123)   # 整数也有很多属性...  
[&amp;#39;__abs__&amp;#39;, &amp;#39;__add__&amp;#39;, &amp;#39;__and__&amp;#39;, &amp;#39;__class__&amp;#39;, &amp;#39;__cmp__&amp;#39;, ...]

&amp;gt;&amp;gt;&amp;gt; dir(s)  
[&amp;#39;__class__&amp;#39;, &amp;#39;__delattr__&amp;#39;, &amp;#39;__dict__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__format__&amp;#39;, &amp;#39;__getattribute__&amp;#39;, &amp;#39;__hash__&amp;#39;, &amp;#39;__init__&amp;#39;, &amp;#39;__module__&amp;#39;, &amp;#39;__new__&amp;#39;, &amp;#39;__reduce__&amp;#39;, &amp;#39;__reduce_ex__&amp;#39;, &amp;#39;__repr__&amp;#39;, &amp;#39;__setattr__&amp;#39;, &amp;#39;__sizeof__&amp;#39;, &amp;#39;__str__&amp;#39;, &amp;#39;__subclasshook__&amp;#39;, &amp;#39;__weakref__&amp;#39;, &amp;#39;gender&amp;#39;, &amp;#39;name&amp;#39;, &amp;#39;score&amp;#39;, &amp;#39;whoAmI&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;dir()&lt;/code&gt;返回的属性是字符串列表，如果已知一个属性名称，要获取或者设置对象的属性，就需要用 &lt;code&gt;getattr()&lt;/code&gt; 和 &lt;code&gt;setattr()&lt;/code&gt;函数了：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; getattr(s, &amp;#39;name&amp;#39;)  # 获取name属性  
&amp;#39;Bob&amp;#39;  
&amp;gt;&amp;gt;&amp;gt; setattr(s, &amp;#39;name&amp;#39;, &amp;#39;Adam&amp;#39;)  # 设置新的name属性  
&amp;gt;&amp;gt;&amp;gt; s.name  
&amp;#39;Adam&amp;#39;  
&amp;gt;&amp;gt;&amp;gt; getattr(s, &amp;#39;age&amp;#39;)  # 获取age属性，但是属性不存在，报错：  
Traceback (most recent call last):  
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;  
AttributeError: &amp;#39;Student&amp;#39; object has no attribute &amp;#39;age&amp;#39;  
&amp;gt;&amp;gt;&amp;gt; getattr(s, &amp;#39;age&amp;#39;, 20)  # 获取age属性，如果属性不存在，就返回默认值20：  
20

class Person(object):  
    def __init__(self, name, gender, **kw):  
        for k,v in kw.iteritems():  
            setattr(self, k, v)

p = Person(&amp;#39;Bob&amp;#39;, &amp;#39;Male&amp;#39;, age=18, course=&amp;#39;Python&amp;#39;)  
print p.age  
print p.course
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;定制类&lt;/h1&gt;
&lt;h3&gt;特殊方法&lt;/h3&gt;
&lt;p&gt;又叫 "魔术方法"  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义在class中  &lt;/li&gt;
&lt;li&gt;不需要直接调用: py的函数或操作符会自动调用  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. 任何数据类型的实例都有&lt;code&gt;__str__()&lt;/code&gt;特殊方法.   &lt;/p&gt;
&lt;p&gt;pothon的特殊方法:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__str__&lt;/code&gt;: 用于print  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__len__&lt;/code&gt;: 用于len  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__cmp__&lt;/code&gt;: 用于比较&lt;code&gt;cmp&lt;/code&gt;/排序&lt;code&gt;sorted&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;str&lt;/strong&gt; 和 &lt;strong&gt;repr&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;实现特殊方法&lt;code&gt;__str__()&lt;/code&gt;可以在print的时候打印合适的字符串, 如果直接在命令行敲变量名则不会:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; p = Person(&amp;#39;Bob&amp;#39;, &amp;#39;male&amp;#39;)  
&amp;gt;&amp;gt;&amp;gt; print p  
(Person: Bob, male)  
&amp;gt;&amp;gt;&amp;gt; p  
&amp;lt;main.Person object at 0x10c941890&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为 Python 定义了&lt;code&gt;__str__()&lt;/code&gt;和&lt;code&gt;__repr__()&lt;/code&gt;两种方法，&lt;code&gt;__str__()&lt;/code&gt;用于显示给用户，而&lt;code&gt;__repr__()&lt;/code&gt;用于显示给开发人员。&lt;br /&gt;
偷懒定义&lt;code&gt;__repr__&lt;/code&gt;: &lt;code&gt;__repr__ = __str__&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;cmp&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;__cmp__&lt;/code&gt;用实例自身self和传入的实例 s 进行比较，如果 self 应该排在前面，就返回 -1，如果 s 应该排在前面，就返回1，如果两者相当，返回 0。  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;score&lt;/span&gt;):  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;score&lt;/span&gt; = &lt;span class="n"&gt;score&lt;/span&gt;  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__str__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(%s: %s)&amp;#39;&lt;/span&gt; % (&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt;.&lt;span class="n"&gt;lower&lt;/span&gt;(), &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;score&lt;/span&gt;)  
    &lt;span class="n"&gt;__repr__&lt;/span&gt; = &lt;span class="n"&gt;__str__&lt;/span&gt;  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__cmp__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="o"&gt;s&lt;/span&gt;):  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="o"&gt;!=s&lt;/span&gt;.&lt;span class="n"&gt;score:&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; - (&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;score&lt;/span&gt; - &lt;span class="o"&gt;s&lt;/span&gt;.&lt;span class="n"&gt;score&lt;/span&gt;)  
        &lt;span class="n"&gt;else:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;cmp&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="o"&gt;s&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;strong&gt;len&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;如果一个类表现得像一个list，要获取有多少个元素，就得用 len() 函数。&lt;br /&gt;
要让 len() 函数工作正常，类必须提供一个特殊方法&lt;code&gt;__len__()&lt;/code&gt;，它返回元素的个数。  &lt;/p&gt;
&lt;h3&gt;数学运算&lt;/h3&gt;
&lt;p&gt;如果要让Rational类(有理数)进行&lt;code&gt;+&lt;/code&gt;运算，需要正确实现&lt;code&gt;__add__&lt;/code&gt;：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Rational&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;p&lt;/span&gt;, &lt;span class="s"&gt;q):  &lt;/span&gt;
&lt;span class="s"&gt;        self.p = p  &lt;/span&gt;
&lt;span class="s"&gt;        self.q = q&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;p、q 都是整数，表示有理数 p/q。  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Rational&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;p&lt;/span&gt;, &lt;span class="s"&gt;q):  &lt;/span&gt;
&lt;span class="s"&gt;        self.p = p  &lt;/span&gt;
&lt;span class="s"&gt;        self.q = q  &lt;/span&gt;
&lt;span class="s"&gt;    def __add__(self, r)&lt;/span&gt;:  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Rational&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;p&lt;/span&gt; * &lt;span class="n"&gt;r&lt;/span&gt;.&lt;span class="s"&gt;q + self.q * r.p, self.q * r.q)  &lt;/span&gt;
&lt;span class="s"&gt;    def __sub__(self, r):  &lt;/span&gt;
&lt;span class="s"&gt;        return Rational(self.p * r.q - self.q * r.p, self.q * r.q)  &lt;/span&gt;
&lt;span class="s"&gt;    def __mul__(self, r):  &lt;/span&gt;
&lt;span class="s"&gt;        return Rational(self.p * r.p, self.q * r.q)  &lt;/span&gt;
&lt;span class="s"&gt;    def __div__(self, r):  &lt;/span&gt;
&lt;span class="s"&gt;        return Rational(self.p * r.q, self.q * r.p)  &lt;/span&gt;
&lt;span class="s"&gt;    def __str__(self):  &lt;/span&gt;
&lt;span class="s"&gt;        d = 1  &lt;/span&gt;
&lt;span class="s"&gt;        for i in xrange(2,min(self.p, self.q)+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;):  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="nv"&gt;%i&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;and&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="s"&gt;q%i==0:  &lt;/span&gt;
&lt;span class="s"&gt;                d = i  &lt;/span&gt;
&lt;span class="s"&gt;        return &amp;#39;%&lt;/span&gt;&lt;span class="sr"&gt;s/%s&amp;#39; % (self.p/d, self.q/&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;)  
    &lt;span class="n"&gt;__repr__&lt;/span&gt; = &lt;span class="n"&gt;__str__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;类型转换&lt;/h3&gt;
&lt;p&gt;要让&lt;code&gt;int()&lt;/code&gt;函数对于Rational类正常工作，只需要实现特殊方法&lt;code&gt;__int__()&lt;/code&gt;:&lt;br /&gt;
同理，要让&lt;code&gt;float()&lt;/code&gt;函数正常工作，只需要实现特殊方法&lt;code&gt;__float__()&lt;/code&gt;。  &lt;/p&gt;
&lt;h3&gt;@property&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;score&lt;/span&gt;):  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__score&lt;/span&gt; = &lt;span class="n"&gt;score&lt;/span&gt;  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get_score&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__score&lt;/span&gt;  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;set_score&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;score&lt;/span&gt;):  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &amp;lt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;or&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &amp;gt; &lt;span class="mi"&gt;100&lt;/span&gt;:  
            &lt;span class="n"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ValueError&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;invalid score&amp;#39;&lt;/span&gt;)  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__score&lt;/span&gt; = &lt;span class="n"&gt;score&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;get/set&lt;/code&gt; 方法来封装对一个属性封装. 但是写 s.get_score() 和 s.set_score() 没有直接写 s.score 来得直接。  &lt;/p&gt;
&lt;p&gt;可以用装饰器函数把 get/set 方法“装饰”成属性调用：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;score&lt;/span&gt;):  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__score&lt;/span&gt; = &lt;span class="n"&gt;score&lt;/span&gt;  
    &lt;span class="nv"&gt;@property&lt;/span&gt;  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__score&lt;/span&gt;  
    &lt;span class="nv"&gt;@score&lt;/span&gt;.&lt;span class="n"&gt;setter&lt;/span&gt;  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;score&lt;/span&gt;):  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &amp;lt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;or&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &amp;gt; &lt;span class="mi"&gt;100&lt;/span&gt;:  
            &lt;span class="n"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ValueError&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;invalid score&amp;#39;&lt;/span&gt;)  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__score&lt;/span&gt; = &lt;span class="n"&gt;score&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一个score(self)是get方法，用&lt;code&gt;@property&lt;/code&gt;装饰，第二个score(self, score)是set方法，用&lt;code&gt;@score.setter&lt;/code&gt;装饰，&lt;code&gt;@score.setter&lt;/code&gt;是前一个&lt;code&gt;@property&lt;/code&gt;装饰后的副产品。对 score 赋值实际调用的是 set方法。  &lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;slots&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;由于Python是动态语言，任何实例在运行期都可以动态地添加属性。  &lt;/p&gt;
&lt;p&gt;如果要限制添加的属性，例如，Student类只允许添加 name、gender和score 这3个属性，就可以利用Python的一个特殊的&lt;code&gt;__slots__&lt;/code&gt;来实现。&lt;br /&gt;
顾名思义，&lt;code&gt;__slots__&lt;/code&gt;是指一个类允许的属性列表 (所以是类属性)：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
    &lt;span class="n"&gt;__slots__&lt;/span&gt; = (&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;gender&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;score&amp;#39;&lt;/span&gt;)  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;gender&lt;/span&gt;, &lt;span class="n"&gt;score&lt;/span&gt;):  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;gender&lt;/span&gt; = &lt;span class="n"&gt;gender&lt;/span&gt;  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;score&lt;/span&gt; = &lt;span class="n"&gt;score&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;s&lt;/span&gt; = &lt;span class="n"&gt;Student&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;male&amp;#39;&lt;/span&gt;, &lt;span class="mi"&gt;59&lt;/span&gt;)  
&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;s&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="s"&gt;&amp;#39;Tim&amp;#39;&lt;/span&gt; &lt;span class="c c-Singleline"&gt;# OK  &lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;s&lt;/span&gt;.&lt;span class="n"&gt;score&lt;/span&gt; = &lt;span class="mi"&gt;99&lt;/span&gt; &lt;span class="c c-Singleline"&gt;# OK  &lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;s&lt;/span&gt;.&lt;span class="n"&gt;grade&lt;/span&gt; = &lt;span class="s"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;Traceback&lt;/span&gt; (&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="k"&gt;last&lt;/span&gt;):  
  ...  
&lt;span class="n"&gt;AttributeError:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Student&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="k"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;grade&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;__slots__&lt;/code&gt;的目的是限制当前类所能拥有的属性，如果不需要添加任意动态的属性，使用&lt;code&gt;__slots__&lt;/code&gt;也能节省内存。  &lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;call&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在Python中，函数其实是一个对象：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; f = abs  
&amp;gt;&amp;gt;&amp;gt; f.__name__  
&amp;#39;abs&amp;#39;  
&amp;gt;&amp;gt;&amp;gt; f(-123)  
123
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由于 f 可以被调用，所以，f 被称为可调用对象。&lt;br /&gt;
所有的函数都是可调用对象。&lt;br /&gt;
一个类实例也可以变成一个可调用对象，只需要实现一个特殊方法&lt;code&gt;__call__()&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;把 Person 类变成一个可调用对象：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;gender&lt;/span&gt;):  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;gender&lt;/span&gt; = &lt;span class="n"&gt;gender&lt;/span&gt;  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;friend&lt;/span&gt;):  
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;My name is %s...&amp;#39;&lt;/span&gt; % &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;name&lt;/span&gt;  
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;My friend is %s...&amp;#39;&lt;/span&gt; % &lt;span class="n"&gt;friend&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在可以对 Person 实例直接调用：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; p = Person(&amp;#39;Bob&amp;#39;, &amp;#39;male&amp;#39;)  
&amp;gt;&amp;gt;&amp;gt; p(&amp;#39;Tim&amp;#39;)  
My name is Bob...  
My friend is Tim...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;单看 p('Tim') 你无法确定 p 是一个函数还是一个类实例，所以，&lt;em&gt;在Python中，函数也是对象，对象和函数的区别并不显著&lt;/em&gt;。  &lt;/p&gt;</summary><category term="python"></category></entry><entry><title>[Algorithms II] Week 6-1 Reductions</title><link href="http://x-wei.github.io/algoII_week6_1_reductions.html" rel="alternate"></link><published>2016-02-19T09:00:00+01:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoII_week6_1_reductions.html</id><summary type="html">&lt;p&gt;Goal: classify problems according to computational requirements. &lt;br /&gt;
bad new: for huge number of pbs we don't know...  &lt;/p&gt;
&lt;h1&gt;1. Introduction to Reductions&lt;/h1&gt;
&lt;p&gt;shifing gears:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from individual problems to problem-solving models.   &lt;/li&gt;
&lt;li&gt;from linear/quard to polynomial/exponential pbs  &lt;/li&gt;
&lt;li&gt;from implementation details to conceptual framwork  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;suppose we could (not) solve pb X efficiently &lt;br /&gt;
⇒ what else pbs could (not) we solve efficiently ?  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def. reduction&lt;br /&gt;
Pb X &lt;strong&gt;reduces to&lt;/strong&gt; pb Y if you can use an algo that solves Y to solve X.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_1_reductions/pasted_image.png" /&gt;&lt;br /&gt;
for an instance of pb X → transform it into an instance of pb Y → translate the solution for Y to solution for X.&lt;br /&gt;
&lt;img alt="" src="algoII_week6_1_reductions/pasted_image001.png" /&gt;  &lt;/p&gt;
&lt;p&gt;ex1. finding median can reduce to sorting... cost = NlogN+1&lt;br /&gt;
ex1. element distinctness can reduce to sorting... cost = NlogN + N  &lt;/p&gt;
&lt;h1&gt;2. Designing Algorithms&lt;/h1&gt;
&lt;p&gt;algo design: by reduction to problems that we know how to solve (sorting/shortest path/flow/...)  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_1_reductions/pasted_image002.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;ex1. convex hull reduces to sorting&lt;/h3&gt;
&lt;p&gt;Gram scan algo... (discussed in algo-I course)&lt;br /&gt;
cost = NlogN + N&lt;br /&gt;
algo. Gram scan  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;pick a point with smallest y-coord  &lt;/li&gt;
&lt;li&gt;sort all points by polar angle wrt the picked point   &lt;/li&gt;
&lt;li&gt;consider points in this order, discard points that creates clockwise turn   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_1_reductions/pasted_image003.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;ex2. undirected shortest path (nonneg weights) reduces to directed shortest path&lt;/h3&gt;
&lt;p&gt;cost: ElogV + E&lt;br /&gt;
algo. replace each undir-edge by 2 dir-edge...  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_1_reductions/pasted_image004.png" /&gt;&lt;br /&gt;
&lt;img alt="" src="algoII_week6_1_reductions/pasted_image005.png" /&gt;  &lt;/p&gt;
&lt;h1&gt;3. Establishing Lower Bounds&lt;/h1&gt;
&lt;p&gt;goal: prove that a pb requires (at least) a certain nb of steps.   &lt;/p&gt;
&lt;p&gt;ex. any compare-based sorting requires NlogN compares. log(N!) = NlogN  &lt;/p&gt;
&lt;p&gt;Bad news: very hard to estibalish lower bounds.&lt;br /&gt;
Good new: can spread the lower bound NlogN by reducing to sorting (if cost of reduction is small).   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def. linear-time reduction&lt;br /&gt;
pb X linear-time reduces to pb Y if X can be solved with: &lt;br /&gt;
1. linear nb of op for reduction&lt;br /&gt;
2. constant nb of calles to Y  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ex. almost all reductions we've seen so far...   &lt;/p&gt;
&lt;h3&gt;ex. proof of lower bound for convex hull&lt;/h3&gt;
&lt;p&gt;prop. sorting linear-time reduces to convex hull &lt;br /&gt;
(注意这次是反向的! )&lt;br /&gt;
pf. &lt;br /&gt;
for an instance of sorting: x1 ... xn&lt;br /&gt;
⇒ convert to convex hull instance: &lt;em&gt;(x1, x1^2), ... , (xn, xn^2)&lt;/em&gt;&lt;br /&gt;
&lt;img alt="" src="algoII_week6_1_reductions/pasted_image006.png" /&gt;  &lt;/p&gt;
&lt;p&gt;⇒ implication: all (ccw-based) convex hull algo cannot be easier than NlgN ! (otherwise sorting would be easier..)   &lt;/p&gt;
&lt;p&gt;lesson: Establishing lower bounds through reduction is an important tool in guiding algorithm design efforts.&lt;br /&gt;
&lt;img alt="" src="algoII_week6_1_reductions/pasted_image007.png" /&gt;  &lt;/p&gt;
&lt;h1&gt;4. Classifying Problems&lt;/h1&gt;
&lt;p&gt;prove that pb X and pb Y have the same complexity:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;show X linear-time reduces to Y  &lt;/li&gt;
&lt;li&gt;show Y linear-time reduces to X  &lt;/li&gt;
&lt;li&gt;conclude that X Y have the same complexity (even if we don't know what it is)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. sorting and convex hull... &lt;br /&gt;
一个囧囧的脑洞: &lt;br /&gt;
&lt;img alt="" src="algoII_week6_1_reductions/pasted_image008.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;ex. integer arithmetic reductions: integer multiplication&lt;/h3&gt;
&lt;p&gt;integer multiplication: of two N-bit integers. &lt;br /&gt;
Its complexity (unknown) is denoted as M(N)&lt;br /&gt;
brute force: N^2 ops  → so M(N) = Omega(N2)&lt;br /&gt;
many other integer ops can reduce to integer multiplication: &lt;br /&gt;
&lt;img alt="" src="algoII_week6_1_reductions/pasted_image009.png" /&gt;&lt;br /&gt;
what is M(N)?&lt;br /&gt;
&lt;img alt="" src="algoII_week6_1_reductions/pasted_image010.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;ex. linear-algebra reductions: matrix multiplication&lt;/h3&gt;
&lt;p&gt;compute product of 2 N*N matrices. &lt;br /&gt;
Its complexity (unknown) is denoted as MM(N)&lt;br /&gt;
brute force: N^3&lt;br /&gt;
operations that can reduce to matrix-multiplication:&lt;br /&gt;
&lt;img alt="" src="algoII_week6_1_reductions/pasted_image011.png" /&gt;&lt;br /&gt;
what is MM(N)?&lt;br /&gt;
&lt;img alt="" src="algoII_week6_1_reductions/pasted_image012.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;summary&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week6_1_reductions/pasted_image013.png" /&gt;  &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[python进阶课程] 函数式编程</title><link href="http://x-wei.github.io/imooc_py_functional.html" rel="alternate"></link><published>2016-02-17T00:00:00+01:00</published><author><name>mx</name></author><id>http://x-wei.github.io/imooc_py_functional.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.imooc.com/learn/317"&gt;http://www.imooc.com/learn/317&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;函数式编程: 更抽象, 更脱离指令(计算机), 更贴近计算(数学).   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需要变量 (python允许有变量, 所以python非纯函数式)  &lt;/li&gt;
&lt;li&gt;高阶函数  &lt;/li&gt;
&lt;li&gt;闭包: 返回函数  &lt;/li&gt;
&lt;li&gt;匿名函数  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;高阶函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;变量可以指向函数 &lt;code&gt;f=abs; f(-10)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;函数名: 就是指向函数的变量 &lt;code&gt;abs=len&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高阶函数: 接收函数作为参数的函数  &lt;/p&gt;
&lt;p&gt;def add(x,y,f): &lt;br /&gt;
    return f(x)+f(y)&lt;br /&gt;
add(-5, 9, abs)  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;map()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;map()&lt;/code&gt;是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。map()函数不改变原有的 list，而是返回一个新的 list。  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def format_name(s):  
    return s.title()  
print map(format_name, [&amp;#39;adam&amp;#39;, &amp;#39;LISA&amp;#39;, &amp;#39;barT&amp;#39;])
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;reduce()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;reduce()&lt;/code&gt;函数也是Python内置的一个高阶函数。reduce()函数接收的参数和 map()类似，一个函数 f，一个list，但行为和 map()不同，reduce()传入的函数 f 必须接收两个参数，reduce()对list的每个元素反复调用函数f，并返回最终结果值。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;reduce(function, iterable[, initializer])&lt;/code&gt;&lt;br /&gt;
Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value.  If the optional initializer is present, it is placed before the items of the iterable in the calculation, and serves as a default when the iterable is empty. If initializer is not given and iterable contains only one item, the first item is returned.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;filter()&lt;/h3&gt;
&lt;p&gt;filter()函数接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。  &lt;/p&gt;
&lt;h3&gt;自定义sorted()&lt;/h3&gt;
&lt;p&gt;sorted()也是一个高阶函数，它可以接收一个比较函数&lt;code&gt;cmp&lt;/code&gt;来实现自定义排序，比较函数的定义是，传入两个待比较的元素 x, y，如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0。  &lt;/p&gt;
&lt;h3&gt;返回函数&lt;/h3&gt;
&lt;p&gt;在函数内部定义一个函数 然后返回这个内部定义的函数. &lt;br /&gt;
&lt;em&gt;返回函数可以把一些计算延迟执行&lt;/em&gt;  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def calc_sum(lst):  
    def lazy_sum():  
        return sum(lst)  
    return lazy_sum
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;调用&lt;code&gt;calc_sum()&lt;/code&gt;并没有计算出结果，而是返回函数:  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; f = calc_sum([1, 2, 3, 4])  
&amp;gt;&amp;gt;&amp;gt; f  
&amp;lt;function lazy_sum at 0x1037bfaa0&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对返回的函数进行调用时，才计算出结果:  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; f()  
10
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;闭包&lt;/h3&gt;
&lt;p&gt;函数&lt;code&gt;f&lt;/code&gt;内部定义的函数&lt;code&gt;g&lt;/code&gt;无法被外部访问 → 可以防止其他代码调用&lt;code&gt;g&lt;/code&gt;. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def calc_sum(lst):  
    def lazy_sum():  
        return sum(lst)  
    return lazy_sum
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意: 发现没法把 &lt;code&gt;lazy_sum&lt;/code&gt; 移到 &lt;code&gt;calc_sum&lt;/code&gt; 的外部，因为它&lt;em&gt;引用了 calc_sum 的参数&lt;/em&gt; &lt;code&gt;lst&lt;/code&gt;。&lt;br /&gt;
像这种&lt;strong&gt;内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数&lt;/strong&gt;的情况，称为闭包（Closure）。  &lt;/p&gt;
&lt;p&gt;闭包的特点是返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，就要&lt;em&gt;确保引用的局部变量在函数返回后不能变&lt;/em&gt;。&lt;br /&gt;
ex:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 希望一次返回3个函数，分别计算1x1,2x2,3x3:  
def count():  
    fs = []  
    for i in range(1, 4):  
        def f():  
             return i*i  
        fs.append(f)  
    return fs  
f1, f2, f3 = count()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以为调用f1()，f2()和f3()结果应该是1，4，9，但实际结果全部都是 9 !  原因就是当count()函数返回了3个函数时，这3个函数所引用的变量 i 的值已经变成了3。&lt;em&gt;函数只在执行时才去获取外层参数i&lt;/em&gt;, 由于f1、f2、f3并没有被调用，所以，此时他们并未计算 i*i，当 f1 被调用时i已经变为3... &lt;br /&gt;
上面的正确写法是:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def count():  
    fs = []  
    for i in range(1, 4):  
        def f(j=i):   
            return j*j  
        fs.append(f)  
    return fs  
f1, f2, f3 = count()  
print f1(), f2(), f3()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;因此，返回函数不要引用任何循环变量，或者后续会发生变化的变量。&lt;/strong&gt;  &lt;/p&gt;
&lt;h3&gt;匿名函数&lt;/h3&gt;
&lt;p&gt;Python中，对匿名函数提供了有限支持。 &lt;br /&gt;
关键字&lt;code&gt;lambda&lt;/code&gt; 表示匿名函数，冒号前面的 x 表示函数参数。匿名函数有个限制，就是只能有一个表达式，不写return，返回值就是该表达式的结果。  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9])  
myabs = lambda x: -x if x &amp;lt; 0 else x   
&amp;gt;&amp;gt;&amp;gt; myabs(-1)  
1
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;装饰器&lt;/h2&gt;
&lt;p&gt;问题: 定义了函数, 想在运行时增加函数功能同时不改动函数代码.&lt;br /&gt;
ex. 希望函数调用时打印调用日志&lt;br /&gt;
&lt;img alt="" src="imooc_py_functional/pasted_image.png" /&gt;&lt;br /&gt;
⇒ 方法: 高阶函数: &lt;strong&gt;接收要修改的函数, 进行包装后返回包装过的新函数.&lt;/strong&gt;    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def new_f(f):  
    def fn(x):  
        print &amp;#39;call %s()&amp;#39; % f.__name__  
        return f(x)  
    return fn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;函数&lt;code&gt;new_fn&lt;/code&gt;就是所谓装饰器函数. python的@语法可以简化装饰器调用: &lt;br /&gt;
&lt;img alt="" src="imooc_py_functional/pasted_image001.png" /&gt;&lt;br /&gt;
(注意: 右边代码, 原本未装饰的f1函数已经被彻底隐藏了. )&lt;br /&gt;
优点: 极大简化代码.  &lt;br /&gt;
&lt;img alt="" src="imooc_py_functional/pasted_image002.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;无参数decorator&lt;/h3&gt;
&lt;p&gt;上面例子里面的&lt;code&gt;new_fn&lt;/code&gt;函数只能装饰接收一个参数x的函数, 想要处理接收任意参数的函数 ⇒ 利用Python的 &lt;code&gt;*args&lt;/code&gt; 和 &lt;code&gt;**kw&lt;/code&gt;&lt;br /&gt;
    def log(f):&lt;br /&gt;
        def fn(*args, &lt;strong&gt;kw):&lt;br /&gt;
            print 'call %s() in %s'%( f.&lt;strong&gt;name&lt;/strong&gt;, time.ctime() )&lt;br /&gt;
            return f(*args, &lt;/strong&gt;kw)&lt;br /&gt;
        return fn  &lt;/p&gt;
&lt;h3&gt;带参数decorator&lt;/h3&gt;
&lt;p&gt;接上面的log函数, 如果有的函数非常重要，希望打印出'[INFO] call xxx()...'，有的函数不太重要，希望打印出'[DEBUG] call xxx()...'，这时，log函数本身就需要传入'INFO'或'DEBUG'这样的参数，类似这样：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@log(&amp;#39;DEBUG&amp;#39;)  
def my_func():  
    pass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把上面的定义翻译成高阶函数的调用，就是：&lt;br /&gt;
&lt;code&gt;my_func = log('DEBUG')(my_func)&lt;/code&gt;&lt;br /&gt;
再展开一下：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;log_decorator = log(&amp;#39;DEBUG&amp;#39;)  
my_func = log_decorator(my_func)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;相当于:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;log_decorator = log(&amp;#39;DEBUG&amp;#39;)  
@log_decorator  
def my_func():  
    pass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以，带参数的log函数&lt;em&gt;首先&lt;strong&gt;&lt;em&gt;返回一个decorator函数&lt;/em&gt;&lt;/strong&gt;，再让这个decorator函数接收my_func并返回新函数&lt;/em&gt;：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def log(prefix):  
    def log_decorator(f):  
        def wrapper(*args, **kw):  
            print &amp;#39;[%s] %s()...&amp;#39; % (prefix, f.__name__)  
            return f(*args, **kw)  
        return wrapper  
    return log_decorator  
@log(&amp;#39;DEBUG&amp;#39;)  
def test():  
    pass  
print test()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里用到了闭包: 最里层wrapper函数(即修饰过个函数)用到了prefix参数.   &lt;/p&gt;
&lt;h3&gt;完善decorator&lt;/h3&gt;
&lt;p&gt;上面的decorator会修改函数名:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在没有decorator的情况下，打印函数名：  &lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def f1(x):  
    pass  
print f1.__name__
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ 输出： f1  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有decorator的情况下，再打印函数名：  &lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def log(f):  
    def wrapper(*args, **kw):  
        print &amp;#39;call...&amp;#39;  
        return f(*args, **kw)  
    return wrapper  
@log  
def f2(x):  
    pass  
print f2.__name__
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ 输出： wrapper  &lt;/p&gt;
&lt;p&gt;这对于那些依赖函数名的代码就会失效。decorator还改变了函数的&lt;code&gt;__doc__&lt;/code&gt;等其它属性。如果要让调用者看不出一个函数经过了@decorator的“改造”，就需要&lt;em&gt;把原函数的一些属性复制到新函数中&lt;/em&gt;：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def log(f):  
    def wrapper(*args, **kw):  
        print &amp;#39;call...&amp;#39;  
        return f(*args, **kw)  
    wrapper.__name__ = f.__name__  
    wrapper.__doc__ = f.__doc__  
    return wrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样写很不方便, Python内置的&lt;code&gt;functools&lt;/code&gt;可以用来自动化完成这个“复制”的任务：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;call...&amp;#39;&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;functools.wraps(f)&lt;/code&gt;是一个装饰器函数, 目的是为了把最后返回的函数再次装饰(复制f的属性进去)... 所以对于带参数的装饰器, 应该在最里面返回的wrapper函数前加上&lt;code&gt;@functools.wraps(f)&lt;/code&gt;  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perf_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;call &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;() in &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#closure  &lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;perf_decorator&lt;/span&gt;  
&lt;span class="nd"&gt;@performance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;偏函数&lt;/h3&gt;
&lt;p&gt;假设要转换大量的二进制字符串，每次都传入&lt;code&gt;int(x, base=2)&lt;/code&gt;非常麻烦，于是，我们想到，可以定义一个int2()的函数，默认把base=2传进去：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def int2(x, base=2):  
    return int(x, base)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;functools.partial&lt;/code&gt;可以把一个参数多的函数变成一个参数少的新函数，少的参数需要在创建时指定默认值，这样，新函数调用的难度就降低了。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;functools.partial(func[,*args][, **keywords])&lt;/code&gt;&lt;br /&gt;
Return a new partial object which when called will behave like func called with the positional arguments args and keyword arguments keywords.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;  
&lt;span class="n"&gt;int2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;int2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1000000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="mi"&gt;64&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;int2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1010101&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="mi"&gt;85&lt;/span&gt;

&lt;span class="n"&gt;sorted_ignore_case&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sorted_ignore_case&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;about&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Zoo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Credit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category></entry><entry><title>[Algorithms II] Week 5-2 Data Compression</title><link href="http://x-wei.github.io/algoII_week5_2.html" rel="alternate"></link><published>2016-01-04T00:00:00+01:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoII_week5_2.html</id><summary type="html">&lt;h1&gt;1. Introduction to Data Compression&lt;/h1&gt;
&lt;p&gt;pb: reduce the size of a file, to save space/time for storing/transmitting. &lt;br /&gt;
applications: generic file compression(gzip), multimedia (mp3), communication(skype).   &lt;/p&gt;
&lt;p&gt;From binary data &lt;code&gt;B&lt;/code&gt;, ⇒ generate a compressed representation &lt;code&gt;C(B)&lt;/code&gt;. &lt;br /&gt;
&lt;img alt="" src="algoII_week5_2/pasted_image.png" /&gt;&lt;br /&gt;
&lt;strong&gt;lossless compression&lt;/strong&gt;: get exactly &lt;code&gt;B&lt;/code&gt; from &lt;code&gt;C(B)&lt;/code&gt;&lt;br /&gt;
&lt;strong&gt;compression ratio&lt;/strong&gt;: &lt;code&gt;|C(B)|/|B|&lt;/code&gt;(||means number of &lt;em&gt;bits&lt;/em&gt;)  &lt;/p&gt;
&lt;h3&gt;Tools&lt;/h3&gt;
&lt;p&gt;extension to stdio libraries: read/write &lt;em&gt;bits&lt;/em&gt;   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class BinaryStdIn{  
    boolean readBoolean(); // read 1 bit and return as a boolean  
    char readChar(); // read 8 bits and return a char  
    char readChar(int r); // read r (&amp;lt;=8) bits and return a char  
    // similar method for int/long/double  
    boolean isEmpty(); // is bitstream empty?  
    void close();  
}


public class BinaryStdOut{  
    void write(boolean b); // write 1 bit  
    void write(char c); // write 8 bits  
    void write(char c, int r); // write r (least-significant) bits of c  
    // similar method for int/long/double  
    void close(); // might add some byte alignment bits   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;usage example: store a date 12/31/1999&lt;br /&gt;
&lt;img alt="" src="algoII_week5_2/pasted_image001.png" /&gt;  &lt;/p&gt;
&lt;p&gt;universal date compression?&lt;br /&gt;
&lt;strong&gt;prop&lt;/strong&gt;. NO algorithm can compress every bitstring.&lt;br /&gt;
pf. by contradiction: repeatedly compress the bitstring ⇒ bit length goes to 0.   &lt;/p&gt;
&lt;h1&gt;2. Run-Length Coding&lt;/h1&gt;
&lt;p&gt;one simple type of redundancy in bitstream: long runs of repeated bits. &lt;br /&gt;
⇒ use &lt;em&gt;4-bit counts&lt;/em&gt; to represent alternating 1s and 0s. &lt;br /&gt;
&lt;img alt="" src="algoII_week5_2/pasted_image002.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;question1: how many bits to represent counts ? ⇒ pick 8 bits (just tradeoff)  &lt;/li&gt;
&lt;li&gt;question2: what if run length is bigger than max length(2^8)? ⇒ just add length=0 of the alternating bit...   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;application: JPEG...   &lt;/p&gt;
&lt;p&gt;code:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class RunLength{  
    private final static int R = 256; // max run length  
    private final static int lgR = 8;  
    public static void compress(){  
        boolean bit, oldbit = false;  
        int l=0;  
        while(!BinaryStdIn.isEmpty()){  
            bit = BinaryStdIn.readBoolean();  
            if(bit!=old){  
                oldbit = bit;  
                BinaryStdOut.write(l,lgR);  
                l = 0;    
            }  
            else if(l==R-1){  
                BinaryStdOut.write(l,lgR);  
                BinaryStdOut.write(0,lgR);  
                l = 0;  
            }  
            l ++;  
        }  
        BinaryStdOut.write(l,lgR);  
        BinaryStdOut.close();

    }  
    public static void expand(){  
        boolean bit = false;  
        while(!BinaryStdIn.isEmpty()){  
            int l = BinaryStdIn.readInt(lgR);  
            for(int i=0;i&amp;lt;l;i++)  
                BinaryStdOut.write(bit);  
            bit != bit;  
        }  
        BinaryStdOut.close();  
    }  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;3. Huffman Compression&lt;/h1&gt;
&lt;p&gt;classique...   &lt;/p&gt;
&lt;p&gt;idea: &lt;em&gt;variable length code&lt;/em&gt;. &lt;br /&gt;
ex. Morse code, more freq chars use less chars. &lt;br /&gt;
→ pb: ambiguity? one code is the prefix of another... &lt;br /&gt;
→ need to use &lt;em&gt;prefix-free code&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;⇒ use a trie to represent the prefix-free code, in bitstream, use a binary trie: &lt;br /&gt;
&lt;img alt="" src="algoII_week5_2/pasted_image003.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;Huffman Trie Node&lt;/h3&gt;
&lt;p&gt;define trie nodes having frequences:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public static class Node implements Comparable&amp;lt;Node&amp;gt;{  
    private char ch; // only used for leaves, null for internal nodes  
    private int freq;  
    private final Node left, right; // left--&amp;gt;0, right--&amp;gt;1  
    public Node(char ch, int freq, Node left, Node right){//...}  
    public boolean isLeaf(){  
        return left==null &amp;amp;&amp;amp; right==null;}  
    public int compareTo(Node that){  
        return this.freq-that.freq;}  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;implementation&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;expansion&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;in the bitstream, we first put the (serialized) trie in the head.&lt;/em&gt;   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public void expand{  
    Node root = getTrie(); //   
    int N = BinaryStdIn.readInt(); // number of chars in string  
    for(int i=0; i&amp;lt;N; i++){  
        Node x = root;  
        while (!x.isLeaf()){  
            if(BinaryStdIn.readBoolean()) x = x.right;  
            else x = x.left;  
        }  
        BinaryStdOut.write(x.ch);  
    }  
    BinaryStdOut.close();  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;output trie&lt;/strong&gt;&lt;br /&gt;
ie. to serialize a trie. &lt;br /&gt;
⇒ use &lt;em&gt;preorder traversal&lt;/em&gt;: &lt;br /&gt;
0 for internal nodes, and 1 for leaf (followed by the corresponding char)&lt;br /&gt;
&lt;img alt="" src="algoII_week5_2/pasted_image004.png" /&gt;&lt;br /&gt;
recursive method:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private static void writeTrie(Node x){  
    if(x==null) return;  
    if(x.isLeaf()){  
        BinaryStdOut.write(true); // leaf node  
        BinaryStdOut.write(x.ch); // followed by the char  
    } else {  
        BinaryStdOut.write(false); // internal node  
        writeTrie(x.left);  
        writeTrie(x.right);  
    }  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;read trie&lt;/strong&gt;&lt;br /&gt;
Reconstruct the trie from the serialized bitstring. &lt;br /&gt;
preorder(x) = x+preorder(x.left)+preorder(x.right) ⇒ recursive method...   &lt;/p&gt;
&lt;p&gt;这个递归函数还是蛮有代表性的, 值得看.   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private static Node readTrie(){  
    if(BinaryStdOut.readBoolean()) {  
        char ch = BinaryStdOut.readChar();  
        return new Node(ch, 0, null, null);  
    } else {  
        Node left = readTrie();  
        Node right = readTrie();  
        return new Node(&amp;#39;\0&amp;#39;, 0, left, right); // subtle recursion  
    }  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Huffman algorithm&lt;/h3&gt;
&lt;p&gt;pb: how to find the best prefixless code?   &lt;/p&gt;
&lt;p&gt;Shannon-Fano algo:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;partition symbols S into 2 subsets: S1, S0, with roughly equal freq  &lt;/li&gt;
&lt;li&gt;code in S1 start with 1 and in S0 start with 0  &lt;/li&gt;
&lt;li&gt;recur on S1 and S0  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;[Huffman algo]&lt;/strong&gt; (1950) &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;count letter freq in input  &lt;/li&gt;
&lt;li&gt;build a node for each char  &lt;/li&gt;
&lt;li&gt;select the 2 tries with minimum weight(freq), merge them, and put it back  &lt;/li&gt;
&lt;li&gt;repeat until we get only 1 trie  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week5_2/pasted_image005.png" /&gt;  &lt;/p&gt;
&lt;p&gt;application: jpeg, pdf, mp3, ...  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private static Node buildTrie(int[] freq){  
    MinPQ&amp;lt;Node&amp;gt; pq = new MinPQ&amp;lt;Node&amp;gt;();  
    for(char i=0; i&amp;lt;R; i++)  
        pq.insert( new Node(i, freq[i], null, null) );  
    while(pq.size()&amp;gt;1){  
        Node x = pq.pop(), y = pq.pop();  
        pq.insert( new Node(&amp;#39;\0&amp;#39;,x.freq+y.freq, x, y);  
    }  
    return pq.top();  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;. Huffman algorithm produces the optimal prefixless code.   &lt;/p&gt;
&lt;p&gt;running time: &lt;strong&gt;N + RlgR&lt;/strong&gt;  &lt;/p&gt;
&lt;h1&gt;4. LZW Compression&lt;/h1&gt;
&lt;p&gt;idea:&lt;br /&gt;
adaptive model: learn and &lt;em&gt;update&lt;/em&gt; the model as you read the text. &lt;br /&gt;
decoder will do the same thing.   &lt;/p&gt;
&lt;p&gt;build a table of not only mapping chars to codes, but also mapping &amp;gt;=2-char combinations to codes(of fixed width). &lt;br /&gt;
when encoding strings, look for the longest prefix that is in our table. &lt;br /&gt;
&lt;img alt="" src="algoII_week5_2/pasted_image006.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;LZW compression&lt;/h3&gt;
&lt;p&gt;LZW compression algo  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a symbol table mapping string keys to W-bit code, initialize as mapping only chars to codes  &lt;/li&gt;
&lt;li&gt;find longest prefix &lt;code&gt;s&lt;/code&gt; of the unscanned input   &lt;/li&gt;
&lt;li&gt;write out the corresponding code   &lt;/li&gt;
&lt;li&gt;add &lt;code&gt;s+c&lt;/code&gt; into the symbol table, where &lt;code&gt;c&lt;/code&gt; is the next char in input  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use a trie for representing the code table → because support longest prefix match.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;implementation&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public void compress(String input){  
    TST&amp;lt;Integer&amp;gt; st = new TST&amp;lt;Integer&amp;gt;(); // a trie symbol table  
    for(char i=0; i&amp;lt;R; i++)  
        st.put(&amp;quot;&amp;quot;+(char)i, i);  
    int code = R+1; // R is used as &amp;quot;stop&amp;quot;  
    while(input.length()&amp;gt;0){  
        String s = st.longestPrefixOf(input);  
        BinaryStdOut.write(st.get(s), W);  
        int l = s.length();  
        if(l&amp;lt;input.length())  
            st.put(s+input.charAt(l), code++);  
        input = input.substring(l);  
    }  
    BinaryStdOut.write(R, W); // write &amp;quot;stop&amp;quot;  
    BinaryStdOut.close();

}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;LZW expansion&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;no need to get the codeword table&lt;/em&gt;, the input is just the compressed bitstring.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maintain a (reverse)table mapping int(code) to strings.   &lt;/li&gt;
&lt;li&gt;as we decode the string, we add new entries to our table.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;to represent the table: just an array.   &lt;/p&gt;
&lt;p&gt;&lt;em&gt;note&lt;/em&gt; when add new entries: add key = &lt;code&gt;s+c&lt;/code&gt;, where &lt;code&gt;s&lt;/code&gt; is the last decoded string, &lt;code&gt;c&lt;/code&gt; is the first char of the currently decoded string.&lt;br /&gt;
&lt;img alt="" src="algoII_week5_2/pasted_image008.png" /&gt;&lt;br /&gt;
example: when decoded ABR, s = BR, currently decoded string = ABR, so we add BRA.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tricky case&lt;/strong&gt;: ABABABA&lt;br /&gt;
compression&lt;br /&gt;
&lt;img alt="" src="algoII_week5_2/pasted_image009.png" /&gt;&lt;br /&gt;
problem in expansion when reading the "83": &lt;br /&gt;
&lt;img alt="" src="algoII_week5_2/pasted_image011.png" /&gt;  &lt;/p&gt;
&lt;p&gt;→ need to be able to update the table when encountering a code not yet defined...   &lt;/p&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Huffman: fixed-length symbols, with variable-length codes.   &lt;/li&gt;
&lt;li&gt;LZW: variable-length symbols, with fixed-length codes.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;theoretical limit: &lt;br /&gt;
&lt;img alt="" src="algoII_week5_2/pasted_image012.png" /&gt;  &lt;/p&gt;
&lt;p&gt;还剩下一周的内容, 可能要等到二月底考完以后有时间再看了, 现在先复习备考...&lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 5-1 Regular Expressions</title><link href="http://x-wei.github.io/algoII_week5_1.html" rel="alternate"></link><published>2015-12-27T00:00:00+01:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoII_week5_1.html</id><summary type="html">&lt;h1&gt;1. Regular Expressions&lt;/h1&gt;
&lt;p&gt;pb: pattern matching. &lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;regular expression&lt;/h3&gt;
&lt;p&gt;Is a notation to specify a set of strings. &lt;br /&gt;
basic operations:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;concatenation   &lt;/li&gt;
&lt;li&gt;or  &lt;/li&gt;
&lt;li&gt;closure: "0 or more appearances of chars"  &lt;/li&gt;
&lt;li&gt;parentheses  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week5_1/pasted_image001.png" /&gt;&lt;br /&gt;
additional operations (&lt;em&gt;added for convinence&lt;/em&gt;):&lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image002.png" /&gt;&lt;br /&gt;
ex. &lt;code&gt;[A-C]+&lt;/code&gt; is equivalent to &lt;code&gt;(A|B|C)(A|B|C)*&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;吐槽名句: &lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image003.png" /&gt;  &lt;/p&gt;
&lt;h1&gt;2. REs and NFAs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;duality&lt;/strong&gt; between RE and DFA:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RE: to decribe a set of strings.  &lt;/li&gt;
&lt;li&gt;DFA: machine to ecognize whether a string is in a given set.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;[Kleene's therom]&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For any DFA, there exists a RE that describes the same set of strings;&lt;br /&gt;
For any RE, there exists a DFA that recognizes the same set of strings.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week5_1/pasted_image004.png" /&gt;   &lt;/p&gt;
&lt;h3&gt;first attempt of pattern matching&lt;/h3&gt;
&lt;p&gt;(Ken Tompson) same as KMP — no backup.&lt;br /&gt;
basic plan:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;construct the DFA  &lt;/li&gt;
&lt;li&gt;simulate the DFA with text   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bad news: DFA may have exponential nb of states. &lt;br /&gt;
⇒ change to &lt;strong&gt;NFA&lt;/strong&gt; (nondeterministic finite automaton).  &lt;/p&gt;
&lt;h3&gt;NFA&lt;/h3&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;put RE into parentheses  &lt;/li&gt;
&lt;li&gt;every &lt;em&gt;char&lt;/em&gt; as a state (start=0, success=M) — 这里和之前的DFA很不一样: 之前是每个transition(edge)关联一个char, 这里是每个状态(node)关联一个char.   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;epsilon-transition&lt;/strong&gt; (red links below): change of machine state &lt;em&gt;without scanning text&lt;/em&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;match-transition&lt;/strong&gt; (black links below): change state, but also have to scan next char in text, &lt;em&gt;match transition is added after each alphabetic char&lt;/em&gt;  &lt;/li&gt;
&lt;li&gt;success (accept) if &lt;em&gt;any sequence&lt;/em&gt; of transitions (after scanning all text) end at state-M.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;亦可理解为, DFA是每一条边对应一个可能的(字母表内的)char, 而NFA只有match-transition对应于pattern里的(alphabetic) char, 其他epsilon transition的边对应空字符串(也就是epsilon string). &lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image005.png" /&gt;&lt;br /&gt;
example:&lt;br /&gt;
is "AAAABD" a match ?&lt;br /&gt;
→ yes. (和上一节substring的插图进行一下比对, 还是有很大不同)&lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image006.png" /&gt;  &lt;/p&gt;
&lt;p&gt;pb: non-determinism&lt;br /&gt;
How to determine whether a string is a match of a NFA (ie. &lt;em&gt;how to select the right sequence&lt;/em&gt; of transition) ? &lt;br /&gt;
⇒ sysematically  consider &lt;em&gt;all&lt;/em&gt; possible transition sequences.   &lt;/p&gt;
&lt;h1&gt;3. NFA Simulation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;state names: 0 to M. (M+1 states in total, M=length of RE string).   &lt;/li&gt;
&lt;li&gt;match-transitions: store in array &lt;code&gt;re[]&lt;/code&gt; (the match transitions are naturally in order of the array).  &lt;/li&gt;
&lt;li&gt;epsilon -transitions: store in a digraph &lt;code&gt;G&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;idea:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;maintain a &lt;em&gt;set&lt;/em&gt; of all state that NFA could be in after reading first i chars in text.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;at each iteration: check all reachable state wrt the transitions, then update reachable states. &lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image007.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;algorithm&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week5_1/pasted_image008.png" /&gt;&lt;br /&gt;
(for the NFA above, 注意为了方便已经加了 必要的括号)  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Algo]&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;initial: &lt;code&gt;rs&lt;/code&gt;(reachable state)=reachable state from state 0 (left parenthese) using epsilon trantisions   &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;consume a char &lt;em&gt;in text&lt;/em&gt;:   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nrs&lt;/code&gt; (&lt;em&gt;new-reachable-states&lt;/em&gt;) = empty set  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;from all reachable state of this character: add next state using the match-transition to &lt;code&gt;nrs&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;add all reachable states (using epsilon transition) form the &lt;code&gt;nrs&lt;/code&gt; set to &lt;code&gt;nrs&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;set &lt;code&gt;rs = nrs&lt;/code&gt;, and consume the next char in text   &lt;/li&gt;
&lt;li&gt;accept if at the end the state M is in &lt;code&gt;rs&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3&gt;concrete example&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;init:  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week5_1/pasted_image010.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when &lt;em&gt;matching A&lt;/em&gt; from text: state 2 or 6  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week5_1/pasted_image011.png" /&gt;&lt;br /&gt;
using match transition of A, we can get to state 3 or 7&lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image012.png" /&gt;&lt;br /&gt;
if we add epsilon transitions: &lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image013.png" /&gt;&lt;br /&gt;
so reachable states after reading 1st A are: 2, 3, 4, 7&lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image014.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;matching 2nd A from text: state 2  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;using match transition we can only get to state 3. &lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image015.png" /&gt;&lt;br /&gt;
using epsilon transitions from state 3: &lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image016.png" /&gt;&lt;br /&gt;
 (&lt;em&gt;the only state after matching A is state 2 3 4&lt;/em&gt;)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;etc...   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者直接看这张图:   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week5_1/pasted_image017.png" /&gt;&lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image018.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;reachability&lt;/h3&gt;
&lt;p&gt;All reachable vertices from &lt;em&gt;a set of&lt;/em&gt; source vertices → just DFS. &lt;br /&gt;
⇒ directly use the API from the digraph section: &lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image019.png" /&gt;&lt;br /&gt;
running time linear to E+V  &lt;/p&gt;
&lt;h3&gt;Java implementation&lt;/h3&gt;
&lt;p&gt;API:  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class NFA{  
    private int M;  
    private char[] re;  
    private Digraph G;// digraph of the epsilon-transitions  
    public NFA(String regexp){  
        M = regexp.length();  
        re = regexp.toCharArray();  
        G = buildEpsilonTransitionGraph();// helper function to build the graph G  
    }  
    public boolean matches(String text);// does text match the regexp?  
    private Digraph buildEpsilonTransitionGraph();// private helper function  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function &lt;code&gt;buildEpsilonTransitionGraph()&lt;/code&gt;will be attacked in next session, for now we focus on the NFA simulation code — that is, the &lt;code&gt;mathes()&lt;/code&gt; method.   &lt;/p&gt;
&lt;p&gt;For simplicity let's assume we have a function &lt;code&gt;reachableVertices(Digraph G, Bag&amp;lt;Integer&amp;gt; sourceSet)&lt;/code&gt; and  &lt;code&gt;reachableVertices(Digraph G, int source)&lt;/code&gt; that gives the reachable states from (a set of) source vertices, including the sources. Or we can directly use the &lt;code&gt;DirectedDFS&lt;/code&gt; api as listed above.   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public boolean matches(String text){ //does text match the regexp?  
        Bag&amp;lt;Integer&amp;gt; rechableStates = reachableVertices(G,0);// init reachable   
        for(char c: text){  
            Bag&amp;lt;Integer&amp;gt; newRechableStatesBymatch = new Bag&amp;lt;Integer&amp;gt;();  
            for(int i:rechableStates)  
                if(re[i]==c || re[i]==&amp;#39;.&amp;#39;)   
                    newRechableStatesBymatch.add(i+1);// match transition  
            rechableStates = reachableVertices(G,newRechableStates);//epsilon transition  
        }  
        return reachableStates.contains(M);  
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(代码虽然短但是这个过程我理解了好久.. 另外上面的代码有点伪).   &lt;/p&gt;
&lt;h3&gt;Analysis&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;. the matches() method takes &lt;code&gt;O(MN)&lt;/code&gt; time in worst case.   &lt;/p&gt;
&lt;p&gt;pf. N chars in text, each char can go through &amp;lt;= M states (DFS), and in the digraph, no node has &amp;gt;3 degree ⇒ &lt;em&gt;number of edges &amp;lt;= 3M&lt;/em&gt;, so the time for each dfs is O(M), in total we have O(MN).   &lt;/p&gt;
&lt;h1&gt;4. NFA Construction&lt;/h1&gt;
&lt;p&gt;→ construct the epsilon transition digraph.   &lt;/p&gt;
&lt;h3&gt;buiding a NFA from a re (parsing)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;states in a NFA: one state per char, plus an  accept state (state M)  &lt;/li&gt;
&lt;li&gt;alphabet state: chars in alphabet (&lt;code&gt;A, B, C, D&lt;/code&gt;)  → (implicitly) put a match transition to next state  &lt;/li&gt;
&lt;li&gt;metacharacters:  &lt;code&gt;( ) . * |&lt;/code&gt; , 5 metacharacters in total  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ to deal with the metacharacters:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;paretheses &lt;/strong&gt;&lt;code&gt;( )&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;simply put a epsilon-transition to the next state&lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image020.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;closure &lt;/strong&gt;&lt;code&gt;*&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;星号前面只可能是字母(包括&lt;code&gt;.&lt;/code&gt;)或者右括号&lt;code&gt;)&lt;/code&gt;, 所以分两种情况讨论一下, 需要向前看一位, 这里就比较subtle&lt;br /&gt;
for each &lt;code&gt;*&lt;/code&gt; state, add 3 transitions as below: &lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image021.png" /&gt;&lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image022.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;or&lt;/strong&gt; &lt;code&gt;|&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or符号肯定在一个括号里面&lt;br /&gt;
add 2 epsilon transitions wrt parethese: &lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image023.png" /&gt;&lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image024.png" /&gt;  &lt;/p&gt;
&lt;p&gt;以上就是NFA建立G的时候要处理的三种情形, 这三种情形都要知道一个左括号(&lt;code&gt;lp&lt;/code&gt;)的位置 ⇒ use a stack !   &lt;/p&gt;
&lt;h3&gt;implementation&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week5_1/pasted_image025.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for alphabetic chars: do one-char &lt;em&gt;lookahead&lt;/em&gt; → if next is &lt;code&gt;*&lt;/code&gt;, add transitions.   &lt;/li&gt;
&lt;li&gt;for left parenthese &lt;code&gt;(&lt;/code&gt;: add transition to next state, and push to stack  &lt;/li&gt;
&lt;li&gt;for or &lt;code&gt;|&lt;/code&gt;: add transition to next state, and push to stack   &lt;/li&gt;
&lt;li&gt;for right parenthese &lt;code&gt;)&lt;/code&gt;: pop the stack to deal with or and lp; and also do lookahead.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;code is not trival... look carefully:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private Digraph buildEpsilonTransitionGraph(){// private helper function  
    Digraph G = new Digraph(M+1);  
    Stack&amp;lt;Integer&amp;gt; stk = new Stack&amp;lt;Integer&amp;gt;();  
    int lp;  
    for(int i=0; i&amp;lt;M; i++){  
        if(re[i]==&amp;#39;|&amp;#39; || re[i]==&amp;#39;(&amp;#39;)   
            stk.push(i);  
        if(re[i]==&amp;#39;(&amp;#39; || re[i]==&amp;#39;)&amp;#39; || re[i]==&amp;#39;*&amp;#39;)   
            G.addEdge(i,i+1);  
        else if(re[i]==&amp;#39;)&amp;#39;){// need to pop until get a lp  
            int j = stk.pop();  
            if(re[j]==&amp;#39;|&amp;#39;){  
                lp = stk.pop();  
                int or = j;  
                G.addEdge(lp, or+1);// add edge for the `or` case   
                G.addEdge(or, i);

            }  
            else lp = j;  
        }  
        // do the lookahead:   
        if(re[i+1]==&amp;#39;*&amp;#39;){  
            if(re[i]==&amp;#39;)&amp;#39;){ // case 1 of closure: a rp before `*`  
                G.addEdge(lp, i+1);  
                G.addEdge(i+1, lp);  
            }else{ // case 2 of closure: an alphabetic char before `*`  
                G.addEdge(i, i+1);  
                G.addEdge(i+1, i);  
            }  
        }  
    }// go through each char in re  
    return G;  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Analysis&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;. building an NFA takes linear time and space in M. &lt;br /&gt;
pf. for each char, the nb of operations is const.   &lt;/p&gt;
&lt;p&gt;真不愧是most ingenius algorithm we met in this course......   &lt;/p&gt;
&lt;h1&gt;5. Regular Expression Applications&lt;/h1&gt;
&lt;h3&gt;grep&lt;/h3&gt;
&lt;p&gt;"&lt;strong&gt;G&lt;/strong&gt;eneralized &lt;strong&gt;R&lt;/strong&gt;egular &lt;strong&gt;E&lt;/strong&gt;xpression &lt;strong&gt;P&lt;/strong&gt;rint"&lt;br /&gt;
print out all lines (from stdin) having a substring of an RE.&lt;br /&gt;
⇒ equal to adding a &lt;code&gt;.*&lt;/code&gt; to the beginning and end of the RE to make a match.   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class GREP{  
    public void main(String[] args){  
        String re = &amp;quot;.*&amp;quot;+args[0]+&amp;quot;.*&amp;quot;;  
        NFA nfa = new NFA(re);  
        while(StdIn.hasNextLine){  
            String line = StdIn.readLine();  
            if(nfa.matches(line)) StdOut.println(line);  
        }  
    }  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the grep has NM worst case running time — same as brute force substring search — amazing...  &lt;/p&gt;
&lt;p&gt;grep application: crossword puzzles&lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image026.png" /&gt;&lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image027.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;regexp in other languages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;unix: grep, awk  &lt;/li&gt;
&lt;li&gt;script: python, &lt;em&gt;perl&lt;/em&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week5_1/pasted_image028.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java: &lt;code&gt;String.matches(regexp)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week5_1/pasted_image029.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;Harvesting information&lt;/h3&gt;
&lt;p&gt;goal: print &lt;em&gt;all substrings&lt;/em&gt; of input that match an RE. &lt;br /&gt;
use &lt;code&gt;Pattern&lt;/code&gt; and &lt;code&gt;Matcher&lt;/code&gt; class in &lt;code&gt;java.util.regexp&lt;/code&gt;. &lt;br /&gt;
first compile the regexp, then build the matcher&lt;br /&gt;
→ so that we can iterate through all matches of the input using &lt;code&gt;find()&lt;/code&gt; and &lt;code&gt;group()&lt;/code&gt; of the matcher &lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image030.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Caveat&lt;/em&gt;: performance NOT guaranteed ! &lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image031.png" /&gt;&lt;br /&gt;
→ exponential time growth! &lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image032.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;Not-so-regular expressions&lt;/h3&gt;
&lt;p&gt;"not rugular" means Kleene's Th doesn't hold &lt;br /&gt;
→ efficient performance not tractable......&lt;br /&gt;
&lt;strong&gt;back-reference&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;\1&lt;/code&gt; matches &lt;em&gt;subexpressions&lt;/em&gt; that was matched earliser&lt;br /&gt;
limitations of regular languages: &lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image034.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;the substring and regexp are examples of compilers ! (from string to a NFA/DFA/bytecode)&lt;br /&gt;
&lt;img alt="" src="algoII_week5_1/pasted_image033.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week5_1/pasted_image035.png" /&gt;  &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 4-2 Substring Search</title><link href="http://x-wei.github.io/algoII_week4_2.html" rel="alternate"></link><published>2015-12-07T00:00:00+01:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoII_week4_2.html</id><summary type="html">&lt;h1&gt;1. Introduction to substring search&lt;/h1&gt;
&lt;p&gt;"most ingenious algorithm we've seen so far"&lt;br /&gt;
&lt;strong&gt;pb. &lt;/strong&gt;having two strings, &lt;code&gt;pattern&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt;, len(pattern)=M &amp;lt;&amp;lt; len(text)=N, try to find pattern in text.   &lt;/p&gt;
&lt;p&gt;ex. &lt;code&gt;indexOf&lt;/code&gt; method of String in java.   &lt;/p&gt;
&lt;h1&gt;2. Brute-Force Substring Search&lt;/h1&gt;
&lt;p&gt;function signature: &lt;br /&gt;
&lt;code&gt;public static int search(String pat, String txt);&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;brute-force algo: look for &lt;code&gt;pattern&lt;/code&gt; at every position of &lt;code&gt;text&lt;/code&gt;.   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public static int search(String pat, String txt){  
    int N=txt.length(), M=pat.length();  
    for(int i=0; i&amp;lt;=N-M; i++){  
        int j;  
        for(j=0; j&amp;lt;M &amp;amp;&amp;amp; pat.charAt(j)==txt.charAt(i+j); j++);  
        if(j==M) return i;  
    }  
    return N;// not found  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;worst case: &lt;/strong&gt;when txt/pat are repetitive → MN compares. &lt;br /&gt;
&lt;img alt="" src="algoII_week4_2/pasted_image.png" /&gt;&lt;br /&gt;
problem with brute-force: always &lt;em&gt;backup&lt;/em&gt; when mismatch. &lt;br /&gt;
&lt;img alt="" src="algoII_week4_2/pasted_image001.png" /&gt;&lt;br /&gt;
&lt;strong&gt;brute-force alternative&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;j := number of matched chars in pattern  &lt;/li&gt;
&lt;li&gt;i := index of the end of matched char in text  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ do explicite backup when mismatch by &lt;code&gt;i -= j&lt;/code&gt;  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public static int search(String pat, String txt){  
    int N=txt.length(), M=pat.length(), i=0, j=0;  
    while(i&amp;lt;N &amp;amp;&amp;amp; j&amp;lt;M){  
        if(pat.charAt(j)==txt.charAt(i))   
            {j=i++; j++;}  
        else   
            {i=i-j+1; j=0}// &amp;lt;==backup  
    }  
    return j==M ? i-M : N;  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;challenge: want linear-time guarantee, and want to avoid backup.   &lt;/p&gt;
&lt;h1&gt;3. Knuth-Morris-Pratt&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;"one of the coolest/trickiest algorithm covered in this course"&lt;/em&gt;  &lt;/p&gt;
&lt;h3&gt;intuition&lt;/h3&gt;
&lt;p&gt;suppose pattern = "BAAAAA", &lt;br /&gt;
if we matched 5 chars in pattern and get mismatch on 6th char ⇒ we know the previous 5 chars are "BAAAA"  → no need to backup the i pointer.   &lt;/p&gt;
&lt;p&gt;KMP algorithm: clever method that &lt;em&gt;always&lt;/em&gt; avoid backup !  &lt;/p&gt;
&lt;h3&gt;Deterministic finite state automaton (DFA)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;finite states ,including start and halt state, indexed by j in the subtring pb  &lt;/li&gt;
&lt;li&gt;for each state: exactly one transition for each char in alphabet  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. &lt;br /&gt;
states are 0~6, pat="ABABAC", transitions are indexed by chars in alphabet = {A,B,C}, finish if we reach state-6.   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;dfa[c][i]&lt;/code&gt; = the next state if we are currently in state-i and encoutered char-c.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week4_2/pasted_image002.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;interpretation of DFA for KMP algo&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;in the DFA after reading &lt;code&gt;txt[i]&lt;/code&gt;, the index of state is the &lt;strong&gt;number of matched chars&lt;/strong&gt; in pattern, or length of *longest prefix of pat that is a suffix of txt[0:i]. *  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;need to precompute the &lt;code&gt;dfa[][]&lt;/code&gt; array from pattern  &lt;/li&gt;
&lt;li&gt;the pointer i &lt;em&gt;never&lt;/em&gt; decrements (thus we can do it in a &lt;em&gt;streaming&lt;/em&gt; manner)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ &lt;em&gt;if&lt;/em&gt; &lt;code&gt;dfa[][]&lt;/code&gt; &lt;em&gt;is precomputed&lt;/em&gt;, java code is very very simple:  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public static int search(String pat, String txt, int[][] dfa){  
    int N=txt.length(), M=pat.length(), i, j=0;  
    for(i=0; i&amp;lt;N &amp;amp;&amp;amp; j&amp;lt;M; i++)  
        j = dfa[txt.charAt(i)][j];  
    return j==M ? i-M : N;  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;running time: linear.&lt;br /&gt;
→ key pb: &lt;em&gt;how to build dfa efficiently&lt;/em&gt; ?  &lt;/p&gt;
&lt;h3&gt;DFA construction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;match transition &lt;/strong&gt;(easy part)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;when at state j, for the char &lt;code&gt;c0==pat.charAt(j+1)&lt;/code&gt;, just go on matching: &lt;code&gt;dfa[c0][j] = j+1&lt;/code&gt;&lt;br /&gt;
ex. (&lt;em&gt;pat="ABABAC"&lt;/em&gt;)&lt;br /&gt;
&lt;img alt="" src="algoII_week4_2/pasted_image003.png" /&gt;&lt;br /&gt;
&lt;img alt="" src="algoII_week4_2/pasted_image004.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mismatch transition&lt;/strong&gt; (hard part)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(for j==0, things are simple: &lt;code&gt;dfa[c][0]=0&lt;/code&gt; for all &lt;code&gt;c!=pat[0]&lt;/code&gt;)  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;at state &lt;/em&gt;&lt;code&gt;j&lt;/code&gt; (ie. j chars in pattern are matched)&lt;em&gt;, and for &lt;/em&gt;&lt;code&gt;c!=pat.charAt(j+1)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;⇒ we are in state j: we know &lt;em&gt;the &lt;strong&gt;&lt;em&gt;last j chars in input&lt;/em&gt;&lt;/strong&gt; are &lt;/em&gt;&lt;code&gt;pat[0...j-1]&lt;/code&gt;, &lt;em&gt;and followed by char =&lt;/em&gt; &lt;code&gt;c&lt;/code&gt;, so the last j+1 chars of input string is: &lt;code&gt;pat[0...j-1]+c&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;⇒ to compute dfa[c][j]: we can &lt;strong&gt;simulate as if we backup&lt;/strong&gt;&lt;em&gt;, ie. &lt;/em&gt;&lt;code&gt;i=i-j+1, j=0&lt;/code&gt;.   &lt;/li&gt;
&lt;li&gt;if we go back to set j=0, and set i = i-j+1, then i is pointing at &lt;code&gt;pat[1]&lt;/code&gt;, the text become &lt;code&gt;pat[1...j-1]+c&lt;/code&gt;. We then let this string go through our dfa, the state that it achieves is the value of &lt;code&gt;dfa[c][j]&lt;/code&gt;.   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;here is&lt;/em&gt; &lt;em&gt;a concrete example:&lt;/em&gt; &lt;br /&gt;
pattern = &lt;code&gt;"ABABAC"&lt;/code&gt;, state &lt;code&gt;j=5&lt;/code&gt;, char &lt;code&gt;c='B&lt;/code&gt;'  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;we know the last 6 chars of the input = &lt;code&gt;pat[0...j-1]+c="ABABA"+"B"="ABABAB"&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;if we backup, i will point to pat[1], the string is just &lt;code&gt;pat[1...j-1]+c="BABAB"&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;we use the string "BABAB" as input and go through the partially constructed dfa, and see that we will reach state 4  &lt;/li&gt;
&lt;li&gt;so we know &lt;code&gt;dfa['B'][5]=4&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;similarly we can get &lt;code&gt;dfa['A'][5]=1&lt;/code&gt;, as indicated below: &lt;br /&gt;
(&lt;em&gt;pat="ABABAC"&lt;/em&gt;)&lt;br /&gt;
&lt;img alt="" src="algoII_week4_2/pasted_image005.png" /&gt;  &lt;/p&gt;
&lt;p&gt;one concern: seems this simulation needs &lt;code&gt;j&lt;/code&gt; steps ?&lt;br /&gt;
⇒ can be changed to be constant time if we maintain a &lt;strong&gt;state X := the state of simulating of input=pat[1...j-1]&lt;/strong&gt;&lt;br /&gt;
we maintain this state &lt;code&gt;X&lt;/code&gt;, then for each &lt;em&gt;mismatched&lt;/em&gt; char c, we just need to look at &lt;code&gt;dfa[c][X]&lt;/code&gt;. &lt;br /&gt;
(&lt;em&gt;pat="ABABAC"&lt;/em&gt;)&lt;br /&gt;
&lt;img alt="" src="algoII_week4_2/pasted_image006.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Algo]&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;set all matched transitions &lt;code&gt;dfa[c0][j] = j+1&lt;/code&gt; for all &lt;code&gt;c0==pat[j]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;fill first column (j==0): &lt;code&gt;dfa[c][0]=0&lt;/code&gt; for all &lt;code&gt;c!=pat[0]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;initialize &lt;code&gt;X=0&lt;/code&gt; (state for empty input string)  &lt;/li&gt;
&lt;li&gt;for j=1 to M:  &lt;ul&gt;
&lt;li&gt;for all &lt;code&gt;c!=pat[0]&lt;/code&gt;: set &lt;code&gt;dfa[c][j] = dfa[c][X]&lt;/code&gt; (DP here...)  &lt;/li&gt;
&lt;li&gt;update &lt;code&gt;X=dfa[c0][X]&lt;/code&gt; ⇒ 注意, 此时X并&lt;strong&gt;不等于&lt;/strong&gt;X+1(最开始&lt;code&gt;dfa[c0][j]=j+1&lt;/code&gt;不适用于此), 为什么? 因为&lt;code&gt;c0==pat[j]&lt;/code&gt; 而不&lt;code&gt;是pat[X]&lt;/code&gt;!! 比如说最开始, j=1的时候X是等于0的!!! (这个弯我饶了好几分钟...)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;java code (can be written to be more compate):   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public int[][] constructDFA(String pat){  
    int R=256;//ASCII code    
    int M=pat.length();  
    int[][] dfa = new int[R][M];  
    // 1. fill matched transitions: dfa[pat.charAt(j)][j] = j+1   
    for(int j=0;j&amp;lt;M;j++)  
        dfa[pat.charAt(j)][j] = j+1;  
    // 2. fill 1st column --&amp;gt; can be ignored as java int default val=0  
    // 3. fill mismatched transitions     
    int X = 0;  
    for(int j=1;j&amp;lt;M;j++){  
        for(int c=0;c&amp;lt;R;c++)  
            if(c!=pat.charAt(j))  
                dfa[c][j] = dfa[c][X];  
        X = dfa[pat.charAt(j)][X];  
    }  
    return dfa;  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;running time and space: &lt;strong&gt;O(M*R)&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;prop.&lt;/strong&gt; &lt;br /&gt;
KMP algorithm runs in O(M+N) time, and constructs the dfa in O(M*R) time/space.   &lt;/p&gt;
&lt;p&gt;这个KMP算法, 我曾经想过好几个小时, 然后最后写出了特别复杂的代码, 虽然可以用但是基本写了就忘掉了. 但是经过老爷子这么一讲, 感觉这次印象深刻了好多. 老爷子NB...  &lt;/p&gt;
&lt;p&gt;八卦时间: &lt;br /&gt;
&lt;img alt="" src="algoII_week4_2/pasted_image007.png" /&gt;  &lt;/p&gt;
&lt;h1&gt;4. Boyer-Moore&lt;/h1&gt;
&lt;p&gt;Heuristic in practice.&lt;br /&gt;
i does not necessarily go through all txt chars ⇒ i may &lt;em&gt;skip&lt;/em&gt; some chars.   &lt;/p&gt;
&lt;h3&gt;intuition&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;for matching: scan chars &lt;em&gt;from right to left&lt;/em&gt; (j will decrease when checking)  &lt;/li&gt;
&lt;li&gt;when encoutered a mismatch: we can skip &amp;lt;= M chars (if the char is not in pattern)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. (pat="NEEDLE")&lt;br /&gt;
&lt;img alt="" src="algoII_week4_2/pasted_image008.png" /&gt;  &lt;/p&gt;
&lt;p&gt;→ pb: how to skip?   &lt;/p&gt;
&lt;h3&gt;mismatch character heuristic&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;note&lt;/em&gt;: the &lt;code&gt;i&lt;/code&gt; always points to the &lt;em&gt;beginning&lt;/em&gt; of the substring (&lt;code&gt;txt[i,...,i+M-1]&lt;/code&gt;) to be checked for match.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;case 1. mismatched char not in pattern&lt;/strong&gt;&lt;br /&gt;
easy case → just move i to the right of this char. &lt;br /&gt;
&lt;img alt="" src="algoII_week4_2/pasted_image009.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;case 2. mismatched char in pattern&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;heuristic:&lt;/strong&gt; line up i with the &lt;strong&gt;rightmost&lt;/strong&gt;&lt;em&gt; char in pattern&lt;/em&gt;.&lt;br /&gt;
&lt;code&gt;i += skip&lt;/code&gt;&lt;br /&gt;
where &lt;em&gt;skip length = j - index of rightmost char in pattern&lt;/em&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week4_2/pasted_image010.png" /&gt;  &lt;/p&gt;
&lt;p&gt;note: this does not always help, in the example below, i even &lt;em&gt;backups&lt;/em&gt;: &lt;br /&gt;
&lt;img alt="" src="algoII_week4_2/pasted_image011.png" /&gt;&lt;br /&gt;
to avoid backup, in this case we just &lt;em&gt;increment i by 1&lt;/em&gt; (heuristic doesn't help in this case).  &lt;/p&gt;
&lt;h3&gt;implementation&lt;/h3&gt;
&lt;p&gt;use an array &lt;code&gt;right[]&lt;/code&gt; as &lt;em&gt;skip table&lt;/em&gt;, &lt;code&gt;right[c]&lt;/code&gt; is the index of rightmost occurrence of char c (-1 if c not in pat). &lt;br /&gt;
&lt;img alt="" src="algoII_week4_2/pasted_image012.png" /&gt;  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;int[] right = new int[M];  
for(int i=0;i&amp;lt;R;i++) right[i] = -1;//value for chars not in pattern  
for(int j=0;j&amp;lt;M;j++){  
    right[pat.charAt(j)]=j;  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;using this table we can implemente the heuristic algorithm:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public static int search(String pat, String txt, int[] right){  
    int N=txt.length(), M=pat.length();  
    int skip;  
    for(int i=0;i&amp;lt;N-M;i+=skip){  
        skip = 0;  
        for(int j=M-1;j&amp;gt;=0;j++)  
            if(pat.charAt(j)!=txt.charAt(i+j)){// when mismatch happens  
                skip = Math.max(1,j - right[txt.charAt(i+j)]);// skip if we can, else just increment i by 1  
                break;  
            }  
        if(skip==0)// if the above for loop finishes without changing skip --&amp;gt; we are done.    
            return i;  
    }  
    return N;// pattern not found  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;analysis&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;property&lt;/strong&gt;. the Boyer-Moore heuristic (in practice) takes about &lt;strong&gt;N/M&lt;/strong&gt; (sublinear!) compares to search.   &lt;/p&gt;
&lt;p&gt;好神奇, 比KMP还要简单的算法, 实际效率这么高...  &lt;/p&gt;
&lt;p&gt;worst-case performance: &lt;strong&gt;N*M&lt;/strong&gt;... 这一点不如KMP. &lt;br /&gt;
&lt;img alt="" src="algoII_week4_2/pasted_image013.png" /&gt;&lt;br /&gt;
→ can be improved...   &lt;/p&gt;
&lt;h1&gt;5. Rabin-Karp&lt;/h1&gt;
&lt;p&gt;两个图灵奖的大神发明的算法..   &lt;/p&gt;
&lt;h3&gt;intuition&lt;/h3&gt;
&lt;p&gt;basic idea: &lt;strong&gt;modular hashing&lt;/strong&gt;&lt;br /&gt;
ex. for strings of numbers   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;compute hash fcn (for number strings is easy: take the string and treat it as a number, then %Q where Q is a big prime number).   &lt;/li&gt;
&lt;li&gt;for a pointer i →corresponds to the substring &lt;code&gt;txt[i, ..., i+M-1]&lt;/code&gt;  → check hash for match  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(below: text=3141592653589793, pattern=26535)&lt;br /&gt;
&lt;img alt="" src="algoII_week4_2/pasted_image014.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;computing the hash function efficiently&lt;/h3&gt;
&lt;p&gt;let ti be the ith char in txt, the hashcode for substring &lt;code&gt;txt[i,...,i+M-1]&lt;/code&gt; is: &lt;br /&gt;
&lt;img alt="" src="algoII_week4_2/pasted_image015.png" /&gt;&lt;br /&gt;
⇒ just an M-digit base-R integer modulo Q ! &lt;code&gt;poly(M, R) % Q&lt;/code&gt;*. *  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Honor's method&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;linear time algorithm for evaluating polynomial. &lt;br /&gt;
recursive equation: &lt;code&gt;poly(i, R) = poly(i-1, R)*R+ti&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;ex. (R=10, M=5)&lt;br /&gt;
&lt;img alt="" src="algoII_week4_2/pasted_image016.png" /&gt;  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private long hash(String key, int M){  
    long h=0;  
    for(int i=0;i&amp;lt;M;i++)  
        h = ( h*R + key.charAt(i) ) % Q  
    return h;  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;if we know x_i, the x_i+1 can be infered:   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week4_2/pasted_image017.png" /&gt;&lt;br /&gt;
⇒ x_i+1 can be computed in constant time: &lt;br /&gt;
&lt;img alt="" src="algoII_week4_2/pasted_image018.png" /&gt;&lt;br /&gt;
⇒ we precompute R^(M-1) and maintain the hash number, and check for match !   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public static int search(String txt, String pat){  
    int N=txt.length(), M=pat.length();  
    long pathash = hash(pat, M);      
    int RM = R^(M-1);// &amp;lt;-- pseudo code, store value of R^(M-1)  
    long txthash = hash(txt, M);// txthash will be maintained  
    for(int i=0;i&amp;lt;N-M;i++){  
        if(txthash==pathash &amp;amp;&amp;amp; checkMatch(i,txt,pat))   
            return i;  
        txthash = ( (txthash - txt.charAt(i)*RM)*R + txt.charAt(i+M) ) % Q;  
    }  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更新txthash的地方可能会有modulo造成的问题... 不过先这样写吧..   &lt;/p&gt;
&lt;p&gt;for collisions: &lt;em&gt;Monte Carlo&lt;/em&gt; vs. &lt;em&gt;Las Vegas&lt;/em&gt;  &lt;/p&gt;
&lt;h3&gt;analysis&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Theory&lt;/strong&gt;: if Q is sufficiently large (~M*N^2), the probability of collision is ~1/N. &lt;br /&gt;
&lt;strong&gt;Practice&lt;/strong&gt;: choose Q to be sufficiently large, and collision probability is ~1/Q.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week4_2/pasted_image019.png" /&gt;  &lt;/p&gt;
&lt;h1&gt;Summery&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week4_2/pasted_image020.png" /&gt;  &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 4-1 Tries</title><link href="http://x-wei.github.io/algoII_week4_1.html" rel="alternate"></link><published>2015-12-05T00:00:00+01:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoII_week4_1.html</id><summary type="html">&lt;p&gt;More efficient version of symbol-table where the keys are strings.   &lt;/p&gt;
&lt;h1&gt;1. R-way Tries&lt;/h1&gt;
&lt;p&gt;Two implementations of symbol tables that we've seen: &lt;br /&gt;
&lt;img alt="" src="algoII_week4_1/pasted_image.png" /&gt;&lt;br /&gt;
when keys are strings:&lt;br /&gt;
(&lt;code&gt;L&lt;/code&gt;=string length, &lt;code&gt;N&lt;/code&gt;=number of strings, &lt;code&gt;R&lt;/code&gt;=radix)&lt;br /&gt;
&lt;img alt="" src="algoII_week4_1/pasted_image001.png" /&gt;  &lt;/p&gt;
&lt;p&gt;for string keys ⇒ do better by avoiding examing the entire key.  &lt;/p&gt;
&lt;p&gt;goal: faster than hashtable, more flexible than BST !  &lt;/p&gt;
&lt;h2&gt;String Symbol Table API&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class StringST&amp;lt;V&amp;gt;{// implements ST&amp;lt;String, V&amp;gt;  
    public void put(String key, V val);  
    public V get(String key);  
    public void delete(String key);  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;R-way tries&lt;/h2&gt;
&lt;p&gt;A trie is a tree where:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;except the root, each node store &lt;em&gt;characters&lt;/em&gt; (instead of string keys) — in fact the chars are stored in &lt;em&gt;links&lt;/em&gt;  &lt;/li&gt;
&lt;li&gt;each node has R children  &lt;/li&gt;
&lt;li&gt;store &lt;em&gt;value&lt;/em&gt; in node if the node corresponds to the&lt;em&gt; last char&lt;/em&gt; in key.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example: (&lt;em&gt;a trie&lt;Integer&gt;)&lt;/em&gt;&lt;br /&gt;
&lt;img alt="" src="algoII_week4_1/pasted_image002.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;search in a trie &lt;/strong&gt;&lt;code&gt;get()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;hit&lt;/em&gt; if when search ends the node has a non-null value&lt;br /&gt;
&lt;em&gt;miss&lt;/em&gt; if reach a null link or have null value when search ends.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;insertion in a trie&lt;/strong&gt; &lt;code&gt;put()&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;follow the links as the chars indicate in the key&lt;br /&gt;
→ if meet null links: create new node&lt;br /&gt;
→ when reach last char in key: set the value of the node  &lt;/p&gt;
&lt;h2&gt;Java implementation&lt;/h2&gt;
&lt;p&gt;trie node class:&lt;br /&gt;
in each node use an array of size R to store links...  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private static class Node{  
    private Object val;// because cannot create arries of generic type (array of Node)  
    private Node[] next = new Node[R];// chars are implicitly defined by link index  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外关于为什么内部类Node声明为static, 参考这里: &lt;br /&gt;
&lt;a href="http://www.geeksforgeeks.org/static-class-in-java/"&gt;http://www.geeksforgeeks.org/static-class-in-java/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;implementation: use private recursive methods, 和BST的实现类似, 定义一个递归的private函数, 返回插入后的Node, 很有用.   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class TrieST&amp;lt;Value&amp;gt; {  
    pirvate final int R = 256; // ASCII chars  
    private Node root = new Node();  
    private static class Node{  
        private Object val;// because cannot create arries of generic type (array of Node)  
        private Node[] next = new Node[R];// chars are implicitly defined by link index  
    }  
    public void put(String key, Value val){  
        this.put(root, key, val, 0);// use private recursive helper method  
    }  
    private Node put(Node x, String key, Value val, int d){  
        // `d` is the index of char to put  
        // returns the inserted node

        if (x==null) x = new Node();  
        if (key.length()==d) x.val = val;  
        else{  
            char c = key.charAt(d);

            x.next[c] = put(x.next[c], key, val, d+1);  
        }  
        return x;  
    }  
    public boolean contains(String key){return get(key)!=null;}  
    public Value get(String key){  
        Node nd = this.get(root, key, 0);  
        if(nd==null) return null;  
        return (Value) x.val; // cast back  
    }  
    private Node get(Node x, String key, int d){  
        // returns the node that contains val for key  
        if(x==null) return null;  
        if(d==key.length()) return x;  
        char c = key.charAt(d);

        else return get(x.next[c], key, d+1);  
    }  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;delete node in trie:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find the node and set the val to null  &lt;/li&gt;
&lt;li&gt;if a node has 0 links(leaf)  and val==null: delete it and recursivly go up.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week4_1/pasted_image003.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;time:&lt;/strong&gt;&lt;br /&gt;
search hit —  L nodes examined. &lt;br /&gt;
serach miss —  sublinear in L&lt;br /&gt;
&lt;strong&gt;space:&lt;/strong&gt; &lt;br /&gt;
each node has R links (possibly null) — &lt;em&gt;too much memory for large R&lt;/em&gt; !&lt;br /&gt;
&lt;img alt="" src="algoII_week4_1/pasted_image004.png" /&gt;&lt;br /&gt;
&lt;strong&gt;Application&lt;/strong&gt;&lt;br /&gt;
interview question: data structure for spell checking.   &lt;/p&gt;
&lt;h1&gt;2. Ternary Search Tries&lt;/h1&gt;
&lt;p&gt;Solution to the memory issue of R-way tries —  much fewer null links. ternery=tuple of 3...&lt;br /&gt;
TST:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;store chars (and vals) &lt;em&gt;explicitly&lt;/em&gt; in nodes  &lt;/li&gt;
&lt;li&gt;each node has &lt;strong&gt;3&lt;/strong&gt; children:   &lt;ul&gt;
&lt;li&gt;&lt;em&gt;smaller, larger: &lt;/em&gt;TST that starts with char smaller/bigger than its char c.   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;equal: &lt;/em&gt;the TST with keys that &lt;strong&gt;starts with&lt;/strong&gt; this char c  &lt;/li&gt;
&lt;li&gt;(所以除了用smaller/larger连接的节点在Rway trie里属于同一层  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week4_1/pasted_image005.png" /&gt;&lt;br /&gt;
类似于3-way radix sort(同一篇paper里提出的), 有有点RBTree的意思...   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;searching&lt;/strong&gt; in TST: quite similar to BST search, will go down ("equal" or "middle") when the current node matchs current char...  &lt;/p&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Node class:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private class Node{  
    private Value val;  
    private char c;// store char explicitly  
    private Node left, mid, right;  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;TST class (again use recursive helper functions)&lt;br /&gt;
有一种写BST代码的感觉, 另外由于这次char是显式存在node里, 代码反而更好理解了...  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class TST&amp;lt;Value&amp;gt;{  
    private class Node{...};  
    private Node root;  
    public void put(String key, Value val){  
        this.put(root, key, val, 0);  
    }  
    private Node put(Node x, String key, Value val, int d){  
        char c = key.charAt(d);// char to process  
        if(x==null) x = new Node(c);  
        if(c==x.c) {  
            if(d==key.length()-1) x.val = val;  
            else x.mid = put(x.mid, key, val, d+1);// d+1 means we go down one level  
        }  
        else if (c&amp;lt;x.c) x.left = put(x.left, key, val, d);// do not increment if the current char is not matchd  
        else x.right = put(x.right, key, val, d);  
        return x;  
    }  
    public Value get(String key){  
        Node nd = this.get(root, key, 0);  
        if(nd==null) return null;  
        return nd.val;  
    }  
    private Node get(Node x, String key, int d){  
        if(x==null) return null;  
        char c = key.charAt(d);  
        if(x.c==c) {  
            if(d==key.length()-1) return x;  
            else return get(x.mid, key, d+1);  
        }  
        else if(c&amp;lt;x.c) return get(x.left, key, d);  
        else return get(x.right, d);  
    }  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Hybrid of TST and Rway trie&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;at root: do &lt;em&gt;R^2 branching&lt;/em&gt;  &lt;/li&gt;
&lt;li&gt;other nodes are TSTs   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week4_1/pasted_image007.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;analysis&lt;/h2&gt;
&lt;p&gt;space cost: linear in N.&lt;br /&gt;
time: if keys arrive in rand order... (can use rotation to get worst-case guarantee..)&lt;br /&gt;
&lt;img alt="" src="algoII_week4_1/pasted_image008.png" /&gt;  &lt;/p&gt;
&lt;h2&gt;Hashing vs. TST&lt;/h2&gt;
&lt;p&gt;Hashing:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;need to check entire key no matter hit or miss  &lt;/li&gt;
&lt;li&gt;performance relies on hash functions  &lt;/li&gt;
&lt;li&gt;donot support ordered operations  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TST:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;examines just enough chars  &lt;/li&gt;
&lt;li&gt;support ordered operations  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;3. Character-Based Operations&lt;/h1&gt;
&lt;p&gt;some very useful char-based operations:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prefix match&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wildcard match&lt;/strong&gt;: use a dot to represent any char  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;longest prefix&lt;/strong&gt;: find the key that is the longest prefix of a string  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;API&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class TrieST&amp;lt;Value&amp;gt;{  
    // functions decalred before..  
    Iterable&amp;lt;String&amp;gt; keys;  
    Iterable&amp;lt;String&amp;gt; keysWithPrefix(String s);  
    Iterable&amp;lt;String&amp;gt; keysThatMatch(String s);  
    Iterable&amp;lt;String&amp;gt; longestPrefixOf(String s);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;keys(): ordered iteration&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;keys()&lt;/code&gt;: just an inorder-traversal of the &lt;em&gt;Rway trie&lt;/em&gt; →dfs, + maintain the chars in the path (root to current node). &lt;br /&gt;
&lt;img alt="" src="algoII_week4_1/pasted_image009.png" /&gt;  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public Iterable&amp;lt;String&amp;gt; keys(){  
    Queue&amp;lt;String&amp;gt; q = new Queue&amp;lt;String&amp;gt;();  
    collect(root, &amp;quot;&amp;quot;, q);// helper fcn  
    return q;  
}  
private void collect(Node x, String pathstr, Queue q){  
    if(x==null) return;  
    if(x.val!=null)// if this is a key  
        q.enqueue(pathstr);// pathstr is the string of chars from root to x  
    for(char c=0;c&amp;lt;R;c++) // dfs  
        collect(x.next[c], pathstr+c, q);  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;prefix match&lt;/h2&gt;
&lt;p&gt;very useful: ex. autocomplete, search bar, ...&lt;br /&gt;
implementation⇒ just find the end of that prefix, then call &lt;code&gt;keys()&lt;/code&gt; on the &lt;em&gt;subtrie&lt;/em&gt;.&lt;br /&gt;
之前写的俩helper function这里发挥作用了:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public Iterable&amp;lt;String&amp;gt; keysWithPrefix(String prefix){  
    Node subtrieRoot = get(root, prefix, 0);  
    Queue&amp;lt;String&amp;gt; q = new Queue&amp;lt;String&amp;gt;();  
    collect(subtrieRoot, prefix, q);  
    return q;  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;longest prefix&lt;/h2&gt;
&lt;p&gt;⇒ just do a search and keep track of the longest key that we encounterd.   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public String longestPrefixOf(String s){  
    int len = search(root, s, 0, 0);  
    return s.substring(0, len);  
}  
private int search(Node x, String s, int d, int len){  
    if(x==null) return len;  
    if(x.val!=null) len=d;// this is the current longest prefix  
    if(d==s.length()) return length;   
    char c = s.charAt(d);  
    return search(x.next[c], s, d+1, len);  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;application: T9 texting&lt;/h3&gt;
&lt;p&gt;classique... G面试以及X的TP里都有涉及过...   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;first: generate all string combinations  &lt;/li&gt;
&lt;li&gt;second: call get() on the trie of dictionaries.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Variants&lt;/h2&gt;
&lt;h3&gt;Patricia trie&lt;/h3&gt;
&lt;p&gt;improvement: remove the one-eay branching (put &amp;gt;1 chars in a node).&lt;br /&gt;
&lt;img alt="" src="algoII_week4_1/pasted_image010.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;suffix tree&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;patricia tree of the suffix  &lt;/li&gt;
&lt;li&gt;linear time construction  &lt;/li&gt;
&lt;li&gt;ongest repeated substring, longest common substring, longest palindromic substring, substring search, tandem repeats... 好有用!!...   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Summery&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week4_1/pasted_image011.png" /&gt;  &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 3-2 Radix Sorts</title><link href="http://x-wei.github.io/algoII_week3_2.html" rel="alternate"></link><published>2015-11-23T00:00:00+01:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoII_week3_2.html</id><summary type="html">&lt;p&gt;This week: string sort.  &lt;/p&gt;
&lt;h1&gt;1. Strings in Java&lt;/h1&gt;
&lt;h3&gt;char data type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;char in C&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;8-bit integer, 256 characters, 7-bit ASCII code  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;char in Java&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;16-bit Unicode&lt;/em&gt;    &lt;/p&gt;
&lt;h3&gt;String data type&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;String&lt;/code&gt;: &lt;em&gt;immutable&lt;/em&gt; sequence of characters&lt;br /&gt;
operations: lengthe, ith char, substring, concatenate  &lt;/p&gt;
&lt;p&gt;implementation: using a &lt;code&gt;char[]&lt;/code&gt;, maintain a &lt;code&gt;length&lt;/code&gt; and an &lt;code&gt;offset.&lt;/code&gt; ⇒ substring methode is O(1) time.&lt;br /&gt;
&lt;img alt="" src="algoII_week3_2/pasted_image.png" /&gt;&lt;br /&gt;
&lt;img alt="" src="algoII_week3_2/pasted_image001.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;StringBuilder data type&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;StringBuilder&lt;/code&gt;: &lt;em&gt;mutable&lt;/em&gt; data type.&lt;br /&gt;
implementation: using a resizing &lt;code&gt;char[]&lt;/code&gt; array (ArrayList). &lt;br /&gt;
⇒ contat in (amortized) constant time, &lt;em&gt;substring in linear time&lt;/em&gt;!&lt;br /&gt;
&lt;img alt="" src="algoII_week3_2/pasted_image002.png" /&gt;  &lt;/p&gt;
&lt;p&gt;ex.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reverse a string: linear using StringBuilder, quad using String.   &lt;/li&gt;
&lt;li&gt;form an array of suffixes: quad (time&amp;amp;space) using StringBuilder, linear (time&amp;amp;space) using String.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week3_2/pasted_image003.png" /&gt;&lt;br /&gt;
&lt;strong&gt;Longest Common Prefix:&lt;/strong&gt;&lt;br /&gt;
runs in linear/subinear time ⇒ &lt;code&gt;compareTo()&lt;/code&gt; for strings takes (sub)linear time!  &lt;/p&gt;
&lt;h3&gt;Alphabet&lt;/h3&gt;
&lt;p&gt;alphabet different for different type of string (ex. binary numbers, DNA, ...)&lt;br /&gt;
&lt;img alt="" src="algoII_week3_2/pasted_image004.png" /&gt;&lt;br /&gt;
def. &lt;strong&gt;Radix&lt;/strong&gt; &lt;code&gt;R&lt;/code&gt; is number of digits  in alphabet.   &lt;/p&gt;
&lt;h1&gt;2. Key-Indexed Counting&lt;/h1&gt;
&lt;p&gt;review of &lt;em&gt;compare-based&lt;/em&gt; sorting algorithms:&lt;br /&gt;
&lt;img alt="" src="algoII_week3_2/pasted_image005.png" /&gt;&lt;br /&gt;
lower-bound for compare-based algorithms: ~&lt;em&gt;NlgN&lt;/em&gt; (=Lg(N!))&lt;br /&gt;
⇒ goal: do better by avoiding using compares.   &lt;/p&gt;
&lt;h3&gt;Key-indexed counting&lt;/h3&gt;
&lt;p&gt;is an algorithm to sort &lt;em&gt;by character(ex. sort array of string by their 1st character).&lt;/em&gt; &lt;br /&gt;
Assumption: keys are integers between 0 and R-1 (&amp;lt;&amp;lt;N, small integer).&lt;br /&gt;
⇒ use keys as array index, to sort an &lt;em&gt;array of N integers between 0 and R-1&lt;/em&gt;.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[algo]&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;count freq of each key index (of size &lt;em&gt;R+1&lt;/em&gt;)  &lt;/li&gt;
&lt;li&gt;using count array, compute a &lt;em&gt;cumulated freq&lt;/em&gt; (cumsum of &lt;code&gt;count[]&lt;/code&gt;)  &lt;/li&gt;
&lt;li&gt;the &lt;code&gt;cumsum[]&lt;/code&gt; array stores the &lt;strong&gt;index range&lt;/strong&gt; of each key index:   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;index range of key-i in sorted array is &lt;code&gt;[cumsum[i], cumsum[i+1]]&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;then get the sorted array by going through the array and using cumsum[] array  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week3_2/pasted_image007.png" /&gt;⇒ &lt;img alt="" src="algoII_week3_2/pasted_image006.png" /&gt;  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public void keyIndexCounting(int[] a, int R){// entries in a[] are in range [0,R-1]  
    int N = a.length;  
    int[] count = new int[R+1]; // count[i] = freq of key i-1, count[0] = 0  
    for(int ai:a)   
        count[ai+1]++;  
    int[] cumsum = count; //cumsum = cumulated freq  
    for(int i=0;i&amp;lt;R;i++)   
        cumsum[i+1] += cumsum[i];  
    // the ranges of key i in sorted array should be [cumsum[i], cumsum[i+1]]  
    int[] aux = new int[N];  
    for(int ai:a)  
        aux[cumsum[ai]++] = ai;  
    a = aux;      
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;analysis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;running time: &lt;strong&gt;linear&lt;/strong&gt; in time and in space.   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stable&lt;/strong&gt; sorting: that's why we need the cumsum and aux array...  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;3. LSD Radix Sort&lt;/h1&gt;
&lt;p&gt;LSD = least significant digit (for string sorting)&lt;br /&gt;
(assume strings all of same length)&lt;br /&gt;
idea:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;consider chars from right to left   &lt;/li&gt;
&lt;li&gt;sort using dth character as key (using key-indexed counting)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;important: the key-indexed counting should be stable.&lt;br /&gt;
&lt;img alt="" src="algoII_week3_2/pasted_image008.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;analysis&lt;/h3&gt;
&lt;p&gt;time: W * N (W=length of string)  &lt;/p&gt;
&lt;p&gt;correctness:&lt;br /&gt;
&lt;strong&gt;prop&lt;/strong&gt;. LSD sorting works&lt;br /&gt;
pf. by induction on i&lt;br /&gt;
prove that: after pass i, strings are sorted by last i characters.   &lt;/p&gt;
&lt;h3&gt;implementation&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public static LSDsort(String[] a, int W){//W=fixed width  
    int R = 256;//for ASCII chars  
    int N = a.length;  
    String[] aux = new String[N];  
    for(int d=W-1;d&amp;gt;=0;d--){//W passes  
        //key-indexed counting at digit d  
        int count = new int[R+1];  
        for(String s:a)  
            count[s.charAt[d]+1]++;  
        for(int i=0;i&amp;lt;N;i++)  
            count[i+1] += count[i];//count = cumsum(count), range of each key  
        for(String s:a)  
            aux[s.charAt[d]++]=s;//put each key in right place  
        for(int i=0;i&amp;lt;n;i++)  
            a[i]=aux[i];  
    }  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;if keys are binary numbers → break into bit characters then apply LSD.   &lt;/li&gt;
&lt;li&gt;if not fixed length → some fix..  &lt;/li&gt;
&lt;li&gt;sort 1 million 32-bit integers? (Google/Obama interview) ⇒ LSD string sort~   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;4. MSD Radix Sort&lt;/h1&gt;
&lt;p&gt;most-significant-digit first (from left to right)&lt;br /&gt;
Idea.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;partition array into R pieces according to first character (the count[] array is the partition)  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;recursively&lt;/em&gt; sort each subarrays  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;variable length: end-of-string are treated as before any char&lt;br /&gt;
&lt;img alt="" src="algoII_week3_2/pasted_image010.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;implementation&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private static void sort(String[] a, String[] aux, int lo, int hi, int d){  
    if(hi&amp;lt;=lo) return;  
    //sort by dth character  
    int count = new int[R+2];// R+2 as we are taking account into the end-of-strings!!  
    for(int i=lo;i&amp;lt;=hi;i++) count[ a[i].charAt(d)+2 ]++;//charAt(end-of-string)=-1  
    for(int i=0;i&amp;lt;R;i++) count[i+1] += count[i]; //cumsum  
    for(int i=lo;i&amp;lt;=hi;i++) aux[count[a[i].charAt(d)+1]++] = a[i];  
    for(int i=lo;i&amp;lt;=hi;i++) a[i] = aux[i-lo];// attention: aux is filled from index 0 instead of lo  
    //recursively sort each subarray (R subarrays in total, ranges stored in count[])  
    for(int r=0;r&amp;lt;R;r++)  
        sort(a, aux,lo+count[r], lo+count[r+1]-1, d+1);  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;analysis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;can recycle &lt;code&gt;aux[]&lt;/code&gt;, but &lt;em&gt;not&lt;/em&gt; &lt;code&gt;count[]&lt;/code&gt;.   &lt;/li&gt;
&lt;li&gt;too slow for small subarrays (if len(subarray)&amp;lt;&amp;lt;R)  &lt;/li&gt;
&lt;li&gt;huge nb of subarrays because of recursion   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;improvement ⇒ cutoff to insertion sort...   &lt;/p&gt;
&lt;p&gt;characteristics of MSD sort: &lt;br /&gt;
examines &lt;strong&gt;just enough chars&lt;/strong&gt; to sort. &lt;br /&gt;
→ can be sublinear in N. &lt;br /&gt;
&lt;img alt="" src="algoII_week3_2/pasted_image011.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;MSD vs. quicksort&lt;/h3&gt;
&lt;p&gt;disadvantages for MSD:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;random access of memory (cache inefficient)  &lt;/li&gt;
&lt;li&gt;too many instructions in inner loop   &lt;/li&gt;
&lt;li&gt;extra space for count[]  &lt;/li&gt;
&lt;li&gt;extra space for aux[]  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;disadvantages for qsort:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NlgN nb of string compares  &lt;/li&gt;
&lt;li&gt;has to rescan many chars for keys with &lt;em&gt;long prefix matches&lt;/em&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;5. 3-way Radix Quicksort&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;⇒ combine benefits of qsort and MSD.&lt;/em&gt; &lt;br /&gt;
&lt;img alt="" src="algoII_week3_2/pasted_image015.png" /&gt;&lt;br /&gt;
idea: do &lt;strong&gt;3-way partition by the dth character&lt;/strong&gt;. &lt;br /&gt;
&lt;img alt="" src="algoII_week3_2/pasted_image013.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;less overhead than &lt;em&gt;R-way&lt;/em&gt; partitioning for MSD  &lt;/li&gt;
&lt;li&gt;do not re-examine chars equal to the partitioning char  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week3_2/pasted_image014.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;Implementation&lt;/h3&gt;
&lt;p&gt;modification of the 3-way qsort.   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;private&lt;/span&gt; &lt;span class="nt"&gt;static&lt;/span&gt; &lt;span class="nt"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;String&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;int&lt;/span&gt; &lt;span class="nt"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;int&lt;/span&gt; &lt;span class="nt"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;int&lt;/span&gt; &lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="n"&gt;pointers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gt&lt;/span&gt;  
    &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lo&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="n"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;invariant&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;hi&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt;  
        &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charAt&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
        &lt;span class="n"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;exch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
        &lt;span class="n"&gt;else&lt;/span&gt; &lt;span class="n"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;exch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
        &lt;span class="n"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;3-way&lt;/span&gt; &lt;span class="nt"&gt;partition&lt;/span&gt;  
    &lt;span class="nt"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;lo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;lt-1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
    &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;pivot&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;gt&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);//&lt;/span&gt;&lt;span class="nt"&gt;pivot&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt; &lt;span class="nt"&gt;means&lt;/span&gt; &lt;span class="nt"&gt;end-of-string&lt;/span&gt;  
    &lt;span class="nt"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;gt&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;analysis&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;wrt. qsort:&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from NlgN &lt;strong&gt;string&lt;/strong&gt; compares to NlgN &lt;strong&gt;char&lt;/strong&gt; compares.  &lt;/li&gt;
&lt;li&gt;avoids re-comparing long common prefixes.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;wrt. MSD:&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;short inner loop  &lt;/li&gt;
&lt;li&gt;cache friendly  &lt;/li&gt;
&lt;li&gt;in-place  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week3_2/pasted_image016.png" /&gt;  &lt;/p&gt;
&lt;h1&gt;6. Suffix Arrays&lt;/h1&gt;
&lt;p&gt;(&lt;em&gt;some applications of suffix array)&lt;/em&gt;  &lt;/p&gt;
&lt;h3&gt;keyword-in-context search&lt;/h3&gt;
&lt;p&gt;given N chars (N huge), &lt;em&gt;preprocess&lt;/em&gt; it to enable fast substring search. &lt;br /&gt;
⇒ suffix sort  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;generate suffix array (linear time &amp;amp; space )  &lt;/li&gt;
&lt;li&gt;sort on the suffix ⇒ brings repeated suffixes together  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week3_2/pasted_image017.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;longest repeated substring&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;brute force algorithm  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;try all i, j as starts of indices, then compute longest common prefix (LCP)&lt;br /&gt;
→ O(D*N2) where D is length of longest repeated substring.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⇒ use suffix array   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sorting suffix array will bring repeated substrings together&lt;br /&gt;
java code:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//int lcp(String s1, String s2) defined  
public static lrs(String s){  
    int N = s.length;  
    String[] suffix = new String[N];  
    for(int i=0;i&amp;lt;N;i++) suffix[i] = s.substring(i);//construct suffix array  
    Arrays.sort(suffix);// sort suffix array ==&amp;gt; using 3-way radix sort   
    // one pass to get longest repeated substring (bigest lcp)  
    String lrs = &amp;quot;&amp;quot;;  
    for(int i=0;i&amp;lt;N-1;i++){  
        int lcp = lcp(suffix[i], suffix[i+1]);  
        if(lcp&amp;gt;lrs.length) lrs = suffix[i].substring(0, lcp);  
    }  
    return lrs;  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;lrs worst-case input&lt;/strong&gt;: &lt;em&gt;lrs very long&lt;/em&gt; (say N/2). &lt;br /&gt;
⇒ &lt;em&gt;quadratic&lt;/em&gt; for lrs and for sorting. &lt;br /&gt;
&lt;img alt="" src="algoII_week3_2/pasted_image018.png" /&gt;  &lt;/p&gt;
&lt;p&gt;→ &lt;em&gt;improvement of lrs for worst-case performance:&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;Manber-Myers algo&lt;/strong&gt;&lt;br /&gt;
sketch:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;phase 0: sort suffix[] on 1st char   &lt;/li&gt;
&lt;li&gt;phase i: given suffix[] is sorted based on first 2^(i-1) chars → create suffix[] sorted on first 2^i chars.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;each phase: double the nb of chars sorted on. &lt;br /&gt;
maintain an inverse[] array, to make comparisons constant time. &lt;br /&gt;
performance: NlgN  &lt;/p&gt;
&lt;h2&gt;String sorting summery&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;can have linear sort: use chars as array index  &lt;/li&gt;
&lt;li&gt;sublinear sort: not all date need to be examined  &lt;/li&gt;
&lt;li&gt;3-way radix qsort is &lt;em&gt;asymptotically optimal&lt;/em&gt;  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 3-1 Maximum Flow</title><link href="http://x-wei.github.io/algoII_week3_1.html" rel="alternate"></link><published>2015-11-17T00:00:00+01:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoII_week3_1.html</id><summary type="html">&lt;h1&gt;1. Introduction to Maxflow&lt;/h1&gt;
&lt;h3&gt;Min-cut pb&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;input: edge-weighted digraph G, each edge &lt;code&gt;e&lt;/code&gt; has weight(&lt;em&gt;"capacity"&lt;/em&gt;) &lt;code&gt;c[e]&lt;/code&gt;&amp;gt;=0, a &lt;em&gt;source vertex&lt;/em&gt; &lt;code&gt;s&lt;/code&gt;, a &lt;em&gt;target vertex&lt;/em&gt; &lt;code&gt;t&lt;/code&gt;.    &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;def&lt;/strong&gt;. an &lt;strong&gt;st-cut &lt;/strong&gt;&lt;code&gt;(A,B)&lt;/code&gt; is a partition of vertices into 2 disjoint sets A and B, with &lt;code&gt;s&lt;/code&gt; in set &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; in set &lt;code&gt;B&lt;/code&gt;.    &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;def&lt;/strong&gt;. the &lt;strong&gt;capacity&lt;/strong&gt; of a cut &lt;code&gt;(A,B)&lt;/code&gt; is sum of capacities of edges going &lt;em&gt;from A to B&lt;/em&gt; &lt;em&gt;(not considering B to A)&lt;/em&gt;.    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week3_1/pasted_image.png" /&gt; &lt;br /&gt;
⇒ min-cut pb: find the cut &lt;strong&gt;(A,B)&lt;/strong&gt; with min-capacity.    &lt;/p&gt;
&lt;h3&gt;Max-flow pb&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;same input: graph G, source s, target t   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;def.&lt;/strong&gt; an &lt;strong&gt;st-flow&lt;/strong&gt; is an assignment of values to edges &lt;code&gt;f: e→f[e]&lt;/code&gt; such that:    &lt;ul&gt;
&lt;li&gt;capacity constraint: &lt;code&gt;0&amp;lt;=f[e]&amp;lt;=c[e]&lt;/code&gt; for any e;   &lt;/li&gt;
&lt;li&gt;local equilibrium: for any vertex v (other than s or t), &lt;em&gt;inflow=outflow&lt;/em&gt;;   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;def.&lt;/strong&gt; the &lt;strong&gt;value&lt;/strong&gt; of a flow &lt;code&gt;f&lt;/code&gt; is the inflow at &lt;code&gt;t&lt;/code&gt;. (assume no ingoing edge to s or outgoing edge to t)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week3_1/pasted_image001.png" /&gt; &lt;br /&gt;
⇒ max-flow pb: find &lt;code&gt;f&lt;/code&gt; with max value.    &lt;/p&gt;
&lt;p&gt;remark: max-flow and min-cut are dual problems.    &lt;/p&gt;
&lt;h1&gt;2. Ford-Fulkerson Algorithm&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;def.&lt;/strong&gt; given a flow &lt;code&gt;f&lt;/code&gt; for a graph, an &lt;strong&gt;"augment path"&lt;/strong&gt; is an &lt;strong&gt;undirected&lt;/strong&gt; path form &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;, if there exist &lt;code&gt;df&amp;gt;0&lt;/code&gt; (&lt;em&gt;"bottleneck capacity"&lt;/em&gt;) such that:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for forward edges e: can augment flow by &lt;code&gt;df&lt;/code&gt; (not full: &lt;code&gt;f[e]+df&amp;lt;=c[e]&lt;/code&gt;)   &lt;/li&gt;
&lt;li&gt;for backward edges: can decrease flow by &lt;code&gt;df&lt;/code&gt; (not empty: &lt;code&gt;f[e]-df&amp;gt;=0&lt;/code&gt;)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week3_1/pasted_image002.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;def. &lt;strong&gt;residual capacity&lt;/strong&gt;   &lt;ul&gt;
&lt;li&gt;for forward edge e, &lt;em&gt;residual-cap = c[e]-f[e]&lt;/em&gt;   &lt;/li&gt;
&lt;li&gt;for backward edge e, &lt;em&gt;residual-cap = f[e]&lt;/em&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ an aug-path is a path where &lt;em&gt;each edge has residual capacity &amp;gt;0&lt;/em&gt;.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;blocking edges&lt;/strong&gt;: &lt;em&gt;full forward edge&lt;/em&gt; or &lt;em&gt;empty backward edge.&lt;/em&gt;   &lt;/p&gt;
&lt;p&gt;→ idea: increase flow along augment paths. &lt;br /&gt;
&lt;strong&gt;[algo]&lt;/strong&gt;   &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;start: 0 flow: &lt;code&gt;f[e]=0&lt;/code&gt; for all e.    &lt;/li&gt;
&lt;li&gt;find an augment path (and the corresponding &lt;code&gt;df&lt;/code&gt;) in graph, and change the flows along the path by &lt;code&gt;+/-df&lt;/code&gt;.   &lt;/li&gt;
&lt;li&gt;loop until no augment path exists. (ie. all path s→t are blocked either by a &lt;em&gt;full forward edge&lt;/em&gt; or an &lt;em&gt;empty backward edge, &lt;/em&gt;ie. by an edge with 0 residual capacity)   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week3_1/pasted_image003.png" /&gt;   &lt;/p&gt;
&lt;p&gt;FF is a gernel algorithm:  &lt;br /&gt;
&lt;img alt="" src="algoII_week3_1/pasted_image004.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;3. Maxflow-Mincut Theorem&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;def&lt;/strong&gt;. for a cut (A,B), the &lt;strong&gt;net flow&lt;/strong&gt; across the cut (&lt;em&gt;netflow(A,B)&lt;/em&gt;) is the sum of flows from A to B minus flows from B to A.    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[flow-value Lemma]&lt;/strong&gt;  &lt;br /&gt;
For any flow &lt;code&gt;f&lt;/code&gt; and any cut &lt;code&gt;(A,B)&lt;/code&gt;⇒  &lt;em&gt;netflow(A,B) = value(f).&lt;/em&gt;  &lt;br /&gt;
&lt;em&gt;pf.&lt;/em&gt;  &lt;br /&gt;
induction on the size of set B. &lt;br /&gt;
&lt;em&gt; base case, when B={t}, by def we have &lt;/em&gt;netflow(A,B) = value(f)&lt;em&gt; &lt;br /&gt;
&lt;/em&gt; when moving any vertex v from A to B: &lt;br /&gt;
    * netflow(A, B) augment by &lt;em&gt;flow(A→v)+flow(B→v)=inflow(v)&lt;/em&gt;,  &lt;br /&gt;
    * netflow(A, B) decrease by &lt;em&gt;flow(v→A)+flow(v→B)=outflow(v)&lt;/em&gt;,  &lt;br /&gt;
    * by equilibrium of flow, &lt;em&gt;netflow(A',B')=netflow(A,B)=value(f)&lt;/em&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ex. (A: gray vertices, B: white vertices) &lt;br /&gt;
&lt;img alt="" src="algoII_week3_1/pasted_image005.png" /&gt;   &lt;/p&gt;
&lt;p&gt;[cor] &lt;em&gt;outflow(s)=inflow(t)=value(f)&lt;/em&gt;   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[weak duality]&lt;/strong&gt; &lt;br /&gt;
For &lt;em&gt;any&lt;/em&gt; flow &lt;code&gt;f&lt;/code&gt; and &lt;em&gt;any&lt;/em&gt; cut &lt;code&gt;(A,B)&lt;/code&gt;, ⇒ &lt;em&gt;value(f) &amp;lt;= capacity(A,B).&lt;/em&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Augmenting path Th]&lt;/strong&gt;  &lt;br /&gt;
A flow &lt;code&gt;f&lt;/code&gt; is maxflow &lt;em&gt;iff&lt;/em&gt; there is no augment path.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[maxflow-mincut Th]&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;value(maxflow) = capacity(mincut).&lt;/strong&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;pf.&lt;/em&gt; &lt;br /&gt;
for any flow &lt;code&gt;f&lt;/code&gt;, prove the equivalence of the 3 following statements: &lt;br /&gt;
i. there exists a cut st: &lt;em&gt;capacity(cut) = value(f).&lt;/em&gt; &lt;br /&gt;
ii. &lt;code&gt;f&lt;/code&gt; is a maxflow. &lt;br /&gt;
iii. there is no augmenting path wrt &lt;code&gt;f&lt;/code&gt;.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[i⇒ii]   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;suppose cut(A,B) st: &lt;em&gt;capacity(A,B)=value(f)&lt;/em&gt; &lt;br /&gt;
⇒ by weak duality, for any other flow f', &lt;em&gt;vlaue(f')&amp;lt;=capacity(A,B)=value(f)&lt;/em&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ii⇒iii] (eqv to prove ~iii⇒~ii)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;suppose there is an aug-path from s to t, of bottleneck capacity=df, &lt;br /&gt;
⇒ by improving f with df, we get a f' &amp;gt; f   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[iii⇒i]   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;suppose there is no aug-path, ie, &lt;em&gt;all path from s to t are blocked by some full-forward edge or empty backward edge.&lt;/em&gt; &lt;br /&gt;
⇒ let A:=vertices connected with s by a path with no blocking edges, and B := the rest &lt;br /&gt;
(&lt;em&gt;so&lt;/em&gt; &lt;em&gt;once we get a maxflow, we can &lt;strong&gt;&lt;em&gt;compute the mincut&lt;/em&gt;&lt;/strong&gt; in this way&lt;/em&gt;) &lt;br /&gt;
&lt;img alt="" src="algoII_week3_1/pasted_image006.png" /&gt; &lt;br /&gt;
→ for all edges across A and B, all forward edges are full, all backward edges are empty &lt;br /&gt;
⇒ capacity(A,B) = netflow(A,B) = value(f) by flow-value lemma &lt;br /&gt;
CQFD... 过瘾...   &lt;/p&gt;
&lt;h1&gt;4. Running Time Analysis&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week3_1/pasted_image007.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getting a mincut form maxflow? → easy (as discussed in the pf above)   &lt;/li&gt;
&lt;li&gt;computing an aug-path? → &lt;strong&gt;BFS&lt;/strong&gt;   &lt;/li&gt;
&lt;li&gt;does FF algo always terminate? how many augmentations? → ...   &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;integer capacity graphs&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;special case of FF algo&lt;/em&gt;: edge capacities are &lt;em&gt;integers&lt;/em&gt; between 1 and U.    &lt;/p&gt;
&lt;p&gt;invariant: flow is always integer all along FF algo.   &lt;/p&gt;
&lt;p&gt;[prop] nb of augmentations &amp;lt;= value of maxflow. &lt;br /&gt;
pf. each augmentation will add flow by &amp;gt;=1.    &lt;/p&gt;
&lt;p&gt;[integrality Th] There exist an integer-valued maxflow.    &lt;/p&gt;
&lt;h3&gt;Bad case for FF&lt;/h3&gt;
&lt;p&gt;nb of augmentation == value of maxflow &lt;br /&gt;
(each time, the path through the middle edge is chosen as aug-path) &lt;br /&gt;
&lt;img alt="" src="algoII_week3_1/pasted_image008.png" /&gt; &lt;br /&gt;
&lt;strong&gt;can be easily avoided&lt;/strong&gt;⇒  by using shortest(nb of edges)/fastest(biggest df) path  &lt;br /&gt;
&lt;img alt="" src="algoII_week3_1/pasted_image010.png" /&gt;   &lt;/p&gt;
&lt;p&gt;Performance of FF depends on the algo for choosing aug-path: &lt;br /&gt;
&lt;img alt="" src="algoII_week3_1/pasted_image009.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;5. Java Implementation&lt;/h1&gt;
&lt;h3&gt;representation of flow graph&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;flow edge:   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;each e= v→w, have flow f[e] and capacity c[e].   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flow graph:   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;put e in both v and w's adj-list.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flow augmentation (by delta)   &lt;ul&gt;
&lt;li&gt;for forward edge e, f[e] += delta   &lt;/li&gt;
&lt;li&gt;for backward edge e, f[e] -= delta   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Residual graph Gr&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;def&lt;/strong&gt;. For a flow &lt;code&gt;f&lt;/code&gt; and a graph &lt;code&gt;G&lt;/code&gt;,  the &lt;strong&gt;residual graph&lt;/strong&gt; &lt;code&gt;Gr&lt;/code&gt; is obtained by:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;for each edge &lt;code&gt;e=v→w&lt;/code&gt;, (with &lt;code&gt;c[e]&lt;/code&gt; and &lt;code&gt;f[e]&lt;/code&gt;) in &lt;code&gt;G&lt;/code&gt;, put in &lt;code&gt;Gr&lt;/code&gt;: &lt;br /&gt;
&lt;em&gt; &lt;code&gt;e1=v→w&lt;/code&gt;, with weight=&lt;code&gt;c[e]-f[e]&lt;/code&gt; &lt;br /&gt;
&lt;/em&gt; &lt;code&gt;e2=w→v&lt;/code&gt;, with weight=&lt;code&gt;f[e]&lt;/code&gt; (即两个方向上的weight都为residual capacity)   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(rmq: &lt;code&gt;Gr&lt;/code&gt; is just a weighted digraph, not a flow graph)   &lt;/p&gt;
&lt;p&gt;[prop] &lt;strong&gt;Augment path in &lt;/strong&gt;&lt;code&gt;G&lt;/code&gt;&lt;strong&gt; is equivalent to a path in &lt;/strong&gt;&lt;code&gt;Gr&lt;/code&gt; (&lt;code&gt;df&lt;/code&gt; of aug-path in &lt;code&gt;G&lt;/code&gt; = min edge weight in &lt;code&gt;Gr&lt;/code&gt;)&lt;strong&gt;.&lt;/strong&gt; &lt;br /&gt;
(但是实现的时候其实不用显式构造Gr, 只需BFS的时候修改一下即可) &lt;br /&gt;
&lt;img alt="" src="algoII_week3_1/pasted_image011.png" /&gt;   &lt;/p&gt;
&lt;h3&gt;APIs&lt;/h3&gt;
&lt;p&gt;这里的API设计的非常合理... 导致每一部分的代码量都不大... NB   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;flow-edge:  &lt;br /&gt;
rmq. both calculate residual-cap and augmentation need to specify a &lt;em&gt;direction&lt;/em&gt;, so we need a index v as parameter for these 2 functions.    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class FlowEdge{   
    private final int v, w;   
    private final double capacity;   
    private double flow=0.0;   
    FlowEdge(int v, int w, double cap);   
    int from();   
    int to();   
    int other(int v);   
    double capacity();   
    double flow();   
    double residualCapTo(int v);// residual capacity   
    void addFlowTo(int v, double delta);// augment residual flow   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;flow graph:  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class FlowNetwork{   
    private Bag&amp;lt;FlowEdge&amp;gt;[] adj;//use adj-list representation for flow graph   
    FlowNetwork(int V);   
    void addEdge(FlowEdge e);   
    Iterable&amp;lt;FlowEdge&amp;gt; adj(int v);// both incoming and outgoing edges   
    ...   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FF algo:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use a function &lt;code&gt;hasAugPath()&lt;/code&gt; to test termination   &lt;/li&gt;
&lt;li&gt;use a function &lt;code&gt;bottleNeck()&lt;/code&gt; to get delta   &lt;/li&gt;
&lt;li&gt;if a augpath is found, use two arrays &lt;code&gt;reached[]&lt;/code&gt; and &lt;code&gt;edgeTo[]&lt;/code&gt; to get the augpath (find the path &lt;em&gt;backwards&lt;/em&gt;).    &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;code:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class FordFulkerson{   
private boolean[] reached; //reached[v] indicates if a path s--&amp;gt;v exists in Gr, used in DFS   
private FlowEdge[] edgeTo;// edgeTo[v] = last edge on the path s--&amp;gt;v   
private double value=0.0;// value of flow   
public FordFulkerson(FlowNetwork G, int s, int t){   
    while(this.hasAugPath(G,s,t)){   
        double delta = this.bottleNeck();   
        for(int v=t; v!=s; v=edgeTo[v].other(v))   
            edgeTo[v].addFlowTo(v, delta);   
        this.value += delta;// each time the flow value augments by delta   
    }   
}   
private double bottleNeck(){//bottleneck-cap = min residual flow on the aut-path   
    double bottleneck = 9999999;   
    assert(reached[t]);// the aug-path should exsit   
    for(int v=t; v!=s; v = edgeTo[v].other(v))   
        bottleneck = Math.min(bottleneck, edgeTo[v].);   
    return bottleneck;   
}   
private boolean hasAugPath(FlowNetwork G, int s, int t){   
    // perform a BFS    
    Queue&amp;lt;Integer&amp;gt; q = new LinkedList&amp;lt;Integer&amp;gt;();   
    this.reached = new boolean[G.V()];   
    this.edgeTo = new FlowEdge[G.V()];   
    q.add(s);   
    while(!q.isEmpty()){   
        int v = q.deque();   
        for(FlowEdge e:G.adj(v)){   
            int w = e.other(v);   
            if(!reached[w] &amp;amp;&amp;amp; e.residualCapTo(w)&amp;gt;0){// modified BFS: valid edges are those with  residualCap&amp;gt;0   
                edgeTo[w] = e;   
                reached[w] = true;   
                if(w==t) return true;// t is reached by BFS  
                q.enqueue(w);   
            }   
        }   
    }// BFS while loop    
    return false;   
}   
}//class FF
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;6. Maxflow Applications&lt;/h1&gt;
&lt;p&gt;关键是建模很巧妙... &lt;br /&gt;
&lt;img alt="" src="algoII_week3_1/pasted_image012.png" /&gt;   &lt;/p&gt;
&lt;h3&gt;ex1. bipartite matching pb&lt;/h3&gt;
&lt;p&gt;二分图的最大匹配问题. (有点像marriage stable问题...但是不一样 因为没有preference order) &lt;br /&gt;
&lt;img alt="" src="algoII_week3_1/pasted_image013.png" /&gt; &lt;br /&gt;
⇒ is there a way to match all students to a job? &lt;br /&gt;
ie. &lt;em&gt;given a bipartite graph, find a perfect matching.&lt;/em&gt;  &lt;br /&gt;
&lt;img alt="" src="algoII_week3_1/pasted_image014.png" /&gt; &lt;br /&gt;
&lt;strong&gt;modeling&lt;/strong&gt;   &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;add source &lt;code&gt;s&lt;/code&gt; and target &lt;code&gt;t&lt;/code&gt;   &lt;/li&gt;
&lt;li&gt;all edges from &lt;code&gt;s&lt;/code&gt; to students: capacity=1   &lt;/li&gt;
&lt;li&gt;all edges from companies to &lt;code&gt;t&lt;/code&gt;: capacity=1   &lt;/li&gt;
&lt;li&gt;all edges from student to company: capacity=INF   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;⇒ find maxflow in the graph &lt;br /&gt;
&lt;img alt="" src="algoII_week3_1/pasted_image015.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;when no perfect matching: mincut can explain why&lt;/strong&gt;  &lt;br /&gt;
&lt;img alt="" src="algoII_week3_1/pasted_image016.png" /&gt; &lt;br /&gt;
in the above case, student 2,4,5 can only be matched to 7,10 &lt;br /&gt;
⇒ mincut can help us find such cases!   &lt;/p&gt;
&lt;p&gt;&lt;em&gt;recall: how to get mincut from maxflow&lt;/em&gt;   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mincut = (A,B), where: &lt;br /&gt;
A:=vertices connected with s by a path with non blocking edges,  &lt;br /&gt;
B := the rest &lt;br /&gt;
(&lt;em&gt;blocking edges: full forward edge or empty backward edge on path&lt;/em&gt;)   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ex. &lt;br /&gt;
&lt;img alt="" src="algoII_week3_1/pasted_image017.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;let S=students on s side of mincut (in above case, &lt;em&gt;S={2,4,5}&lt;/em&gt;)   &lt;/li&gt;
&lt;li&gt;let T=companies on s side of mincut (in above case, T&lt;em&gt;={7,10}&lt;/em&gt;)   &lt;/li&gt;
&lt;li&gt;|S|&amp;gt;|T|, that's why no perfect matching!   &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ex2. baseball elimination&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week3_1/pasted_image018.png" /&gt; &lt;br /&gt;
(前三列是目前成绩, 后面四列是接下来赛程矩阵) &lt;br /&gt;
Montreal is mathematically eliminated → easy to see &lt;br /&gt;
→ Philly is mathematically eliminated also !   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;another case:   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week3_1/pasted_image019.png" /&gt; &lt;br /&gt;
Detroit is mathematically eliminated ! &lt;br /&gt;
&lt;img alt="" src="algoII_week3_1/pasted_image020.png" /&gt; &lt;br /&gt;
whether team-4 still has a chance to win? &lt;br /&gt;
&lt;strong&gt;modelling&lt;/strong&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;remaining games flow from s to t.    &lt;/li&gt;
&lt;li&gt;use team-pairs ans teams as vertices   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;carefully chosen capacities&lt;/em&gt;(see below)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week3_1/pasted_image021.png" /&gt; &lt;br /&gt;
⇒ team 4 could win iff all flow from s are full (ie. all match points can be repartitioned over other teams &lt;em&gt;without depassing team 4's maximum wins&lt;/em&gt;). &lt;br /&gt;
总之很巧妙....   &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 2-2 Shortest Paths</title><link href="http://x-wei.github.io/algoII_week2_2.html" rel="alternate"></link><published>2015-11-15T00:00:00+01:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoII_week2_2.html</id><summary type="html">&lt;h1&gt;1. Shortest Paths APIs&lt;/h1&gt;
&lt;p&gt;context: &lt;em&gt;directe, weighted graphs&lt;/em&gt;.     &lt;/p&gt;
&lt;h3&gt;shortest path variants&lt;/h3&gt;
&lt;p&gt;in terms of vertices:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;source-sink: form one vertex to another   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;single source&lt;/strong&gt;: from one vertex to all others (considered in this lecture)   &lt;/li&gt;
&lt;li&gt;all pairs   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;constraints on edge weights:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nonnegative weights    &lt;/li&gt;
&lt;li&gt;arbitary weights   &lt;/li&gt;
&lt;li&gt;eculidean    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cycles:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no directed cycles   &lt;/li&gt;
&lt;li&gt;no negative cycles   &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;APIs&lt;/h3&gt;
&lt;p&gt;for weighted directed edge:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class DirectedEdge{   
    DirectedEdge(int v, int w, double weight);   
    int from();   
    int to();   
    double weight();   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;for edge-weighted digraph:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class EdgeWeightedDigraph{   
    private final Bag&amp;lt;DirectedEdge&amp;gt;[] adj;    
    EdgeWeightedDigraph(int V);   
    void addEdge(DirectedEdge e);   
    Iterable&amp;lt;DirectedEdge&amp;gt; adj(int v);   
    int V();   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;for single source shortest-path:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class SP{   
    SP(EdgeWeightedDigraph G, int s);//s is the source node   
    double distTo(int v);//dist from s to v   
    Iterable&amp;lt;DirectedEdge&amp;gt; pathTo(int v);// shortest path from s to v   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;2. Shortest path properties&lt;/h1&gt;
&lt;p&gt;goal: single-source shortest path &lt;br /&gt;
&lt;strong&gt;prop&lt;/strong&gt;. a &lt;strong&gt;shortest-path-tree&lt;/strong&gt; (SPT) exists.  &lt;br /&gt;
这个结论以前没见过... 不太evident吧... 没有太想明白 &lt;br /&gt;
&lt;img alt="" src="algoII_week2_2/pasted_image.png" /&gt; &lt;br /&gt;
⇒ consequence: can represent this SPT by 2 vertex-indexted arrays:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;double distTo[v]&lt;/code&gt; = shortest path length s → v   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;DirectedEdge edgeTo[v]&lt;/code&gt; = last edge to v in shortest path, &lt;code&gt;edgeTo[s] = null&lt;/code&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week2_2/pasted_image001.png" /&gt;   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private int distTo[] = new int[V];   
private DirectedEdge edgeTo[] = new DirectedEdge[V];   
public double distTo(int v){   
    return this.distTo[v];   
}   
public Iterable&amp;lt;DirectedEdge&amp;gt; pathTo(int v){   
    Stack&amp;lt;DirectedEdge&amp;gt; path = new Stack&amp;lt;DirectedEdge&amp;gt;();   
    for(DirectedEdge e = this.edgeTo[v]; e!=null; e = edgeTo[e.from])   
        path.push(e);   
    return path;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Edge relaxation&lt;/h3&gt;
&lt;p&gt;dynamic prog:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;distTo[v] = length of &lt;strong&gt;known&lt;/strong&gt; shortest path from s to v   &lt;/li&gt;
&lt;li&gt;distTo[w] = length of &lt;strong&gt;known&lt;/strong&gt; shortest path from s to w   &lt;/li&gt;
&lt;li&gt;edgeTo[w] = last edge in the &lt;strong&gt;known&lt;/strong&gt; shortest path form s to w   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(consider edges one by one) &lt;br /&gt;
&lt;strong&gt;def&lt;/strong&gt;. edge e = v--&amp;gt;w &lt;strong&gt;relaxes&lt;/strong&gt; if e.weight+distTo[v] &amp;lt; distTo[w]. → update distTo[w] and edgeTo[w]. &lt;br /&gt;
&lt;img alt="" src="algoII_week2_2/pasted_image003.png" /&gt;   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private void relax(DirectedEdge e){   
    int v = e.from(), w = e.to();   
    if(distTo[w]&amp;gt;distTo[v]+e.weight()){   
        distTo[w] = distTo[v]+e.weight();   
        edgeTo[w] = e;   
    }   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;optimality conditions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;. optimality conditions &lt;br /&gt;
distTo[] is the solution &lt;em&gt;iff&lt;/em&gt;:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;distTo[s] = 0   &lt;/li&gt;
&lt;li&gt;distTo[v] is the weight of some path from  s to v   &lt;/li&gt;
&lt;li&gt;for any edge e = v → w, distTo[w] &amp;lt;= distTo[v]+e.weight()   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Generic algo&lt;/h3&gt;
&lt;p&gt;just relax all edges... &lt;br /&gt;
&lt;img alt="" src="algoII_week2_2/pasted_image004.png" /&gt; &lt;br /&gt;
&lt;strong&gt;prop&lt;/strong&gt;. the above generic algo gives the SPT from s.    &lt;/p&gt;
&lt;p&gt;implementations of the algo:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dijkstra (nonnegative edge)   &lt;/li&gt;
&lt;li&gt;Topological sort (!) (no directed cycles)   &lt;/li&gt;
&lt;li&gt;Bellman-Ford (no negative directed cycles)   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;3. Dijkstra's Algorithm&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;(non-negative edges)&lt;/em&gt;   &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;consider vertices in increasing distance from s.*    &lt;/li&gt;
&lt;li&gt;add vertex to the SPT, relax all edges from that vertex.    &lt;/li&gt;
&lt;li&gt;each time: take the closest vertex to s that is not in the SPT (ie. whose dist is not determined yet), add the vertex, and relax all its outgoing edges.    &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;. Dijkstra works. &lt;br /&gt;
pf.  &lt;br /&gt;
&lt;em&gt; each edge e = v → w is considered exactly once (when vertex v is added to SPT). distTo[w] &amp;lt;= distTo[v]+e.weight() after relaxing e &lt;br /&gt;
&lt;/em&gt; ineq holds until algo terminates &lt;br /&gt;
    * distTo[w] decrease monotonely, &lt;br /&gt;
    * distTo[v] will not change because each time we choose distTo[v] smallest, and all edges non-negative.  &lt;br /&gt;
* CQFD by optimality condition.   &lt;/p&gt;
&lt;h3&gt;implementation&lt;/h3&gt;
&lt;p&gt;Use an &lt;code&gt;IndexMinPQ&lt;/code&gt; to store vertices.   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class DijkstraSP{   
    private int dist[];   
    private DirectedEdge edgeTo[];   
    private IndexMinPQ&amp;lt;Integer,Double&amp;gt; pq;   
    DijkstraSP(EdgeWeightedDigraph G, int s){   
        this.dist[] = new int[G.V()];   
        this.edgeTo[] = new DirectedEdge[G.V()];   
        this.pq = new IndexMinPQ&amp;lt;Integer,Double&amp;gt;(G.V());   
        for(int v = 0; v&amp;lt;G.V(); v++)  dist[v] = 999999;   
        dist[s] = 0;           
        pq.insert(s, 0.0);   
        while(!pq.isEmpty()){   
            int v = pq.delMin();   
            for(DirectedEdge e:G.adj(v))    
                relax(e);// decrease key or insert vertices to pq   
        }   
    }//constructor()

    private relax(DirectedEdge e){   
        int v = e.from(), w = e.to();   
        if(dist[w]&amp;lt;dist[v]+e.weight()){   
            dist[w] = dist[v]+e.weight();   
            edgeTo[w] = e;   
            if(pq.contains(w)) pq.decreaseKey(w, dist[w]);   
            else pq.insert(w, dist[w]);   
        }   
    }//relax()   
}//class
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Dijkstra is in fact a Prim algorithm ! &lt;/strong&gt;&lt;em&gt;Both are algos that compute a spanning tree.&lt;/em&gt;     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in Prim: each time takes the vertex &lt;em&gt;closest to the tree &lt;/em&gt;(and is for undirected graph).   &lt;/li&gt;
&lt;li&gt;in Dijkstra: each time takes the vertex &lt;em&gt;closest to source s &lt;/em&gt;(and is for directed graph).   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week2_2/pasted_image005.png" /&gt; &lt;br /&gt;
DFS BFS are also computing spanning tree!  &lt;br /&gt;
...NB!!   &lt;/p&gt;
&lt;h3&gt;complexity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;V insertions to PQ (each vertex is added to the SPT)   &lt;/li&gt;
&lt;li&gt;V delMin from PQ    &lt;/li&gt;
&lt;li&gt;E decrease key   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ depends on the PQ implementation.  &lt;br /&gt;
in our implementation, &lt;strong&gt;O(ElogV)&lt;/strong&gt; &lt;br /&gt;
&lt;img alt="" src="algoII_week2_2/pasted_image006.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;4. Edge-Weighted DAGs&lt;/h1&gt;
&lt;p&gt;in a DAG, it's easier to find the shortest path ? &lt;br /&gt;
⇒ yes!  &lt;br /&gt;
simple algo:    &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;consider vertices in topological order   &lt;/li&gt;
&lt;li&gt;relax outgoing edges form this vertex.    &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3&gt;correctness&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;.   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;topo-sort algo computes SPT in any DAG (&lt;em&gt;even with negative weights&lt;/em&gt;) in time &lt;strong&gt;O(E+V) &lt;/strong&gt;&lt;em&gt;(linear time!)&lt;/em&gt;.    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;pf.&lt;/em&gt; &lt;br /&gt;
&lt;em&gt; each edge is relaxed exactely once. distTo[w] &amp;lt;= distTo[v]+e.weight() after relaxing e &lt;br /&gt;
&lt;/em&gt; ineq holds until the algo terminates because:  &lt;br /&gt;
    * distTo[w] decrease monotonely, &lt;br /&gt;
    * distTo[v] will not change because of topo-order, no edge pointing to v after v is relaxed.  &lt;br /&gt;
* CQFD   &lt;/p&gt;
&lt;h3&gt;implementation&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class AsyclicSP{   
    AsyclicSP(EdgeWeightedDigraph G, int s){   
        // init dist[] and edgeTo[]...   
        Topological topo = new Topological(G);   
        for(int v: topo.order())   
            for(DirectedEdge e:G.adj(v))   
                relax(e);   
    }   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;application&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;seam-carving&lt;/em&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Resizing images &lt;em&gt;non-uniformly&lt;/em&gt; without distortion.  &lt;br /&gt;
&lt;img alt="" src="algoII_week2_2/pasted_image008.png" /&gt; &lt;br /&gt;
好神奇! &lt;br /&gt;
Grid DAG of pixels, edges are pointed to 3 downward neighbors. &lt;br /&gt;
横向缩小: 删掉一个"seam" &lt;br /&gt;
&lt;img alt="" src="algoII_week2_2/pasted_image009.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;longest path in DAG → &lt;em&gt;just negate all edge weights&lt;/em&gt;, as this algo is OK for negative edges.    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parallel job scheduling &lt;br /&gt;
&lt;img alt="" src="algoII_week2_2/pasted_image010.png" /&gt; &lt;br /&gt;
感觉有点运筹的意思, 关键是建立一个DAG, 比较有技巧性:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add source and sink    &lt;/li&gt;
&lt;li&gt;split each job to 2 vertices (begin and end)   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week2_2/pasted_image011.png" /&gt; &lt;br /&gt;
⇒ use longest path to schedule jobs   &lt;/p&gt;
&lt;h1&gt;5. Negative Weights&lt;/h1&gt;
&lt;p&gt;只是给所有边增加weight并&lt;strong&gt;不能&lt;/strong&gt;解决负权边问题.  &lt;br /&gt;
&lt;img alt="" src="algoII_week2_2/pasted_image013.png" /&gt; &lt;br /&gt;
⇒ need a different algo.   &lt;/p&gt;
&lt;p&gt;prop. SPT exists &lt;em&gt;iff&lt;/em&gt; there is no &lt;em&gt;negative cycles.&lt;/em&gt;   &lt;/p&gt;
&lt;h3&gt;Bellman-Ford&lt;/h3&gt;
&lt;p&gt;一句话总结Bellman算法: 每次relax所有的边, 进行V次. &lt;br /&gt;
&lt;img alt="" src="algoII_week2_2/pasted_image014.png" /&gt; &lt;br /&gt;
(&lt;em&gt;因为relax k次以后, s到v的最短路径的长度小于等于k.&lt;/em&gt;)   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;. Bellman-Ford works, complexity is &lt;strong&gt;O(EV)&lt;/strong&gt;.  &lt;br /&gt;
pf.  &lt;br /&gt;
after i passes, found shortest path contain at most i edges.    &lt;/p&gt;
&lt;p&gt;code:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class BellmanFordSP{   
    BellmanFordSP(EdgeWeightedDigraph G, int s){   
        // init dist[] and edgeTo[]...   
        for(int i=0;i&amp;lt;G.V();i++)   
            for(DirectedEdge e:G.edges())   
                relax(e);   
    }

}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;improvement&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;if dist[v] is not changed during one pasee → no need to relax incoming edges any more.&lt;/em&gt;  &lt;br /&gt;
    → much faster in practice.    &lt;/p&gt;
&lt;p&gt;FIFO implementation: maintain a queue of vertices whoses dist is changed.    &lt;/p&gt;
&lt;h3&gt;Finding negative cycle&lt;/h3&gt;
&lt;p&gt;add two method to SP:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;boolean hasNegCycle();   
Iterable&amp;lt;DirectedEdge&amp;gt; negCycle();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="algoII_week2_2/pasted_image016.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;.   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;if a vertex u is updated in phase V, there exists a negative cycle, and can track edgeTo[u] to find the cycle.    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原因是最短路径的长度小于V, 如果大于V则说明存在negative cycle.  &lt;/p&gt;
&lt;h3&gt;negative cycle application&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;arbitrage detection&lt;/em&gt; &lt;br /&gt;
&lt;img alt="" src="algoII_week2_2/pasted_image018.png" /&gt; &lt;br /&gt;
建模: 
graph of currencies, edge weight = exchange weight (complete graph). &lt;br /&gt;
    ⇒ &lt;em&gt;find a cycle whose product of edge is &amp;gt;1.&lt;/em&gt;  &lt;br /&gt;
        ⇒ &lt;strong&gt;take logs&lt;/strong&gt; to make a shortest-path pb. &lt;br /&gt;
            ⇒ take minus log, then try to find a negative cycle.  &lt;br /&gt;
&lt;img alt="" src="algoII_week2_2/pasted_image020.png" /&gt; &lt;br /&gt;
NB!!   &lt;/p&gt;
&lt;h1&gt;Summery&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week2_2/pasted_image015.png" /&gt; &lt;br /&gt;
&lt;img alt="" src="algoII_week2_2/pasted_image021.png" /&gt;   &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 2-1 Minimum Spanning Trees</title><link href="http://x-wei.github.io/algoII_week2_1.html" rel="alternate"></link><published>2015-11-11T00:00:00+01:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoII_week2_1.html</id><summary type="html">&lt;h1&gt;1. Introduction to MSTs&lt;/h1&gt;
&lt;p&gt;Given: undirected connecte graph &lt;code&gt;G&lt;/code&gt; with positive edge weights.  &lt;br /&gt;
def. &lt;strong&gt;Spanning tree &lt;/strong&gt;&lt;code&gt;T&lt;/code&gt; &lt;br /&gt;
is a subgraph of &lt;code&gt;G&lt;/code&gt;, that is both tree (&lt;em&gt;connected, acyclic&lt;/em&gt;) and spanning(&lt;em&gt;all vertices are included&lt;/em&gt;).  &lt;br /&gt;
&lt;img alt="" src="algoII_week2_1/pasted_image-0.png" /&gt; &lt;br /&gt;
⇒ Goal: find a spanning tree with minimum weight sum.   &lt;/p&gt;
&lt;h1&gt;2. Greedy Algorithm&lt;/h1&gt;
&lt;p&gt;assumptions for simplification:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edge weights are distinct   &lt;/li&gt;
&lt;li&gt;graph is connected   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ MST uniquely exists.   &lt;/p&gt;
&lt;h2&gt;cut property&lt;/h2&gt;
&lt;p&gt;def. a &lt;strong&gt;cut&lt;/strong&gt; of a graph is a partition of its vertices into 2 non-empty sets. &lt;br /&gt;
def. a &lt;strong&gt;crossing-edge&lt;/strong&gt; (wrt a cut) is an edge connecting vertex from one set to another. &lt;br /&gt;
&lt;img alt="" src="algoII_week2_1/pasted_image001-0.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;prop. &lt;/strong&gt;Given any cut, the crossing edges with minimum weight &lt;em&gt;is in the MST&lt;/em&gt;.  &lt;br /&gt;
&lt;img alt="" src="algoII_week2_1/pasted_image002-0.png" /&gt; &lt;br /&gt;
&lt;em&gt;proof.&lt;/em&gt; &lt;br /&gt;
Given a cut. {S1,S2} are the two set of vertices,  let &lt;code&gt;e&lt;/code&gt; be the min-weighted edge among all crossing-edges.   &lt;/p&gt;
&lt;p&gt;If &lt;code&gt;e&lt;/code&gt; is not in the MST &lt;br /&gt;
   → exist another crossing-edge, &lt;code&gt;f&lt;/code&gt;, in the MST (otherwise not connected) &lt;br /&gt;
    → adding &lt;code&gt;e&lt;/code&gt; to the MST will create a cycle (tree property) &lt;br /&gt;
        → the edge &lt;code&gt;f&lt;/code&gt; will be in this cycle &lt;br /&gt;
        → removing &lt;code&gt;f&lt;/code&gt; and adding &lt;code&gt;e&lt;/code&gt; will give us another spanning tree (!) &lt;br /&gt;
                → this new spanning tree has smaller weight sum ⇒ contradiction, CQFD.   &lt;/p&gt;
&lt;h2&gt;Greedy MST algo&lt;/h2&gt;
&lt;p&gt;[&lt;strong&gt;algo&lt;/strong&gt; ] Greedy MST  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;initialize: all edges not selected (colored gray)   &lt;/li&gt;
&lt;li&gt;find any cut with &lt;em&gt;all crossing-edge gray&lt;/em&gt;   &lt;/li&gt;
&lt;li&gt;use this cut and select the min-weighted crossing edge (color the edge as black)   &lt;/li&gt;
&lt;li&gt;repeat V-1 times.    &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;prop.&lt;/strong&gt; the greedy algorithm gets the MST.  &lt;br /&gt;
&lt;em&gt;pf.&lt;/em&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;any selected (black) edges are in the MST (according to the cut property)   &lt;/li&gt;
&lt;li&gt;If we haven't selected V-1 edges → there is always a cut with all crossing-edges gray. (证明algo不会卡死)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;em&gt;if edge weight not distinct, the proof fails, but can be fixed)&lt;/em&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;efficient implementations&lt;/strong&gt;:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to choose the cut each time?   &lt;/li&gt;
&lt;li&gt;how to find min-weighted crossing-edge?    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ Kruskal &amp;amp; Prim   &lt;/p&gt;
&lt;h1&gt;3. Edge-Weighted Graph API&lt;/h1&gt;
&lt;h2&gt;Edge API&lt;/h2&gt;
&lt;p&gt;→ &lt;em&gt;Edge abstraction&lt;/em&gt;: make Edge comparable.   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Edge implements Comparable&amp;lt;Edge&amp;gt;{   
    Edge(int v, int w, double weight);   
    int either();// get one of the endpoint of edge (as we are in undirected graph contex here)   
    int other(int v);// get the other endpoint    
    int compareTo(Edge that);// compare by edge weight   
    double weight();   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="algoII_week2_1/pasted_image.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;Edge-weighted Graph API&lt;/h2&gt;
&lt;p&gt;adj-list implementation: &lt;code&gt;Bag&amp;lt;Edge&amp;gt;[] adj;&lt;/code&gt;(for undirected graph, each edge appears twice in adj)   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class EdgeWeightedGraph{   
    private final int V;   
    private final Bag&amp;lt;Edge&amp;gt;[] adj;   
    EdgeWeightedGraph(int V){   
        this.V = V;   
        this.adj = (Bag&amp;lt;Edge&amp;gt;)new Bag[V];   
        for(int v=0;v&amp;lt;V;v++) adj[v] = new Bag&amp;lt;Edge&amp;gt;();   
    }   
    void addEdge(Edge e){// use the Edge class instead of directly v and w   
        int v = e.either(), w = e.other();   
        adj[v].add(e);   
        adj[w].add(e);   
    }   
    Iterable&amp;lt;Edge&amp;gt; adj(int v){//get Edges incident to v   
        return adj[v];   
    }   
    Iterable&amp;lt;Edge&amp;gt; edges();// get all Edges   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(allow self-loops and parallel edges)   &lt;/p&gt;
&lt;h2&gt;MST API&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class MST{   
    MST(EdgeWeightedGraph G);//compute the MST   
    Iterable&amp;lt;Edge&amp;gt; edges();// selected edges in the MST   
    double weight();// sum of all edge weights in MST   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;4.  Kruskal's Algorithm&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;[algo]&lt;/strong&gt;    &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;consider edges in ascending order of weight,   &lt;/li&gt;
&lt;li&gt;add the edge to MST &lt;em&gt;unless it creates a cycle&lt;/em&gt;.    &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the running of Kruskal: we have several small connect components and they merge with each other until we get MST.    &lt;/p&gt;
&lt;h2&gt;correctness&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;prop. &lt;/strong&gt;Kruskal's algo works. &lt;br /&gt;
&lt;em&gt;pf&lt;/em&gt; &lt;br /&gt;
(idea: proove that Kruskal is a special case of the greedy algorithm, ie. how to select the specific cut) &lt;br /&gt;
suppose Kruskal's algo selects(colored black) an edge &lt;code&gt;e=v-w&lt;/code&gt; &lt;br /&gt;
→ select a cut = vertices connected to v in the (constructing) MST; and the rest vertices.  &lt;br /&gt;
    → for this cut, there is no black crossing edges &lt;br /&gt;
        → moreover among all crossing edges of the cut the edge e has the smallest weight!! (by def of Kruskal) CQFD   &lt;/p&gt;
&lt;h2&gt;implementation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;how to test if adding an edge will create a cycle ?    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DFS from v to w? → O(V) &lt;br /&gt;
⇒ &lt;strong&gt;Union-Find&lt;/strong&gt; !  O(lg*V) ☺ (almost constant time)   &lt;/p&gt;
&lt;p&gt;if &lt;code&gt;find(v)==find(w)&lt;/code&gt;, then we know adding e will create a cycle.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;considering edges in order? → use a prority queue.    &lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;public&lt;/span&gt; &lt;span class="nt"&gt;class&lt;/span&gt; &lt;span class="nt"&gt;KruskalMST&lt;/span&gt; &lt;span class="nt"&gt;extends&lt;/span&gt; &lt;span class="nt"&gt;MST&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;   
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Bag&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Bag&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;   
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;KruskalMST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EdgeWeightedGraph&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;   
        &lt;span class="n"&gt;MinPQ&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MinPQ&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;   
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;optimized&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;   
        &lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   
        &lt;span class="n"&gt;UF&lt;/span&gt; &lt;span class="n"&gt;uf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;UF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;UF&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;   
        &lt;span class="n"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;mst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;   
            &lt;span class="n"&gt;Edge&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delMin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;   
            &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;either&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   
            &lt;span class="n"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;uf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connecte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
            &lt;span class="n"&gt;uf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;union&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   
            &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;           
        &lt;span class="p"&gt;}&lt;/span&gt;   
    &lt;span class="err"&gt;}&lt;/span&gt;   
    &lt;span class="nt"&gt;public&lt;/span&gt; &lt;span class="nt"&gt;Iterable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;edges&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;   
        &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mst&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
    &lt;span class="p"&gt;}&lt;/span&gt;   
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;complexity&lt;/h2&gt;
&lt;p&gt;running time: O(ElogE) &lt;br /&gt;
&lt;img alt="" src="algoII_week2_1/pasted_image001.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;5. Prim's Algorithm&lt;/h1&gt;
&lt;p&gt;since 1930...  &lt;br /&gt;
Idea: start from a vertex and &lt;em&gt;grows the tree &lt;/em&gt;&lt;code&gt;T&lt;/code&gt;&lt;em&gt; to MST.&lt;/em&gt;    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[algo]&lt;/strong&gt;         &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Add to the tree T the edge &lt;em&gt;that have exactely one endpoint in T&lt;/em&gt; and with minimum weight,  &lt;/li&gt;
&lt;li&gt;repeat V-1 times.    &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the running of Prim: there is always ONE connnected component .    &lt;/p&gt;
&lt;h2&gt;Correctness&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;. Prim's algo works. &lt;br /&gt;
&lt;em&gt;pf.&lt;/em&gt; &lt;br /&gt;
suppose edge e is the min-weighted edge connect a vertex in T with a vertex out of T.  &lt;br /&gt;
→ select the cut = vertices in the tree T; vertices out of T &lt;br /&gt;
→ by def, there is no black crossing edge &lt;br /&gt;
→ e is the min-weighed edge by def of Prim. CQFD   &lt;/p&gt;
&lt;h2&gt;implementation&lt;/h2&gt;
&lt;p&gt;challenge: how to find such an edge (connect T and other vertex, with min weight) ? &lt;br /&gt;
⇒ priority queue    &lt;/p&gt;
&lt;h3&gt;"lazy" implementation&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;[algo]&lt;/strong&gt;    &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Maintain a PQ of edges that connect T and the rest vertices.    &lt;/li&gt;
&lt;li&gt;&lt;code&gt;e = pq.delMin(), e = v-w&lt;/code&gt;,  if &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;w&lt;/code&gt; are both in T (as edges in pq might become obsolete as T grows) ⇒ &lt;em&gt;just disregard it&lt;/em&gt;    &lt;/li&gt;
&lt;li&gt;to maintain the pq: add all incident edges(with other endpoint not in T) of the newly added vertex to pq   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class LazyPrimMST{   
    private Bag&amp;lt;Edge&amp;gt; mst;   
    LazyPrimMST(EdgeWeightedGraph G){   
        boolean[] marked = new boolean[G.V()]; // vertices in T   
        MinPQ&amp;lt;Edge&amp;gt; pq = new MinPQ&amp;lt;Edge&amp;gt;();    
        this.mst = new Bag&amp;lt;Edge&amp;gt;();   
        marked[0] = 0; // add vertex 0 to T   
        for(Edge e:G.adj(0))    
            pq.insert(e);// add edges to pq   
        while(!pq.isEmpty() &amp;amp;&amp;amp; this.mst.size()&amp;lt;G.V()-1){   
            e = pq.delMin();   
            int v = e.either(), w = e.other(v);   
            if(marked[v] &amp;amp;&amp;amp; marked[w]) continue;//ignore obsolete edges   
            v = marked[v] ? w : v;// v is the newly added vertex   
            marked[v] = true;   
            for(Edge e:G.adj(v)){   
                if(!marked[e.other(v)])   
                    pq.insert(e);   
            }   
        }   
    }   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running time: &lt;strong&gt;O(ElgE)&lt;/strong&gt; &lt;br /&gt;
&lt;img alt="" src="algoII_week2_1/pasted_image002.png" /&gt; &lt;br /&gt;
space: &lt;strong&gt;O(E)&lt;/strong&gt; in worst time.   &lt;/p&gt;
&lt;h3&gt;"eager" implementation&lt;/h3&gt;
&lt;p&gt;Idea:    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;use a &lt;strong&gt;PQ of vertices&lt;/strong&gt;&lt;em&gt;, priority of vertex v := min-weight of edge that connects v to T.&lt;/em&gt;    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;[algo]&lt;/strong&gt;   &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Get from pq the vertex &lt;code&gt;v&lt;/code&gt; that is closest to T, add it to T. &lt;br /&gt;
Update pq -- consider &lt;code&gt;v&lt;/code&gt;'s incident edge &lt;code&gt;e=v-w:&lt;/code&gt;   &lt;ul&gt;
&lt;li&gt;if w in T → ignore   &lt;/li&gt;
&lt;li&gt;else:   &lt;ul&gt;
&lt;li&gt;if w in pq → add w to pq   &lt;/li&gt;
&lt;li&gt;else → if &lt;code&gt;v-w&lt;/code&gt; has smaller weight than the current priority, update &lt;code&gt;w&lt;/code&gt;'s priority.      &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;repeat till get V-1 edges.    &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week2_1/pasted_image003.png" /&gt;   &lt;/p&gt;
&lt;p&gt;key implementation component: a &lt;a href="file:///home/wx/Dropbox/ZIM_NOTES/0._TmpNotes/Algorithms%2C_part_II/MinPQ.txt"&gt;MinPQ&lt;/a&gt; that supports priority(key) update.    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;IndexMinPQ&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;Key extends Comparable&amp;lt;Key&amp;gt;&lt;/span&gt;&amp;gt;{   
    &lt;span class="n"&gt;IndexMinPQ&lt;/span&gt;(&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;);// &lt;span class="n"&gt;indices&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;elements:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;...&lt;span class="n"&gt;N-1&lt;/span&gt;   
    &lt;span class="nb"&gt;void&lt;/span&gt; &lt;span class="n"&gt;insert&lt;/span&gt;(&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;, &lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="nb"&gt;key&lt;/span&gt;);   
    &lt;span class="nb"&gt;void&lt;/span&gt; &lt;span class="n"&gt;decreaseKey&lt;/span&gt;(&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;, &lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="nb"&gt;key&lt;/span&gt;);// &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;key&lt;/span&gt;(&lt;span class="n"&gt;priority&lt;/span&gt;) &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;element-i&lt;/span&gt;   
    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delMin&lt;/span&gt;();   
    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;();   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;implementation of such a PQ:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Use same code as standart PQ (maintain a heap[] array). &lt;br /&gt;
Elements are always accessed by "index", in range 0...N-1.
maintain 3 parallel arrays: &lt;code&gt;keys[], pq[], qp[]&lt;/code&gt;:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;keys[i]&lt;/code&gt;: is the priority of element i (the element with index=i)   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;pq[i]&lt;/code&gt;: is the index of the element in the heap position i (ie. in heap[i] is pq[i]th element  )   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;qp[i]&lt;/code&gt;: is heap position of element i  ( ⇔ the ith element is in heap[qp[i]] )   &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;to &lt;code&gt;decreaseKey(i,key)&lt;/code&gt;: change &lt;code&gt;keys[i]&lt;/code&gt;, then call &lt;code&gt;siftup(qp[i])&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week2_1/pasted_image004.png" /&gt; &lt;br /&gt;
summery of pq implementations:  &lt;br /&gt;
&lt;img alt="" src="algoII_week2_1/pasted_image005.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;6. MST Context&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;unsolved pb: does a linear MST algo exists?   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(recap: for UF, tarjan has &lt;em&gt;prooved&lt;/em&gt; that linear algo doesn't exist — although Nlg*N is fast enough...) &lt;br /&gt;
@_@... &lt;br /&gt;
&lt;img alt="" src="algoII_week2_1/pasted_image007.png" /&gt; &lt;br /&gt;
(这个Yao是清华那个Yao吧?)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Euclidean MST   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given N points in plane, edge weight := Euclidean distance. (&lt;em&gt;dense graph, E = V2&lt;/em&gt;) &lt;br /&gt;
→ exploit geomerty, O(NlgN)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clustering   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;k-clustering (~ dist-fcn) &lt;br /&gt;
single-link clustering (def. dist of clusters = dist of 2 closest elements in each cluster) &lt;br /&gt;
→ Kruskal...   &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 1-2 Directed Graphs</title><link href="http://x-wei.github.io/algoII_week1_2.html" rel="alternate"></link><published>2015-11-09T00:00:00+01:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoII_week1_2.html</id><summary type="html">&lt;h1&gt;1. Intro to digraphs&lt;/h1&gt;
&lt;p&gt;Has profound differences wrt undirected graphs.    &lt;/p&gt;
&lt;p&gt;def: digraph &lt;br /&gt;
&lt;em&gt; edges: have directions &lt;br /&gt;
&lt;/em&gt; vertex: distinguish indeg and outdeg   &lt;/p&gt;
&lt;p&gt;digraph pbs:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path/shortest path   &lt;/li&gt;
&lt;li&gt;topological sort: Can you draw a digraph so that all edges point upwards?   &lt;/li&gt;
&lt;li&gt;strong connectivity: Is there a directed path between all pairs of vertices?   &lt;/li&gt;
&lt;li&gt;transit closure   &lt;/li&gt;
&lt;li&gt;PageRank   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2. Digraph API&lt;/h1&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Digraph{   
    Digraph(int V);   
    void addEdge(int v, int w);// edge is directed   
    Iterable&amp;lt;Interger&amp;gt; adj(int v);// vertices reached by outgoing edges   
    int V();   
    Digraph reverse();// &amp;lt;--new methode wrt undirected graph   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;representation: adj-list, ie. an array of bags.  &lt;br /&gt;
&lt;code&gt;Bag&amp;lt;Integer&amp;gt;[] adj;// prec vertices&lt;/code&gt;   &lt;/p&gt;
&lt;h1&gt;3. Digraph Search&lt;/h1&gt;
&lt;p&gt;BFS and DFS can be applied to digraphs.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reachability   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;find all vertices reachable from vertex-s.  &lt;br /&gt;
use the same DFS as for undirected graphs.  &lt;br /&gt;
→ application: programme control-flow analyse, garbage collection.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;DFS is the basis for a lot of digraph pbs&lt;/em&gt;: 2-satisfiability, Euler path, strongly connected component.    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;multiple source shortest path:    &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week1_2/pasted_image.png" /&gt; &lt;br /&gt;
⇒ use DFS but &lt;em&gt;enque all vertices in the set&lt;/em&gt;.  &lt;br /&gt;
→ application: web crawler(DFS not suitable for crawling)   &lt;/p&gt;
&lt;h1&gt;4. Topological Sort&lt;/h1&gt;
&lt;p&gt;application. precedence schedule, java compiler (cycled inheritance), ...   &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;topo-order&lt;/strong&gt; &lt;br /&gt;
is a permutation of vertices, where for each vertice v→w, w is behind v in the permutation.    &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;DAG&lt;/strong&gt; &lt;br /&gt;
directed acyclic graph. &lt;br /&gt;
&lt;strong&gt;prop. &lt;/strong&gt;for a digraph, topological order exists &lt;em&gt;iff&lt;/em&gt; graph is a DAG.    &lt;/p&gt;
&lt;p&gt;algo: ⇒ use DFS~  &lt;br /&gt;
&lt;em&gt;reverse DFS postorder&lt;/em&gt;   &lt;/p&gt;
&lt;p&gt;def.    &lt;strong&gt;postorder&lt;/strong&gt; &lt;br /&gt;
is the order of the vertices that we have &lt;em&gt;finished&lt;/em&gt; (ie. we have visited all reachable vertices from this vertex).   &lt;/p&gt;
&lt;h3&gt;implementation&lt;/h3&gt;
&lt;p&gt;这个以前的blog写过...    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private boolean[] visited;   
private Stack&amp;lt;Integer&amp;gt; revPostorder;// stores the vertices in reverse post order   
private void dfs(Digraph G, int v){   
    visited[v] = true;   
    for(int w: G.adj(v))   
        if(!visited[w])   
            dfs(G, w);   
    //** now we know the vertex v is &amp;quot;finished&amp;quot; **   
    revPostorder.push(v);   
}   
public Iterable&amp;lt;Integer&amp;gt; topoOrder(Digraph G){   
    for(int v=0;v&amp;lt;G.V();v++)   
        if(!visited(v)) dfs(G,v);// visit all cc   
    return revPostorder;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;proof&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;prop. &lt;/strong&gt;reverse post-order of a DAG is in topological order.  &lt;br /&gt;
(这个证明蛮精彩) &lt;br /&gt;
&lt;strong&gt;pf.&lt;/strong&gt; &lt;br /&gt;
for any edge &lt;strong&gt;v→w&lt;/strong&gt;, when &lt;code&gt;dfs(v)&lt;/code&gt; is called:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;case 1: &lt;code&gt;dfs(w)&lt;/code&gt; is called and returned, so w is done before v in post-order;   &lt;/li&gt;
&lt;li&gt;case 2: &lt;code&gt;dfs(w)&lt;/code&gt; is not called, it will be (in)directly get called by &lt;code&gt;dfs(v)&lt;/code&gt;, so &lt;code&gt;dfs(w)&lt;/code&gt; finishes before &lt;code&gt;dfs(v)&lt;/code&gt;;   &lt;/li&gt;
&lt;li&gt;case 3: &lt;code&gt;dfs(w)&lt;/code&gt; is called but NOT returned (ie, w not &lt;em&gt;finished&lt;/em&gt;) → exist path from w to v ⇒ graph is not a DAG! (cycle detection)   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;5. Strong Components&lt;/h1&gt;
&lt;p&gt;For undirected graphs: connected components can be solved with dfs or UF.    &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;Strongly-connected&lt;/strong&gt; &lt;br /&gt;
v and w are strongly-connected if exist path from v to w and w to v.  &lt;br /&gt;
→ is an equivalent relation.    &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;Strong Component&lt;/strong&gt; &lt;br /&gt;
subset of  V where each pair are strongly-connected.    &lt;/p&gt;
&lt;p&gt;Goal: compute all strong components(&lt;em&gt;scc&lt;/em&gt;) in a digraph.    &lt;/p&gt;
&lt;h2&gt;linear time DFS solution: Tarjan (1972)&lt;/h2&gt;
&lt;p&gt;(developed version: a two-pass linear-time algorithm)   &lt;/p&gt;
&lt;p&gt;Intuition: &lt;em&gt;scc for G is the same for G.reverse().&lt;/em&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kernel DAG&lt;/strong&gt;: contract each scc into a single vertex.  &lt;br /&gt;
&lt;img alt="" src="algoII_week1_2/pasted_image001.png" /&gt;   &lt;/p&gt;
&lt;p&gt;Idea:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;compute topological-order in the kernel DAG.   &lt;/li&gt;
&lt;li&gt;run DFS, consider vertices in reverse-topo-order    &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[Algo]&lt;/strong&gt; &lt;br /&gt;
1. compute topo-order in &lt;code&gt;G.reverse&lt;/code&gt; (just a DFS in the reversed graph) &lt;br /&gt;
2. run DFS in original  &lt;code&gt;G&lt;/code&gt;, &lt;em&gt;visit unmarked vertices in topo-order of G.reverse&lt;/em&gt;. (instead of visiting vertices by their index)   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;⇒ &lt;strong&gt;each time we finish a dfs from a vertex, we get a scc!&lt;/strong&gt;   &lt;br /&gt;
太精彩了!!! &lt;br /&gt;
&lt;img alt="" src="algoII_week1_2/pasted_image002.png" /&gt;   &lt;/p&gt;
&lt;p&gt;proof: tricky, cf book...(貌似Werner课上讲过..)   &lt;/p&gt;
&lt;h2&gt;implementation&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private int[] scc = new int[V]; // scc[v] is the index of the SCC that v belongs to   
private int sccCount = 0;   
private boolean[] visited = new boolean[V];   
public getSCC(Digraph G){   
    // 1. get topo-order in reverse graph   
    Iterable&amp;lt;Integer&amp;gt; topoOrderGR = topoOrder(G.reverse());   
    // 2. run dfs in original graph, run on vertices using the above topo-order    
    for(int v:topoOrderGR)// &amp;lt;-- only difference from the standard topo-order algo   
        if(!visited[v])   
            dfs(G, v, sccCount++);//increment sccCount everytime we done a component   
}   
private dfs(Digraph G, int v){   
    // run dfs from v, and all touched vertices are marked in sccId&amp;#39;s SCC   
    visited[v] = true;   
    scc[v] = sccCount;   
    for(int w:G.adj(v))   
        if(!visited[w]){   
            scc[w] = sccCount;   
            dfs(G,w);   
        }   
}
&lt;/pre&gt;&lt;/div&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms II] Week 1-1 Undirected Graphs</title><link href="http://x-wei.github.io/algoII_week1_1.html" rel="alternate"></link><published>2015-11-08T00:00:00+01:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoII_week1_1.html</id><summary type="html">&lt;h1&gt;1. Intro to graphs&lt;/h1&gt;
&lt;p&gt;Graph: vertices connected by edges.    &lt;/p&gt;
&lt;p&gt;terminology:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;:  sequence of vertices connected by edges   &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cycle&lt;/strong&gt;: path with same starting and ending vertex   &lt;/li&gt;
&lt;li&gt;two vertices are &lt;strong&gt;connected&lt;/strong&gt;: if there is a path between     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex of graph problems:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path: or connectivity   &lt;/li&gt;
&lt;li&gt;shortest path   &lt;/li&gt;
&lt;li&gt;cycle   &lt;/li&gt;
&lt;li&gt;Euler tour (ouii..)   &lt;/li&gt;
&lt;li&gt;Hamilton tour   &lt;/li&gt;
&lt;li&gt;MST   &lt;/li&gt;
&lt;li&gt;bi-connectivity: is there a vertex whose removal disconnects the graph?   &lt;/li&gt;
&lt;li&gt;planarity   &lt;/li&gt;
&lt;li&gt;isomorphism   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2. Graph API&lt;/h1&gt;
&lt;h2&gt;graph representation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vertex representation:  use integers &lt;em&gt;between 0 and V-1&lt;/em&gt;   &lt;/li&gt;
&lt;li&gt;anormalies: self-loop and multiple edges are &lt;em&gt;possible&lt;/em&gt;    &lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Graph{   
    Graph(int V);   
    void addEdge(int v, int w);   
    Iterable&amp;lt;Integer&amp;gt; adj(int v);   
    int V();// nb of vertices   
    int E();// nb of edges   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;print all edges:  &lt;br /&gt;
&lt;img alt="" src="algoII_week1_1/pasted_image.png" /&gt;   &lt;/p&gt;
&lt;p&gt;basic functions:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;static&lt;/span&gt; &lt;span class="nt"&gt;int&lt;/span&gt; &lt;span class="nt"&gt;degree&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;Graph&lt;/span&gt; &lt;span class="nt"&gt;g&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;int&lt;/span&gt; &lt;span class="nt"&gt;v&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;   
    &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;deg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
    &lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;   
&lt;span class="nt"&gt;static&lt;/span&gt; &lt;span class="nt"&gt;int&lt;/span&gt; &lt;span class="nt"&gt;nbOfSelfloops&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;Graph&lt;/span&gt; &lt;span class="nt"&gt;g&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;   
    &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
    &lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
        &lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;    
            &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;edge representation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;set-of-edge implementation: a list of all edges ⇒ can lead to inefficient implementation   &lt;/li&gt;
&lt;li&gt;adj-matrix implementation: maintain a 2d (V*V) boolean array ⇒ space complexity too heavy   &lt;/li&gt;
&lt;li&gt;adj-list implementation: vertex-indexed array, each array entry is a &lt;code&gt;Bag&lt;/code&gt; (类似桶bucket) ⇒ sutable for sparse graphs   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week1_1/pasted_image001.png" /&gt; &lt;br /&gt;
adj-list implementation:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private final int V;   
private Bag&amp;lt;Integer&amp;gt;[] adj;   
public Graph(int V){   
    this.V = V;   
    this.adj = (Bag&amp;lt;Integer&amp;gt;[]) new Bag[V];// java cannot create generic array   
    for(int v = 0; v&amp;lt;V; v++) adj[v] = new Bag&amp;lt;Integer&amp;gt;();   
}   
public addEdge(int v, int w){   
    adj[v].add(w);   
    adj[w].add(v);// if undirected graph   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="algoII_week1_1/pasted_image002.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;3. Depth-First Search&lt;/h1&gt;
&lt;p&gt;Tremaux maze exploration: trace back when no unvisited vertices availiable.  &lt;br /&gt;
动画好看... &lt;br /&gt;
DFS goal: systematically search through a graph.  &lt;br /&gt;
&lt;strong&gt;design pattern&lt;/strong&gt;: &lt;em&gt;decouple&lt;/em&gt; graph data and graph processing.    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Paths{   
    Path(Graph G, int s);// graph G and source s   
    boolean hasPathTo(int v);   
    Iterable&amp;lt;Integer&amp;gt; pathTo(int v);   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;algo:  &lt;br /&gt;
&lt;img alt="" src="algoII_week1_1/pasted_image003.png" /&gt; &lt;br /&gt;
注意每次访问节点以前就将其mark.    &lt;/p&gt;
&lt;h2&gt;implementation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用一个boolean数组&lt;code&gt;visited[]&lt;/code&gt;作为标记   &lt;/li&gt;
&lt;li&gt;为了找到一条具体的路径(ie, 一系列节点), 维护一个&lt;code&gt;prev[]&lt;/code&gt;数组, 存放当前节点是从哪个节点走过来的.    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoII_week1_1/pasted_image004.png" /&gt;  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//public class DFSpaths extends Paths...   
boolean[] visited = new boolean[V];   
int[] prev = new int[V];   
public void dfs(int v){   
    visited[v] = true;   
    for(int w: G.adj())   
        if(!visited[w]) {   
            prev[w]=v;   
            dfs(w);   
        }   
}   
public Iterable&amp;lt;Integer&amp;gt; pathTo(int v){   
    Stack&amp;lt;Integer&amp;gt; s = new Stack&amp;lt;Integer&amp;gt;();   
    for(int x = v; x!=s; x = prev[x])    
        s.push(x);   
    return s;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;properties&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;prop&lt;/strong&gt;. &lt;br /&gt;
DFS visite all edges in time propotional to the sum of their degrees(ie. nb of edges).    &lt;/p&gt;
&lt;h1&gt;4. Breadth-First Search&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;not&lt;/strong&gt; recursive algo. &lt;br /&gt;
&lt;em&gt;maintain a queue, add to queue for all vertices not-marked.&lt;/em&gt;    &lt;/p&gt;
&lt;h2&gt;implementation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;visited[]&lt;/code&gt; to mark vertices   &lt;/li&gt;
&lt;li&gt;use a &lt;code&gt;prev[]&lt;/code&gt; array to get explicit path   &lt;/li&gt;
&lt;li&gt;use a &lt;code&gt;dist[]&lt;/code&gt; array to record the shortest dist from v to source (can use &lt;code&gt;dist&lt;/code&gt; to replace &lt;code&gt;visited&lt;/code&gt;)   &lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public void bfs(Graph G, int s){   
    boolean visited[] = new boolean[G.V()];   
    int prev[] = new int[G.V()];   
    int dist[] = new int[G.V()];   
    Queue&amp;lt;Integer&amp;gt; q = new Queue&amp;lt;Integer&amp;gt;();   
    visited[s] = true;   
    q.push(s);   
    while(!q.isEmpty()){   
        int v = q.dequeue();   
        for(int w:G.adj(v))   
            if(!visited[w]) {   
                prev[w] = v;   
                visited[w] = true;   
                q.enqueue(w);   
            }      
    }   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;property&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;prop.&lt;/strong&gt; &lt;br /&gt;
BFS computes the shortest path from s to all vertices using time propotional to E+V.    &lt;/p&gt;
&lt;p&gt;intuition: BFS examines nodes by increasing distance    &lt;/p&gt;
&lt;h1&gt;5. Connected Components&lt;/h1&gt;
&lt;p&gt;dealing with connectivity(equivalence) queries ⇒ answer in constant time (with &lt;em&gt;preprocessing&lt;/em&gt;).    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class CC{   
    boolean connected(int v, int w);   
    int count();// nb of CCs   
    int id(int v);//id for a CC   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;⇒ Union-Find ? ⇒ &lt;em&gt;Use DFS!!&lt;/em&gt;   &lt;/p&gt;
&lt;p&gt;def. &lt;em&gt;connected component&lt;/em&gt; is a maximal set of connected vertices.    &lt;/p&gt;
&lt;p&gt;algo: for each unmarked vertex, run dfs(with increasing cc id)... &lt;br /&gt;
after the preprocessing, we can get the array &lt;code&gt;id[]&lt;/code&gt; and cc count &lt;code&gt;cnt&lt;/code&gt;...   &lt;/p&gt;
&lt;h1&gt;6. Graph Challenges&lt;/h1&gt;
&lt;p&gt;some typical pbs &lt;br /&gt;
&lt;strong&gt;pb1. bipartite graph&lt;/strong&gt;   &lt;/p&gt;
&lt;p&gt;Can we  divide vertices into 2 subsets, where all edge go from one subset to other.  &lt;br /&gt;
⇒ can be done with dfs. &lt;em&gt;cf. booksite&lt;/em&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pb2. cycle detection&lt;/strong&gt; &lt;br /&gt;
⇒ simple using dfs.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pb3. Euler cycle&lt;/strong&gt; &lt;br /&gt;
Find a cycle that uses all edges exactely once.  &lt;br /&gt;
[Euler] a graph is Eulerian &lt;strong&gt;iff&lt;/strong&gt; all vertices have even degree.  &lt;br /&gt;
⇒ typical diligent algo students can do. &lt;em&gt;cf. booksite&lt;/em&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pb4. Hamilton cycle&lt;/strong&gt; &lt;br /&gt;
Find cycle that visits each vertex exactly once.  &lt;br /&gt;
⇒ intractable (typical NP-complete pb)   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pb5. isomorphism of graphs&lt;/strong&gt; &lt;br /&gt;
Are two graphs identical except for vertex names? &lt;br /&gt;
⇒ no one knows...    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pb6. planary graph&lt;/strong&gt; &lt;br /&gt;
Lay out a graph in the plane without crossing edges? &lt;br /&gt;
⇒ expert level. exists linear time algo based on DFS by Tarjan, but too complicated.    &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>Approximate Retrieval(2): simHash</title><link href="http://x-wei.github.io/simhash.html" rel="alternate"></link><published>2015-10-08T17:30:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/simhash.html</id><summary type="html">&lt;p&gt;除了上次介绍的&lt;a href="http://x-wei.github.io/minhash.html"&gt;minhash&lt;/a&gt;方法以外, 还有一种常见的hash方法, 叫做simHash. 这里做简要介绍.  &lt;br /&gt;
这个hash函数的背景和上次一样, 还是考虑把文本抽象为ngram的集合:  &lt;br /&gt;
&lt;img alt="" src="simhash/pasted_image.png" /&gt; &lt;br /&gt;
然后相似度依旧是Jaccard similarity:  &lt;br /&gt;
&lt;img alt="" src="simhash/pasted_image001.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;simHash&lt;/h2&gt;
&lt;p&gt;simHash的方法听上去比minHash还要简单:    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对一个文档&lt;em&gt;d&lt;/em&gt;中的每一个term(ngram, shingle) &lt;em&gt;t&lt;/em&gt;, 计算其hashcode(比如用java内建的&lt;code&gt;Object.hashCode()&lt;/code&gt;函数) &lt;em&gt;hash(t)&lt;/em&gt;.    &lt;/li&gt;
&lt;li&gt;把d中所有term的&lt;em&gt;hash(t)&lt;/em&gt;合成为一个hashcode作为d的hashcode &lt;em&gt;simHash(d)&lt;/em&gt;: &lt;em&gt;simHash(d)&lt;/em&gt;的长度与&lt;em&gt;hash(t)&lt;/em&gt;相同, &lt;em&gt;simHash(d)&lt;/em&gt;的第k个bit的取值为所有&lt;em&gt;hash(t)&lt;/em&gt;第k个bit的&lt;strong&gt;众数&lt;/strong&gt;.    &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;写成数学表达式很吓人, 其实只不过不断在{0,1}和{-1,+1}之间变而已, 总之就是对所有hash(t)的每一位进行统计, 如果1多就放1, 否则就放0...  &lt;br /&gt;
&lt;img alt="" src="simhash/pasted_image002.png" /&gt;   &lt;/p&gt;
&lt;p&gt;关于为什么simHash可以满足近邻hash的条件(即两个文档jacccard sim越大, 其simhash相等的可能性越大), 不知道... 不过可以参考这个链接: &lt;a href="http://matpalm.com/resemblance/simhash/"&gt;http://matpalm.com/resemblance/simhash/&lt;/a&gt;    &lt;/p&gt;
&lt;h2&gt;simHash VS minHash&lt;/h2&gt;
&lt;p&gt;下面来比较一下二者的差别.  &lt;br /&gt;
首先是表示方式:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simHash只需要直接拿term的集合即可使用   &lt;/li&gt;
&lt;li&gt;minHash需要首先建立字典, 然后用一个binary的向量(长度为字典长度)表示一个文档   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其次是取值范围:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simHash得到的hash范围取决于应用到每个term上的hash函数的范围, simHash与所有term的hash位数相同.   &lt;/li&gt;
&lt;li&gt;minHash的范围等于字典的长度, 如果字典里有M个term那么minHash取值在1到M之间.    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是minHash也有优点:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要生成不同的simHash比较困难, 取决于应用在每个term上的hash函数有多少种.    &lt;/li&gt;
&lt;li&gt;生成不同的minHash非常容易: 每次shuffle就可以对一篇文章生成不同的minHash.    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以如果我们想要用多个hash来索引一个文章的时候, minHash可以很容易实现.    &lt;/p&gt;</summary><category term="ml"></category></entry><entry><title>minHash: 一种快速approximate retrieval方法</title><link href="http://x-wei.github.io/minhash.html" rel="alternate"></link><published>2015-09-27T11:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/minhash.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;approximate retrieval&lt;/strong&gt;(相似搜索)这个问题之前实习的时候就经常遇到: 如何快速在大量数据中如何找出相近的数据.    &lt;/p&gt;
&lt;p&gt;问题描述: 假设有N个数据, 并且对于他们有一个相似度(或距离)的度量函数&lt;code&gt;sim(i,j)&lt;/code&gt;, 我们的问题就是如何快速找出所有N个点中相似度较大的i和j组合.    &lt;/p&gt;
&lt;p&gt;乍一看这个问题必须要对所有的(i,j)计算相似度, 但是N^2的复杂度在N太大的情况下是不能够忍受的.    &lt;/p&gt;
&lt;h2&gt;kdtree&lt;/h2&gt;
&lt;p&gt;之前在algo-note里面遇到过&lt;a href="http://x-wei.github.io/algoI_week5_2.html"&gt;kdtree&lt;/a&gt;, 用它可以使得寻找nearest neighbor的复杂度减少到logN. 但是这种情况对于维度低一点(比如二三维)的情况合适, 维度到了成千上万的时候并不是很好的选择, 所以这里不多讨论.    &lt;/p&gt;
&lt;h2&gt;simhash&lt;/h2&gt;
&lt;p&gt;另一个思路是, 使用某个hash函数, 对于每一个数据计算一个哈希值. 这个hash函数要满足: &lt;strong&gt;当i和j的相似度很高的时候, hash(i)和hash(j)的值(很可能)相同.&lt;/strong&gt; 这次介绍的minHash就是这样的一种方法.    &lt;/p&gt;
&lt;h2&gt;Jaccard similarity&lt;/h2&gt;
&lt;p&gt;明确问题含义, 首先需要定义相似度. 这里主要考虑文本相似度的问题, 假设字典D有M个term(term可以是单词, 也可以是n-gram或叫shingle): &lt;br /&gt;
&lt;img alt="" src="minhash/pasted_image.png" /&gt;   &lt;/p&gt;
&lt;p&gt;一段文本(document i)可以用binary vectorization变为一个binary的向量:  &lt;br /&gt;
&lt;img alt="" src="minhash/pasted_image001.png" /&gt; &lt;br /&gt;
(这里没有用TF或者TFIDF, 只用一个简单的binary向量化, 因为只有binary的时候才适合我们接下来的推导...)   &lt;/p&gt;
&lt;p&gt;每个document可以看作一些term的&lt;em&gt;集合&lt;/em&gt;, 集合之间的相似度有一个经典的度量: jaccard similarity. &lt;br /&gt;
对集合S1和S2, 他们的相似度定义为:  &lt;br /&gt;
&lt;img alt="" src="minhash/pasted_image003.png" /&gt; &lt;br /&gt;
也很好理解, 重合部分比例越高相似度就越高, 另外jaccard-sim取值在0到1之间.    &lt;/p&gt;
&lt;p&gt;对于document i和j, 他们的向量形式分别是di和dj. 现在我们希望计算hash(di)和hash(dj), 使得:    &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="minhash/pasted_image004.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;minHash&lt;/h2&gt;
&lt;p&gt;min hash的思路是这样的, 首先生成一个随机的(1...M)的排序(permutation)π:  &lt;br /&gt;
&lt;img alt="" src="minhash/pasted_image005.png" /&gt;   &lt;/p&gt;
&lt;p&gt;然后, 对于每个document d, 都按照这个permutation, 把d的分量从新排列:  &lt;br /&gt;
&lt;img alt="" src="minhash/pasted_image006.png" /&gt;   &lt;/p&gt;
&lt;p&gt;然后定义&lt;code&gt;minHash(di)&lt;/code&gt;为permutation以后的di里的第一个不为0的位置:  &lt;br /&gt;
&lt;img alt="" src="minhash/pasted_image008.png" /&gt; &lt;br /&gt;
(上面个公式里d的下标只是代表第i个文本, 并不代表分量... 我应该写上标的..) &lt;br /&gt;
所以&lt;code&gt;minHash()&lt;/code&gt;返回1到M之间的一个数.    &lt;/p&gt;
&lt;h2&gt;proof&lt;/h2&gt;
&lt;p&gt;现在证明一下为什么这样选择minHash函数可以保证两个文本的哈希值相等的概率为他们的jaccard similarity.    &lt;/p&gt;
&lt;p&gt;对于d2和d2, 我们分别查看π(d1)和π(d2)的每个分量, 这两个数有(11), (10), (01), (00)这四种可能, 分别记每种可能性的出现次数为a,b,c,d:  &lt;br /&gt;
&lt;img alt="" src="minhash/pasted_image009.png" /&gt; &lt;br /&gt;
那么jaccard similarity可以表示为:  &lt;br /&gt;
&lt;img alt="" src="minhash/pasted_image010.png" /&gt; &lt;br /&gt;
再看&lt;code&gt;minHash()&lt;/code&gt;是如何计算的, 当π(d1)_k和π(d2)_k都为0的时候会继续增加k, 一直到π(d1)_k和π(d2)_k中某一个为1.  &lt;br /&gt;
那么&lt;code&gt;minHash(d1)==minHash(d2)&lt;/code&gt;的情况就是二者都为1的情况, 这种情况的可能性为:  &lt;br /&gt;
&lt;img alt="" src="minhash/pasted_image011.png" /&gt; &lt;br /&gt;
这个概率恰好就是jaccard similarity.    &lt;/p&gt;</summary><category term="ml"></category></entry><entry><title>lin-reg = max-likelihood: 贝叶斯视角看线性回归</title><link href="http://x-wei.github.io/linreg-bayes.html" rel="alternate"></link><published>2015-09-26T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/linreg-bayes.html</id><summary type="html">&lt;p&gt;几乎所有的ml课都是从线性回归讲起, ETH的课也不例外. 不过这次老师用了贝叶斯的视角讲这个问题, 自从高中接触丁老师讲的线性回归以来 第一次听到一个不同于最小二乘的解读, 感觉很有意思. 又想起来刘未鹏那篇非常棒的&lt;a href="http://mindhacks.cn/2008/09/21/the-magical-bayesian-method/"&gt;博客&lt;/a&gt;, 于是想记录一下.    &lt;/p&gt;
&lt;h2&gt;notation&lt;/h2&gt;
&lt;p&gt;首先有n个数据点:  &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image001.png" /&gt; &lt;br /&gt;
其中y是实数, 每个x有d个维度, 为了方便表示截距, 再给x加入一个始终等于1的维度:  &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image002.png" /&gt; &lt;br /&gt;
例子: y代表房价, x代表了房子的面积, 使用时间, 距离市中心的距离等因素.   &lt;/p&gt;
&lt;h2&gt;least square viewpoint&lt;/h2&gt;
&lt;p&gt;在最小二乘的视角里, 线性回归是用一个x的线性函数拟合y:  &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image003.png" /&gt; &lt;br /&gt;
使得拟合结果和观测结果的误差尽量小.  &lt;br /&gt;
不过这次不说最小二乘, 所以接下来不讨论这个思路...   &lt;/p&gt;
&lt;h2&gt;assumptions in Bayes viewpoint&lt;/h2&gt;
&lt;p&gt;在贝叶斯视角里, 我们假设: &lt;br /&gt;
&lt;strong&gt;假设1. y = 某个x的线性函数 + 观测噪音&lt;/strong&gt; &lt;br /&gt;
即:  &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image006.png" /&gt; &lt;br /&gt;
其中εi是一个&lt;em&gt;随机变量&lt;/em&gt;, 所以y也是一个随机变量.  &lt;br /&gt;
另外再有一个比较强的假设: &lt;br /&gt;
&lt;strong&gt;假设2.  ε服从centered高斯分布, iid.&lt;/strong&gt; &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image007.png" /&gt; &lt;br /&gt;
(btw, 对一个随机变量建模, 一般来说, 连续随机变量就用高斯, 离散随机变量用泊松)   &lt;/p&gt;
&lt;h2&gt;Bayes formula&lt;/h2&gt;
&lt;p&gt;贝叶斯公式长这个样子:  &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image004.png" /&gt; &lt;br /&gt;
只看最左边和最右边的内容, 表达为:    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;posterior = likelihood * prior &lt;br /&gt;
后验概率 = 可能性 * 先验概率   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(上面其实应该是"正比于"而不是等号, 由于P(Y)我们并不关心, 所以可以直接忽略之)   &lt;/p&gt;
&lt;p&gt;公式里Y代表可以观察到结果, X代表结果背后不能直接观察的量(&lt;em&gt;不要和数据里的XY混淆...&lt;/em&gt;).  &lt;br /&gt;
贝叶斯公式的意义在于, 让我们从可观测的Y反推不可观测的X的概率. 既然我们已经得到了观测结果Y, 那么找到使得后验概率最大的X就说明我们在观测基础上得到了最可信的X的估计.    &lt;/p&gt;
&lt;p&gt;那么在我们这个问题里, X代表模型, 即某一个β的取值; Y代表观测结果, 即我们看到的n个数据点.  &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image005.png" /&gt; &lt;br /&gt;
所以我们的问题就是: 在已经有了这些观测点的基础之上, 应该选那个β的取值, 使得后验概率最大?   &lt;/p&gt;
&lt;h2&gt;lin-reg = max-likelihood&lt;/h2&gt;
&lt;p&gt;线性回归认为, 对于任意的β的取值, 其先验概率都是一样的, 所以在贝叶斯公式里可以忽略ℙ(X), 只需要考虑最大化likelihood ℙ(Y|​X)即可 — 再一次, 不要把贝叶斯的XY和数据的X和Y混淆...  &lt;br /&gt;
即选择β: &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image015.png" /&gt;  &lt;br /&gt;
由于随机变量y只是随机变量ε的一个函数(且给定β, ε和y一一对应):  &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image008.png" /&gt; &lt;br /&gt;
所以可以最大化ε的likelihood:  &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image009.png" /&gt; &lt;br /&gt;
由于之前对ε有假设:  &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image010.png" /&gt; &lt;br /&gt;
那么:  &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image011.png" /&gt; &lt;br /&gt;
(不要以为ε独立于β: ε=y - βt x, 所以上面表达式里其实还是有β的. ) &lt;br /&gt;
⇒ 两边取log并加上负号:  &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image014.png" /&gt; &lt;br /&gt;
Voila, 所以极大似然=最小二乘!  &lt;br /&gt;
对, 饶了一圈还是最小二乘, 但是这样的意义变了, 明白了为什么要最小化平方误差这个值.   &lt;/p&gt;
&lt;h2&gt;precise solution to linreg&lt;/h2&gt;
&lt;p&gt;(notation有点混乱了, 之前贝叶斯里面应该用AB而不是用XY的orz...) &lt;br /&gt;
每个x是一个列向量, 这里, 把所有数据用矩阵形式表示:  &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image016.png" /&gt; &lt;br /&gt;
矩阵表示的好处是平方误差可以用矩阵表示:  &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image017.png" /&gt; &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image018.png" /&gt; &lt;br /&gt;
对矩阵运算求偏导, 偏导为0的时候即可得到最优的β: &lt;br /&gt;
&lt;img alt="" src="linreg-bayes/pasted_image019.png" /&gt;   &lt;/p&gt;</summary><category term="ml"></category></entry><entry><title>[Algorithms I] Week 6 Hash Tables</title><link href="http://x-wei.github.io/algoI_week6.html" rel="alternate"></link><published>2015-09-01T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoI_week6.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Can we do better than BST if we do not need ordered operations ?&lt;/em&gt;   &lt;/p&gt;
&lt;p&gt;(No compare methods, use equals method)   &lt;/p&gt;
&lt;p&gt;Idea: save items in an array.  &lt;br /&gt;
&lt;strong&gt;Hash function&lt;/strong&gt;: method for calclulating the array index of  a key.    &lt;/p&gt;
&lt;p&gt;Issues:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;computing hash function   &lt;/li&gt;
&lt;li&gt;equality tests   &lt;/li&gt;
&lt;li&gt;collision resolution   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Classic space-time tradeoff.&lt;/em&gt;   &lt;/p&gt;
&lt;h1&gt;1. Hash Functions&lt;/h1&gt;
&lt;p&gt;Goal: scramble the keys uniformly to produce a table index.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;effcient to compute   &lt;/li&gt;
&lt;li&gt;all indices are equally likely for any key   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;challenge: need different approach for different key types.    &lt;/p&gt;
&lt;h2&gt;Java's hashing&lt;/h2&gt;
&lt;p&gt;All java object has a methode &lt;code&gt;int hashCode()&lt;/code&gt; &lt;br /&gt;
requirement:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if x.equals(y) ⇒ x.hashCode()==y.hashCode()   &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(hopefully) if x.equals(y)==false ⇒ x.hashCode!=y.hashCode()   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Default implementation: &lt;em&gt;memory address&lt;/em&gt; for x.    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Custom implementations for standard types: Integer, Double, String, File, URL, Date...   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week6/pasted_image.png" /&gt; &lt;br /&gt;
Strings: Horner's method — compute a polynome.  &lt;br /&gt;
&lt;img alt="" src="algoI_week6/pasted_image001.png" /&gt; &lt;br /&gt;
recipe for user-defined types:  &lt;br /&gt;
&lt;img alt="" src="algoI_week6/pasted_image002.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;Modeular hasing&lt;/h2&gt;
&lt;p&gt;(hash code VS hash function)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Hash code&lt;/em&gt;: 32-bit integer between -2^31 and 2^31-1 &lt;em&gt;(can be negative!!)&lt;/em&gt;   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Hash function&lt;/em&gt;: integer between 0 and M-1 (used directly as array index, should &amp;gt;=0)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;BUG code:&lt;/strong&gt;    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private int hash(Key k){   
    return k.hashCode()%M;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;→ bug: &lt;em&gt;number returned can be negative !&lt;/em&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1-in-billion bug code:&lt;/strong&gt;  &lt;br /&gt;
&lt;code&gt;return Math.abs(k.hashCode()) % M;&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;→ bug: Math.abs() returns negative numbers for -2^31 &lt;br /&gt;
&lt;img alt="" src="algoI_week6/pasted_image003.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;correct code:&lt;/strong&gt; &lt;br /&gt;
just take the first 31 bits: x&amp;amp;0x7fffffff &lt;br /&gt;
&lt;code&gt;return k.hashCode()&amp;amp;0x7fffffff % M;&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;另一个hash的思路是用random(用hashcode作为随机种子)   &lt;/p&gt;
&lt;h2&gt;uniform hasing assumption&lt;/h2&gt;
&lt;p&gt;each key is equally likely to hash to an integer between 0 and M-1   &lt;/p&gt;
&lt;p&gt;一些数学结论:  &lt;br /&gt;
&lt;img alt="" src="algoI_week6/pasted_image004.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;2. Separate Chaining&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;one strategy for collision resolution.&lt;/em&gt;  &lt;br /&gt;
&lt;img alt="" src="algoI_week6/pasted_image005.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;idea&lt;/strong&gt;: Using a table of size M &amp;lt; N,  build a list for each of the table positions.    &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week6/pasted_image006.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;implementation&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class SeparateChainingHashST&amp;lt;Key, Value&amp;gt;{   
    private int M = 97;   
    private Node[] st = new Node[97];   
    private static class Node{   
        Object key, val; // no generic array creation!    
        Node next;   
        public Node(Key k, Value v, Node nxt){...}   
    }   
    int hash(Key k){   
        return (k.hashCode()&amp;amp;0x7fffffff) % M;   
    }   
    public Value get(Key k){   
        int h = hash(k);   
        for(Node x=st[h]; x!=null; x=x.next)   
            if(k.equals(x.val)) return (Value)x.val; //cast   
        return null;   
    }   
    public void put(Key k, Value v){   
        int h = hash(k);   
        for(Node x=st[h]; x!=null; x=x.next)   
            if(k.equals(x.val))    
                {x.val = v; return;}   
        st[h] = new Node(k,v,st[h]);   
    }   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意内部类Node里用的是Object — 因为不能声明generic array.    &lt;/p&gt;
&lt;h2&gt;analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;proposition&lt;/strong&gt; &lt;br /&gt;
Under the assumption of uniform hashing, the number of keys in a list is within a constant factor to N/M.  &lt;br /&gt;
&lt;em&gt;proof.&lt;/em&gt; &lt;br /&gt;
binominal distribution.   &lt;/p&gt;
&lt;p&gt;M times faster than sequential search &lt;br /&gt;
→ typical choice: M ~ N/5   &lt;/p&gt;
&lt;h1&gt;3. Linear Probing&lt;/h1&gt;
&lt;p&gt;Another approch for collision resolution.    &lt;/p&gt;
&lt;p&gt;idea: &lt;strong&gt;open addressing&lt;/strong&gt; &lt;br /&gt;
Use an array of size &lt;strong&gt;M&amp;gt;N&lt;/strong&gt;, when a key collides, &lt;em&gt;find next open slot&lt;/em&gt;.  &lt;br /&gt;
&lt;img alt="" src="algoI_week6/pasted_image007.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert: when occupied, move pointer until got open slot   &lt;/li&gt;
&lt;li&gt;search: when not found, move pointer until find or reach open slot   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;delete&lt;/em&gt;: set key to null, then for all items behind this key: set to null, then insert this key......   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;array M &lt;em&gt;must&lt;/em&gt; be larger than N ⇒ array resizing is necessary.    &lt;/p&gt;
&lt;h2&gt;implementation&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class LinearProbingHashST&amp;lt;Key, Value&amp;gt;{   
    private int M, N;   
    private Object[] keys;//cannot use generic array   
    private Object[] vals;   
    public void put(Key k, Value v){   
        int i = hash(k);   
        for(;keys[i]!=null;i=(i+1)%M)   
            if(keys[i].equals(k))    
                {vals[i]=v; return;}   
        keys[i]=k;   
        vals[i]=v;   
    }   
    public Value get(Key k){   
        int h=hash(k);   
        for(;keys[h]!=null;h=(h+1)%M)   
            if(k.equals(keys[h])) return (Value)vals[h];//ugly cast   
        return null;   
    }   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;cluster&lt;/h2&gt;
&lt;p&gt;def. &lt;strong&gt;cluster&lt;/strong&gt; &lt;br /&gt;
A contiguous block of items.    &lt;/p&gt;
&lt;p&gt;New keys are more likely to hash into a cluster.    &lt;/p&gt;
&lt;p&gt;Knuth parking pb:  &lt;br /&gt;
&lt;img alt="" src="algoI_week6/pasted_image008.png" /&gt; &lt;br /&gt;
&lt;img alt="" src="algoI_week6/pasted_image010.png" /&gt; &lt;br /&gt;
&lt;img alt="" src="algoI_week6/pasted_image009.png" /&gt; &lt;br /&gt;
(当年Knuth就是在证明了这个以后决定写那套书)   &lt;/p&gt;
&lt;p&gt;Typical choice: &lt;strong&gt;N/M ~ 1/2&lt;/strong&gt; (3/2 for search hit and 5/2 for search miss)   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week6/pasted_image011.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;4. Hash Table Context&lt;/h1&gt;
&lt;p&gt;widely used in applicataions.    &lt;/p&gt;
&lt;p&gt;cost for computing hash VS cost for searching:  &lt;br /&gt;
hashCode() for strings in java 1.1: exemain only 8-9 evenly spaced characters to save time. &lt;br /&gt;
&lt;img alt="" src="algoI_week6/pasted_image012.png" /&gt;   &lt;/p&gt;
&lt;p&gt;uniform hashing assumption: performance not guaranteed... &lt;br /&gt;
&lt;img alt="" src="algoI_week6/pasted_image013.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week6/pasted_image014.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;one-way hash functions&lt;/strong&gt; &lt;br /&gt;
Hard to find a key that hash to a desired value, or 2 keys having the same hash value.  &lt;br /&gt;
&lt;img alt="" src="algoI_week6/pasted_image015.png" /&gt; &lt;br /&gt;
used for fingurprints or store passwords, but too expensive for ST implementations.    &lt;/p&gt;
&lt;h2&gt;Seperate chaining VS linear probing&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week6/pasted_image016.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;variations&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week6/pasted_image017.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;ST choice: hash tables VS balanced search trees&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week6/pasted_image018.png" /&gt;   &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 5-2 Geometric Applications of BSTs</title><link href="http://x-wei.github.io/algoI_week5_2.html" rel="alternate"></link><published>2015-08-29T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoI_week5_2.html</id><summary type="html">&lt;h1&gt;1. 1d Range Search&lt;/h1&gt;
&lt;p&gt;Goal: &lt;em&gt;intersections&lt;/em&gt; of geometric objects.  &lt;br /&gt;
&lt;img alt="" src="algoI_week5_2/pasted_image.png" /&gt; &lt;br /&gt;
Solution: &lt;strong&gt;BST&lt;/strong&gt;   &lt;/p&gt;
&lt;h2&gt;1d range search&lt;/h2&gt;
&lt;p&gt;operations required:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert   &lt;/li&gt;
&lt;li&gt;search   &lt;/li&gt;
&lt;li&gt;delete   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;range search&lt;/em&gt;: all keys between k1 and k2   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;range count&lt;/em&gt;: how many keys are between k1 and k2   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ find points on an interval  &lt;br /&gt;
&lt;img alt="" src="algoI_week5_2/pasted_image001.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;implementation by BST&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;range count&lt;/strong&gt; &lt;br /&gt;
using the &lt;code&gt;rank()&lt;/code&gt; function for the BST (or use the size of a tree) &lt;br /&gt;
&lt;img alt="" src="algoI_week5_2/pasted_image002.png" /&gt; &lt;br /&gt;
注意什么时候要加1...   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public int size(Key hi, Key lo){   
    if(contains(hi)) return rank(hi)-rank(lo)+1;   
    else return rank(hi) - rank(lo);   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;range search&lt;/strong&gt; &lt;br /&gt;
类似inorder traversal的方式:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find in left subtree (if could fall into range)   &lt;/li&gt;
&lt;li&gt;check current node   &lt;/li&gt;
&lt;li&gt;find in right subtree   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_2/pasted_image003.png" /&gt; &lt;br /&gt;
running time: R+lgN (R=nb of nodes in range)   &lt;/p&gt;
&lt;h1&gt;2. Line Segment Intersection&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Orthognal line segment intersection search&lt;/em&gt;:  &lt;br /&gt;
find all intersections given N horizontal/vertical lines &lt;br /&gt;
&lt;img alt="" src="algoI_week5_2/pasted_image005.png" /&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Non-degeneracy assumption: all x-coord and y-coord are distinct.    &lt;/p&gt;
&lt;p&gt;naive algo: check all pairs...   &lt;/p&gt;
&lt;h2&gt;Sweep-line algorithm&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_2/pasted_image006.png" /&gt; &lt;br /&gt;
&lt;img alt="" src="algoI_week5_2/pasted_image007.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sweep a vertical line from left to right.    &lt;ul&gt;
&lt;li&gt;when hit the left end of horizontal-segment (h-seg) → insert into a BST   &lt;/li&gt;
&lt;li&gt;when hit the right end of a h-seg → delete from BST   &lt;/li&gt;
&lt;li&gt;when hit a vertical-seg: ⇒ 1d range search !    &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;关于怎么sweep的:&lt;/strong&gt; &lt;br /&gt;
没有仔细讲, 不过我觉得就是把所有的x坐标排好序, 有个&lt;a href="https://leetcode.com/problems/the-skyline-problem/"&gt;skyline问题&lt;/a&gt;也是涉及如何sweep的.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;proposition&lt;/strong&gt; &lt;br /&gt;
running time is NlgN+R (R=nb of intersections).  &lt;br /&gt;
&lt;em&gt;proof.&lt;/em&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sort by x-coord (or use PQ) → NlgN   &lt;/li&gt;
&lt;li&gt;insert/delete y-coord to BST → NlgN   &lt;/li&gt;
&lt;li&gt;range search → NlgN + R   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;3. Kd-trees&lt;/h1&gt;
&lt;p&gt;An extension of BST: &lt;em&gt;2d-keys&lt;/em&gt;.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert: insert 2d points   &lt;/li&gt;
&lt;li&gt;search   &lt;/li&gt;
&lt;li&gt;range search: &lt;em&gt;find all keys lying in a 2d rectangle (h-v rectangle)&lt;/em&gt;   &lt;/li&gt;
&lt;li&gt;range count   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;gird implementation&lt;/h2&gt;
&lt;p&gt;divide space into a M-by-M grid (uniform squares). &lt;br /&gt;
space: N + M^2 &lt;br /&gt;
time: 1 + N/M^2  &lt;br /&gt;
→ choose square to balance space and time.  &lt;br /&gt;
problem: points are not uniformly distributed.  &lt;br /&gt;
&lt;img alt="" src="algoI_week5_2/pasted_image008.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;2d tree&lt;/h2&gt;
&lt;p&gt;Use a tree to represent the subdivision of the space.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2d tree&lt;/strong&gt;: recursively divide the space into 2 halfplanes &lt;br /&gt;
&lt;img alt="" src="algoI_week5_2/pasted_image009.png" /&gt;   &lt;/p&gt;
&lt;p&gt;construct the 2d tree by adding points: &lt;em&gt;alternating between horizontal and vertical partitioning for each level of tree&lt;/em&gt;.  &lt;br /&gt;
&lt;img alt="" src="algoI_week5_2/pasted_image010.png" /&gt;   &lt;/p&gt;
&lt;p&gt;Data structure: BST alternating x and y-coords as key.  &lt;br /&gt;
&lt;img alt="" src="algoI_week5_2/pasted_image011.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;Range search for 2d tree&lt;/h2&gt;
&lt;p&gt;find all points lying in a rectangle.  &lt;br /&gt;
依然类似tree traversal算法:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check point in node   &lt;/li&gt;
&lt;li&gt;find in left subtree (if could be in range — the rectangle &lt;em&gt;intersects&lt;/em&gt; the splitting line)   &lt;/li&gt;
&lt;li&gt;find in right subtree   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_2/pasted_image012.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;analysis&lt;/strong&gt; &lt;br /&gt;
Typical case: R + lgN &lt;br /&gt;
worst case: R+ sqrt(N) (even if tree is balanced) &lt;br /&gt;
(proof is hard)   &lt;/p&gt;
&lt;h2&gt;Nearest Neighbour seach&lt;/h2&gt;
&lt;p&gt;find closest point to a query point.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check dist from query point to node   &lt;/li&gt;
&lt;li&gt;check in left tree (&lt;em&gt;if could contain a closer point — 和两点连线与splitting line的角度有关系&lt;/em&gt;)   &lt;/li&gt;
&lt;li&gt;check in right tree   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;analysis&lt;/strong&gt; &lt;br /&gt;
typical case: lgN &lt;br /&gt;
worst case: N   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flocking boids&lt;/strong&gt; &lt;br /&gt;
3 simple rules to get a simulation of flocking.  &lt;br /&gt;
&lt;img alt="" src="algoI_week5_2/pasted_image013.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;Kd tree&lt;/h2&gt;
&lt;p&gt;partition the k-dim space into 2 halfspaces.  &lt;br /&gt;
cycle through k dimensions. &lt;br /&gt;
&lt;img alt="" src="algoI_week5_2/pasted_image014.png" /&gt; &lt;br /&gt;
(居然时一个本科生发现的!)   &lt;/p&gt;
&lt;p&gt;Nbody simulation: &lt;br /&gt;
treat clusters as an aggregated node   &lt;/p&gt;
&lt;h1&gt;4. Interval search tree&lt;/h1&gt;
&lt;p&gt;1d interval search:　data are intervals   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert interval    &lt;/li&gt;
&lt;li&gt;search interval   &lt;/li&gt;
&lt;li&gt;delete interval   &lt;/li&gt;
&lt;li&gt;intersection query: find all intervals that intersects (lo,hi)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_2/pasted_image015.png" /&gt; &lt;br /&gt;
Nondegeneracy assumption: all left endpoint of intervals are distinct.    &lt;/p&gt;
&lt;p&gt;API:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;put(Key lo, Key hi, Value val)   
get(Key lo, Key hi)   
delete(Key lo, Key hi)   
Iterable&amp;lt;Key&amp;gt; intersects(Key lo, Key hi)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Interval search tree:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;BST using left endpoint as key   &lt;/li&gt;
&lt;li&gt;in each node: store the &lt;em&gt;max right endpoint of the subtree&lt;/em&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_2/pasted_image016.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;insert&lt;/strong&gt; &lt;br /&gt;
类似BST, 加上维护一下maxendpoint即可.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;search&lt;/strong&gt; &lt;br /&gt;
search &lt;em&gt;any one&lt;/em&gt; interval that intersects (lo,hi)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if node intersects, return   &lt;/li&gt;
&lt;li&gt;if left.maxendpoint &amp;lt; lo: go right   &lt;/li&gt;
&lt;li&gt;else: go left   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;*proof. * &lt;br /&gt;
主要证明一点: if no intersection to left ⇒ then no intersection to the right &lt;br /&gt;
&lt;img alt="" src="algoI_week5_2/pasted_image018.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;5. Rectangle intersection&lt;/h1&gt;
&lt;p&gt;Goal:  find all intersection among N rectangles.  &lt;br /&gt;
(non degeneracy assumption: all x and y are distinct)    &lt;/p&gt;
&lt;p&gt;bottom line: linearithmic algo.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sweep-line algorithm:&lt;/strong&gt; &lt;br /&gt;
sweep vertical line from left to right.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when hit left part of a rect ⇒ put into an interval search tree   &lt;/li&gt;
&lt;li&gt;when hit right part of a rect ⇒ remove interval   &lt;/li&gt;
&lt;li&gt;every time befor adding ⇒ check intersection   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;reduces the 2d rect intersection pb to 1d interval search pb.&lt;/em&gt;    &lt;/p&gt;
&lt;p&gt;complexity:  &lt;br /&gt;
NlgN+RlgN   &lt;/p&gt;
&lt;p&gt;summery:  &lt;br /&gt;
&lt;img alt="" src="algoI_week5_2/pasted_image019.png" /&gt;   &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 5-1 Balanced Search Trees</title><link href="http://x-wei.github.io/algoI_week5_1.html" rel="alternate"></link><published>2015-08-26T16:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoI_week5_1.html</id><summary type="html">&lt;p&gt;goal: lgN for insert/search/delete operations (not necessarily &lt;em&gt;binary&lt;/em&gt; trees..) &lt;br /&gt;
3 algo: 2-3 tree, (left leaning) red-black tree, B-tree   &lt;/p&gt;
&lt;h1&gt;1. 2-3 Search Trees&lt;/h1&gt;
&lt;p&gt;def. &lt;strong&gt;2-3 tree&lt;/strong&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allow 1 or 2 keys per node, &amp;amp; 2 or 3 children per node:    &lt;ul&gt;
&lt;li&gt;2-node: one key, 2 children (ordinary BST node)   &lt;/li&gt;
&lt;li&gt;3-node: 2 keys, 3 children (3 children: &lt;em&gt;less, between, more&lt;/em&gt;)   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;perfect balance&lt;/strong&gt;: every path from root to null link has the same length (2-3 tree的一个超好的性质, &lt;em&gt;类似于一个满二叉树&lt;/em&gt;!)   &lt;/li&gt;
&lt;li&gt;symmetric order: inorder traversal gives ascending order (和BST类似)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_1/pasted_image.png" /&gt; &lt;br /&gt;
&lt;strong&gt;search&lt;/strong&gt; &lt;br /&gt;
Just follow the correct link... Natural generalization of search in BST...    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;insert&lt;/strong&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;case 1: insert into a 2-node at bottom   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;just convert a 2-node into a 3-node   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;case 2: insert into a 3-node at bottom   &lt;ul&gt;
&lt;li&gt;create a temporary 4-node (three keys)   &lt;/li&gt;
&lt;li&gt;move middle key in 4-node into parent, split the rest two keys into two 2-nodes   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_1/pasted_image001.png" /&gt;   &lt;img alt="" src="algoI_week5_1/pasted_image002.png" /&gt;    &lt;img alt="" src="algoI_week5_1/pasted_image003.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if parent becom a 3-node → continue the process   &lt;/li&gt;
&lt;li&gt;if arrived at the root (root is a 4-node with three keys): split it into three 2-nodes   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_1/pasted_image004.png" /&gt; &lt;img alt="" src="algoI_week5_1/pasted_image005.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;splitting a 4-node&lt;/strong&gt;: can be done in constant time (&lt;em&gt;local transformation&lt;/em&gt;).  &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image006.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;Invariant: maintains symmetric order and perfect balance.  &lt;br /&gt;
&lt;em&gt;proof.&lt;/em&gt;  &lt;br /&gt;
each transformation maintains the order and the balance, all possible transformations:  &lt;br /&gt;
这个图很好, 3-node的插入一共有三种情况: 自身是root/父亲是2-node/父亲是3-node &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image007.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;performance&lt;/strong&gt; &lt;br /&gt;
every path from root to null link has the same length.  &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image008.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;direct implementation is complicated:    &lt;/li&gt;
&lt;li&gt;bottom line: &lt;em&gt;Could do it, but there's a better way.&lt;/em&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2. Red-Black BST&lt;/h1&gt;
&lt;p&gt;LLRB tree: left-leaning red-black tree.    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;BST representation of the 2-3 trees&lt;/em&gt; &lt;br /&gt;
&lt;strong&gt;use internal left-leaning links for 3 nodes&lt;/strong&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;红色link即为internal left leaning link (红黑树就是这么来的), 用红色link连接起来的组成一个(虚拟的)3-node 或4-node.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3-node用一个red link表示:    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_1/pasted_image009.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4-node用两个red link表示:    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_1/pasted_image030.png" /&gt; ⇒ &lt;img alt="" src="algoI_week5_1/pasted_image029.png" /&gt; or &lt;img alt="" src="algoI_week5_1/pasted_image027.png" /&gt; or &lt;img alt="" src="algoI_week5_1/pasted_image028.png" /&gt;   &lt;/p&gt;
&lt;p&gt;example:  &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image010.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;properties&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;no node has two red links (不可以一个节点连两个red link)   &lt;/li&gt;
&lt;li&gt;every path from path to null link has the same number of &lt;em&gt;black&lt;/em&gt; links (想象所有red link都变为horizontal)   &lt;/li&gt;
&lt;li&gt;all red links lean left   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_1/pasted_image011.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;representation&lt;/h2&gt;
&lt;p&gt;Each node has only one link from parent  &lt;br /&gt;
⇒ add a boolean to encode color of links (the color of the link &lt;em&gt;from parent&lt;/em&gt;).  &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image012.png" /&gt;   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private class Node{   
    private Key key;   
    private Value val;   
    Node left, right;   
    boolean color;//true means red     
}    
private boolean isRed(Node nd){   
    if (nd==null) return false;   
    return nd.color;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;insert to parent 操作: 只需把color变为RED即表示该节点 被变成了和父节点一起的一个(虚拟)节点.    &lt;/p&gt;
&lt;h2&gt;elementary operations&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;left-rotation&lt;/strong&gt; &lt;br /&gt;
(def: &lt;em&gt;convert a right-learning red link to left.&lt;/em&gt; ) &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image013.png" /&gt;   &lt;img alt="" src="algoI_week5_1/pasted_image014.png" /&gt; &lt;br /&gt;
(symmetric ordering and perfect black balance are maintained)    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private Node rotateLeft(Node h){    
    Node s = h.right;   
    h.right = s.left;   
    s.left = h;   
    s.color = h.color;   // not = BLACK   
    h.color = RED;   
    return s;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;right-rotation&lt;/strong&gt; &lt;br /&gt;
(temporarily turn a left-leaning red link to right) &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image015.png" /&gt; &lt;img alt="" src="algoI_week5_1/pasted_image016.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;private Node rotateRight(Node h){...}&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;right rotation 是为了应对这种情况:  &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image024.png" /&gt; rotateRight(c) ⇒ &lt;img alt="" src="algoI_week5_1/pasted_image023.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;color-flip&lt;/strong&gt; &lt;br /&gt;
(split a 4-node, with three kyes — two red links) &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image017.png" /&gt;  &lt;img alt="" src="algoI_week5_1/pasted_image018.png" /&gt;   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private void filpColor(Node h){   
    h.color = RED;   
    h.left.color = BLACK;   
    h.right.color = BLACK;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Basic strategy&lt;/strong&gt; &lt;br /&gt;
Maintain &lt;em&gt;one-to-one correspondence&lt;/em&gt; with 2-3 tree by applying elementary operations.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;search&lt;/strong&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Exactly&lt;/em&gt; the same as elementary BST. ( ⇒ The same code for floor and ceiling)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;insert&lt;/strong&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Each insert will generate a red link&lt;/strong&gt; (then should rotate to make it legal)   &lt;/p&gt;
&lt;p&gt;插入的时候有两种可能:    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;insert into a 2-node at the bottom   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_1/pasted_image025.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;standart BST insert   &lt;/li&gt;
&lt;li&gt;if have red right link: rotateLeft   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex:  &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image021.png" /&gt;   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;insert into a 3-node    &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有三种可能: insert into left/middle/right, right最简单, left捎复杂, middle最复杂, 见下图:  &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image026.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;standard BST insert and color nodes   &lt;/li&gt;
&lt;li&gt;if necessary, rotate to balance 4-node, 比如:    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_1/pasted_image031.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flip colors to pass red link to upper level   &lt;/li&gt;
&lt;li&gt;if necessary, rotate to make all links left-leaning    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex: &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image032.png" /&gt; &lt;br /&gt;
ex2: &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image033.png" /&gt;    &lt;/p&gt;
&lt;p&gt;视频最后一段的demo太帅了! 叹为观止!!   &lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;原来&lt;strong&gt;只有4种(其实是3种)情况要调整&lt;/strong&gt;:    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;left = black, right = red&lt;/em&gt;   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_1/pasted_image034.png" /&gt;  ⇒ rotateLeft(a)   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;left =red, left.right = red [这个不会出现, 因为这对于下一层来说是case 1..]&lt;/em&gt;   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_1/pasted_image039.png" /&gt;  ⇒ rotateLeft(e) ⇒ 变为case 3    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;left = red, left.left = red&lt;/em&gt;   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_1/pasted_image035.png" /&gt;  ⇒ rotateRight(s) ⇒ 变为case 4   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;left = red. right = red&lt;/em&gt;   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_1/pasted_image036.png" /&gt;      ⇒ flipColor(r)   &lt;/p&gt;
&lt;p&gt;几个状态之间的转化:  &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image038.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只要三行代码即可处理LLRB tree !! 老爷子牛逼...... &lt;/strong&gt; &lt;br /&gt;
(这个也是在2007年algo第四版的时候才刚刚弄出来的, 以前的代码要复杂)   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private Node put(Node nd, Key k, Value v){   
    if(nd==null) return new Node(k,v,RED);   
    int cmp = k.compareTo(nd.key);   
    if(cmp==0) nd.val = v; // 这里不急着返回 -- same trick as for BSTs..   
    else if(cmp&amp;lt;0) nd.left = put(nd.left, k, v);   
    else nd.right = put(nd.right, k, v);   
    // modifications to maintain LLRB tree property:    
    if( isRed(nd.right) &amp;amp;&amp;amp; !isRed(nd.left) ) nd = rotateLeft(nd);//case 1   
    //if( isRed(nd.left) &amp;amp;&amp;amp; isRed(nd.left.right) ) nd.left = rotateLeft(nd.left);// case 2 -- never happen...   
    if( isRed(nd.left) &amp;amp;&amp;amp; isRed(nd.left.right) ) nd = rotateRight(nd);// case 3   
    if( isRed(nd.left) &amp;amp;&amp;amp; isRed(nd.right) ) flipColor(nd);//case 4   
    return nd;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这三行代码越看越精妙......    &lt;/p&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_1/pasted_image041.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;worst case&lt;/strong&gt;: the left path is &lt;em&gt;alternating red and black&lt;/em&gt;. &lt;br /&gt;
⇒ longest path &amp;lt;= 2 * shortest path  (height&amp;lt;= 2lgN)   &lt;/p&gt;
&lt;p&gt;practical applications: height ~ 1.0 lgN   &lt;/p&gt;
&lt;p&gt;summery:  &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image042.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;3. B-trees&lt;/h1&gt;
&lt;p&gt;setting: data access in file system.  &lt;br /&gt;
&lt;em&gt;Probe is much expensive than accessing data within a page.&lt;/em&gt;    &lt;/p&gt;
&lt;p&gt;Goal: access data using a minimum number of probes.   &lt;/p&gt;
&lt;h2&gt;B-tree&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;def.&lt;/strong&gt; &lt;br /&gt;
external nodes: contain just keys, not links &lt;br /&gt;
internal nodes: contain key-link pairs   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;def. B-tree&lt;/strong&gt; &lt;br /&gt;
Generalize 2-3 trees by allowing up to M-1 keys per node:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;= 2 keys in root   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;= M/2 keys in other nodes   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;external nodes contain client keys   &lt;/li&gt;
&lt;li&gt;internal nodes contain copies of keys to guide search   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_1/pasted_image043.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;Searching&lt;/h2&gt;
&lt;p&gt;similar to BST/2-3tree &lt;br /&gt;
ex. &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image044.png" /&gt;   &lt;/p&gt;
&lt;p&gt;(Choose M as large as possible so that M links fit into a page)   &lt;/p&gt;
&lt;h2&gt;Insertion&lt;/h2&gt;
&lt;p&gt;similar to 2-3 tree &lt;br /&gt;
&lt;img alt="" src="algoI_week5_1/pasted_image045.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_1/pasted_image046.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;System implementations&lt;/h2&gt;
&lt;p&gt;system implementations of RBtree. &lt;br /&gt;
java:  &lt;br /&gt;
&lt;code&gt;java.util.TreeMap&lt;/code&gt;, &lt;code&gt;java.util.TreeSet&lt;/code&gt;.   &lt;/p&gt;
&lt;p&gt;八卦1: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week5_1/pasted_image047.png" /&gt;     &lt;/p&gt;
&lt;p&gt;八卦2: 
Sedgewick 的朋友, &lt;a href="https://fr.wikipedia.org/wiki/Philippe_Flajolet"&gt;Philippe Flajolet&lt;/a&gt;, 是一个X!    &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 4-2b Binary Search Trees</title><link href="http://x-wei.github.io/algoI_week4_2b.html" rel="alternate"></link><published>2015-08-26T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoI_week4_2b.html</id><summary type="html">&lt;p&gt;(BST是锻炼递归代码的好题目)   &lt;/p&gt;
&lt;h1&gt;1. Binary Search Trees&lt;/h1&gt;
&lt;p&gt;def. &lt;strong&gt;BST&lt;/strong&gt; &lt;br /&gt;
A binary tree where each node has a key:  &lt;br /&gt;
for every node, the key is larger than &lt;em&gt;all nodes in left&lt;/em&gt; subtree, smaller than &lt;em&gt;all nodes in right&lt;/em&gt; subtree.  &lt;br /&gt;
&lt;img alt="" src="algoI_week4_2b/pasted_image.png" /&gt; &lt;br /&gt;
Fields: key, val, left, right   &lt;/p&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;An inner class of BST nodes:    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private class Node{   
    private Key key;   
    private Value val;   
    private Node left, right;   
    public Node(Key k, Value v){...}   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;skeleton implementation of BST:    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class BST&amp;lt;Key implements Comparable&amp;lt;Key&amp;gt;, Value&amp;gt;{   
private Node root;   
private class Node{...}   
public Value get(Key k){...}   
public void put(Key k, Value v){}   
public void delete(Key k){}   
public Iterable&amp;lt;Key&amp;gt; iterator(){}   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;search&lt;/strong&gt; &lt;br /&gt;
recursive version:  &lt;br /&gt;
(或者把这个函数写到Node类里面也可以. )   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private Value get(Node nd, Key k){   
    if(nd==null) return null; // search miss   
    int cmp = k.compareTo(nd.key);   
    if(cmp==0) return nd.val; // search hit   
    else if (cmp&amp;gt;0) return get(nd.right, k);   
    else return get(nd.left, k);   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;non-recursive version:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public Value get(Key k){   
    Node nd=root;   
    while(root!=null){   
        int cmp = k.compareTo(nd.key);   
        if (cmp==0) return nd.val;   
        else if(cmp&amp;gt;0) nd = nd.right;   
        else nd = nd.left;   
    }   
    return null;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;insert&lt;/strong&gt; &lt;br /&gt;
recursive version:  &lt;br /&gt;
(注意这个recursive函数的返回值不是void! 这里是一个trick: 返回的是在分叉以前的那个节点)   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private Node put(Node nd, Key k, Value v){   
    if(nd==null) return new Node(k, v);   
    int cmp = k.compareTo(nd.key);   
    if(cmp==0) nd.val = v;   
    else if(cmp&amp;gt;0) nd.right = put(nd.right, k, v);   
    else nd.left = put(nd.left, k, v);   
    return nd;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;non-recursive version: &lt;br /&gt;
不如递归版本优美...   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public void put(Key k, Value v){   
    Node nd = root;   
    while(true){   
        int cmp = k.compareTo(nd.key);   
        if(cmp==0) {   
            nd.val = v; break;   
        }   
        else if(cmp&amp;gt;0){    
            if(nd.right!=null) nd = nd.right;   
            else {nd.right = new Node(k,v); break;}   
        }   
        else if (nd.left!=null) {    
            if(nd.left!=null) nd = nd.left;   
            else {nd.left = new Node(k,v); break;}   
        }   
    }   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;complexity: depth of the BST.    &lt;/p&gt;
&lt;p&gt;shape of BST: depends on how the keys come in (order of insertion).  &lt;br /&gt;
&lt;img alt="" src="algoI_week4_2b/pasted_image001.png" /&gt; &lt;br /&gt;
if keys come in &lt;em&gt;random&lt;/em&gt; order: could be pretty well balanced.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BST and quick-sort partitionning&lt;/strong&gt; &lt;br /&gt;
&lt;em&gt;The root of BST is just the pivot in quick sort partitioning  * &lt;br /&gt;
if all keys are distinct ⇒ one-to-one correspondence between quick sort and BST.  &lt;br /&gt;
&lt;img alt="" src="algoI_week4_2b/pasted_image002.png" /&gt;  &lt;br /&gt;
⇒ &lt;strong&gt;proposition&lt;/strong&gt; &lt;br /&gt;
if all keys are distinct and come in randome order, the average number of compares for a search/insert is ~2lnN (or 1.39lgN).  &lt;br /&gt;
&lt;/em&gt;proof.* &lt;br /&gt;
证明见quicksort那里的数学推导...    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;proposition &lt;/strong&gt;(Reed, 2003) &lt;br /&gt;
N distinct keys come in random order, average tree height = 4.300lnN   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Worst-case:&lt;/strong&gt; &lt;br /&gt;
The tree becomes just like a linked list: ~N for insertion and search   &lt;/p&gt;
&lt;h1&gt;2. Oredered Operations in BST&lt;/h1&gt;
&lt;p&gt;task: ordered opeartions   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;min()/max()&lt;/code&gt;: min/max key   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteMin()/deleteMax()&lt;/code&gt;   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;floor(Key k)/ceiling(Key k)&lt;/code&gt;: largest key &amp;lt;=k / smallest key &amp;gt;=k   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;rank(Key k)&lt;/code&gt;: nb of keys &amp;lt; key   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;select(int i)&lt;/code&gt;: key with rank=i   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Iterator&amp;lt;Key&amp;gt; keys(lo, hi)&lt;/code&gt;: iterates through [lo, hi]   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;min/max&lt;/h2&gt;
&lt;p&gt;easy &lt;br /&gt;
min: left-most &lt;br /&gt;
max: right-most &lt;br /&gt;
&lt;img alt="" src="algoI_week4_2b/pasted_image003.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;floor/ceiling&lt;/h2&gt;
&lt;p&gt;a little more complexed...    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;floor (ceiling is similar)&lt;/strong&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if k==nd.key   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;return nd.val   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if k&amp;lt;nd.key   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the floor &lt;em&gt;must&lt;/em&gt; be in the left subtree   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if k&amp;gt;nd.key   &lt;ul&gt;
&lt;li&gt;如果min(nd.right) &amp;gt; k: 返回nd.val   &lt;/li&gt;
&lt;li&gt;如果min(nd.right) &amp;lt;= k: go to right   &lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public Value floor(Node nd, Key k){// largest element with key &amp;lt;= k       
int cmp = k.compareTo(nd.key);         
if(cmp==0) return nd.val;//case 1   
else if(cmp&amp;lt;0) return floor(nd.left, k);//case 2   
if (nd.right==null || min(nd.right).compareTo(k)&amp;gt;0) //case 3   
    return nd.val;   
else return floor(nd.right);   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他提供的版本和我写的不一样: 递归函数floor返回的也是一个Node:  &lt;br /&gt;
&lt;img alt="" src="algoI_week4_2b/pasted_image004.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;rank/select&lt;/h2&gt;
&lt;p&gt;In each node, store the number of nodes in the subtree: &lt;em&gt;add an extra field&lt;/em&gt;.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;size&lt;/strong&gt;   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private class Node{   
    private int count;   
    //...   
}    
public int size(){   
    return size(root);   
}   
public int size(Node nd){   
    if(nd==null) return 0;// this is why we do not put size() inside the class Node!   
    return nd.count;   
}   
public void put(Node nd, Key k, Value v){   
    //.....   
    nd.count = size(nd.left)+size(nd.right)+1;//maintain count for each node   
    return nd;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;rank&lt;/strong&gt; &lt;br /&gt;
(return nb of keys &amp;lt; k)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if nd.key==k   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;return size(nd.left)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if nd.key&amp;gt;k   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;return rank(nd.left, k)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if nd.key&amp;lt;k   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;return size(nd.left)+1+rank(nd,right, k)   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private int rank(Node nd, Key k){   
    if(nd==null) return 0;//remember null case   
    int cmp = k.compareTo(nd.key);   
    if(cmp==0) return size(nd.left)   
    else if (cmp&amp;lt;0) return rank(nd.left, k);   
    else return size(nd.left)+1+rank(nd.right,k);   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;select() similar...   &lt;/p&gt;
&lt;h2&gt;iteration&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Inorder traversal 中序遍历&lt;/strong&gt;   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public Iterable&amp;lt;Key&amp;gt; keys(){   
    Queue&amp;lt;Key&amp;gt; q = new Queue&amp;lt;Key&amp;gt;();   
    inorder(root, q);   
    return q;   
}    
private void inorder(Node nd, Queue&amp;lt;Key&amp;gt; q){   
    if(nd==null) return;   
    inorder(nd.left);   
    q.enqueue(nd.key);   
    inorder(nd.right);   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="algoI_week4_2b/pasted_image005.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;property&lt;/strong&gt; &lt;br /&gt;
inorder-traversal gives the keys &lt;em&gt;in ascending order&lt;/em&gt;.  &lt;br /&gt;
(proof by induction)   &lt;/p&gt;
&lt;h1&gt;3. Deletions in BST&lt;/h1&gt;
&lt;p&gt;one final function to implement: delete(Key k), deleteMin(), deleteMax() &lt;br /&gt;
→ and remember to update the count field...   &lt;/p&gt;
&lt;p&gt;(感觉这篇文章其实就讲的很清楚了: &lt;a href="http://www.algolist.net/Data_structures/Binary_search_tree/Removal"&gt;http://www.algolist.net/Data_structures/Binary_search_tree/Removal&lt;/a&gt;   这个在递归函数里使用了parent这个参数)   &lt;/p&gt;
&lt;h2&gt;lazy approch&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;put(k, null)&lt;/code&gt;, and leave the key in the tree (tombstone) &lt;br /&gt;
→ not good if have large number of tombstons...    &lt;/p&gt;
&lt;h2&gt;deleteMin/Max&lt;/h2&gt;
&lt;p&gt;go the the left-most node → replace it with its right node.  &lt;br /&gt;
Recusive function with the &lt;em&gt;returning-node trick&lt;/em&gt;:    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private Node deleteMin(Node nd){   
    if(nd==null) return null; // this might not happen   
    if(nd.left==null) return nd.right;   
    else nd.left = deleteMin(nd.left);   
    nd.count = size(nd.left)+1+size(right);//remember to maintain the count field   
    return nd;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个递归的技巧又一次使用了.   &lt;/p&gt;
&lt;h2&gt;Hibbard deletion&lt;/h2&gt;
&lt;p&gt;first find node with the key to delete, 3 cases:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 children:    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;simply set parent link to null &lt;br /&gt;
&lt;img alt="" src="algoI_week4_2b/pasted_image006.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 child:    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;replace parent link with the child &lt;br /&gt;
&lt;img alt="" src="algoI_week4_2b/pasted_image007.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2 children (most subtle)&lt;/strong&gt;   &lt;ul&gt;
&lt;li&gt;first replace node key with smallest key in right subtree   &lt;/li&gt;
&lt;li&gt;remove the smallest key in right subtree   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week4_2b/pasted_image008.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;code of Hibbard deletion&lt;/strong&gt; &lt;br /&gt;
Again (for the 3rd time) use the &lt;em&gt;return-nd trick&lt;/em&gt;...   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private Node delete(Node nd, Key k){   
    if(nd==null) return null;// search miss   
    int cmp = k.compareTo(nd.key);   
    if(cmp&amp;gt;0) nd.right = delete(nd.right, k);   
    else if(cmp&amp;lt;0) nd.left = delete(nd.left,k);   
    else{   
        //if nd is the node to delete   
        if(nd.left==null) return nd.right;   
        if(nd.right==null) return nd.left;   
        Key k2 = min(nd.right);   
        nd.key = k2;   
        nd.right = delete(nd.right, k2);   
    }   
    nd.count = size(nd.left)+1+size(nd.right);   
    return nd;   
}    
public void delete(Key k){   
    root = delete(root, k);   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;感觉用了recursive return-nd 这个trick的实现很漂亮.... 比那篇博客里放一个参数进递归函数以及用auxroot的办法要好不少...    &lt;/p&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;problem: &lt;em&gt;not symmetric&lt;/em&gt; &lt;br /&gt;
If random insert and delete for a while ⇒ tree become much less balanced ! Tree height tend to be sqrt(N).    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;summery&lt;/strong&gt; &lt;br /&gt;
BST is much better in average case, but not guaranteed for worst case.  &lt;br /&gt;
&lt;img alt="" src="algoI_week4_2b/pasted_image009.png" /&gt;   &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 4-2a Elementry Symbol Tables</title><link href="http://x-wei.github.io/algoI_week4_2a.html" rel="alternate"></link><published>2015-08-25T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoI_week4_2a.html</id><summary type="html">&lt;h1&gt;1. Symbol Table API&lt;/h1&gt;
&lt;p&gt;key-value pair abstraction    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;insert&lt;/strong&gt; a value with a key   &lt;/li&gt;
&lt;li&gt;given a key, &lt;strong&gt;search&lt;/strong&gt; for its value   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Association array abstraction&lt;/h2&gt;
&lt;p&gt;Associate a value to a key — generalized array: &lt;em&gt;a[key]=val&lt;/em&gt;.    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class ST&amp;lt;Key, Value&amp;gt;{   
    void put(Key k, Value v);//remove key if value=null   
    Value get(Key k);//return null if key is absent   
    void delete(Key k);   
    boolean contains(Key k);   
    boolean isEmpty();   
    int size();   
    Iterable&amp;lt;Key&amp;gt; keys();//better to return an ordered sequence of keys   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;conventions:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;values are not null   &lt;/li&gt;
&lt;li&gt;get() returns null if key not present   &lt;/li&gt;
&lt;li&gt;put() can &lt;em&gt;overwrite&lt;/em&gt; older value   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ some one-line implementations:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contains: &lt;code&gt;return get(k)!=null;&lt;/code&gt;   &lt;/li&gt;
&lt;li&gt;delete: &lt;code&gt;put(k, null);&lt;/code&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Assume keys to be comparable: &lt;code&gt;class ST&amp;lt;Key implements Comparable&amp;lt;Key&amp;gt;, Value&amp;gt;&lt;/code&gt;— can thus use &lt;code&gt;compareTo()&lt;/code&gt; method.  &lt;br /&gt;
Else →  we can only use the &lt;code&gt;equals()&lt;/code&gt; method...  &lt;br /&gt;
Be careful when implementing the equals method: 坑不少...  &lt;br /&gt;
&lt;img alt="" src="algoI_week4_2a/pasted_image.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;2. Elementary implementations&lt;/h1&gt;
&lt;p&gt;naive implementations   &lt;/p&gt;
&lt;h2&gt;using unordered linked list&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;ListNode{key, value, next}&lt;/em&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;search: scan through all keys ~N   &lt;/li&gt;
&lt;li&gt;insert: scan through, if not found, add to front ~N   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week4_2a/pasted_image001.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;using ordered array&lt;/h2&gt;
&lt;p&gt;using 2 arrays: &lt;em&gt;keys[] (sorted), vals[]&lt;/em&gt; &lt;br /&gt;
⇒ can improve performance by binary search   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;search operation&lt;/strong&gt; &lt;br /&gt;
write a function rank() that returns the number of keys &amp;lt; k searched.  &lt;br /&gt;
找不到的时候: &lt;em&gt;比k小的元素个数=lo (lo&amp;gt;hi, 可以想想当hi=lo以后是怎么移动的)&lt;/em&gt;   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private int rank(Key k){   
    int lo=0, hi=keys.length-1;   
    while(hi&amp;gt;=lo){   
        int mid = lo + (hi-lo)/2;   
        int cmp = keys[mid].compareTo(keys[k]);   
        if(cmp==0) return mid;   
        else if(cmp&amp;gt;0) hi = mid-1;   
        else lo = mid+1;   
    }   
    return lo;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using rank() to implement the get() method:    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public Value get(Key k){   
    int rk = rank(k);   
    if(rk&amp;lt;N &amp;amp;&amp;amp; keys[rk].compareTo(k)==0) return vals[rk];   
    return null;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;insert operation&lt;/strong&gt; &lt;br /&gt;
Like insertion sort, time complexity is ~N for each insert.    &lt;/p&gt;
&lt;p&gt;summery:  &lt;br /&gt;
&lt;img alt="" src="algoI_week4_2a/pasted_image002.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;3. Ordered Opeartions&lt;/h1&gt;
&lt;p&gt;When keys are comparable ⇒ provide &lt;em&gt;more functionalities&lt;/em&gt; in the API.  &lt;br /&gt;
for example:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;min()/max()&lt;/code&gt;: min/max key   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteMin()/deleteMax()&lt;/code&gt;   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;floor(Key k)/ceiling(Key k)&lt;/code&gt;: largest key &amp;lt;=k / smallest key &amp;gt;=k   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;rank(Key k)&lt;/code&gt;: nb of keys &amp;lt; key   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;select(int i)&lt;/code&gt;: key with rank=i   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Iterator&amp;lt;Key&amp;gt; keys(lo, hi)&lt;/code&gt;: iterates through [lo, hi]   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week4_2a/pasted_image004.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week4_2a/pasted_image003.png" /&gt;   &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 4-1 Priority Queue</title><link href="http://x-wei.github.io/algoI_week4_1.html" rel="alternate"></link><published>2015-08-24T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoI_week4_1.html</id><summary type="html">&lt;h1&gt;1. API and elementary implementations&lt;/h1&gt;
&lt;p&gt;Collection: data struct for inserting and deleting items (ex. stack and queue).  &lt;br /&gt;
Priority queue: a special kind of collection — remove &lt;em&gt;largest/smallest&lt;/em&gt; element.    &lt;/p&gt;
&lt;p&gt;API:    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Max&amp;lt;Kye implements Comparable&amp;lt;Key&amp;gt;&amp;gt;{   
    public MaxPQ();    
    public void insert(Key k);   
    public Key delMax();    
    public boolean isEmpty();     
    public Key max();   
    int size();

}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;PQ client example&lt;/h2&gt;
&lt;p&gt;find &lt;em&gt;M largest&lt;/em&gt; elements from N items. (N is too huge to store) &lt;br /&gt;
⇒ 思路: 用 &lt;strong&gt;Min&lt;/strong&gt;&lt;em&gt;PQ&lt;/em&gt;, 当size&amp;gt;M时删掉最小元素 — 最后剩下的就是最大的M个元素了.  &lt;br /&gt;
&lt;img alt="" src="algoI_week4_1/pasted_image.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;elementary(naive) implementations&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;unordered array implementation&lt;/strong&gt; &lt;br /&gt;
insert ~1,  &lt;br /&gt;
remove ~N   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ordered array implementation&lt;/strong&gt; &lt;br /&gt;
insert ~N — ~ insertion sort, &lt;br /&gt;
remove ~1   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;goal&lt;/strong&gt;:  &lt;br /&gt;
insert O(lgN) &amp;amp; remove max O(lgN)   &lt;/p&gt;
&lt;h1&gt;2. Binary Heaps&lt;/h1&gt;
&lt;p&gt;binary heap: a special kind of &lt;em&gt;complete binary tree&lt;/em&gt;.    &lt;/p&gt;
&lt;p&gt;def. "&lt;strong&gt;complete binary tree"&lt;/strong&gt; &lt;br /&gt;
All level except the last level are full, all nodes in the last level are as far left as possible.   &lt;br /&gt;
完全二叉树大概长这个样子:  &lt;br /&gt;
&lt;img alt="" src="algoI_week4_1/pasted_image001.png" /&gt;   &lt;/p&gt;
&lt;p&gt;property: a complete binary tree with N items has height = lgN.    &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;binary heap&lt;/strong&gt; &lt;br /&gt;
Binary heap is a complete binary tree that satisfies: &lt;em&gt;each node &amp;gt;= any of its 2 children&lt;/em&gt; ("heap ordering").    &lt;/p&gt;
&lt;p&gt;property of binary heap:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;max element is root   &lt;/li&gt;
&lt;li&gt;height is lgN   &lt;/li&gt;
&lt;li&gt;&lt;em&gt;each node still makes a heap&lt;/em&gt; (use this property to construct heap from bottom up)   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Array representation of binary heap&lt;/h2&gt;
&lt;p&gt;Use an array &lt;code&gt;a[]&lt;/code&gt; to represent a complete binary tree: very easy to get children and parent.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index starting from 1&lt;/strong&gt; (root = a[1], do not use a[0])    &lt;/li&gt;
&lt;li&gt;for node at index &lt;code&gt;i&lt;/code&gt;, its children are: &lt;code&gt;i*2&lt;/code&gt; and &lt;code&gt;i*2+1&lt;/code&gt;   &lt;/li&gt;
&lt;li&gt;for node at index &lt;code&gt;i&lt;/code&gt; (i&amp;gt;1), its parent is: &lt;code&gt;i/2&lt;/code&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week4_1/pasted_image002.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;简言之就是:  &lt;br /&gt;
&lt;img alt="" src="algoI_week4_1/pasted_image003.png" /&gt;   &lt;/p&gt;
&lt;p&gt;内部成员变量:    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class MaxPQ&amp;lt;Key implements Comparable&amp;lt;Key&amp;gt;&amp;gt;{   
    private Key[] a;   
    private int N;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;siftup (swim)&lt;/strong&gt; &lt;br /&gt;
if a node is larger than its parent: &lt;em&gt;exchange with parent until heap ordering is restored.&lt;/em&gt;    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private void swim(int k){   
    while(k&amp;gt;1 &amp;amp;&amp;amp; less(a[k/2], a[k]){   
        exch(a,k,k/2);   
        k /= 2;   
    }   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;⇒ &lt;strong&gt;use siftup for inserting elements&lt;/strong&gt; &lt;br /&gt;
when inserting an element, first append it to the end of the array, then siftup the element to its right position.    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public void insert(Key k){    
a[N++]=x;   
swim(N);   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;siftdown (sink)&lt;/strong&gt; &lt;br /&gt;
if a node is smaller than its children: &lt;em&gt;exchange it with the bigger child.&lt;/em&gt; 用公司高层变动来类比很形象...    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private void sink(int k){   
    while(k*2&amp;lt;=N){   
        int maxIndex = less(a[k],a[k*2])? k*2 : k;   
        if(k*2+1&amp;lt;=N &amp;amp;&amp;amp; less(a[maxIndex],a[k*2+1]) maxIndex = 2*k+1;   
        if(maxIndex==k) break;   
        exch(a,k,maxIndex);   
        k = maxIndex;   
    }   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;⇒ use siftdown for deleting max operation&lt;/strong&gt; &lt;br /&gt;
First put a[N] to the position of root, then sink. (注意要防止loitering)   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public Key delMax(){   
    Key ret = a[1];   
    a[1] = a[N];   
    a[N--] = null; // avoid loitering   
    sink(1);   
    return ret;   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;insert: ~lgN &lt;br /&gt;
remove max: ~lgN   &lt;/p&gt;
&lt;p&gt;improvements:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use a &lt;strong&gt;d-way heap&lt;/strong&gt; instead of a 2-way heap (for ex. 3-way heap, the children of i are i&lt;em&gt;3, i&lt;/em&gt;3+1, i*3+2, the parent of i is i/3)   &lt;/li&gt;
&lt;li&gt;Fibonacci heap: insert is &lt;em&gt;~1&lt;/em&gt;, remove max still ~lgN, (but too complicated to use in practice).    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week4_1/pasted_image004.png" /&gt;   &lt;/p&gt;
&lt;p&gt;considerations:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use immutable keys to avoid client from changing the keys (&lt;code&gt;final&lt;/code&gt; keyword in java)   &lt;/li&gt;
&lt;li&gt;underflow/overflow: throw exceptions for delMax() when empty, use resizing array for implementation.   &lt;/li&gt;
&lt;li&gt;expand the API with other operations: remove an arbitrary item, change the prority of an item (like handling an array)...   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;3. Heapsort&lt;/h1&gt;
&lt;p&gt;Basic idea:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a max heap with all N entries &lt;strong&gt;("heap-construction")&lt;/strong&gt;   &lt;/li&gt;
&lt;li&gt;then repeatedly remove all N items &lt;strong&gt;("sortdown")&lt;/strong&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;heap construction&lt;/strong&gt;  &lt;br /&gt;
Construct the heap using a &lt;strong&gt;bottom-up&lt;/strong&gt; method: build the heaps with small size first.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one-node heaps (jus leaf node of heap): need not consider   &lt;/li&gt;
&lt;li&gt;larger heaps: children(subtrees) are already heap-order → just perform sink operation for root   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ &lt;em&gt;sink elements at indices from N/2 to 1&lt;/em&gt;   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for(int k=N/2; k&amp;gt;=1; k++)   
sink(k);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;→ complexity is &lt;strong&gt;linear&lt;/strong&gt;, see analysis below.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;heap destruction &lt;/strong&gt; &lt;br /&gt;
now that we have a max-heap, to get the sorted array &lt;em&gt;in-place,&lt;/em&gt; simply do:    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while(N&amp;gt;1){   
exch(a,1, N--);   
sink(1);   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;proposition&lt;/strong&gt; &lt;br /&gt;
Heap construction uses &lt;strong&gt;&amp;lt;2N&lt;/strong&gt; compares and exchanges.  &lt;br /&gt;
&lt;em&gt;proof&lt;/em&gt; &lt;br /&gt;
一个有h层的heap, 高度为k的subtree有 2^(h-k)个, 每个subtree最多可以交换k次(从root交换到最底层)  &lt;br /&gt;
→ 每一层最多有 k*2^(h-k) 次交换  &lt;br /&gt;
&lt;img alt="" src="algoI_week4_1/pasted_image007.png" /&gt;   &lt;br /&gt;
(第一个等式可以用数学归纳法证...)  &lt;br /&gt;
&lt;a href=""&gt;详细证明见http://algs4.cs.princeton.edu/24pq/&lt;/a&gt;  (Q20答案)   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;proposition&lt;/strong&gt; &lt;br /&gt;
Heapsort use &amp;lt; 2NlgN compares and exchanges.    &lt;/p&gt;
&lt;p&gt;Heapsort is the first &lt;em&gt;in-place&lt;/em&gt; sorting algorithm with NlgN &lt;em&gt;worst-case&lt;/em&gt; performance.  &lt;br /&gt;
&lt;img alt="" src="algoI_week4_1/pasted_image005.png" /&gt;   &lt;/p&gt;
&lt;p&gt;⇒ heapsort is &lt;em&gt;optimal for time and space&lt;/em&gt;, but:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inner loop is longer than quicksort   &lt;/li&gt;
&lt;li&gt;poor use of cache memory (too many references to cache — look far away from the array entry when going down through the tree)   &lt;/li&gt;
&lt;li&gt;not stable: because it does long-distance exchanges   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Summary:  &lt;br /&gt;
&lt;img alt="" src="algoI_week4_1/pasted_image006.png" /&gt;   &lt;/p&gt;
&lt;h1&gt;4. Event-driven simulation&lt;/h1&gt;
&lt;p&gt;Goal: simulating the motion of N particles in elastic collision (using a priority queue).  &lt;br /&gt;
&lt;img alt="" src="algoI_week4_1/pasted_image008.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;model&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week4_1/pasted_image009.png" /&gt; &lt;br /&gt;
bouncing balls (without collision) &lt;br /&gt;
&lt;img alt="" src="algoI_week4_1/pasted_image010.png" /&gt;    &lt;/p&gt;
&lt;p&gt;Ball class:  &lt;br /&gt;
&lt;img alt="" src="algoI_week4_1/pasted_image011.png" /&gt;   &lt;/p&gt;
&lt;p&gt;challenge: which objects to check? How to do it efficently ?   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time driven simulation&lt;/strong&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;upate the position of balls every &lt;code&gt;dt&lt;/code&gt; seconds   &lt;/li&gt;
&lt;li&gt;if overlap detected: figure how the velocity change and continue the simulation.    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;problem with time-driven simulation:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1/2*N^2 overlap check per time unit   &lt;/li&gt;
&lt;li&gt;if dt small: too much calculation   &lt;/li&gt;
&lt;li&gt;if dt too large: might miss collisions   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Event driven simulation&lt;/h2&gt;
&lt;p&gt;change state only when something happens   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;particles move in straight line before collision   &lt;/li&gt;
&lt;li&gt;→ collision time can be &lt;em&gt;predicted&lt;/em&gt;   &lt;/li&gt;
&lt;li&gt;maintain PQ for collisions, key=collision time    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;collision prediction&lt;/strong&gt; &lt;br /&gt;
input: each particle has radius &lt;code&gt;s&lt;/code&gt;, position &lt;code&gt;(rx, ry)&lt;/code&gt;, velocity &lt;code&gt;(vx, vy)&lt;/code&gt;. &lt;br /&gt;
&lt;img alt="" src="algoI_week4_1/pasted_image013.png" /&gt; &lt;br /&gt;
&lt;img alt="" src="algoI_week4_1/pasted_image014.png" /&gt;  &lt;br /&gt;
(美国高中物理这么凶残?...)   &lt;/p&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;anyway, 这个是封装好的类: &lt;br /&gt;
&lt;img alt="" src="algoI_week4_1/pasted_image015.png" /&gt; &lt;br /&gt;
注意, 使用了count记录一个particle到目前为止的碰撞次数.    &lt;/p&gt;
&lt;p&gt;initialization: &lt;strong&gt;quadratic&lt;/strong&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fill PQ with all &lt;em&gt;potential&lt;/em&gt;  particle-particle collisions   &lt;/li&gt;
&lt;li&gt;Fill (the same) PQ with all &lt;em&gt;potential&lt;/em&gt;  particle-wall collisions   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Main loop &lt;/strong&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get next event from PQ, event time = t   &lt;/li&gt;
&lt;li&gt;ignore if the event is &lt;em&gt;invalidated&lt;/em&gt;   &lt;/li&gt;
&lt;li&gt;advance all particles to time t   &lt;/li&gt;
&lt;li&gt;update velocities   &lt;/li&gt;
&lt;li&gt;predict future collisions and insert to PQ   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week4_1/pasted_image018.png" /&gt; &lt;br /&gt;
判断invalidate:  &lt;br /&gt;
一个event构造(predict)时记录粒子构造时刻的碰撞次数(countA, countB), &lt;br /&gt;
然后在调用invalidate的时候, 如果粒子的碰撞次数发生了改变, 则返回false.  &lt;br /&gt;
(详见他们的代码: &lt;a href="http://algs4.cs.princeton.edu/61event/CollisionSystem.java.html"&gt;http://algs4.cs.princeton.edu/61event/CollisionSystem.java.html&lt;/a&gt;)   &lt;/p&gt;
&lt;p&gt;Event class:  &lt;br /&gt;
&lt;img alt="" src="algoI_week4_1/pasted_image016.png" /&gt; &lt;br /&gt;
&lt;img alt="" src="algoI_week4_1/pasted_image017.png" /&gt;   &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 3-2 Quicksort</title><link href="http://x-wei.github.io/algoI_week3_2.html" rel="alternate"></link><published>2015-08-22T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoI_week3_2.html</id><summary type="html">&lt;p&gt;(maybe best algorithm for sorting.)   &lt;/p&gt;
&lt;h1&gt;1. Quicksort&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Idea:&lt;/strong&gt;     &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;shuffle the array     &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Partition&lt;/em&gt; the array into two subarrays to left and right of pivot  (*now pivot is &lt;strong&gt;*in its final position&lt;/strong&gt;)   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;no larger entry to the left of pivot   &lt;br /&gt;
no smaller entry to the right of pivot     &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sort each subarray recursively     &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week3_2/pasted_image.png" /&gt;      &lt;/p&gt;
&lt;h2&gt;Implemetation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The partition process:&lt;/strong&gt;    &lt;br /&gt;
这个方法也比较巧妙.  &lt;br /&gt;
Use 2 pointers i and j (个人觉得用hi, lo, pivot更好...) :    &lt;br /&gt;
&lt;img alt="" src="algoI_week3_2/pasted_image001.png" /&gt;    &lt;br /&gt;
→ a[i]&amp;gt;=a[lo], a[j]&amp;lt;&lt;strong&gt;=&lt;/strong&gt;a[lo] (注意是大于&lt;strong&gt;等于&lt;/strong&gt;/小于&lt;strong&gt;等于&lt;/strong&gt;)    &lt;br /&gt;
⇒ exchange i and j    &lt;br /&gt;
→ Scan until i and j cross (ie. j&amp;lt;=i)    &lt;br /&gt;
⇒ finally exchange lo with &lt;strong&gt;j&lt;/strong&gt; &lt;br /&gt;
函数的签名定义的好: 把lo到hi部分的数组分成两部分, 并返回分割点的index.   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private static int partition(Comparable[] a, int lo, int hi){   
    int i=lo+1, j=hi;   
    while(i&amp;lt;j){   
        while( i&amp;lt;=hi &amp;amp;&amp;amp; less(a[i],a[lo]) ) i++; //a[i]&amp;gt;=a[lo]   
        while( j&amp;gt;=lo &amp;amp;&amp;amp; less(a[lo],a[j]) ) j--; //a[j]&amp;lt;=a[lo]   
        if(i&amp;lt;j) exch(a,i++,j--);   
    }   
    exch(a,lo,j); //exchange pivot with j   
    return j; //j in its final position   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个函数其实并不好写对:     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test for cross pointers is not trival (ex. edge case: the pivot is the smallest/largest entry in the range)   &lt;/li&gt;
&lt;li&gt;i&amp;lt;=hi is necessary !    &lt;/li&gt;
&lt;li&gt;for keys equal to a[lo]: better to stop at them   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;invariance:    &lt;br /&gt;
&lt;img alt="" src="algoI_week3_2/pasted_image002.png" /&gt;      &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quicksort:   &lt;/strong&gt; &lt;br /&gt;
使用partition函数和辅助sort函数(recursive).  注意在整个流程开始以前先shuffle一下.     &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private static void sort(Comparable[] a, int lo, int hi){   
    if(hi&amp;lt;=lo) return;   
    int pivot = partition(a, lo, hi);   
    sort(a,lo,pivot-1);   
    sort(a,pivot+1,hi);   
    return;
}   
public static void sort(Comparable[] a){   
    StdRandom.shuffle(a); // don&amp;#39;t forget to shuffle the array   
    sort(a,0,a.length-1);   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The randomness is preserved: the subarrays after partitionning is still randomly ordered.      &lt;/p&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;Performance: ~40% faster than mergesort.      &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Best case&lt;/strong&gt;   &lt;/p&gt;
&lt;h1&gt;compares = NlgN&lt;/h1&gt;
&lt;p&gt;(each partition will divide the array in half)     &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Worst case  &lt;/strong&gt;   &lt;/p&gt;
&lt;h1&gt;compares = 1/2*N^2&lt;/h1&gt;
&lt;p&gt;N+(N-1)+...+1 &lt;br /&gt;
if the array is already in order, &lt;em&gt;each partition will have one subarray of length=0&lt;/em&gt;     &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Average case  &lt;/strong&gt;   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;proposition  &lt;/strong&gt; &lt;br /&gt;
On average, for array with N distinct keys, the #compares =  ~2NlnN, #exchanges = ~1/2&lt;em&gt;NlnN.    &lt;br /&gt;
&lt;/em&gt;Proof.*    &lt;br /&gt;
C(N) := # compares for N entries   &lt;br /&gt;
pivot 在N个数离的排名是uniform的    &lt;br /&gt;
接下来的数学推到很漂亮(不过可能没啥用..)     &lt;br /&gt;
&lt;img alt="" src="algoI_week3_2/pasted_image003.png" /&gt;       &lt;br /&gt;
&lt;img alt="" src="algoI_week3_2/pasted_image004.png" /&gt;      &lt;br /&gt;
&lt;img alt="" src="algoI_week3_2/pasted_image006.png" /&gt;         &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(上面最后一行写错了... 是2NlnN...orz)
random shuffle: probalistic guarantee against worst case.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pitfalls    &lt;/strong&gt; &lt;br /&gt;
implementations will get &lt;em&gt;quadratic&lt;/em&gt; performance if array:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is sorted or reverse sorted   &lt;/li&gt;
&lt;li&gt;has many duplicates (even if randomized)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Staility  &lt;/strong&gt; &lt;br /&gt;
Quicksort is &lt;strong&gt;NOT&lt;/strong&gt; stable.   &lt;br /&gt;
partitionning can make long range exchanges   &lt;br /&gt;
&lt;img alt="" src="algoI_week3_2/pasted_image007.png" /&gt;      &lt;/p&gt;
&lt;h2&gt;Practical improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cutoff to insertion sort for &amp;lt;10 items    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ ~20% improvement    &lt;br /&gt;
Or we can leave the small subarrays unsorted and sort them at last using insertion sort      &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;estimate median by sampling 3 items       &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week3_2/pasted_image008.png" /&gt; &lt;br /&gt;
 → 10% improvement     &lt;/p&gt;
&lt;h1&gt;2. Selection&lt;/h1&gt;
&lt;p&gt;Goal: &lt;em&gt;given un array, find the kth largest item.&lt;/em&gt;    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upper bound for this problem: NlgN (just sort the array)    &lt;/li&gt;
&lt;li&gt;for small k (ex k=1,2,3), the upper bound is N (one-pass/two-pass)     &lt;/li&gt;
&lt;li&gt;Lower bound is N: at least have to look at everything     &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Quick select&lt;/h2&gt;
&lt;p&gt;Algo proposed also by Hoare:      &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;partition the array into two arrays left of pivot and right of pivot.      &lt;/li&gt;
&lt;li&gt;if pivot==k: return      &lt;/li&gt;
&lt;li&gt;continue the partition for just one of the subarrays       &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;类似于二分查找的过程....  &lt;br /&gt;
注意这里&lt;strong&gt;是不用递归的&lt;/strong&gt;! 因为partition函数返回的直接就是pivot&lt;em&gt;在整个数组里的&lt;/em&gt;位置!    &lt;/p&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;privater static int partition(Comparable[] a, int lo, int hi){...}

public static Comparable select(Comparable[] a, int k){   
    StdRandom.shuffle(a);   
    int lo=0,hi=a.length-1;   
    while(true){   
        int j = partition(a,lo,hi);   
        if(j&amp;lt;k) lo=j+1;   
        if(j==k) return a[j];   
        else hi=j-1;   
        if(hi&amp;lt;=lo) break;   
    }   
    return a[k];//这里不太理解为什么会在hi&amp;lt;lo的时候直接返回a[k]   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Proposition  &lt;/strong&gt; &lt;br /&gt;
Quick selection takes &lt;strong&gt;linear&lt;/strong&gt; time on average.   &lt;br /&gt;
*proof  * &lt;br /&gt;
intuitively, each partition will ct the subarray size in half:  &lt;br /&gt;
N+N/2+N/4+... = 2N   &lt;br /&gt;
formal analysis 略...   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;worst case&lt;/strong&gt;: quadratic (but very rare to happen)   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theoretical results&lt;/strong&gt;   &lt;br /&gt;
&lt;img alt="" src="algoI_week3_2/pasted_image009.png" /&gt;         &lt;/p&gt;
&lt;h1&gt;3. Duplicate keys&lt;/h1&gt;
&lt;p&gt;if array contains many duplicate keys.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;huge array     &lt;/li&gt;
&lt;li&gt;small number of distinct keys     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;for mergesort  &lt;/strong&gt; &lt;br /&gt;
insensitive... always ~NlgN compares.     &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;for quicksort  &lt;/strong&gt; &lt;br /&gt;
Will get &lt;em&gt;quadratic&lt;/em&gt; time if not stop on equal keys. (found in 1990s)    &lt;br /&gt;
mistake: put all items equal to pivot *to just one side   * &lt;br /&gt;
→ N^2 compares if all keys are equal from lo to hi.  &lt;br /&gt;
correct: put all items equal to pivot in their final place.    &lt;br /&gt;
&lt;img alt="" src="algoI_week3_2/pasted_image010.png" /&gt;      &lt;/p&gt;
&lt;h2&gt;3-way partitionning&lt;/h2&gt;
&lt;p&gt;(by Dijkstra)   &lt;br /&gt;
partition the array into 3 parts:     &lt;br /&gt;
&lt;img alt="" src="algoI_week3_2/pasted_image011.png" /&gt;       &lt;/p&gt;
&lt;p&gt;Dijkstra's 3-way partition algo:  &lt;br /&gt;
使用3个指针: lt指向中间部分的左边界, gt指向右边界;  i指针从左向右扫描, 算法很subtle:     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lt=lo, gt=hi, i=lo   &lt;/li&gt;
&lt;li&gt;if a[i]==v : i++   &lt;/li&gt;
&lt;li&gt;if a[i]&amp;lt;v: exch(i,lt), i++, lt++   &lt;/li&gt;
&lt;li&gt;if a[i]&amp;gt;v: exch(i,gt), gt--    &lt;/li&gt;
&lt;li&gt;repeat until i and gt cross (i&amp;gt;gt)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;invariance&lt;/em&gt;&lt;/strong&gt;:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[lo, lt)&lt;/code&gt; &lt;strong&gt;&lt;em&gt;all &amp;lt; v&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[lt, i)&lt;/code&gt; &lt;strong&gt;&lt;em&gt;all == v&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(gt, hi]&lt;/code&gt; &lt;strong&gt;&lt;em&gt;all &amp;gt;v&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week3_2/pasted_image012.png" /&gt;      &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week3_2/pasted_image013.png" /&gt;      &lt;/p&gt;
&lt;h2&gt;Implementation: 3-way quick sort&lt;/h2&gt;
&lt;p&gt;不必再写partition函数, 直接在sort递归函数里面.     &lt;br /&gt;
&lt;img alt="" src="algoI_week3_2/pasted_image014.png" /&gt;        &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private static void sort(Comparable[] a, int lo, int hi){   
    if(hi&amp;lt;=lo) return; // 递归函数别忘了先写终止条件...   
    int lt=lo, gt = hi;   
    Comparable v = a[lo];   
    for(int i=lo;i&amp;lt;=gt;){ //不能写 i++   
        if( less(a[i],v) )   
            exch(a, i++, lt++);   
        else if ( less(v,a[i]) )   
            exch(a,i,gt--);   
        else // v==a[i]   
            i++;   
    }   
    sort(a, lo, lt-1);   
    sort(a, gt+1, hi);  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="algoI_week3_2/pasted_image015.png" /&gt;    &lt;br /&gt;
当N个数有很多重复的时候, lower bound可以变小于NlgN:     &lt;br /&gt;
&lt;img alt="" src="algoI_week3_2/pasted_image016.png" /&gt;       &lt;br /&gt;
And Sedgewick proved that the 3-wy partition is propotional to the lower bound....     &lt;br /&gt;
&lt;img alt="" src="algoI_week3_2/pasted_image017.png" /&gt;      &lt;/p&gt;
&lt;h1&gt;4. System Sorts&lt;/h1&gt;
&lt;p&gt;Arrays.sort() in java:   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;import java.util.Arrays;&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week3_2/pasted_image018.png" /&gt;    &lt;br /&gt;
quicksort for primitive arrays, mergesort for objects: java设计者认为如果用obj array表示空间不是问题...   &lt;/p&gt;
&lt;p&gt;Pb in java's system sort: killer input exsit (havn't shuffle)...    &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week3_2/pasted_image020.png" /&gt;      &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week3_2/pasted_image021.png" /&gt;      &lt;br /&gt;
总结一下学过的5/6种排序:     &lt;br /&gt;
&lt;img alt="" src="algoI_week3_2/pasted_image022.png" /&gt;      &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 3-1 Mergesort</title><link href="http://x-wei.github.io/algoI_week3_1.html" rel="alternate"></link><published>2015-08-21T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoI_week3_1.html</id><summary type="html">&lt;p&gt;Two classical sorting algorithms: mergesort, quicksort.    &lt;/p&gt;
&lt;h1&gt;1. Mergesort&lt;/h1&gt;
&lt;p&gt;Divide and conquer: top 10 algorithms of the 20th century, invented by von Neumann.     &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Idea&lt;/strong&gt;:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;divide array into 2 halves   &lt;/li&gt;
&lt;li&gt;recursively sort each half   &lt;/li&gt;
&lt;li&gt;merge two sorted halves   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Merge&lt;/strong&gt;:  &lt;br /&gt;
Goal: a[lo] to a[mid] and a[mid+1] to a[hi] are sorted ⇒ get a[lo] to a[hi] sorted.  &lt;br /&gt;
→&lt;em&gt;use an auxiliary array to copy data&lt;/em&gt;: using 3 indices i,j,k.     &lt;br /&gt;
&lt;img alt="" src="algoI_week3_1/pasted_image.png" /&gt;      &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private static void merge(Comparable[]a, Comparable[] aux, int hi, int mid, int lo ){   
for(int k=lo;k&amp;lt;=hi;k++) aux[k]=a[k];   
int i=lo, j=mid+1, k=lo;   
while(i&amp;lt;=mid &amp;amp;&amp;amp; j&amp;lt;=hi){   
    if(less(aux[j],aux[i])) a[k++] = aux[j++];   
    else a[k++] = aux[i++];   
}   
while(i&amp;lt;=mid) a[k++] = aux[i++];   
while(j&amp;lt;=hi) a[k++] = aux[j++];   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;note: we use &lt;code&gt;if(less(aux[j],aux[i]))&lt;/code&gt;instead of&lt;code&gt;if(less(aux[j],aux[i]))&lt;/code&gt;, because less(a,b) == true iff a&amp;lt;b (strict), and we want to make mergesort &lt;strong&gt;stable&lt;/strong&gt;. See section (5) below.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assertion&lt;/strong&gt; &lt;br /&gt;
We can also add &lt;em&gt;assertions&lt;/em&gt;: &lt;code&gt;assert isSorted(a, lo, mid); assert isSorted(a,mid+1, hi);&lt;/code&gt;    &lt;br /&gt;
Enable/disable assertion at runtime:  &lt;br /&gt;
&lt;code&gt;java -ea MyProgram&lt;/code&gt; //enable assertion &lt;br /&gt;
&lt;code&gt;java -da MyProgram&lt;/code&gt; //disable assertion: &lt;strong&gt;default&lt;/strong&gt; &lt;br /&gt;
Best practice:  &lt;br /&gt;
use assertions to check interval invariants; &lt;br /&gt;
do NOT use assert for external argument checking !    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mergesort   &lt;/strong&gt; &lt;br /&gt;
为了mergesort需要写两个辅助函数: merge和sort(recursive):   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class MergeSort extends AbstractSort{   
    public static void sort(Comparable[] a){   
        Comparable[] aux = new Comparable[a.length];   
        sort(a,aux,0,a.length-1);   
    }   
    private static void sort(Comparable[] a, Comparable[] aux, int lo, int hi){   
        if(hi&amp;lt;=lo) return;    
        int mid = (hi+lo)/2;    
        sort(a,aux,mid+1,hi);   
        sort(a,aux,lo,mid);   
        merge(a,aux,hi,mid,lo);

    }   
    private static void merge(Comparable[]a, Comparable[] aux, int hi, int mid, int lo ){   
    // as before...   
    }   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有几点注意的:    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注意递归终止条件是&lt;code&gt;hi&amp;lt;=lo&lt;/code&gt;, 不是&lt;code&gt;==&lt;/code&gt;.    &lt;/li&gt;
&lt;li&gt;实现的代码不难, 但是定义好辅助函数的参数并不简单... 比如在merge里使用了mid作为参数.    &lt;/li&gt;
&lt;li&gt;aux的数组直接写在了函数参数里面, 好处是可以防止反复声明数组带来的开销.   &lt;/li&gt;
&lt;li&gt;发现他们写的时候mid都是写成: &lt;code&gt;mid = lo+(hi-lo)/2&lt;/code&gt;, &lt;a href="http://stackoverflow.com/questions/25571359/why-we-write-lohi-lo-2-in-binary-search"&gt;查了一下&lt;/a&gt;发现这样的原因是为了防止hi+lo整数溢出...嗯有道理.    &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;proposition (time)&lt;/strong&gt; &lt;br /&gt;
Mergesort takes at most NlgN compares and 6NlgN array access.  &lt;br /&gt;
&lt;em&gt;Proof.&lt;/em&gt; &lt;br /&gt;
def: C(N)=#compares for N elements, A(N)=#array access for N elements, the recurrence eq:  &lt;br /&gt;
C(N) &amp;lt;= 2&lt;em&gt;C(N/2) + N; C(1) = 0  (最多N次比较: 每个a[]的数都由比较得到)    &lt;br /&gt;
A(N) &amp;lt;= 2&lt;/em&gt;A(N/2) + 6N; A(1) = 0 (~~这里不太理解为什么是6N, 怎么数都是4N或者5N啊?......~~2N复制到aux, 2N复制回去, 2N比较)    &lt;br /&gt;
&lt;img alt="" src="algoI_week3_1/pasted_image001.png" /&gt;    &lt;br /&gt;
(上图蓝色的一列是extra cost)      &lt;br /&gt;
或者用递推公式, 发现D(N)/N的递推关系:     &lt;br /&gt;
&lt;img alt="" src="algoI_week3_1/pasted_image002.png" /&gt;        &lt;br /&gt;
或者用数学归纳法:    &lt;br /&gt;
&lt;img alt="" src="algoI_week3_1/pasted_image003.png" /&gt;      &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proposition(memory)&lt;/strong&gt;    &lt;br /&gt;
Mergesort takes N extra memory. &lt;br /&gt;
⇒ mergesort is NOT &lt;em&gt;in-place&lt;/em&gt; sorting method.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;def&lt;/strong&gt;. &lt;em&gt;"in-place"&lt;/em&gt; &lt;br /&gt;
A sorting algo is in-place if it uses &amp;lt;C*lgN extra memory.  &lt;br /&gt;
ex. insertion sort, shellsort, selection sort...   &lt;/p&gt;
&lt;h2&gt;Practical improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;use insertion sort for small arrays:     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cutoff to insertion sort for &amp;lt;7 items.    &lt;br /&gt;
&lt;img alt="" src="algoI_week3_1/pasted_image004.png" /&gt;    &lt;br /&gt;
⇒ lead to 20% improvement!     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stop if alread sorted: *a[mid]&amp;lt;a[mid+1]!   *   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week3_1/pasted_image005.png" /&gt;      &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switch the role of &lt;code&gt;a[]&lt;/code&gt; and &lt;code&gt;aux[]&lt;/code&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week3_1/pasted_image006.png" /&gt;       &lt;br /&gt;
&lt;img alt="" src="algoI_week3_1/pasted_image007.png" /&gt;      &lt;/p&gt;
&lt;h1&gt;2. Bottom-up Mergesort&lt;/h1&gt;
&lt;p&gt;bottom-up version of mergesort &lt;em&gt;without recursion&lt;/em&gt;.  &lt;br /&gt;
Idea:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pass and merge subarrays of size 1 in pairs      &lt;/li&gt;
&lt;li&gt;repeat for subarrays of size 2,4,8,....      &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week3_1/pasted_image008.png" /&gt;      &lt;/p&gt;
&lt;h2&gt;implementation&lt;/h2&gt;
&lt;p&gt;看着上面那个图好写一点... 就是每次用更大的size来两两merge一遍数组   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public static void sort(Comparable[] a){   
    Comparable[] aux = new Comparable[a.length];   
    for(int sz=1;sz&amp;lt;a.length;sz*=2){   
        for(int i=0;i&amp;lt;a.length-sz;i+=sz*2)   
            merge( a,aux,i,i+sz-1,Math.min(i+sz*2-1) );//&amp;lt;-注意mid和hi的计算方法   
    }   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;3. Sorting Complexity&lt;/h1&gt;
&lt;p&gt;some items:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;computational model: allowed operations, (ex. &lt;em&gt;decision tree for compare based sorting&lt;/em&gt;).     &lt;/li&gt;
&lt;li&gt;cost model: operation counts.    &lt;/li&gt;
&lt;li&gt;upper bound: cost guarantee (ex. NlgN for mergesort). .    &lt;/li&gt;
&lt;li&gt;lower bound: limit on cost guarantee for all algorithms (no algorithm can do better).    &lt;/li&gt;
&lt;li&gt;Optimal algorithm: algo with best cost guarantee. (upper bound=lower bound)   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;证明lower bound 的方法很有意思:    &lt;/p&gt;
&lt;h2&gt;lower bound for sorting&lt;/h2&gt;
&lt;p&gt;(binary) decision tree for the case of 3 distinct items:      &lt;br /&gt;
&lt;img alt="" src="algoI_week3_1/pasted_image009.png" /&gt;         &lt;/p&gt;
&lt;p&gt;each possible ordering is a leaf of the decision tree → there are N! possible orderings → tree height should be lg(N!) = NlgN (cf. &lt;a href="https://en.wikipedia.org/wiki/Stirling%27s_approximation"&gt;https://en.wikipedia.org/wiki/Stirling%27s_approximation&lt;/a&gt;)    &lt;br /&gt;
&lt;strong&gt;proposition.  &lt;/strong&gt; &lt;br /&gt;
Any compare-based sorting algorithm must have at least lg(N!)~NlgN compares in the worst case. (for N distinct keys)        &lt;br /&gt;
&lt;em&gt;proof.&lt;/em&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;binary tree of height h has at most 2^h leaves     &lt;/li&gt;
&lt;li&gt;N! possible orderings → at least N! leaves     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week3_1/pasted_image010.png" /&gt;     &lt;br /&gt;
 So, lower bound for sorting = ~NlgN ⇒ &lt;em&gt;mergesort &lt;strong&gt;&lt;em&gt;is&lt;/em&gt;&lt;/strong&gt; an asymptotical optimal algorithm&lt;/em&gt;. (In terms of time complexity, the shortcoming of mergesort is always the extra space usage)   &lt;br /&gt;
&lt;img alt="" src="algoI_week3_1/pasted_image011.png" /&gt;       &lt;br /&gt;
 但是并不是说NlgN是&lt;em&gt;所有&lt;/em&gt;排序问题的下界:   &lt;br /&gt;
&lt;img alt="" src="algoI_week3_1/pasted_image012.png" /&gt;      &lt;/p&gt;
&lt;h1&gt;4. Comparators&lt;/h1&gt;
&lt;p&gt;Java mechenism for comparing same data on different ways.    &lt;/p&gt;
&lt;h2&gt;Comparable interface&lt;/h2&gt;
&lt;p&gt;→Sorting using &lt;em&gt;natural order&lt;/em&gt; for a data type. &lt;br /&gt;
    public class Data implements Comparable&lt;Date&gt;{ &lt;br /&gt;
    public int compareTo(Date that){ &lt;br /&gt;
    //...} &lt;br /&gt;
    }   &lt;/p&gt;
&lt;h2&gt;Comparator interface&lt;/h2&gt;
&lt;p&gt;→Sorting using  an &lt;em&gt;alternative order&lt;/em&gt;. (total order property is required...)   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public interface Comparator&amp;lt;Key&amp;gt;{   
    int compare(Key v, Key w);   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comparator can be passed as arguments in java system sort:   &lt;br /&gt;
&lt;img alt="" src="algoI_week3_1/pasted_image013.png" /&gt;      &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using Comparators in our sorting algos   &lt;/strong&gt; &lt;br /&gt;
Use another signature:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;change Comparable to Object   &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add Comparator in arguments   &lt;/p&gt;
&lt;p&gt;public static void sort(Object[] a, Comparator comparator); &lt;br /&gt;
public static boolean less(Comparator c, Object v, Object w);    &lt;/p&gt;
&lt;p&gt;public static void exch(Object[] a, int i, int j);   &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implementing a comparator    &lt;/strong&gt; &lt;br /&gt;
Add static comparator to a class:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the declaration of a class, define an inner class that implements the Comparator interface,    &lt;/li&gt;
&lt;li&gt;Then declare an instance of this inner class as a static final variable...   &lt;/li&gt;
&lt;li&gt;note: the inner class should be &lt;strong&gt;static&lt;/strong&gt; also.      &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week3_1/pasted_image014.png" /&gt;    &lt;br /&gt;
以上的方法目的是为某个类提供预先定义好的comparator(比如&lt;code&gt;String.CASE_INSENSITIVE_ORDER&lt;/code&gt;), 另外也可以直接再声明一个类作为comparator, 然后实例化这个类传进去, 就像之前做过的那样.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application: Graham scan algo for convex hull  &lt;/strong&gt; &lt;br /&gt;
&lt;img alt="" src="algoI_week3_1/pasted_image015.png" /&gt;    &lt;br /&gt;
We can get the result of compare by calling &lt;code&gt;ccw(a,b,c)&lt;/code&gt; : &lt;br /&gt;
*ccw(p,q1,q2)=true ⇔ q2&amp;gt;q1 in terms of polar angle wrt p. (别忘了p是y坐标最小的点, 否则还要讨论角坐标为负数的情况, 见下图).    * &lt;br /&gt;
&lt;img alt="" src="algoI_week3_1/pasted_image016.png" /&gt;         &lt;/p&gt;
&lt;h1&gt;5. Stability&lt;/h1&gt;
&lt;p&gt;Typical application: first sort by student name then by section.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;def. :stable"&lt;/strong&gt; &lt;br /&gt;
&lt;em&gt;A stable sort preserves the relative order for items with equal keys.&lt;/em&gt;    &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Insertion sort and mergesort are stable, whereas selection sort and shell sort are not.&lt;/em&gt; (And always need to carefully check code: "less than" vs. "less than or equal to").   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;insertion sort:&lt;/strong&gt;    &lt;br /&gt;
stable &lt;br /&gt;
proof: we never move equal items pass each other: &lt;code&gt;if(less(a[j], a[j-1])) exch(...)&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;selection sort:  &lt;/strong&gt; &lt;br /&gt;
not stable   &lt;br /&gt;
counter example:  &lt;br /&gt;
when exchanging A1 and B1, we move B1 behind B2    &lt;br /&gt;
&lt;img alt="" src="algoI_week3_1/pasted_image017.png" /&gt;        &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;shell sort:  &lt;/strong&gt; &lt;br /&gt;
counter example: long-dist exchanges   &lt;br /&gt;
&lt;img alt="" src="algoI_week3_1/pasted_image018.png" /&gt;      &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;merge sort:   &lt;/strong&gt; &lt;br /&gt;
stable &lt;br /&gt;
proof: suffices to verify that merge operation is stable, if keys are equal, always take element from left subarray.    &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 2-2 Elementary Sorts</title><link href="http://x-wei.github.io/algoI_week2_2.html" rel="alternate"></link><published>2015-08-18T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoI_week2_2.html</id><summary type="html">&lt;h1&gt;1. Introduction&lt;/h1&gt;
&lt;p&gt;rearanging array of size N into ascending order &lt;br /&gt;
test client code: &lt;code&gt;Insertion.sort(a);&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;sort &lt;em&gt;any&lt;/em&gt; datatype &lt;/p&gt;
&lt;h3&gt;callback&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;callback = reference to executable code&lt;/em&gt; &lt;br /&gt;
i.e. passing functions as argument to sort() method&lt;br /&gt;
sort() function calls object's &lt;code&gt;compareTo()&lt;/code&gt; method  &lt;br /&gt;
&lt;img alt="" src="algoI_week2_2/pasted_image.png" /&gt; &lt;br /&gt;
→ implement the &lt;code&gt;Comparable&lt;/code&gt; interface:    &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public class XX implements Comparable&amp;lt;XX&amp;gt;{
    ...
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the interface: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public interface Comparable&amp;lt;Item&amp;gt;{
        public int compareTo(Item that);
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;compareTo():&lt;br /&gt;
return -1 (if this&amp;lt;that)/+1/0; 
needs a &lt;em&gt;total order.&lt;/em&gt; 
→ in the sort() implementation:&lt;br /&gt;
has not dependencies on type of data.  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public static void sort(Comparable[] a){
        if(a[i].compareTo(a[j])&amp;gt;0)...
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;helper functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;less&lt;/p&gt;
&lt;p&gt;private static boolean less(Comparable v, Comparable u){
returnv.compareTo(u)&amp;lt;0;
}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;exch&lt;/p&gt;
&lt;p&gt;private void exch(Comparable[] a, int i, int j) {
        Comparable swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;isSorted&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;test if sorted
if algo passes the test using only less ant swap, then it's correct. &lt;/p&gt;
&lt;h1&gt;2. Selection Sort&lt;/h1&gt;
&lt;p&gt;Idea: each time&lt;em&gt;: find the minimum from the remaining items.&lt;/em&gt; 
&lt;strong&gt;a[min] is the smallest element to right of a[i] ⇒ swap a[i] and a[min]&lt;/strong&gt; (elements to left of i are sorted) &lt;br /&gt;
&lt;img alt="" src="algoI_week2_2/pasted_image002.png" /&gt;    &lt;/p&gt;
&lt;h2&gt;invariants&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;entries to the left of i are in sorted order, and are fixed (&lt;em&gt;in final position&lt;/em&gt;) ever since&lt;/li&gt;
&lt;li&gt;no entry to the right of i is smaller than any entry to the left of i&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;implementation&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class SelectionSort extends AbstractSorting{
//...
public static void sort(Comparable[] a){
    for(int i = 0; i&amp;lt;a.length; i++){
        int min = i;
        for(int j = i+1; j&amp;lt;a.length; j++)
            if(less(a[j],a[min])) 
                min = j;
        exch(a,min,i);
    }
}
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;proposition:&lt;/strong&gt;
selection sort uses &lt;em&gt;N-1 + N-2 + ... + 1 = ~N^2/2&lt;/em&gt; compares, and &lt;em&gt;N&lt;/em&gt; exchanges. 
→ quadratic time&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week2_2/pasted_image003.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;insensitive&lt;/strong&gt; to input: quadratic time &lt;em&gt;even if input is already sorted.&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;data movement is &lt;em&gt;minimum&lt;/em&gt;: linear time of exchanges (every exchange puts an item to its final position)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;3. Insertion sort&lt;/h1&gt;
&lt;p&gt;quite different performance characteritics than selection sort. &lt;/p&gt;
&lt;p&gt;Idea: &lt;strong&gt;In iteration i: move all entries larger than a[i] to its left.&lt;/strong&gt;  &lt;br /&gt;
&lt;img alt="" src="algoI_week2_2/pasted_image004.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;invariants&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;entries to the left of i are in ascending order (but &lt;em&gt;not&lt;/em&gt; in final position)&lt;/li&gt;
&lt;li&gt;entries to the right of i are not yet been seen   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week2_2/pasted_image005.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;implementation&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;publc class InsertionSorting extends AbstractSorting{
    public static void sort(Comparable[] a){
        for(int i=1; i&amp;lt;a.length; i++)
            for(int j=i; j&amp;gt;0; j--){
                if(less(a[j],a[j-1]))
                    exch(a,j,j-1);
                else break;
            }
    }
    //...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;proposition &lt;/strong&gt;(average case): &lt;br /&gt;
(the performance &lt;em&gt;on average&lt;/em&gt; — &lt;em&gt;for randomly sorted array&lt;/em&gt; ) &lt;br /&gt;
&lt;img alt="" src="algoI_week2_2/pasted_image007.png" /&gt; &lt;br /&gt;
&lt;em&gt;proof:&lt;/em&gt;
&lt;em&gt;expect each entry to move halfway back&lt;/em&gt; &lt;br /&gt;
&lt;img alt="" src="algoI_week2_2/pasted_image008.png" /&gt;   &lt;/p&gt;
&lt;h3&gt;best case and worst case&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;best case&lt;/strong&gt;
if array already sorted min ascending order: 
&lt;em&gt;N-1 compares, 0 exchanges.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;worst case&lt;/strong&gt;
if array sorted in descending order: 
every element goes all the way back → 1/2&lt;em&gt;N^2 compares,  1/2&lt;/em&gt;N^2 exchanges&lt;/p&gt;
&lt;h3&gt;partially  sorted arrays&lt;/h3&gt;
&lt;p&gt;def.&lt;strong&gt;" inversion"&lt;/strong&gt;
an inversion is a pair of entries that are out of order. &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;"partially sorted"&lt;/strong&gt;&lt;br /&gt;
An array is called partially sorted if the &lt;em&gt;number of inversions is &amp;lt;= c&lt;/em&gt;N. *&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;proposition. &lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Insertion sort runs in linear time for partially sorted array.&lt;/strong&gt; 
&lt;em&gt;proof.&lt;/em&gt; 
&lt;em&gt;number of exchanges = number of inversions. &lt;/em&gt;
&lt;em&gt;number of compares = number of exchanges + N-1&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;4. Shell Sort&lt;/h1&gt;
&lt;p&gt;First non-trival sorting methode: an improvement of insertion sort. &lt;/p&gt;
&lt;p&gt;def. &lt;strong&gt;"h-sorted array"&lt;/strong&gt;&lt;br /&gt;
an array is h-sorted if every h-interleaved subarray is sorted. (h=1: just a sorted array)  &lt;br /&gt;
&lt;img alt="" src="algoI_week2_2/pasted_image009.png" /&gt;     &lt;/p&gt;
&lt;p&gt;Idea: move entries &amp;gt;1 position at a time by &lt;em&gt;h-sorting&lt;/em&gt; the array, then decrease h.   &lt;/p&gt;
&lt;p&gt;use decreasing sequences of value h:  &lt;br /&gt;
&lt;img alt="" src="algoI_week2_2/pasted_image010.png" /&gt;     &lt;/p&gt;
&lt;h2&gt;implementation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;How to h -sort  &lt;/strong&gt;&lt;br /&gt;
simply insertion sort with &lt;em&gt;stride length=h&lt;/em&gt;.&lt;br /&gt;
why insertion sort: &lt;br /&gt;
for big h: small subarray &lt;br /&gt;
for small h: nearly in order   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;proposition&lt;/strong&gt;&lt;br /&gt;
A g-sorted array &lt;em&gt;remains g-sorted&lt;/em&gt; after h-sorting it.  &lt;br /&gt;
&lt;img alt="" src="algoI_week2_2/pasted_image011.png" /&gt;  &lt;br /&gt;
(subtle to prove...)  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;which sequence of h to use&lt;/strong&gt;
&lt;code&gt;3x+1&lt;/code&gt; sequence proposed by Knuth. &lt;em&gt;1,4,13,40....&lt;/em&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class ShellSort extends AbstractSort{
    public static void sort(Comparable[] a){
        int h = 1, N=a.length;
        while(h&amp;lt;N/3) h = h*3+1;//find the beginning h (N&amp;gt;h&amp;gt;N/3)
        while(h&amp;gt;=1){//performs h-sort
            for(int i= h;i&amp;lt;N;i+=h)
                for(int j = i;j-h&amp;gt;=0;j-=h)
                    if( less(a[j],a[j-h]) )
                        exch(a,j,j-h)
                    else break;
            h = h/3;
        }
    }
    //...
    private static boolean isHsorted(Comparable[] a, int h) {
        for (int i = h; i &amp;lt; a.length; i++)
            if (less(a[i], a[i-h])) return false;
        return true;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每次hsort, 外围的循环是&lt;code&gt;for(int i= h;i&amp;lt;N;i+=h)&lt;/code&gt;, 需要理解一下: i移动一次以后, 进行的是另一个subarray 的插入排序, 当移动到N-1的时候所有subarray的插入排序才结束. (也就是说不是先完成一个subarray的插入排序再完成另一个, 这些是插入排序是同步进行的)&lt;/p&gt;
&lt;h2&gt;analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;proposition (for worst case   )&lt;/strong&gt;&lt;br /&gt;
&lt;img alt="" src="algoI_week2_2/pasted_image012.png" /&gt;   &lt;br /&gt;
→ better than quadratic time !     &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;property  (found in practice)&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;of compares &amp;lt; Cte * N * (# of &lt;em&gt;h&lt;/em&gt; used )&lt;/h1&gt;
&lt;p&gt;→ #compares &amp;lt; NlgN * Cte &lt;br /&gt;
&lt;img alt="" src="algoI_week2_2/pasted_image013.png" /&gt; &lt;br /&gt;
*accurate model has not been discovered  *&lt;/p&gt;
&lt;p&gt;(所以shellsort在实际使用中几乎和快速排序一样快! — 尽管没有数学证明来保证)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;why we are interested in shell sort&lt;/strong&gt;
useful in practice: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fast for medium sized arrays (beat even the classical sophistiated algorithms)  &lt;/li&gt;
&lt;li&gt;tiny code volumn (used in embeded systems)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lead to interesting questions for 50 years: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asymptotic growth rate ?&lt;/li&gt;
&lt;li&gt;best sequence of h ?&lt;/li&gt;
&lt;li&gt;average case performance ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;5. shuffling&lt;/h1&gt;
&lt;h2&gt;shuffle array using sort&lt;/h2&gt;
&lt;p&gt;one way to shuffle an array: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;for each array entry, generate a random real number&lt;/li&gt;
&lt;li&gt;sort the array of real numbers&lt;/li&gt;
&lt;li&gt;⇒ the original array is shuffled !&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;proposition  &lt;/strong&gt;&lt;br /&gt;
this shuffle sort produces a uniformly random permutation of input array &lt;br /&gt;
&lt;em&gt;drawback:  cost for sorting...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Goal: get uniformly random permutation in &lt;em&gt;linear time&lt;/em&gt;.   &lt;/p&gt;
&lt;h2&gt;Knuth shuffle&lt;/h2&gt;
&lt;p&gt;algo:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;for i = [0,N):&lt;br /&gt;
    - r = rand( [0~i&lt;strong&gt;]&lt;/strong&gt; ) or rand( &lt;strong&gt;[&lt;/strong&gt;i, N-1] ) &lt;br /&gt;
    - swap a[r] and a[i]   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week2_2/pasted_image014.png" /&gt;&lt;/p&gt;
&lt;p&gt;implementation: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public static void shuffle(Object[] a){
    for(int i=0;i&amp;lt;a.length;i++){
        int r = StdRandom.uniform(i+1);
        exch(a,r,i);
    }   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;proposition&lt;/strong&gt;&lt;br /&gt;
Knuth algo produces an uniformly random permutation of input array. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;proof.&lt;/em&gt;&lt;br /&gt;
Sufficient to prove that, for card i and position j, the proba(card i comes to position j) = 1/N. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;if i&amp;lt;=j, P = 1/j * j/(j+1) * (j+1)/(j+2) * ... * (N-1)/N&lt;/li&gt;
&lt;li&gt;if j&amp;lt;i, P = 1/i * i/(i+1) * (i+1)/(i+2) * ... * (N-1)/N&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;CQFD.&lt;/p&gt;
&lt;h2&gt;example: online poker&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.cigital.com/papers/download/developer_gambling.php"&gt;https://www.cigital.com/papers/download/developer_gambling.php&lt;/a&gt;  ←那个扑克网站已经被黑出翔了...  &lt;br /&gt;
&lt;img alt="" src="algoI_week2_2/pasted_image015.png" /&gt;  &lt;br /&gt;
bugs: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;r never get 52 (52th card never moved)&lt;/li&gt;
&lt;li&gt;r = rand(N) instead of rand(0~i), → shuffle not uniform&lt;/li&gt;
&lt;li&gt;random() uses 32bit seed: only 2^32 possible shuffles, &lt;em&gt;2^32&amp;lt;52!&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;seed = millisec from midnight, ~86*10^6 suffles&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;6. Convex Hull&lt;/h1&gt;
&lt;p&gt;application of sorting for the field of computational geometry.  &lt;/p&gt;
&lt;h2&gt;convex hull&lt;/h2&gt;
&lt;p&gt;smallest polygoneenclosing all N points. &lt;br /&gt;
&lt;img alt="" src="algoI_week2_2/pasted_image017.png" /&gt;      &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input: N points&lt;/li&gt;
&lt;li&gt;output: sequence of &lt;em&gt;vertices&lt;/em&gt; in counterclockwise (&lt;em&gt;ccw&lt;/em&gt;) order. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;application: robot motion planning; farest pair.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;geometric properties&lt;/strong&gt;:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can traverse convex hull by making only ccw turns&lt;/li&gt;
&lt;li&gt;let p be the point with lowest y-coord, wrt p, vertices appear in increasing order of polar angle.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week2_2/pasted_image018.png" /&gt;   &lt;/p&gt;
&lt;h2&gt;Algo&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Graham scan algorithm:&lt;/strong&gt;&lt;br /&gt;
    * choose p with smallest y coord &lt;br /&gt;
    * &lt;em&gt;sort points by polar angle&lt;/em&gt; with p &lt;br /&gt;
    * consider points in order (stack is used), &lt;em&gt;discard unless creates a ccw turn&lt;/em&gt;.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week2_2/pasted_image019.png" /&gt;   &lt;img alt="" src="algoI_week2_2/pasted_image020.png" /&gt;    &lt;img alt="" src="algoI_week2_2/pasted_image021.png" /&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CCW&lt;/strong&gt; &lt;br /&gt;
given three points a b c, returns if a→b→c is a CCW turn.  &lt;br /&gt;
&lt;img alt="" src="algoI_week2_2/pasted_image023.png" /&gt;    &lt;br /&gt;
(assumption: no 3 points on a line)&lt;br /&gt;
 ⇒ calculate &lt;em&gt;cross product of ab and bc ⇒ determinants!&lt;/em&gt; &lt;br /&gt;
&lt;img alt="" src="algoI_week2_2/pasted_image024.png" /&gt;   &lt;br /&gt;
area&amp;gt;0 ⇔ CCW   &lt;/p&gt;
&lt;h2&gt;implementation&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Point2D{
private double x,y;
public static boolean ccw(Point2D a,Point2D b,Point2D c){
    double area2 = (b.x-a.x)*(c.y-a.y) - (b.y-a.y)*(c.x-a.x);
    return area2&amp;gt;0;
}

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;convex hull:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public static Stack&amp;lt;Point2D&amp;gt; GrahamScan(Point2D[] p){
    //* assumes that points are sorted by polar angle in p[]
    Stack&amp;lt;Point2D&amp;gt; hull = new Stack&amp;lt;Point2D&amp;gt;();
    hull.push(p[0]);
    hull.push(p[1]);
    for(int i=2;i&amp;lt;p.length;i++){
        Point2D b = hull.pop(), a = hull.peek(), c = p[i];
        while(!Point2D.ccw(a,b,c)){
            b = hull.pop();
            a = hull.peek();
        }
        //now a,b,c makes a ccw turn:
        hull.push(b);
        hull.push(c);
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;running time: &lt;em&gt;NlgN for sorting and linear for the rest.&lt;/em&gt; &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 2-1 Stacks and Queues</title><link href="http://x-wei.github.io/algoI_week2_1.html" rel="alternate"></link><published>2015-07-09T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoI_week2_1.html</id><summary type="html">&lt;p&gt;fundamental data types: stacks and queues
operations: 
&lt;strong&gt;insert, remove, test empy, iterate,&lt;/strong&gt;...  &lt;br /&gt;
&lt;img alt="" src="algoI_week2_1/pasted_image.png" /&gt;  &lt;/p&gt;
&lt;p&gt;module programming: seperate interface and implementation&lt;/p&gt;
&lt;h1&gt;1. Stacks&lt;/h1&gt;
&lt;p&gt;ex. a stack of strings&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;API: &lt;/p&gt;
&lt;p&gt;public interface StackoOfStrings{
    void push(String item);
    String pop();
    boolean isEmpty();
    //int size();
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;implementation 1: using a linkedlist&lt;/h3&gt;
&lt;p&gt;insert/remove from the top of the linkedlist&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;inner class&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt;{
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;;
    &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="k"&gt;next&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implementation  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class LinkedStackOfStrings implements StackoOfStrings{
    class Node{
        String item;
        Node next;
        Node(String item, ListNode nxt){...}
    }
    private Node first;

    public LinkedStackOfStrings(){
        first = null;
    }
    public void push(String item){
        Node nd = new Node(item,first);
        first = nd;
    }
    public String pop(){
        String firstItem = first.item;
        first = first.next;
        return firstItem;
    }
    public boolean isEmpty(){
        return first==null;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;complexity: const time for every operation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;array implementation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;use array (of length N) to store items → defect: stack has limited capacity&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;keep a pointer *top: &lt;strong&gt;*pointing to the next empty space to push &lt;/strong&gt;(top 的定义很重要)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;problems of the array implementation: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;underflow: pop from an empty stack  &lt;/li&gt;
&lt;li&gt;overflow: size larger than capacity ⇒ resizing  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;loitering&lt;/strong&gt;: holding a ref to an obj which is no longer needed:
ex. &lt;code&gt;return s[top--]&lt;/code&gt;
java system will not know that s[top] is no longer needed ⇒ have to clear it explicitely
⇒   &lt;/p&gt;
&lt;p&gt;String item = s[top--]; 
s[top]=null; 
return item&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implementation (containg resizing array operations)  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class ArrayStackOfStrings implements StackOfStrings{
        private String[] s;
        private int top=0;
        public ArrayStackOfStrings(){// to be tuned
            s = new String[1];//initial capacity=1
        }
        public boolean isEmpty(){
            return top==0;
        }
        private vois resize(int capacity){//helper functoin
            String[] s2 = new String[capacity];
            for(int i=0;i&amp;lt;top;i++)
                s2 = s[i];
            s = s2;
        }
        public void push(String item){
            if(top==s.length)//doubling size 
                resize(s.lenth*2);
            s[top++]=item;
        }
        public String pop(){
            String item = s[--top];//NOT top--!
            s[top]=null;
            if(top&amp;gt;0 &amp;amp;&amp;amp; top==s.length/4) //top&amp;gt;0 is necessary
                resize(s.length/2);
            return item;
        }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2. Resizing Arrays&lt;/h1&gt;
&lt;p&gt;resolving the overflow pb: grow and shrink the array
→ need to copy all items when changing array size
⇒ pb: &lt;em&gt;ensure that sizing happens infrequently&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;resizing strategy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;repeated doubling:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(initial capacity=1) when array is full, double the size&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;amortized&lt;/em&gt; complexity for inserting N:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;N+(2+4+8+...+N) ~3N&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shrinking array&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ shrink the array by half when array is &lt;strong&gt;1/4 full&lt;/strong&gt;
not half full → &lt;em&gt;thrashing&lt;/em&gt; will happen if push-pop-push-pop when array is full &lt;br /&gt;
&lt;img alt="" src="algoI_week2_1/pasted_image001.png" /&gt;      &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[invariant]&lt;/strong&gt;: array always 20%~100% full&lt;/li&gt;
&lt;li&gt;complexity:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;in an amortized sense&lt;/em&gt;, will be constant &lt;br /&gt;
&lt;img alt="" src="algoI_week2_1/pasted_image002.png" /&gt;  &lt;br /&gt;
&lt;strong&gt;proposition&lt;/strong&gt;: from empty stack, M operations of push/pop taked time propotional to M&lt;/p&gt;
&lt;h3&gt;comparison: resizable array vs linkedlist&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;linkedlist implementation: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;operations takes const time even in worst time
extra time and space for dealing with linkes &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;resizing array implementation:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;operation taked const &lt;em&gt;amortized&lt;/em&gt; time
but in worst case takes linear time (ex. to be evited for critical systems)
less wasted space&lt;/p&gt;
&lt;h2&gt;3. Queues&lt;/h2&gt;
&lt;p&gt;FIFO data structure
API&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public interface QueueOfStrings{
    void enqueue(String item);
    String dequeue();
    boolean isEmpty();
    //int size();
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;linked list implementation&lt;/h3&gt;
&lt;p&gt;maintain &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; node pointers: 
pointing to 2 points of queue (&lt;code&gt;first&lt;/code&gt; for dequeue, &lt;code&gt;last&lt;/code&gt; for enqueue ) &lt;br /&gt;
&lt;img alt="" src="algoI_week2_1/pasted_image003.png" /&gt;   &lt;br /&gt;
→ &lt;em&gt;take care of corner cases&lt;/em&gt;: 
- empty queue: first is null (and last is also null) 
- just one item in queue: first and last &lt;em&gt;point to the same node&lt;/em&gt;
(总之first和last的定义很重要)&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public class LinkedQueueOfStrings implements QueueOfStrings{
        class Node{...  }
        private Node first,last;
        public LinkedQueueOfStrings(){
            first = null;
        }
        public void enqueue(String item){//same as push
            Node nd = new Node(item,null);
            if(isEmpty()){
                last = nd;
            first = last;
            }
            else{
                last.next = nd;
                last = nd;
            }
        }
        public String dequeue(){//same as pop in stack
            String firstItem = first.item;
            first = first.next;
            if(isEmpty())
                last=null;
            return firstItem;
        }
        public boolean isEmpty(){
            return first==null;
        }
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;resizing array implementation&lt;/h3&gt;
&lt;p&gt;maintain &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt;: 
&lt;code&gt;head&lt;/code&gt; is the queue head, &lt;code&gt;tail&lt;/code&gt; is the &lt;em&gt;next empty position&lt;/em&gt; for the next element to enqueue
→ trick: head and tail should take &lt;em&gt;mod capacity + &lt;/em&gt;resizing array &lt;br /&gt;
&lt;img alt="" src="algoI_week2_1/pasted_image004.png" /&gt; &lt;br /&gt;
不知道写的对不对: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public class ArrayQueueOfStrings implements QueueOfStrings{
        private String[] q;
        private head=0,tail=0;
        public LinkedQueueOfStrings(){
            q = new String[1];//init capacity
        }
        public boolean isEmpty(){
            return head==tail;
        }
        private void resize(newsz){
            q2 = new String[newsz];
            int i = head,j=0;
            while(i!=tail){
                q2[j++] = q[i];
                i=(i+1)%q.length;
            }
            q = q2;
            head=0;
            tail=j;
        }
        public void enqueue(String item){
            if( (tail+1)%q.length==head )
                resize(q.length*2);
            q[tail] = item;
            tail = (tail+1)%q.length;
        }
        public String dequeue(){
            String firstItem = q[head];
            head = (head+1)%q.length;
            int sz = (tail-head)%q.length;
            if(sz&amp;gt;0 &amp;amp;&amp;amp; sz==q.length/4)
                resize(s.length/2);
            return firstItem;
        }
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;4. Generics&lt;/h1&gt;
&lt;p&gt;queues/stacks for other types of data ⇒ &lt;em&gt;generics 泛型&lt;/em&gt;(java 1.5 才引进泛型机制...)
use &lt;em&gt;type paramater&lt;/em&gt;→ avoid casting, and discover type mismatch errors &lt;em&gt;at compile time&lt;/em&gt; &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public interface Stack&amp;lt;Item&amp;gt;{
        public void push(Item item);
        public Item pop();
        public boolean isEmpty();
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;a pb with array implementation&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;java不支持创立泛型数组&lt;/strong&gt;
generic array creation is not allowed. 不可以new 一个泛型数组!
&lt;code&gt;s = new Item[capacity];&lt;/code&gt;会报错 &lt;br /&gt;
⇒ use an ugly &lt;em&gt;cast&lt;/em&gt;:
&lt;code&gt;s = (Item[]) new Object[capacity];&lt;/code&gt;
(will get warning: "unchecked cast" → java被黑了... )&lt;/p&gt;
&lt;h3&gt;autoboxing for primitive types&lt;/h3&gt;
&lt;p&gt;each primitive type has a &lt;em&gt;wrapper class&lt;/em&gt;
ex. int ↔ Integer
autoboxing: automatic cast between a primitive type and its wrapper class. &lt;br /&gt;
&lt;img alt="" src="algoI_week2_1/pasted_image005.png" /&gt; &lt;br /&gt;
(syntactic sugar 语法糖 i.e. 对语言功能没有影响只是方便使用)&lt;br /&gt;
btw: &lt;a href="https://zh.wikipedia.org/wiki/%E8%AF%AD%E6%B3%95%E7%B3%96"&gt;https://zh.wikipedia.org/wiki/%E8%AF%AD%E6%B3%95%E7%B3%96&lt;/a&gt; (居然还有语法盐和语法糖精......)&lt;/p&gt;
&lt;h1&gt;5. Iterators&lt;/h1&gt;
&lt;h3&gt;Interface&lt;/h3&gt;
&lt;p&gt;support iteration over stacks and queues, &lt;em&gt;without revealing the internal representation&lt;/em&gt; of stack/queue
⇒ implement the &lt;code&gt;Iterable&lt;/code&gt; interface&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Iterable&lt;/code&gt; interface: can return an *Iterator *&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public interface Iterable{
    Iterator&amp;lt;Item&amp;gt; iterator();
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iterator interface: hasNext() and next() interface&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public interface Iterator&amp;lt;Item&amp;gt;{
    boolean hasNext();
    Item next();
    void remove();//optional, bad practice to use it
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to make a data structure Interable → elegant client code   &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week2_1/pasted_image006.png" /&gt; &lt;br /&gt;
&lt;strong&gt;how-to:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;implement &lt;code&gt;Iterable&lt;/code&gt; interface&lt;/li&gt;
&lt;li&gt;write a &lt;em&gt;private inner class&lt;/em&gt; XXIterator that implment the &lt;code&gt;Iterator&lt;/code&gt; interface.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ex. &lt;br /&gt;
&lt;img alt="" src="algoI_week2_1/pasted_image007.png" /&gt;   &lt;/p&gt;
&lt;h3&gt;Bag data structure&lt;/h3&gt;
&lt;p&gt;Supports adding and iterating through without caring about the order.&lt;br /&gt;
API: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public class&amp;lt;Item&amp;gt; Bag implements Iterable&amp;lt;Item&amp;gt;{
        public void add(Item);
        int size(); 
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;can be implemented by stack or queue(without pop/dequeue)&lt;/p&gt;
&lt;h1&gt;6. Applications&lt;/h1&gt;
&lt;h3&gt;Java collections library&lt;/h3&gt;
&lt;p&gt;List interface: &lt;code&gt;java.util.List&lt;/code&gt; &lt;br /&gt;
&lt;img alt="" src="algoI_week2_1/pasted_image008.png" /&gt;   &lt;br /&gt;
implementations: &lt;code&gt;ArrayList&lt;/code&gt;, &lt;code&gt;LinkedList&lt;/code&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pb with the java's implementation of stacks and queues:  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Stack&lt;/code&gt; class also implements List interface (&lt;code&gt;get()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;contains()&lt;/code&gt; are implemented);&lt;br /&gt;
&lt;code&gt;Queue&lt;/code&gt; is an interface rather than a class...&lt;br /&gt;
⇒ &lt;strong&gt;poorly designed API  &lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Stacks applications&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;function calls: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week2_1/pasted_image009.png" /&gt;  &lt;br /&gt;
recursion: can always use an explicit stack to remove recursion&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;arithemic evaluation (Dijkstra)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;四种类型: 左括号, 右括号, 数字, 算子  &lt;br /&gt;
&lt;img alt="" src="algoI_week2_1/pasted_image010.png" /&gt;&lt;br /&gt;
最后一行应该是value stack.  &lt;br /&gt;
&lt;img alt="" src="algoI_week2_1/pasted_image011.png" /&gt;   &lt;/p&gt;
&lt;p&gt;⇒ 后缀表达式, 逆波兰式......&lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week1-Lab: Percolation</title><link href="http://x-wei.github.io/algoI_week1_lab.html" rel="alternate"></link><published>2015-07-07T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoI_week1_lab.html</id><summary type="html">&lt;h1&gt;model &amp;amp; problem&lt;/h1&gt;
&lt;p&gt;(原文描述太啰嗦了)&lt;br /&gt;
A system using an N-by-N grid of sites. &lt;br /&gt;
→ Each site is either open or blocked. &lt;br /&gt;
→ A &lt;strong&gt;full&lt;/strong&gt; site is an open site that can be connected to an open site in the top row via a chain of neighboring open sites. (这个full的定义有玄机 而且导致后面写程序时有个问题, 看论坛想了半天才想出来, 见后文.)&lt;br /&gt;
→ We say the system &lt;strong&gt;percolates&lt;/strong&gt; if there is a path of connected open sites form the top row to the bottom row.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="file:///home/wx/Dropbox/ZIM_NOTES/0._TmpNotes/Algorithms%2C_4th_ed/Week1-Assignment-Percolation/pasted_image.png" /&gt;   &lt;/p&gt;
&lt;p&gt;⇒ pb: if sites are independently set to be open with probability &lt;strong&gt;p&lt;/strong&gt;, what is the probability that the system percolates? &lt;br /&gt;
&lt;img alt="" src="file:///home/wx/Dropbox/ZIM_NOTES/0._TmpNotes/Algorithms%2C_4th_ed/Week1-Assignment-Percolation/pasted_image001.png" /&gt; &lt;br /&gt;
→ When N is sufficiently large, there is a threshold value **p&lt;strong&gt;&lt;em&gt; such that when p &amp;lt; p&lt;/em&gt; a random N-by-N grid almost never percolates, and when p &amp;gt; p&lt;em&gt;, a random N-by-N grid almost always percolates. &lt;br /&gt;
→ No mathematical solution for determining the percolation threshold p&lt;/em&gt; has yet been derived. &lt;br /&gt;
⇒ Your task is to *write a computer program to estimate p&lt;/strong&gt;.   &lt;/p&gt;
&lt;h1&gt;Method&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;API:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Percolation {
   public Percolation(int N)               // create N-by-N grid, with all sites blocked
   public void open(int i, int j)          // open site (row i, column j) if it is not open already
   public boolean isOpen(int i, int j)     // is site (row i, column j) open?
   public boolean isFull(int i, int j)     // is site (row i, column j) full?
   public boolean percolates()             // does the system percolate?
   public static void main(String[] args   // test client (optional)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Corner cases: the row and column indices i and j are integers between 1 and N. &lt;strong&gt;1≤i,j≤N&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;if i/j out of range: &lt;code&gt;java.lang.IndexOutOfBoundsException&lt;/code&gt;
if N&amp;lt;=0 in constructor: &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Performance requirements: N2 for constructor, const for other operations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monte Carlo simulation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all sites init to be closed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ randomly choose a blocked site (i,j) and open it 
→ &lt;em&gt;repeat until percolates&lt;/em&gt; ⇒ the fraction of opened sites is an estimation of p*&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex. 20*20 grid, when percolated: &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="file:///home/wx/Dropbox/ZIM_NOTES/0._TmpNotes/Algorithms%2C_4th_ed/Week1-Assignment-Percolation/pasted_image002.png" /&gt; &lt;br /&gt;
⇒ estimated p* = 204/400=0.51&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;repeat the estimation for T times, get T estimations &lt;/p&gt;
&lt;p&gt;→ get mean and std:  &lt;br /&gt;
&lt;img alt="" src="file:///home/wx/Dropbox/ZIM_NOTES/0._TmpNotes/Algorithms%2C_4th_ed/Week1-Assignment-Percolation/pasted_image003.png" /&gt; &lt;br /&gt;
→ 95% 置信区间: &lt;br /&gt;
&lt;img alt="" src="file:///home/wx/Dropbox/ZIM_NOTES/0._TmpNotes/Algorithms%2C_4th_ed/Week1-Assignment-Percolation/pasted_image004.png" /&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create API for this simulation: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class PercolationStats {
   public PercolationStats(int N, int T)     // perform T independent experiments on an N-by-N grid
   public double mean()                      // sample mean of percolation threshold
   public double stddev()                    // sample standard deviation of percolation threshold
   public double confidenceLo()              // low  endpoint of 95% confidence interval
   public double confidenceHi()              // high endpoint of 95% confidence interval
   public static void main(String[] args)    // test client (described below)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-if  N ≤ 0 or T ≤ 0: &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;&lt;br /&gt;
-&lt;code&gt;main()&lt;/code&gt; : takes two command-line arguments N and T&lt;br /&gt;
⇒ performs T independent computational experiments on an N-by-N grid, and prints out the mean, standard deviation, and the 95% confidence interval for p*. &lt;br /&gt;
(Use &lt;a href="http://introcs.cs.princeton.edu/java/stdlib/javadoc/StdRandom.html"&gt;standard random&lt;/a&gt; from our standard libraries to generate random numbers; use &lt;a href="http://introcs.cs.princeton.edu/java/stdlib/javadoc/StdStats.html"&gt;standard statistics&lt;/a&gt; to compute the sample mean and standard deviation. &lt;br /&gt;
Here is the algo API: &lt;a href="http://algs4.cs.princeton.edu/code/index.php"&gt;http://algs4.cs.princeton.edu/code/index.php&lt;/a&gt;)  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Code&lt;/h1&gt;
&lt;p&gt;注意一定要用它们提供的那些库, 否则自己写的话代码就长了.... &lt;br /&gt;
shuffle, mean, stddev什么的直接用他们的函数库就可以做到. &lt;br /&gt;
&lt;a href="http://algs4.cs.princeton.edu/code/index.php"&gt;http://algs4.cs.princeton.edu/code/index.php&lt;/a&gt; &lt;br /&gt;
另外UF也是用他们写好的, WeightedQuickUnionUF.   &lt;/p&gt;
&lt;p&gt;按照提示, 除了格子的N^2个节点以外再增加两个节点: 顶部和底部的虚拟节点. 这里写的时候注意一开始也是不恩能够把它们与第一行/最后一行相连的 — 要在一个格子open以后再相连. &lt;/p&gt;
&lt;h3&gt;backwash问题&lt;/h3&gt;
&lt;p&gt;这次题目有一点比较困难就是, 需要实现isFull()函数, 这个函数判断一个格子(i,j)是否和顶部相连. 这里如果直接用UF的connected()判断是否和顶部虚拟节点相连的话是有问题的, 如下图: &lt;br /&gt;
&lt;img alt="" src="file:///home/wx/Dropbox/ZIM_NOTES/0._TmpNotes/Algorithms%2C_4th_ed/Week1-Assignment-Percolation/pasted_image005.png" /&gt; &lt;br /&gt;
白色格子表示格子是open的, 蓝色格子表示格子是open并且是&lt;em&gt;full&lt;/em&gt;的(i.e. 和顶部相连的), 左边图片里的状态是对的, 右边图片里底下部分的格子状态则不对: 如左下角的格子, 其实是没有和顶部联通的, 如果我们用两个虚拟节点的话, 由于底部虚拟节点和顶部虚拟节点相连, 所以和底部虚拟节点相连的左下角部分就被判断成了full的. &lt;/p&gt;
&lt;p&gt;这个问题一开始我以为可以很简单解决, 后来发现没那么容易... (注意题目还要求isFull()也要在常数时间给出结果).&lt;br /&gt;
一个不优雅的办法是, 建立两个UF, 一个用来判断percolation, 另一个UF里没有底部虚拟节点所以可以专门用来判断isFull(). &lt;/p&gt;
&lt;p&gt;这样解决的话使可以通过测试, 不过非常不好看, 另外一个UF的内存占用是8N^2(内部有size[]和id[]两个int数组), 比较大. &lt;/p&gt;
&lt;p&gt;在论坛上找了半天, 看了一些人的分享终于想到了这个非常妙的办法: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UF只建立顶部虚拟节点, 不建立底部虚拟节点. &lt;/li&gt;
&lt;li&gt;判断isFull只需要用UF的connected()一下就好了&lt;/li&gt;
&lt;li&gt;问题是怎么判断percolation: &lt;br /&gt;
    a. 建立一个数组 &lt;code&gt;boolean connectedToBottom[]&lt;/code&gt;, 指示某一点是否和底部相连 &lt;br /&gt;
    b. trick在这里: 不必修改一个联通分支的所有点的&lt;code&gt;connectedToBottom&lt;/code&gt;的值, &lt;strong&gt;只需要修改联通分支的root(UF的find)即可&lt;/strong&gt;. 在进行union的时候先查看两个component的root是不是连到底部, 然后有一个连到底部的话, 在union以后把合并后的联通分支的&lt;code&gt;connectedToBottom&lt;/code&gt;状态改为true即可 &lt;br /&gt;
    c. 然后判断percolate: 先找到顶部虚拟节点锁在component的root, 然后看这个root是否连到底部即可!   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样用一个boolean数组(N^2内存)代替了一个新的UF(8N^2内存), 而且实现也更加优雅.  &lt;br /&gt;
非常有意思的练习...&lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Algorithms I] Week 1-2 Analysis of Algorithms</title><link href="http://x-wei.github.io/algoI_week1_2.html" rel="alternate"></link><published>2015-07-02T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoI_week1_2.html</id><summary type="html">&lt;h1&gt;1. Introduction&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week1_2/pasted_image.png" /&gt;&lt;/p&gt;
&lt;h1&gt;2. Observations&lt;/h1&gt;
&lt;p&gt;ex. &lt;strong&gt;3-SUM pb&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;given N distinct numbers, how many triples sum up to 0? (pb related to computatioal geogtry)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brute force method:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for(int i=0;i&amp;lt;N;i++)
    for(int j=i+1;j&amp;lt;N;j++)
        for(int k=j+1;k&amp;lt;N;k++)
            {if(a[i]+a[j]+a[k]==0)
                count++;
            }
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;mesuring running time:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;stdlib.jar里面提供了一个&lt;code&gt;Stopwatch&lt;/code&gt;类用于记录运行时间.  &lt;br /&gt;
&lt;img alt="" src="algoI_week1_2/pasted_image001.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;log-log plot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;T(N) = running time for input of size N&lt;br /&gt;
log(N)-log(T(N)) plot:&lt;br /&gt;
often get a straight line — power law  &lt;br /&gt;
&lt;img alt="" src="algoI_week1_2/pasted_image002.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;doubling ratio&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(for checking the power law relationship, checking the power order)&lt;br /&gt;
each time double the size of input, then take log of the time ratio of 2 runs: log( T(2N)/T(N) )  &lt;br /&gt;
&lt;img alt="" src="algoI_week1_2/pasted_image003.png" /&gt;  &lt;/p&gt;
&lt;h1&gt;3.Mathematical Models&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;total running time: sum of cost*frequency of operations &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cost of some basic operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;array allocation: c*N (because all array entries have to be set to 0/false/null)&lt;/li&gt;
&lt;li&gt;string concatenation: c*N (proportional to the length  of string !)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;simplification&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;crude analysis&lt;br /&gt;
ignore lower terms &lt;strong&gt;tilde notation&lt;/strong&gt;  &lt;br /&gt;
&lt;img alt="" src="algoI_week1_2/pasted_image005.png" /&gt;  &lt;br /&gt;
&lt;img alt="" src="algoI_week1_2/pasted_image004.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;estimating discrete sum by relaxation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Replace the sum with an integral, and use calculus — 很机智...   &lt;br /&gt;
&lt;img alt="" src="algoI_week1_2/pasted_image006.png" /&gt;&lt;/p&gt;
&lt;h1&gt;4. Order of Growth Classification&lt;/h1&gt;
&lt;p&gt;(discard the leading coefficient when considering the growth order)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only a small set of growth functions: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;1, logN, N, NlogN, N^2, N^3, 2^N&lt;/code&gt; &lt;br /&gt;
&lt;img alt="" src="algoI_week1_2/pasted_image007.png" /&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exemples:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;binary search ⇒ logN&lt;br /&gt;
divide and conquer ⇒ NlogN&lt;br /&gt;
exhaustive search ⇒ 2^N &lt;br /&gt;
&lt;img alt="" src="algoI_week1_2/pasted_image008.png" /&gt;&lt;/p&gt;
&lt;p&gt;practical performance: &lt;br /&gt;
&lt;img alt="" src="algoI_week1_2/pasted_image009.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ex. &lt;strong&gt;binary search&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;public int binearch(int arr[], int key){//arr[] already sorted
    int lo=0,hi=arr.length;
    while(i&amp;lt;j){
        int m = (lo+hi)/2;
        if(arr[m]==key) return m;
        else if(arr[m]&amp;lt;key) lo=m+1;
        else hi=m-1;
    }
    return -1;
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(→ Bug in Java's Arrays.binarySearch() discovered in 2006......) &lt;br /&gt;
→ invariant: if key in arr, arr[lo]&amp;lt;=key&amp;lt;=arr[hi] &lt;br /&gt;
&lt;strong&gt;proposition. &lt;/strong&gt;binary search uses at most logN+1 compares to search a sorted array of size N.
&lt;strong&gt;pf. &lt;/strong&gt;
denote &lt;em&gt;T(N)&lt;/em&gt; := nb of compares for array with size &amp;lt;=N&lt;br /&gt;
→ T(1)=1&lt;br /&gt;
→ recurrence relation: T(N)&amp;lt;=T(N/2)+1&lt;br /&gt;
⇒ T(N)=logN  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;a faster 3-SUM&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ first sort the array &lt;em&gt;(~NlogN)&lt;/em&gt;&lt;br /&gt;
→ for any pair a[i] and a[j], do binary search for -(a[i]+a[j])   &lt;em&gt;~(N2LogN)&lt;/em&gt;&lt;br /&gt;
⇒ reduce from N3 to N2logN ! (for 8k numbers, running time goes from 51s to 0.96s)  &lt;/p&gt;
&lt;h1&gt;5. Theory of Algorithms&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;types of analysis&lt;/p&gt;
&lt;p&gt;-best case
-worst case
-average case(random input, "expected cost")&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;notations&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;big Theta/big O/big Omega&lt;/strong&gt;  &lt;br /&gt;
&lt;img alt="" src="algoI_week1_2/pasted_image010.png" /&gt;   &lt;br /&gt;
    - big O: &lt;em&gt;upper bound  → * once a specific algo is found, find an upper bound&lt;br /&gt;
    - big Omega: &lt;/em&gt;lower bound   &lt;em&gt;→ proove that no algo can do better&lt;br /&gt;
    - big Theta: symptotic growth (same order, optimal algo)  → lower and upper bound &lt;/em&gt;match* &lt;br /&gt;
&lt;img alt="" src="algoI_week1_2/pasted_image011.png" /&gt;   &lt;br /&gt;
⇒ in this course: use tilde notation: contain leading constants for highest order term&lt;/p&gt;
&lt;h1&gt;6. Memory&lt;/h1&gt;
&lt;p&gt;KB: 2^10 bytes&lt;br /&gt;
MB: 2^20 bytes (1 million) 
GB: 2^30 bytes (1 billion) 
64-bit machines: &lt;em&gt;8 byte pointers&lt;/em&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;typical memory usage:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for primary types: &lt;br /&gt;
&lt;img alt="" src="algoI_week1_2/pasted_image012.png" /&gt;&lt;br /&gt;
for arrays  (with &lt;em&gt;array overhead=24bytes&lt;/em&gt;) :  &lt;br /&gt;
&lt;img alt="" src="algoI_week1_2/pasted_image013.png" /&gt; &lt;br /&gt;
&lt;em&gt;Obj overhead: 16 bytes&lt;/em&gt; (obj的大小=16+obj内部filed的大小)&lt;br /&gt;
&lt;em&gt;references&lt;/em&gt;: 8 bytes (ex. inner class has a ref to encolsing class)&lt;br /&gt;
&lt;em&gt;padding&lt;/em&gt;: each obj uses a multiply of 8 bytes (obj大小=8 bytes的整数倍)    &lt;br /&gt;
&lt;img alt="" src="algoI_week1_2/pasted_image014.png" /&gt;   &lt;br /&gt;
&lt;img alt="" src="algoI_week1_2/pasted_image015.png" /&gt;     &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>[Spark MOOC note] lab4. Predicting Movie Ratings</title><link href="http://x-wei.github.io/sparkmooc_notelab4.html" rel="alternate"></link><published>2015-06-30T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/sparkmooc_notelab4.html</id><summary type="html">&lt;h1&gt;Part 0: Preliminaries&lt;/h1&gt;
&lt;p&gt;Each line in the ratings dataset (&lt;em&gt;ratings.dat.gz&lt;/em&gt;) is formatted as: &lt;br /&gt;
&lt;code&gt;UserID::MovieID::Rating::Timestamp&lt;/code&gt; ⇒ tuples of &lt;code&gt;(UserID, MovieID, Rating)&lt;/code&gt;in &lt;em&gt;ratingsRDD&lt;/em&gt; &lt;br /&gt;
Each line in the movies (&lt;em&gt;movies.dat&lt;/em&gt;) dataset is formatted as: &lt;br /&gt;
&lt;code&gt;MovieID::Title::Genres&lt;/code&gt; ⇒ tuples of &lt;code&gt;(MovieID, Title)&lt;/code&gt; in &lt;em&gt;ratingsRDD&lt;/em&gt;    &lt;/p&gt;
&lt;p&gt;487650 ratings and 3883 movies&lt;/p&gt;
&lt;p&gt;⇒ Since the key is an integer and the value is a unicode string, we can use a function to combine them into a single unicode string (e.g., &lt;code&gt;unicode('%.3f' % key) + ' ' + value&lt;/code&gt;) before sorting the RDD using &lt;code&gt;sortBy()&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Part 1: Basic Recommendations&lt;/h1&gt;
&lt;p&gt;naive method: &lt;em&gt;always recommend the movies with the highest average rating...&lt;/em&gt;
⇒ 20 movies with the highest average rating and more than 500 reviews&lt;/p&gt;
&lt;p&gt;&lt;em&gt;movieNameWithAvgRatingsRDD&lt;/em&gt;: &lt;code&gt;(avgRating, Title, nbRatings)&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;Part 2: Collaborative Filtering&lt;/h1&gt;
&lt;p&gt;MLlib: &lt;a href="https://spark.apache.org/mllib/"&gt;https://spark.apache.org/mllib/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Collaborative filtering&lt;/em&gt; is a method of making automatic predictions (filtering) about the interests of a user by collecting preferences or taste information from many users (collaborating). The underlying assumption of the collaborative filtering approach is that if a person A has the same opinion as a person B on an issue, A is more likely to have B's opinion on a different issue x than to have the opinion on x of a person chosen randomly. &lt;/p&gt;
&lt;p&gt;一图胜千言: &lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lab4/Collaborative_filtering.gif" /&gt;&lt;/p&gt;
&lt;h3&gt;Matrix Factorization&lt;/h3&gt;
&lt;p&gt;CF问题实际上是矩阵分解的问题: 
We have a matrix whose entries are movie ratings by users (shown in red in the diagram below). Each column represents a user (shown in green) and each row represents a particular movie (shown in blue).&lt;/p&gt;
&lt;p&gt;其中&lt;em&gt;rating矩阵&lt;/em&gt;(用户/电影矩阵)只有一些项的值存在(即用户打分的那些项), 所以要用分解后的两个矩阵之乘积来估计rating矩阵中的缺失项.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;With collaborative filtering, the idea is to approximate the ratings matrix by factorizing it as the product of two matrices: one that describes properties of each user (shown in green), and one that describes properties of each movie (shown in blue).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="sparkmooc_note_lab4/pasted_image002.png" /&gt;&lt;/p&gt;
&lt;p&gt;若N个用户, M个电影 ⇒ 把rating矩阵(N&lt;em&gt;M)分解为 一个N&lt;/em&gt;d矩阵(&lt;em&gt;user矩阵&lt;/em&gt;)与一个d&lt;em&gt;M(&lt;/em&gt;movie矩阵*)矩阵之积. &lt;/p&gt;
&lt;p&gt;其中d个维度可以有(隐含的)意义: 比如f[j]第一个维度代表了电影j中动作片的成分, f[i]的第一个维度表示用户i对动作片的喜爱程度, 以此类推... 所以f[i]与f[j]的内积就可以是用户i对电影j的评分的一个不错的预测. &lt;/p&gt;
&lt;p&gt;假设&lt;em&gt;f[j]已知&lt;/em&gt;, 那么f[i]要满足: 对那些用户i已经打过分的电影(即r_ij存在)上的估计偏差最小:   &lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lab4/pasted_image.png" /&gt;    &lt;br /&gt;
(后面加上的那一项是正则项: 不希望f[i]的模过大)&lt;/p&gt;
&lt;p&gt;不过前面的假设, "f[j]已知"这个条件其实并不成立 ⇒ &lt;strong&gt;Alternating Least Squares algorithm&lt;/strong&gt;: 交替优化f[i]和f[j]的取值, 每次固定一个, 而优化另一个, 交替进行, 直到收敛(好像Kmeans也是利用的这种方法). &lt;/p&gt;
&lt;p&gt;&lt;em&gt;first randomly filling the users matrix with values and then optimizing the value of the movies such that the error is minimized. Then, it holds the movies matrix constrant and optimizes the value of the user's matrix.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;train-test-validation split&lt;/h3&gt;
&lt;p&gt;⇒ break up the ratingsRDD dataset into three pieces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A training set (RDD), which we will use to train models&lt;/li&gt;
&lt;li&gt;A validation set (RDD), which we will use to choose the best model&lt;/li&gt;
&lt;li&gt;A test set (RDD), which we will use for our experiments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;trainingRDD, validationRDD, testRDD = ratingsRDD.randomSplit([6, 2, 2], seed=0L)&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Root Mean Square Error (RMSE)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="sparkmooc_note_lab4/pasted_image003.png" /&gt;  &lt;br /&gt;
compute the sum of squared error given predictedRDD and actualRDD RDDs. 
Both RDDs consist of tuples of the form (UserID, MovieID, Rating)&lt;/p&gt;
&lt;h3&gt;alternating least square of MLllib&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://spark.apache.org/docs/latest/api/python/pyspark.mllib.html#pyspark.mllib.recommendation.ALS"&gt;https://spark.apache.org/docs/latest/api/python/pyspark.mllib.html#pyspark.mllib.recommendation.ALS&lt;/a&gt;
ALS takes a training dataset (RDD) and several parameters that control the model creation process.&lt;/p&gt;
&lt;p&gt;The most important parameter to ALS.train() is the &lt;em&gt;rank&lt;/em&gt;, which is the number of rows in the Users matrix (green in the diagram above) or the number of columns in the Movies matrix (blue in the diagram above). (In general, a lower rank will mean higher error on the training dataset, but a high rank may lead to overfitting.)&lt;/p&gt;
&lt;p&gt;貌似ALS接受一个(userid, itemid, rating)的RDD作为输入, 预测时接受一个(userid, itemid)的RDD作为输入, 返回一个(userid, itemid, rating)的RDD.  (也就是说, 前面的notation在这里继续被使用了).&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;model = ALS.train(trainingRDD, rank, seed=seed, iterations=iterations,
                      lambda_=regularizationParameter)
predictedRatingsRDD = model.predictAll(validationForPredictRDD)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以在这里查看job详情: &lt;a href="http://localhost:4040/jobs/"&gt;http://localhost:4040/jobs/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;compare model&lt;/h3&gt;
&lt;p&gt;Looking at the RMSE for the results predicted by the model versus the values in the test set is one way to evalute the quality of our model. &lt;em&gt;Another way to evaluate the model is to evaluate the error from a test set where every rating is the average rating for the training set.&lt;/em&gt;
⇒ 这里没有太理解, 难道是说test set 的平均rating预测结果和training set的平均rating应该比较接近么?? 
⇒ 终于明白了: "&lt;em&gt;Your model more accurately predicts the ratings than using just the average rating, as the model's RMSE is significantly lower than the RMSE when using the average rating.&lt;/em&gt;"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;求一个tuple rdd最后一列的和的时候, 需要先map成最后一列再reduce: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;trainingRDD.map(lambda x:x[-1]).reduce(lambda x,y:x+y)&lt;/code&gt;&lt;br /&gt;
直接写&lt;code&gt;reduce(lambda x,y:x[-1]+y[-1])&lt;/code&gt;貌似是不行的&lt;/p&gt;</summary><category term="spark"></category></entry><entry><title>[Algorithms I] Week 1-1 Union-Find</title><link href="http://x-wei.github.io/algoI_week1_1.html" rel="alternate"></link><published>2015-06-27T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/algoI_week1_1.html</id><summary type="html">&lt;h1&gt;1. Dynamic Connectivity pb&lt;/h1&gt;
&lt;h3&gt;pb statement&lt;/h3&gt;
&lt;p&gt;a set of N obj, &lt;em&gt;indexed by 0,1,...,N-1&lt;/em&gt;
⇒ 
&lt;em&gt; UNION: connect objects &lt;code&gt;void union(int p, int q)&lt;/code&gt;
&lt;/em&gt; FIND: is there a path connecting 2 obj?  &lt;code&gt;boolean connected(int p, int q)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ex: &lt;br /&gt;
&lt;img alt="" src="algoI_week1_1/pasted_image.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;connect components&lt;/strong&gt;(联通分支): max set of obj that are mutually connected. &lt;/p&gt;
&lt;h3&gt;UF API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;union(p,q): connect 2 obj&lt;/li&gt;
&lt;li&gt;connected(p,q): test if p and q are connected &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;find(p)&lt;/strong&gt;: find the &lt;em&gt;component id&lt;/em&gt; of p&lt;/li&gt;
&lt;li&gt;count(): nb of components&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意:
命名不是很好, 这里的&lt;code&gt;find()&lt;/code&gt;函数不对应FIND query, &lt;code&gt;connected()&lt;/code&gt;函数才是真正的FIND query, find()函数是为了connected()函数而做的一个辅助函数(find(p): return the root of the node p )
在connected里就可以调用find: &lt;code&gt;return find(p)==find(q)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;应该是interface更好一些... &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public interface UF{
void union(int p, int q);
boolean connected(int p, int q);
//int find(int p);
//int count();
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试client: &lt;br /&gt;
&lt;img alt="" src="algoI_week1_1/pasted_image003.png" /&gt;&lt;/p&gt;
&lt;h1&gt;2. Quick Find&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;"eager approach"&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;data structure&lt;/h3&gt;
&lt;p&gt;⇒ an int array &lt;code&gt;id[]&lt;/code&gt;
initialized to &lt;em&gt;id[p]=p for all p&lt;/em&gt;
interpretation: &lt;em&gt;id[p] = &lt;strong&gt;&lt;em&gt;component id of obj p&lt;/em&gt;&lt;/strong&gt;
⇒ p and q are connected &lt;/em&gt;iff* id[p]==id[q] (ie. find very fast)
没有用find()函数  &lt;br /&gt;
&lt;img alt="" src="algoI_week1_1/pasted_image002.png" /&gt;  &lt;/p&gt;
&lt;h3&gt;UF operations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FIND:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;connected(p,q):&lt;/code&gt; very fast, just check id[p] and id[q]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UNION:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;when merging 2 components :
&lt;code&gt;union(p,q)&lt;/code&gt;: &lt;code&gt;id[p]=id[q]&lt;/code&gt;(总是让第一个参数p的id变为第二个参数q的id), &lt;br /&gt;
⇒ then have to modify &lt;em&gt;all entries&lt;/em&gt; with id equal to &lt;code&gt;id[p]&lt;/code&gt; !&lt;br /&gt;
⇒ too many entries to change  &lt;/p&gt;
&lt;h3&gt;implementation&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(class  QuickFindUF implements UF)&lt;/em&gt;&lt;br /&gt;
&lt;img alt="" src="algoI_week1_1/pasted_image004.png" /&gt;&lt;/p&gt;
&lt;p&gt;complexity: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FIND: cte&lt;/li&gt;
&lt;li&gt;UNION: lin...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;if N obj + N unions ⇒ &lt;em&gt;quad time !&lt;/em&gt;&lt;br /&gt;
btw, 程序运行速度: &lt;strong&gt;~10^9/s&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;3. Quick Union&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;"lazy approach"&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;data structure&lt;/h3&gt;
&lt;p&gt;⇒ also an int array &lt;code&gt;id[]&lt;/code&gt;
considering a set of &lt;em&gt;trees, &lt;/em&gt;此时每个联通分支都是一个tree&lt;br /&gt;
interpretation: &lt;em&gt;id[p] = &lt;em&gt;&lt;strong&gt;parent index of obj p &lt;/strong&gt;(觉得这个数组叫做father更好....)&lt;br /&gt;
⇒ p is a root node &lt;/em&gt;iff&lt;/em&gt; id[p]==p&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week1_1/pasted_image005.png" /&gt;&lt;/p&gt;
&lt;h3&gt;UF operations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FIND:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;connected(p,q):&lt;/code&gt;check if &lt;em&gt;root of p == root of q&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UNION: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;union(p,q):&lt;/code&gt;just set p's root to be &lt;em&gt;child&lt;/em&gt; of q's root (把第一个参数p的那棵树放入第二个参数q的树的根节点作为子树)&lt;br /&gt;
&lt;img alt="" src="algoI_week1_1/pasted_image006.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;root():&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前两个的操作都需要一个函数查找一个节点的root,  需要写一个函数实现, 也很简单, 一路找parent即可:   &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private int root(int p){
    while (p!=id[p]) p=id[p];
    return p;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;implementation&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week1_1/pasted_image007.png" /&gt;&lt;/p&gt;
&lt;h3&gt;complexity&lt;/h3&gt;
&lt;p&gt;in the worst case (all elements is in a list form), root() is ~N, so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FIND: lin&lt;/li&gt;
&lt;li&gt;UNION: lin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;quick find和quick union的问题: &lt;br /&gt;
&lt;img alt="" src="algoI_week1_1/pasted_image009.png" /&gt;&lt;/p&gt;
&lt;h1&gt;4. Quick Union Improvements&lt;/h1&gt;
&lt;h2&gt;improvement1: weighting&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;keep track of tree size&lt;/em&gt; ⇒ balance by taking the small tree be a child of the large tree  &lt;br /&gt;
&lt;img alt="" src="algoI_week1_1/pasted_image010.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week1_1/pasted_image011.png" /&gt;&lt;/p&gt;
&lt;p&gt;⇒ add an extra array: &lt;code&gt;sz[]&lt;/code&gt; sz[i] is the size of the tree with root i&lt;/p&gt;
&lt;h3&gt;implementation&lt;/h3&gt;
&lt;p&gt;(数组&lt;code&gt;int  sz[]&lt;/code&gt; 初始全部为1)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;依然需要&lt;code&gt;root()&lt;/code&gt;函数.&lt;/p&gt;
&lt;p&gt;private int root(int p){
    while(p!=id[p]) p=id[p];
    return p;
}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FIND &lt;/p&gt;
&lt;p&gt;public boolean connected(int p, int q){
    return root(p)==root(q);
}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UNION&lt;/p&gt;
&lt;p&gt;public void  union(int p, int q){
    int rp = root(p), rq=root(q);
    if(rp==rq) return; // 
    if (sz[rp]&amp;lt;sz[rq]){
        id[rp]=rq;
        sz[rq]+=sz[rp];
    }
    else{...}
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;complexity&lt;/h3&gt;
&lt;p&gt;FIND: proportional to &lt;em&gt;depth of p and&lt;/em&gt; q in their tree
UNION: const if p and q are root&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;proposition&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the max depth of weightedQuickUnion is &lt;strong&gt;lgN&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[pf] considering a node &lt;code&gt;x&lt;/code&gt;, in tree &lt;code&gt;T1&lt;/code&gt;, &lt;code&gt;dep(x)&lt;/code&gt; is x's depth in its tree.  &lt;br /&gt;
&lt;img alt="" src="algoI_week1_1/pasted_image012.png" /&gt; &lt;br /&gt;
→   &lt;code&gt;dep(x)&lt;/code&gt; will increase by 1, iff &lt;code&gt;T1&lt;/code&gt; is merged into another tree &lt;code&gt;T2&lt;/code&gt; (and by the algo, shoud have |T1|&amp;lt;=|T2| )&lt;br /&gt;
→   x's tree's size become |T1|+|T2| &amp;gt;= 2&lt;em&gt;|T1| 
⇒   everytime dep(x) increased by 1, x's tree's size will &lt;/em&gt;at least double*&lt;br /&gt;
at first dep(x)=1, if dep(x) increases lgN times, the size of the tree will be &amp;gt;=  N &lt;br /&gt;
CQFD.&lt;/p&gt;
&lt;p&gt;so the &lt;code&gt;root()&lt;/code&gt; function takes only lgN time. 
&lt;strong&gt;conclusion&lt;/strong&gt;: both UNION and FIND will be in &lt;strong&gt;lgN &lt;/strong&gt;time. &lt;/p&gt;
&lt;h2&gt;improvement 2: path compression&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;imporve the root() function: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;when looking for root of a node ⇒ link &lt;em&gt;all nodes in the path &lt;/em&gt;up to the root. &lt;br /&gt;
⇒ just a constant extra time compared to old implementation. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2 pass implementation: &lt;/p&gt;
&lt;p&gt;private int root(int p){
    int r = p;
    while(r!=id[r]) r=id[r];
    while(p!=r){
        int t = p;
        p=id[p];
        id[t]=r;
    }
    return r;
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;flatens the tree greatly. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;single pass implementation: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;just make all other node &lt;em&gt;point to its grandparent&lt;/em&gt; (halving the path length)
⇒ not as flatening as before, but in practice will almost be the same. 
just one extra line of code: 
    private int root(int p){
        while(p!=id[p]){ 
            id[p] = id[ id[p] ];
            p=id[p];  &lt;br /&gt;
        }
        return p;
    }&lt;/p&gt;
&lt;h3&gt;complexity&lt;/h3&gt;
&lt;p&gt;(for weighet quick union with path compression — &lt;em&gt;WQUPC&lt;/em&gt;)&lt;br /&gt;
very very small: &lt;br /&gt;
&lt;img alt="" src="algoI_week1_1/pasted_image013.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lg*()&lt;/strong&gt; function: "&lt;em&gt;iterated log function&lt;/em&gt;", lg&lt;em&gt;(N) = the number of time to take log to get to 1
lg&lt;/em&gt;()几乎可以看成常数了:  &lt;br /&gt;
&lt;img alt="" src="algoI_week1_1/pasted_image014.png" /&gt; &lt;br /&gt;
ex. &lt;em&gt;lg&lt;/em&gt;(65536) = 4* (x^16=65536)&lt;br /&gt;
because: lg(65536)=16 ; lg(16) = 4; lg(4)=2; lg(2)=1. &lt;br /&gt;
&lt;strong&gt;⇒ N obj, M unions will take (almost) linear time&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week1_1/pasted_image015.png" /&gt; &lt;br /&gt;
(有人证明了不存在&lt;em&gt;理论上&lt;/em&gt;linear的算法. )&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;conclusion&lt;/strong&gt;: both UNION and FIND will be in &lt;strong&gt;constant time&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;summery&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week1_1/pasted_image017.png" /&gt; &lt;br /&gt;
上面这个表格好像quick union的部分有问题? 最坏情况下应该是N+MN吧??&lt;br /&gt;
书上是这么写的:  &lt;br /&gt;
&lt;img alt="" src="algoI_week1_1/pasted_image016.png" /&gt;&lt;/p&gt;
&lt;p&gt;WQUCF reduce 30 years to 6 seconds. &lt;/p&gt;
&lt;h1&gt;5. Union Find Application&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week1_1/pasted_image018.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;percolation&lt;/li&gt;
&lt;li&gt;dynamic connectivity&lt;/li&gt;
&lt;li&gt;Kruskal MST algo&lt;/li&gt;
&lt;li&gt;Games (GO)&lt;/li&gt;
&lt;li&gt;.......&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;percolation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;model: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;N&lt;em&gt;N grid of sites&lt;br /&gt;
⇒ each site is open with proba=&lt;/em&gt;p*&lt;br /&gt;
⇒ sys &lt;strong&gt;percolate&lt;/strong&gt; iff bottom and top are connected by open sites.  &lt;br /&gt;
&lt;img alt="" src="algoI_week1_1/pasted_image019.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;question: the &lt;em&gt;percolation probability&lt;/em&gt; as a function of &lt;em&gt;p &lt;/em&gt;(&lt;strong&gt;phase transition&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week1_1/pasted_image020.png" /&gt; &lt;br /&gt;
nobody knows how to get the threshold mathematically&lt;br /&gt;
⇒ run &lt;em&gt;simulations&lt;/em&gt; to find out the phase transition &lt;em&gt;threshold&lt;/em&gt;.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monte Carlo simulation   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ all sites initilized to be &lt;em&gt;closed&lt;/em&gt;&lt;br /&gt;
→ randomly open sites &lt;em&gt;one by one&lt;/em&gt; &lt;br /&gt;
→ when the sys percolates, the &lt;em&gt;vacancy percentage&lt;/em&gt; is an estimate of &lt;em&gt;p&lt;/em&gt; &lt;br /&gt;
*(run above simulation for millions of times)   &lt;/p&gt;
&lt;h3&gt;implementation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;N^2 sites, named 0 to N^2-1  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week1_1/pasted_image022.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add 2 more vertual sites: one on top, one on bottom   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="algoI_week1_1/pasted_image021.png" /&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;openning a site: union to adjcent open sites (at most 4 unions)&lt;/li&gt;
&lt;/ul&gt;</summary><category term="algorithm"></category></entry><entry><title>[Spark MOOC note] Lec8. Exploratory Data Analysis and Machine Learning</title><link href="http://x-wei.github.io/sparkmooc_note_lec8.html" rel="alternate"></link><published>2015-06-23T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/sparkmooc_note_lec8.html</id><summary type="html">&lt;h2&gt;STATISTICS, BUSINESS QUESTIONS, AND LEARNING TECHNIQUES&lt;/h2&gt;
&lt;p&gt;2 different kinds of statistics: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;descriptive statistics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. median — describes data, &lt;em&gt;but cannot generalize beyong that&lt;/em&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inferential statistics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. &lt;em&gt;t-testing — inferences beyond the data&lt;/em&gt;
techniques leveraged for machine learning and prediction&lt;/p&gt;
&lt;p&gt;supervised learning (clf, reg), unsupervised learning (clustering, dim-reduction)
 → UL often used in a larger SL pb (ex. &lt;em&gt;auto-encoder&lt;/em&gt;)&lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec8/pasted_image.png" /&gt;&lt;/p&gt;
&lt;h2&gt;EXPLORATORY DATA ANALYSIS&lt;/h2&gt;
&lt;p&gt;5-number summary:&lt;/p&gt;
&lt;p&gt;The five-number summary is a descriptive statistic that provides information about a set of observations. It consists of the five most important sample percentiles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The sample minimum (smallest observation)&lt;/li&gt;
&lt;li&gt;The lower quartile or first quartile&lt;/li&gt;
&lt;li&gt;The median (middle value)&lt;/li&gt;
&lt;li&gt;The upper quartile or third quartile&lt;/li&gt;
&lt;li&gt;The sample maximum (largest observation)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="sparkmooc_note_lec8/pasted_image001.png" /&gt;&lt;/p&gt;
&lt;p&gt;→ box plot: &lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec8/pasted_image004.png" /&gt;&lt;/p&gt;
&lt;h2&gt;THE R LANGUAGE AND NORMAL DISTRIBUTIONS&lt;/h2&gt;
&lt;p&gt;R: intractive exploration and visulization of data + statistical models and distributions + CRAN&lt;/p&gt;
&lt;p&gt;Central Limit Th: sum/mean of n iid random variables 
many statistical test assume data to be normally distributed&lt;/p&gt;
&lt;h2&gt;DISTRIBUTIONS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;poissons distribution: accurrence freq&lt;/li&gt;
&lt;li&gt;exponential distribution: interval between 2 (poissons) events&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Zipf/Pareto/Yule distributions&lt;/em&gt;: frequencies of different terms in a document, or web site visits&lt;/li&gt;
&lt;li&gt;binomial/multinomial distribution: nb of count of events&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;RHINE PARADOX&lt;/h2&gt;
&lt;h2&gt;SPARK'S MACHINE LEARNING TOOLKIT&lt;/h2&gt;
&lt;p&gt;mllib: scalable, distributed ML library, &lt;em&gt;sklearn-like&lt;/em&gt; ML toolkit
&lt;a href="https://spark.apache.org/docs/latest/mllib-guide.html"&gt;https://spark.apache.org/docs/latest/mllib-guide.html&lt;/a&gt;
lab: &lt;em&gt;collaborative filtering — &lt;/em&gt;matrix factorisation&lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec8/pasted_image005.png" /&gt;&lt;br /&gt;
⇒ &lt;em&gt;alternating&lt;/em&gt; least square(ALS):  &lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec8/pasted_image006.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;trouble with summary stats&lt;/strong&gt;: &lt;em&gt;Anscombe's Quartet&lt;/em&gt;
→ have same statistics property&lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec8/pasted_image002.png" /&gt;&lt;br /&gt;
→ quite different in fact: &lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec8/pasted_image003.png" /&gt;&lt;br /&gt;
&lt;strong&gt;Takeaways&lt;/strong&gt;:&lt;br /&gt;
&lt;em&gt;•  Important to look at data graphically before analyzing it   &lt;/em&gt;
&lt;em&gt;•  Basic statistics properties often fail to capture real-world complexities&lt;/em&gt;  &lt;/p&gt;
&lt;h2&gt;Lab3. Text Analysis and Entity Resolution&lt;/h2&gt;
&lt;p&gt;Entity Resolution (ER) refers to the task of finding records in a data set that refer to the same entity across different data sources (e.g., data files, books, websites, databases). ER is necessary when joining data sets based on entities that may or may not share a common identifier (e.g., database key, URI, National identification number), as may be the case due to differences in record shape, storage location, and/or curator style or preference. A data set that has undergone ER may be referred to as being cross-linked.&lt;/p&gt;
&lt;p&gt;The file format of an Amazon line is:
"id","title","description","manufacturer","price"
The file format of a Google line is:
"id","name","description","manufacturer","price"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;re.split&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;re.split()有个很讨厌的地方: 字符串以句号等结尾时, 最后总是会出现一个空字符串:
    &amp;gt;&amp;gt;&amp;gt; re.split('\W+', 'Words, words, words.')
    ['Words', 'words', 'words', '']
解决办法就是用个filter:　
&lt;code&gt;filter(None,re.split(split_regex, string.lower()) )&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tfidf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TF rewards tokens that appear many times in the same document. It is computed as the frequency of a token in a document. IDF rewards tokens that are rare overall in a dataset. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cosine similarity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The metric of string distance we will use is called cosine similarity. We will treat each document as a vector in some high dimensional space. Then, to compare two documents we compute the cosine of the angle between their two document vectors. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flatMap&lt;/code&gt;: 一行变多行, 别忘了...&lt;/li&gt;
&lt;li&gt;broadcast variable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;we define the broadcast variable in the driver and then we can refer to it in each worker. Spark saves the broadcast variable at each worker, so it is only sent once.
声明广播变量的办法也很简单, 只要:
 &lt;code&gt;idfsSmallBroadcast = sc.broadcast(idfsSmallWeights)&lt;/code&gt;
然后用的时候要改成&lt;code&gt;xx.value&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EXCEPT语句&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;找了一下没发现spark有SQL的EXCEPT语句(就是和join相反), 于是只好这么写了:
    nonDupsRDD = (sims
                  .leftOuterJoin(goldStandard)
                 .filter(lambda x: x[1][1]==None)
                 .map(lambda x:(x[0],x[1][0])))
用leftouterjoin 然后再只保留为None的那些... 应该不是最佳写法吧...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用的ER办法(cosine similarity)的复杂度是O2 太高了...
⇒ An &lt;strong&gt;inverted index&lt;/strong&gt; is a data structure that will allow us to avoid making quadratically many token comparisons. It maps each token in the dataset to &lt;em&gt;the list of documents that contain the token&lt;/em&gt;. So, instead of comparing, record by record, each token to every other token to see if they match, we will use inverted indices to &lt;em&gt;look up records(documents) that match on a particular token&lt;/em&gt;.
这种操作的基础是: 有很多向量的support是完全不重合的 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.&lt;code&gt;collectAsMap()&lt;/code&gt;: 把pair rdd变为map&lt;/li&gt;
&lt;li&gt;groupByKey(): 这个也用上了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lab4前后做了四个小时 不过很有意思... 第五部分出现out of memory error就没办法了...&lt;/p&gt;</summary><category term="spark"></category></entry><entry><title>[Spark MOOC note] Lec7. Data Quality</title><link href="http://x-wei.github.io/sparkmooc_note_lec7.html" rel="alternate"></link><published>2015-06-22T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/sparkmooc_note_lec7.html</id><summary type="html">&lt;h2&gt;DATA CLEANING&lt;/h2&gt;
&lt;p&gt;ex. 
deal with missing data, entity resolution, unit mismatch, ... &lt;/p&gt;
&lt;p&gt;deal with non-ideal samples ⇒ tradeoff between simplicity and accuracy. &lt;/p&gt;
&lt;h2&gt;DATA QUALITY PROBLEMS&lt;/h2&gt;
&lt;p&gt;data quality problems: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conversions in complex pipelines can mess up data &lt;/li&gt;
&lt;li&gt;Combining multiple datasets can result in errrors&lt;/li&gt;
&lt;li&gt;Data degrades in accuracy or loses value over time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还提供了一些工具帮助cleaning data: &lt;a href="http://vis.stanford.edu/wrangler/"&gt;http://vis.stanford.edu/wrangler/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;EXAMPLE: AGES OF STUDENTS IN THIS COURSE&lt;/h2&gt;
&lt;p&gt;(students' ages are self-reported...)&lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec7/pasted_image.png" /&gt;&lt;/p&gt;
&lt;h2&gt;DATA CLEANING MAKES EVERYTHING OKAY?&lt;/h2&gt;
&lt;p&gt;ex. the appearance of a hole in the ozone layer. &lt;/p&gt;
&lt;h2&gt;DIRTY DATA PROBLEMS&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="sparkmooc_note_lec7/pasted_image001.png" /&gt;&lt;/p&gt;
&lt;p&gt;Data Quality Continuum:&lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec7/pasted_image002.png" /&gt;&lt;/p&gt;
&lt;h2&gt;DATA GATHERING&lt;/h2&gt;
&lt;p&gt;solutions in the data gathering stage: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;re-emptive (先发制人) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;integrity checks&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;retrospective&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;duplicate removal&lt;/p&gt;
&lt;h2&gt;DATA DELIVERY&lt;/h2&gt;
&lt;p&gt;solutions: &lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec7/pasted_image003.png" /&gt;&lt;/p&gt;
&lt;h2&gt;DATA STORAGE&lt;/h2&gt;
&lt;p&gt;physical pb: storage is cheap → use data redundancy 
logical pb: poor metadata, etc&lt;/p&gt;
&lt;p&gt;⇒ solutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;publish &lt;em&gt;data specifications&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;data mining tools&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;DATA RETRIEVAL&lt;/h2&gt;
&lt;p&gt;...总之就是各种方面都会引起data quality pb... &lt;/p&gt;
&lt;h2&gt;DATA QUALITY CONSTRAINTS&lt;/h2&gt;
&lt;p&gt;static constraints: 
ex. nulls not allowed, field domains&lt;/p&gt;
&lt;p&gt;data constraints follow a 80-20 rule: &lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec7/pasted_image004.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data quality metrics&lt;/strong&gt;: ...
ex. in lab2, examine log lines that are not correctly parsed.&lt;/p&gt;
&lt;h2&gt;TECHNICAL APPROACHES TO DATA QUALITY&lt;/h2&gt;
&lt;p&gt;ex. entity resolution in lab3&lt;/p&gt;
&lt;h2&gt;EXAMPLE: DEDUP/CLEANING&lt;/h2&gt;
&lt;p&gt;bing shopping被黑了
convert to &lt;em&gt;canonical form &lt;/em&gt;(ex. mailing address)&lt;/p&gt;</summary><category term="spark"></category></entry><entry><title>[Spark MOOC note] Lec6. Structured Data</title><link href="http://x-wei.github.io/sparkmooc_note_lec6.html" rel="alternate"></link><published>2015-06-18T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/sparkmooc_note_lec6.html</id><summary type="html">&lt;h2&gt;RELATIONAL DATABASE&lt;/h2&gt;
&lt;p&gt;review: key data management concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data model &lt;/li&gt;
&lt;li&gt;schema&lt;/li&gt;
&lt;li&gt;&lt;em&gt;relational data model&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;structured data: have a specific schema to start with&lt;/p&gt;
&lt;p&gt;relationl database: a set of relations.
2 parts to a Relation: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;schema: name of relation, name and type of columns&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="sparkmooc_note_lec6//pasted_image.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;instance: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;any data at given time 
(&lt;em&gt;cardinality&lt;/em&gt;:=nb of rows, &lt;em&gt;degree&lt;/em&gt;:=nb of fields)&lt;/p&gt;
&lt;h2&gt;LARGE DATABASES&lt;/h2&gt;
&lt;h2&gt;RELATIONAL DATABASE EXAMPLE AND DISCUSSION&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="sparkmooc_note_lec6//pasted_image001.png" /&gt; &lt;br /&gt;
cardinality=3
degree=5&lt;/p&gt;
&lt;p&gt;advantages of Relational Databases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;well-def structure&lt;/li&gt;
&lt;li&gt;maintain indices for high performance&lt;/li&gt;
&lt;li&gt;consistancy maintained by transactions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;disadvantages: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;limited, rigid structure&lt;/li&gt;
&lt;li&gt;most disk space taken by large indices&lt;/li&gt;
&lt;li&gt;transactions are slow&lt;/li&gt;
&lt;li&gt;poor support for &lt;em&gt;sparse data&lt;/em&gt;(which is common)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;STRUCTURED QUERY LANGUAGE (SQL)&lt;/h2&gt;
&lt;p&gt;supported by &lt;strong&gt;DataFrame&lt;/strong&gt; of pyspark &lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec6//pasted_image002.png" /&gt;&lt;/p&gt;
&lt;h2&gt;JOINS IN SQL&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="sparkmooc_note_lec6//pasted_image003.png" /&gt;
cross join: carteian product&lt;/p&gt;
&lt;h2&gt;EXPLICIT SQL JOINS&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="sparkmooc_note_lec6//pasted_image004.png" /&gt;
explicit version is preferred&lt;/p&gt;
&lt;h2&gt;TYPES OF SQL JOINS&lt;/h2&gt;
&lt;p&gt;⇒ controls how &lt;em&gt;unmatched&lt;/em&gt; keys are handled&lt;/p&gt;
&lt;p&gt;LEFT OUTER JOIN: 
keys appearring in left table but not in right table will be included with NULL as value&lt;/p&gt;
&lt;h2&gt;JOINS IN SPARK&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;for spark DataFrame: support inner/left outer/semi-join&lt;/li&gt;
&lt;li&gt;for &lt;em&gt;pair RDDs&lt;/em&gt;: support inner join(), leftOuterJoin(), fullOuterJoin()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;join ex:
&lt;img alt="" src="sparkmooc_note_lec6//pasted_image005.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="sparkmooc_note_lec6//pasted_image006.png" /&gt;&lt;/p&gt;
&lt;p&gt;outerjoin ex:
&lt;img alt="" src="sparkmooc_note_lec6//pasted_image007.png" /&gt;&lt;/p&gt;
&lt;p&gt;fullouterjoin ex:
&lt;img alt="" src="sparkmooc_note_lec6//pasted_image008.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Lab 2 - Web Server Log Analysis with Apache Spark&lt;/h2&gt;
&lt;p&gt;Apache Common Log Format (CLF):&lt;br /&gt;
&lt;code&gt;127.0.0.1 - - [01/Aug/1995:00:00:01 -0400] "GET /images/launch-logo.gif HTTP/1.0" 200 1839&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Row(
host          = match.group(1),
client_identd = match.group(2),
user_id       = match.group(3),
date_time     = parse_apache_time(match.group(4)),
method        = match.group(5),
endpoint      = match.group(6),
protocol      = match.group(7),
response_code = int(match.group(8)),
content_size  = size 
)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;distinctByKey&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个pair RDD按照key来distinct不知道有没有distinctByKey之类的东西, 只好写成这样, 不知是不是对的: 
&lt;code&gt;dayHostCount = dayGroupedHosts.map(lambda group : (group[0], len(set(group[1])) ) )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;...总体来说很有意思的一个lab...&lt;/p&gt;</summary><category term="spark"></category></entry><entry><title>[Spark MOOC note] Lec5. Semi-structured Data</title><link href="http://x-wei.github.io/sparkmooc_note_lec5.html" rel="alternate"></link><published>2015-06-17T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/sparkmooc_note_lec5.html</id><summary type="html">&lt;h2&gt;KEY DATA MANAGEMENT CONCEPTS&lt;/h2&gt;
&lt;p&gt;data model: collection of concepts for describing data
schema: a description of a particular collection of data using a given data model&lt;/p&gt;
&lt;p&gt;structure spectrum: &lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec5/pasted_image.png" /&gt;
semi-structured data: apply schema &lt;strong&gt;after&lt;/strong&gt; creating data. &lt;/p&gt;
&lt;h2&gt;FILES&lt;/h2&gt;
&lt;p&gt;files: named collection of bytes, in hierarchical namespace (but: In a Content-Addressable Storage system files are stored, arranged, and accessed based on their content or metadata, not in hierarchy)&lt;/p&gt;
&lt;h2&gt;SEMI-STRUCTURED TABULAR DATA&lt;/h2&gt;
&lt;p&gt;table: a collection of rows and columns, each row has an &lt;em&gt;index&lt;/em&gt;, each column has a &lt;em&gt;name&lt;/em&gt;. 
cell: by a pair (row, col), values can be missing, types are &lt;em&gt;inffered&lt;/em&gt; from content&lt;/p&gt;
&lt;p&gt;CSV:&lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec5/pasted_image002.png" /&gt;&lt;/p&gt;
&lt;p&gt;PDB:(filed name can be repeated on multuple lines)  &lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec5/pasted_image001.png" /&gt; &lt;/p&gt;
&lt;h2&gt;CHALLENGES WITH TABULAR DATA&lt;/h2&gt;
&lt;p&gt;challenges: &lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec5/pasted_image003.png" /&gt;&lt;/p&gt;
&lt;p&gt;challenges for tabular data &lt;em&gt;from multiple source&lt;/em&gt;: &lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec5/pasted_image004.png" /&gt;&lt;/p&gt;
&lt;p&gt;challenges for tabular data &lt;em&gt;from sensors&lt;/em&gt;: &lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec5/pasted_image005.png" /&gt;&lt;/p&gt;
&lt;h2&gt;PANDAS AND SEMI-STRUCTURED DATA IN PYSPARK&lt;/h2&gt;
&lt;p&gt;pandas &lt;code&gt;DataFrame&lt;/code&gt;: represented as python dict (colname → series)
pandas &lt;code&gt;Series&lt;/code&gt;: 1D labeled array capable of holding any data type&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;spark DataFrame&lt;/strong&gt;: &lt;em&gt;Distributed&lt;/em&gt; collection of data organized into named columns. 
types of columns are inferred from values. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="sparkmooc_note_lec5/pasted_image006.png" /&gt;&lt;/p&gt;
&lt;p&gt;Using dataframes can be 5 times faster than using RDDs: &lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec5/pasted_image007.png" /&gt;&lt;/p&gt;
&lt;h2&gt;SEMI-STRUCTURED LOG FILES&lt;/h2&gt;
&lt;p&gt;ex. Apache web server log format&lt;/p&gt;
&lt;h2&gt;EXPLORING A WEB SERVER ACCESS LOG&lt;/h2&gt;
&lt;p&gt;NASA http server access log&lt;br /&gt;
&lt;a href="http://ita.ee.lbl.gov/html/contrib/NASA-HTTP.html"&gt;http://ita.ee.lbl.gov/html/contrib/NASA-HTTP.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;DATA MINING LOG FILES&lt;/h2&gt;
&lt;p&gt;Data mining log files is a data exploration process that often involves searching through the data for unusual events, a task that can be done using dashboards for visualizing anomalies. The data being analyzed usually includes machine resource usage data and application queue information.&lt;/p&gt;
&lt;h2&gt;FILE PERFORMANCE&lt;/h2&gt;
&lt;p&gt;binary/text performance benchmark:&lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec5/pasted_image008.png" /&gt;&lt;br /&gt;
⇒&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read and write times are comparable &lt;/li&gt;
&lt;li&gt;binary files are mach faster than palin text files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;compression performance benchmark:&lt;br /&gt;
&lt;img alt="" src="sparkmooc_note_lec5/pasted_image009.png" /&gt;&lt;br /&gt;
⇒ &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;write times are much larger than read times &lt;/li&gt;
&lt;li&gt;small range of compressed file size&lt;/li&gt;
&lt;li&gt;binary still much faster than text &lt;/li&gt;
&lt;li&gt;LZ4 compression ~= raw IO speed&lt;/li&gt;
&lt;/ul&gt;</summary><category term="spark"></category></entry><entry><title>[Spark MOOC note] Lec4. Spark Essentials</title><link href="http://x-wei.github.io/sparkmooc_note_lec4.html" rel="alternate"></link><published>2015-06-16T00:00:00+02:00</published><author><name>mx</name></author><id>http://x-wei.github.io/sparkmooc_note_lec4.html</id><summary type="html">&lt;h2&gt;PYTHON SPARK (PYSPARK)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;a spark prog has 2 programs:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dirver program: runs on driver machine&lt;/li&gt;
&lt;li&gt;worker program: runs on local threads or cluster nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a spark prog first creates a &lt;strong&gt;SparkContext object:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tells how and where to access a cluster&lt;/li&gt;
&lt;li&gt;shell will automatically create &lt;strong&gt;the sc varible&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;in iPython: use constructor to create a &lt;code&gt;SparkContext&lt;/code&gt; obj&lt;/li&gt;
&lt;li&gt;⇒ use this SparkContext obj to create RDDs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Master:&lt;br /&gt;
The &lt;code&gt;master&lt;/code&gt; parameter (for a SparkContext) determines which type and size of cluster to use
&lt;img alt="" src="./sparkmooc_note_lec4/pasted_image.png" /&gt;&lt;/p&gt;
&lt;h2&gt;RDDs&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Resilient Distributed Dataset&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;immutable once created&lt;/li&gt;
&lt;li&gt;spark tracks linege information to compute lost data efficiently&lt;/li&gt;
&lt;li&gt;operations on collections of elements in parallel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;to create RDDs&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;paralizing existing python collections&lt;/li&gt;
&lt;li&gt;transforming existing RDDs&lt;/li&gt;
&lt;li&gt;from files&lt;/li&gt;
&lt;li&gt;can specify the number of partitions for an RDD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="./sparkmooc_note_lec4/pasted_image002.png" /&gt;&lt;/p&gt;
&lt;p&gt;2 types of operations on RDD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tranformation: lazy, &lt;em&gt;executed only one action runs on it&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;action&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Working with RDD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create an RDD&lt;/li&gt;
&lt;li&gt;apply transformations to that RDD (ex. map, filter)&lt;/li&gt;
&lt;li&gt;apply actions on RDD (collect, count)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex code:  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data = [1,2,3,4]
rDD = sc.paralize(data, 4)
distFile = sc.textFile(&amp;quot;readme.txt&amp;quot;, 4) // elements are lines in the file
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;SPARK TRANSFORMATIONS&lt;/h2&gt;
&lt;p&gt;to create new dataset from existing one (lazy)&lt;/p&gt;
&lt;p&gt;examples of transformations: &lt;br /&gt;
&lt;img alt="" src="./sparkmooc_note_lec4/pasted_image003.png" /&gt;&lt;/p&gt;
&lt;h2&gt;PYTHON LAMBDA FUNCTIONS&lt;/h2&gt;
&lt;p&gt;single expression&lt;/p&gt;
&lt;h2&gt;TRANSFORMATIONS&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="./sparkmooc_note_lec4/pasted_image004.png" /&gt;&lt;/p&gt;
&lt;p&gt;⇒ spark truns the function litral into a cloture, balck code runs in driver, green code in workers&lt;/p&gt;
&lt;h2&gt;SPARK ACTIONS&lt;/h2&gt;
&lt;p&gt;cause spark to execute recipe to transform source. 
&lt;img alt="" src="./sparkmooc_note_lec4/pasted_image006.png" /&gt;&lt;/p&gt;
&lt;h2&gt;SPARK PROGRAMMING MODEL&lt;/h2&gt;
&lt;h2&gt;CACHING RDDS&lt;/h2&gt;
&lt;p&gt;to avoid having to reload data: &lt;code&gt;rdd.cache()&lt;/code&gt;⇒ read from memory instead of disk&lt;br /&gt;
&lt;img alt="" src="./sparkmooc_note_lec4/pasted_image007.png" /&gt;&lt;/p&gt;
&lt;h2&gt;SPARK PROGRAM LIFECYCLE&lt;/h2&gt;
&lt;p&gt;create/paralise ⇒ transform ⇒ [cache] ⇒ action&lt;/p&gt;
&lt;h2&gt;SPARK KEY-VALUE RDDS&lt;/h2&gt;
&lt;p&gt;each element of a &lt;em&gt;pair RDD&lt;/em&gt; is a pair tuple&lt;/p&gt;
&lt;p&gt;key-value transformations: &lt;br /&gt;
&lt;img alt="" src="./sparkmooc_note_lec4/pasted_image008.png" /&gt;&lt;/p&gt;
&lt;p&gt;ex:&lt;br /&gt;
&lt;img alt="" src="./sparkmooc_note_lec4/pasted_image009.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./sparkmooc_note_lec4/pasted_image010.png" /&gt;&lt;/p&gt;
&lt;p&gt;careful using &lt;code&gt;groupByKey&lt;/code&gt;: create lots of data traffic and iterables at works&lt;/p&gt;
&lt;h2&gt;PYSPARK CLOSURES&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;one closure per worker is sent &lt;em&gt;with every task&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;no communication between workers&lt;/li&gt;
&lt;li&gt;changes to global vars will not effect driver / other workers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ pbs: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inefficient to send large data to each job&lt;/li&gt;
&lt;li&gt;one-way: driver → worker&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;pyspark shared vaiables&lt;/strong&gt;: 
2 types: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Broadcase variables&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;send large, read-only variables to all workers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accumulators&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;aggregate values from worker to drivers &lt;/li&gt;
&lt;li&gt;only driver can access its value&lt;/li&gt;
&lt;li&gt;for workers the accumulators are write-only&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SPARK BROADCAST VARIABLES&lt;/h2&gt;
&lt;p&gt;ex. give every worker a large dataset &lt;br /&gt;
&lt;img alt="" src="./sparkmooc_note_lec4/pasted_image011.png" /&gt;&lt;/p&gt;
&lt;h2&gt;SPARK ACCUMULATORS&lt;/h2&gt;
&lt;p&gt;can only be "add" to by associative operation &lt;br /&gt;
&lt;img alt="" src="./sparkmooc_note_lec4/pasted_image012.png" /&gt;&lt;/p&gt;
&lt;p&gt;careful to use accumulators in transformations: &lt;br /&gt;
&lt;img alt="" src="./sparkmooc_note_lec4/pasted_image013.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Lab1&lt;/h2&gt;
&lt;p&gt;VB更新以后虚拟机打不开了, 解决办法在: &lt;br /&gt;
&lt;a href="http://bbs.deepin.org/forum.php?mod=viewthread&amp;amp;tid=26001"&gt;http://bbs.deepin.org/forum.php?mod=viewthread&amp;amp;tid=26001&lt;/a&gt;&lt;/p&gt;</summary><category term="spark"></category></entry></feed>