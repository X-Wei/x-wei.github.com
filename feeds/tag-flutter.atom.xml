<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mx's blog</title><link href="https://x-wei.github.io/" rel="alternate"></link><link href="https://x-wei.github.io/feeds/tag-flutter.atom.xml" rel="self"></link><id>https://x-wei.github.io/</id><updated>2020-10-18T00:00:00+02:00</updated><entry><title>用analyzer提高Flutter项目的代码质量</title><link href="https://x-wei.github.io/tech/flutter-use-analyzer.html" rel="alternate"></link><published>2020-10-18T00:00:00+02:00</published><updated>2020-10-18T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2020-10-18:tech/flutter-use-analyzer.html</id><summary type="html">&lt;p&gt;Dart默认的linter配置有点弱, 有很多有问题代码也不报错或警告.
添加一个analyzer可以应用dart的最佳代码实践, 对一些不好的代码风格提出警告或者直接报错, 从而提高代码质量.&lt;/p&gt;
&lt;p&gt;Cf. resocoder的介绍&lt;a href="https://resocoder.com/2020/01/17/dart-linting-tutorial-healthy-flutter-codebase-with-analysis_options-yaml/"&gt;文章&lt;/a&gt; (和视频)&lt;/p&gt;
&lt;h2 id="use-an-analyzer"&gt;Use an analyzer&lt;/h2&gt;
&lt;p&gt;Resocoder推荐&lt;a href="https://pub.dev/packages/lint"&gt;lint&lt;/a&gt;, 里面提供了一些最佳的dart和flutter代码风格. 类似的选择还有pandentic和effective_dart.&lt;/p&gt;
&lt;p&gt;使用方式就是, 先在pubsepc.yaml里添加依赖:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pubspec.yaml&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;dependency_overrides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nt"&gt;lint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;^1.3.0&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在根目录新建一个analysis_options.yaml文件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# analysis_options.yaml&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;package:lint/analysis_options.yaml&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="exclude-folders-disable-rules"&gt;Exclude folders / disable rules&lt;/h3&gt;
&lt;p&gt;analyzer默认会扫描文件夹下所有的dart代码, 有时候一些自动生成的代码或者在&lt;code&gt;build/&lt;/code&gt;文件夹下的代码并不需要被分析, 可以用&lt;code&gt;exclude&lt;/code&gt;把它们排除在外.&lt;/p&gt;
&lt;p&gt;另外有些默认的规则可能不适用于自己的代码, 比如我就比较喜欢加&lt;code&gt;this&lt;/code&gt;, 认为这样更容易区分成员变量和普通变量, 而这个是&lt;a href="https://dart-lang.github.io/linter/lints/unnecessary_this.html"&gt;不被推荐&lt;/a&gt;的(毕竟dart的IDE整合的非常棒). 如果要关闭这一项检查, 只需要在linter rule里把它设为false.&lt;/p&gt;
&lt;p&gt;综上, 我的analysis_options.yaml长这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;package:lint/analysis_options.yaml&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;analyzer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nt"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;build/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;linter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nt"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# Rationale: in our app, the codes are for reading on mobile phones. Adding&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# `this` makes it easier for readers to understand which variables class&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# members and which ones are not.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;unnecessary_this&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="auto-fix-suggestions_1"&gt;Auto-fix suggestions&lt;/h2&gt;
&lt;p&gt;不过在加了analyzer以后我发现VSCode出现了几百个warning, 大部分warning都有简单的fix方法(比如给&lt;code&gt;Text("foo")&lt;/code&gt;加个&lt;code&gt;const&lt;/code&gt;之类的). 虽然只要点一下就能fix, 点几百下也实在是太麻烦了...&lt;/p&gt;
&lt;p&gt;搜索一下以后发现了解决办法: &lt;a href="https://stackoverflow.com/a/62664168"&gt;https://stackoverflow.com/a/62664168&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;首先用&lt;code&gt;dartfmt&lt;/code&gt;可以解决一些简单的格式问题:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;# simple style/format fixes&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;$ dartfmt --fix --overwrite --follow-links .&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要应用analyzer的fix, 需要使用&lt;a href="https://pub.dev/packages/dartfix"&gt;dartfix&lt;/a&gt;. 不过它目前只支持pedantic, 不能直接用analysis_options.yaml的配置:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;# install dartfix:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;$ pub global activate dartfix&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;# Use dartfix to auto-apply pedantic suggestions:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;$ dartfix --pedantic --excludeFix unnecessary_this lib/ --fix prefer_const_declarations --overwrite&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但我发现pedantic的检查确实不如lint严格(cf. &lt;a href="https://github.com/passsy/dart-lint#comparison-to-packagepedantic"&gt;二者的比较&lt;/a&gt;), 所以我并没有直接用&lt;code&gt;--pedantic&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;但是, 我们依然可以用dartfix来fix某一类问题(需要先确认某个fix是否被dartfix支持). 比如我看到很多&lt;code&gt;sort_child_properties_last&lt;/code&gt;的建议, 于是可以:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;# Check if the "sort_child_properties_last" lint is supported by dartfix:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;$ dartfix -h | grep sort_&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;• sort_child_properties_last&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;# This fix is available ==&amp;gt; Apply it with dartfix:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;$ dartfix --fix sort_child_properties_last  lib/ --overwrite&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用类似的方式, 就可以快速应用linter的建议:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ dartfix --fix prefer_const_constructors  lib/ --overwrite&lt;/span&gt;
&lt;span class="code-line"&gt;$ dartfix --fix prefer_const_declarations  lib/ --overwrite&lt;/span&gt;
&lt;span class="code-line"&gt;$ dartfix --fix prefer_final_locals  lib/ --overwrite&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# Or apply multiple fixes at once:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;$ dartfix --fix prefer_const_declarations,avoid_redundant_argument_values,prefer_collection_literals,curly_braces_in_flow_control_structures,prefer_if_elements_to_conditional_expressions,annotate_overrides,prefer_const_constructors_in_immutables,unnecessary_const,prefer_is_empty,prefer_final_fields &lt;span class="se"&gt;\&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    lib/ --overwrite&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Flutter"></category></entry><entry><title>用fvm管理多个Flutter SDK</title><link href="https://x-wei.github.io/tech/flutter-use-fvm.html" rel="alternate"></link><published>2020-10-16T00:00:00+02:00</published><updated>2020-10-16T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2020-10-16:tech/flutter-use-fvm.html</id><summary type="html">&lt;h2 id="background"&gt;background&lt;/h2&gt;
&lt;p&gt;flutter有很多channel: stable/beta/dev/master, 而目前有些功能只在某个channel上可用, 比如Linux support目前只在dev channel支持.&lt;/p&gt;
&lt;p&gt;我日常用的是beta channel, 但是想写Linux程序时每次&lt;code&gt;flutter channel dev&lt;/code&gt;的话 需要花费很多时间--因为要下载新channel的内容, switch回去的时候又要等半天(因为要从新下载).&lt;/p&gt;
&lt;p&gt;今天看到Flutter Explained的视频: &lt;a href="https://youtu.be/R6vKde1vIGQ"&gt;https://youtu.be/R6vKde1vIGQ&lt;/a&gt; 这正是解决这个问题的! 它可以cache不同版本的flutterSDK 然后每个repo可以设置不同的版本号, 而且VSCode也只需要简单配置.&lt;/p&gt;
&lt;h2 id="enable-fvm"&gt;enable fvm&lt;/h2&gt;
&lt;p&gt;一行命令即可开启fvm:
&lt;code&gt;$ pub global activate fvm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;常用法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fvm flutter&lt;/code&gt;: Proxies flutter commands 用于选择合适的flutter版本&lt;ul&gt;
&lt;li&gt;也就是说用&lt;code&gt;fvm flutter&lt;/code&gt;来代替flutter命令 — 会自动pick当前repo所用的SDK&lt;/li&gt;
&lt;li&gt;比如: &lt;code&gt;fvm flutter doctor&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fvm list&lt;/code&gt;: 查看目前安装的flutter 版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fvm use&lt;/code&gt;: 选择使用一个SDK版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fvm install dev/beta/stable/...&lt;/code&gt;: 安装SDK &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="use-fvm"&gt;use fvm&lt;/h2&gt;
&lt;p&gt;在flutter文件夹里运行&lt;code&gt;fvm use xxx&lt;/code&gt;即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; my_flutter_proj&lt;/span&gt;
&lt;span class="code-line"&gt;$ fvm use dev&lt;/span&gt;
&lt;span class="code-line"&gt;$ fvm list&lt;/span&gt;
&lt;span class="code-line"&gt;Versions path:  /home/xwei/fvm/versions&lt;/span&gt;
&lt;span class="code-line"&gt;beta&lt;/span&gt;
&lt;span class="code-line"&gt;dev ✔&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个会在当前目录下添加一个&lt;code&gt;.fvm&lt;/code&gt;的文件夹, 里面包含了到指定SDK的软链接 以及一个json config:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ ls .fvm&lt;/span&gt;
&lt;span class="code-line"&gt;flutter_sdk@  fvm_config.json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来就可以愉快的用flutter dev开发linux app了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ fvm flutter config --enable-linux-desktop&lt;/span&gt;
&lt;span class="code-line"&gt;$ fvm flutter devices&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2&lt;/span&gt; connected devices:&lt;/span&gt;
&lt;span class="code-line"&gt;Android SDK built &lt;span class="k"&gt;for&lt;/span&gt; x86 &lt;span class="o"&gt;(&lt;/span&gt;mobile&lt;span class="o"&gt;)&lt;/span&gt; • emulator-5554 • android-x86 • Android &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;API &lt;span class="m"&gt;29&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;emulator&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Linux &lt;span class="o"&gt;(&lt;/span&gt;desktop&lt;span class="o"&gt;)&lt;/span&gt;                    • linux         • linux-x64   • Linux&lt;/span&gt;
&lt;span class="code-line"&gt;$ fvm flutter create .&lt;/span&gt;
&lt;span class="code-line"&gt;$ fvm flutter run -d linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="vscode-config"&gt;VScode config&lt;/h2&gt;
&lt;p&gt;cf. &lt;a href="https://github.com/leoafarias/fvm#vscode"&gt;https://github.com/leoafarias/fvm#vscode&lt;/a&gt;
让vscode使用fvm flutter (而不是默认flutter), 只要修改settings.json把那个flutter_sdk的软链接即可:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ cat .vscode/settings.json &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="s2"&gt;"dart.flutterSdkPaths"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;".fvm/flutter_sdk"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在VSCode的command palette里输入&lt;code&gt;Flutter: Change SDK&lt;/code&gt;, 就可以选择flutter SDK了&lt;/p&gt;
&lt;h2 id="other-config"&gt;other config&lt;/h2&gt;
&lt;h3 id="change-cache-path"&gt;change cache path&lt;/h3&gt;
&lt;p&gt;fvm默认cache在&lt;code&gt;~/fvm&lt;/code&gt;文件夹下, 可以修改&lt;code&gt;FVM_HOME&lt;/code&gt;环境变量改到别的位置.
cf. &lt;a href="https://github.com/leoafarias/fvm#change-fvm-cache-directory"&gt;https://github.com/leoafarias/fvm#change-fvm-cache-directory&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="bashfish-alias"&gt;bash/fish alias&lt;/h3&gt;
&lt;p&gt;每次都写&lt;code&gt;fvm flutter&lt;/code&gt;有点麻烦 可以在bashrc/config.fish里加上一行 &lt;code&gt;alias ff=fvm flutter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;综上, 只需要在.bashrc里加上:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;alias ff='fvm flutter'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;export FVM_HOME="$HOME/.local/fvm"&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我一般用fish, 是在&lt;code&gt;config.fish&lt;/code&gt;里加上:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;alias ff='fvm flutter'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;set FVM_HOME "$HOME/.local/fvm"&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Flutter"></category></entry></feed>