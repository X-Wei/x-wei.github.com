<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mx's blog</title><link href="https://x-wei.github.io/" rel="alternate"></link><link href="https://x-wei.github.io/feeds/tag-flutter.atom.xml" rel="self"></link><id>https://x-wei.github.io/</id><updated>2021-03-21T00:00:00+01:00</updated><entry><title>通过Flutter hooks简化代码</title><link href="https://x-wei.github.io/tech/note-on-flutter-hooks.html" rel="alternate"></link><published>2021-03-21T00:00:00+01:00</published><updated>2021-03-21T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2021-03-21:tech/note-on-flutter-hooks.html</id><summary type="html">&lt;p&gt;看了Resocoder和Robert Brunhage的两个视频, 这篇总结一下其中的内容(我其实还没实践过).&lt;/p&gt;
&lt;p&gt;本文主要参考自:
- &lt;a href="https://pub.dev/packages/flutter_hooks"&gt;pub package&lt;/a&gt;
- &lt;a href="https://www.youtube.com/watch?v=A1DUBgIsCv8"&gt;Video by Robert Brunhage&lt;/a&gt;
- &lt;a href="https://resocoder.com/2020/01/21/flutter-hooks-hide-fab-animation-100-widget-code-reuse/"&gt;Tutorial by Resocoder&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-problem"&gt;The problem&lt;/h2&gt;
&lt;p&gt;Flutter hooks想解决的问题是&lt;code&gt;StatefulWidget&lt;/code&gt;的一些常见pattern太复杂, 减少了代码的可读性("readability").&lt;/p&gt;
&lt;p&gt;一个典型例子就是animation controller:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyPage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nd"&gt;@override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;_MyPageState&lt;/span&gt; &lt;span class="n"&gt;createState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_MyPageState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_MyPageState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyPage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="n"&gt;SingleTickerProviderStateMixin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;AnimationController&lt;/span&gt; &lt;span class="n"&gt;_animController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nd"&gt;@override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;initState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;_animController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AnimationController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="nl"&gt;vsync:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="nl"&gt;duration:&lt;/span&gt; &lt;span class="n"&gt;kThemeAnimationDuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="nl"&gt;value:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// initially visible&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nd"&gt;@override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// use _animController here&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nd"&gt;@override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;_animController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种pattern在vanilla flutter里经常被使用, 但是对同一个controller在好几个地方操作(&lt;code&gt;initiState()&lt;/code&gt;/&lt;code&gt;setState()&lt;/code&gt;/&lt;code&gt;dispose()&lt;/code&gt;), 真的不好读.&lt;/p&gt;
&lt;p&gt;Flutter hooks就可以把这种重复的pattern抽离出来, 把&lt;code&gt;StatefulWidget&lt;/code&gt;变成类似&lt;code&gt;StatelessWidget&lt;/code&gt;的&lt;code&gt;HookWidget&lt;/code&gt;, 简化代码, 大大提高可读性.&lt;/p&gt;
&lt;p&gt;(btw 这个包的作者是Rémi Rousselet大神, 质量有保障👌)&lt;/p&gt;
&lt;h2 id="shi-yong-xian-cheng-de-hooks"&gt;使用现成的Hooks&lt;/h2&gt;
&lt;p&gt;对于常用的pattern有现成的hooks可以直接套用. 比如上面的animation controller例子, 用flutter hooks可以写成这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyPage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;HookWidget&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;//! StatelessWidget =&amp;gt; HookWidget&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nd"&gt;@override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;animController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;useAnimationController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nl"&gt;duration:&lt;/span&gt; &lt;span class="n"&gt;kThemeAnimationDuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nl"&gt;initialValue:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// use _animController here&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⚡️Flutter hooks自带了不少&lt;a href="https://pub.dev/packages/flutter_hooks#existing-hooks"&gt;现成的hooks&lt;/a&gt;, 有的面向Animation, 有的面向Stream等等, 有时间可以好好看一看...&lt;/p&gt;
&lt;h2 id="zi-ding-yi-hook"&gt;自定义Hook&lt;/h2&gt;
&lt;p&gt;cf. Resocoder的&lt;a href="https://resocoder.com/2020/01/21/flutter-hooks-hide-fab-animation-100-widget-code-reuse/#t-1616317538465"&gt;教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果现成的hook不满足条件, 其实自己实现起来也非常容易, 基本就是把原来&lt;code&gt;StatefulWidget/State&amp;lt;Foo&amp;gt;&lt;/code&gt;的内容变成&lt;code&gt;Hook&amp;lt;R&amp;gt;/HookState&amp;lt;R,Foo&amp;gt;&lt;/code&gt;. 其中&lt;code&gt;Foo&lt;/code&gt;是我们自定义的类名, &lt;code&gt;R&lt;/code&gt;则是state的类型. 比如对于之前的例子: &lt;code&gt;Foo&lt;/code&gt;=&lt;code&gt;MyPage&lt;/code&gt;, &lt;code&gt;R&lt;/code&gt;=&lt;code&gt;AnimationController&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;这里列一下二者的区别, 基本是一一对应的, 所以迁移起来不难:&lt;/p&gt;
&lt;table class=" table-striped table table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;StatefulWidget&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Hook&amp;lt;R&amp;gt;&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;class Foo extends StatefulWidget&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;class Foo extends Hook&amp;lt;R&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;createState() =&amp;gt; State&amp;lt;Foo&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;createState() =&amp;gt; HookState&amp;lt;R&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=" table-striped table table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;State&amp;lt;Foo&amp;gt;&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;HookState&amp;lt;R, Foo&amp;gt;&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;R _data;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;R _data;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;initState() {_data=...}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;initHook() {_data=...}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;build(ctx) =&amp;gt; Widget&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;build(ctx) =&amp;gt; R&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dispose()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dispose()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;widget.xxx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hook.xxx&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;当自定义的&lt;code&gt;Hook/HookState&lt;/code&gt;写好以后, 根据Flutter hooks的惯例, 需要写一个&lt;code&gt;useXxHooks&lt;/code&gt;的函数, 返回类型是&lt;code&gt;R&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;useMyHooks&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Hook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_FooHook&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="usestateuseeffect"&gt;useState/useEffect&lt;/h2&gt;
&lt;p&gt;cf. Robert Brunhage的&lt;a href="https://www.youtube.com/watch?v=A1DUBgIsCv8"&gt;视频&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于&lt;strong&gt;不追求逻辑复用&lt;/strong&gt;, 只想去掉&lt;code&gt;initState()&lt;/code&gt;/&lt;code&gt;dispose()&lt;/code&gt;的场景, 可以考虑直接把一个&lt;code&gt;StatefulWidget&lt;/code&gt;变成&lt;code&gt;HookWiget&lt;/code&gt;. Flutter hooks提供了&lt;code&gt;useState&lt;/code&gt;和&lt;code&gt;useEffect&lt;/code&gt;, 让我们可以直接在&lt;code&gt;HookWiget.build()&lt;/code&gt;函数里面创建/修改状态.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建状态&lt;/strong&gt;: 用&lt;a href="https://pub.dev/documentation/flutter_hooks/latest/flutter_hooks/useState.html"&gt;&lt;code&gt;useState(R initialVal)&lt;/code&gt;&lt;/a&gt;.\
注意返回值的是一个&lt;code&gt;ValueNotifier&amp;lt;R&amp;gt;&lt;/code&gt; (cf. [[202102212026 ChangeNotifier, ValueNotifier and StateNotifier|各种notifier]]), 获得包含的值需要&lt;code&gt;.value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;修改状态&lt;/strong&gt;: &lt;a href="https://pub.dev/documentation/flutter_hooks/latest/flutter_hooks/useEffect.html"&gt;&lt;code&gt;useEffect()&lt;/code&gt;&lt;/a&gt;, 有两个参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个参数(&lt;code&gt;effect()&lt;/code&gt;)是一个函数&lt;code&gt;Dispose? Function()&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;可以把修改状态的内容(比如原先&lt;code&gt;setState&lt;/code&gt;的内容)放在这里&lt;/li&gt;
&lt;li&gt;&lt;code&gt;effect&lt;/code&gt;可以返回另一个函数(&lt;code&gt;Dispose?&lt;/code&gt;), 这个函数会_在&lt;code&gt;effect()&lt;/code&gt;下次一被调用或者当widget dispose的时候运行_.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二个可选参数&lt;code&gt;keys&lt;/code&gt;是一个list, 控制&lt;code&gt;effect()&lt;/code&gt;何时被调用:&lt;ul&gt;
&lt;li&gt;如果为null(默认), 则_每次&lt;code&gt;build()&lt;/code&gt;_ 都会调用&lt;code&gt;effect()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果非null, 则只在_第一次&lt;code&gt;build()&lt;/code&gt;, 以及当任何keys元素改变时_才调用&lt;code&gt;effect()&lt;/code&gt;\
   &lt;strong&gt;注意: &lt;code&gt;keys&lt;/code&gt;可以是空list, 但非null&lt;/strong&gt;, 比如&lt;code&gt;keys=[]&lt;/code&gt;, 此时effect只运行一次.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种方法可以把一个&lt;code&gt;StatefulWidget&lt;/code&gt;简化为类似&lt;code&gt;StatelessWidget&lt;/code&gt;的&lt;code&gt;HookWidget&lt;/code&gt;, 简化代码. 例如用useState/useEffect写一个简单计时器, 代码相比vanilla flutter要简洁许多:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTimerPage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;HookWidget&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nd"&gt;@override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;_numberNotifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;//! Create state&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="c1"&gt;//! Change state&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="cm"&gt;/*effect=*/&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="c1"&gt;//! ~= initState()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;periodic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;          &lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;seconds:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;          &lt;span class="c1"&gt;//! ~= setState()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_numberNotifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//! ~= dispose()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="p"&gt;},&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="cm"&gt;/*keys=*/&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;  &lt;span class="c1"&gt;//! =&amp;gt; effect() is called only once&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_numberNotifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然这样写的缺点就是逻辑无法复用, 要复用逻辑的话可以参考上一节"自定义Hook":&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;把useState/useEffect的内容放进一个&lt;code&gt;_MyTimerHook extends Hook&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义&lt;code&gt;int useMyTimer()&lt;/code&gt;函数:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dart
int useMyTimer() {
  return Hook.use(_MyTimerHook());
}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;HookWidget&lt;/code&gt;里使用&lt;code&gt;useMyTimerHook&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dart
class MyTimerPage extends HookWidget {
  @override
  Widget build(BuildContext context) {
    final number = useMyTimer();
    return Text(number.toString());
  }
}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="zui-jia-shi-jian"&gt;最佳实践&lt;/h2&gt;
&lt;p&gt;pub上列出了几条&lt;a href="https://pub.dev/packages/flutter_hooks#rules"&gt;最佳实践&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所有hook的函数都以'use'开头:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="c1"&gt;// starts with `use`, good name&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;useMyHook&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="c1"&gt;// doesn't start with `use`, could confuse people into thinking that this isn't a hook&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;myHook&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="c1"&gt;// ....&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;不要在分支条件里使用hook:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="n"&gt;useMyHook&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;//! Good: DO call hooks unconditionally&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="c1"&gt;// ....&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;useMyHook&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;//! BAD: DON'T wrap use into a condition&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="c1"&gt;// ....&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Flutter"></category></entry><entry><title>提升Flutter App的设计细节</title><link href="https://x-wei.github.io/tech/flutter-improve-UI-details.html" rel="alternate"></link><published>2021-03-20T00:00:00+01:00</published><updated>2021-03-20T00:00:00+01:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2021-03-20:tech/flutter-improve-UI-details.html</id><summary type="html">&lt;p&gt;这篇文章主要总结了FlutterEngage里的这个talk:&lt;/p&gt;
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" class="embed-responsive-item" frameborder="0" height="315" src="https://www.youtube.com/embed/MIepaf7ks40" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;
&lt;p&gt;(这个talk的名字的中文翻译挺牛的: "小事一桩：成为开发和设计俱佳的神级人物")&lt;/p&gt;
&lt;p&gt;talk里代码地址在: &lt;a href="https://github.com/filiph/little_things"&gt;https://github.com/filiph/little_things&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个talk还是挺有意思的, 介绍了如何提升App的设计细节从而获得更高的 &lt;strong&gt;"Perceived value"&lt;/strong&gt;: 
有时候app本身的功能性和技术性是一方面, 但是呈现给用户的感觉却有可能因为一点点细节而完全不同. 这一点我之前不太重视, 细想一下确实有道理.&lt;/p&gt;
&lt;h2 id="1-white-space"&gt;1. White space&lt;/h2&gt;
&lt;p&gt;多使用padding添加空隙和留白, 体现一种高级感~
结合Flutter的hot reload可以快的实验 找到合适的padding.&lt;/p&gt;
&lt;h2 id="2-typography"&gt;2. Typography&lt;/h2&gt;
&lt;p&gt;换个好看的字体也可以让应用看起来非常高级.&lt;/p&gt;
&lt;p&gt;GoogleFont配合hot reload来选择好的字体&lt;/p&gt;
&lt;h2 id="3-color"&gt;3. Color&lt;/h2&gt;
&lt;p&gt;给app添加特别的配色.&lt;/p&gt;
&lt;p&gt;可以从网上找一些配色方案(color palette), 比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://coolors.co/palettes/trending&lt;/li&gt;
&lt;li&gt;https://undesign.learn.uno/colors/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把选好的ColorPalette放在&lt;code&gt;MaterialApp.theme&lt;/code&gt;里头: &lt;a href="https://github.com/filiph/little_things/blob/main/lib/main.dart#L27-L55"&gt;https://github.com/filiph/little_things/blob/main/lib/main.dart#L27-L55&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="4-iconography"&gt;4. Iconography&lt;/h2&gt;
&lt;p&gt;意思就是鼓励多给app多加一些图片/图标.&lt;/p&gt;
&lt;p&gt;Filip的例子他用到了BoxDecoration(可以配置gradient以及image): &lt;a href="https://github.com/filiph/little_things/blob/main/lib/src/list.dart#L18-L32"&gt;https://github.com/filiph/little_things/blob/main/lib/src/list.dart#L18-L32&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nl"&gt;gradient:&lt;/span&gt; &lt;span class="n"&gt;LinearGradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="nl"&gt;colors:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xFF96E3FF&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xFF9EECFF&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xFF9FEBFF&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xFF9FEEFF&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xFF9FECFF&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="p"&gt;],&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nl"&gt;image:&lt;/span&gt; &lt;span class="n"&gt;DecorationImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="nl"&gt;image:&lt;/span&gt; &lt;span class="n"&gt;AssetImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'assets/meditation.jpg'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="nl"&gt;alignment:&lt;/span&gt; &lt;span class="n"&gt;Alignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bottomCenter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/*...*/&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="5-animation"&gt;5. Animation&lt;/h2&gt;
&lt;p&gt;动画也可以很大提升用户对app的评价.&lt;/p&gt;
&lt;p&gt;默认animation的curve是linear, 一般这种curve都会让人感觉很不自然. 可以尝试一下&lt;code&gt;easeIn&lt;/code&gt;/&lt;code&gt;easeOut&lt;/code&gt;这种.&lt;/p&gt;
&lt;p&gt;另外还可以同时提供多个animation (slideTransition / resize / text 等等), 这时候如果所有animation一起跑其实会很乱, 我们应该用 &lt;strong&gt;"Staggered Animation"&lt;/strong&gt;, 就是一个animation接另一个animation.&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;curve: Interval(0.2, 0.6)&lt;/code&gt;, 可以让这个animation在整个animation(&lt;code&gt;parent&lt;/code&gt;)的20%~60%的时间段运行:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/flutter-improve-UI-details/Pasted%20image%2020210320221018.png"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ScaleTransition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nl"&gt;scale:&lt;/span&gt; &lt;span class="n"&gt;CurvedAnimation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nl"&gt;curve:&lt;/span&gt; &lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="nl"&gt;curve:&lt;/span&gt; &lt;span class="n"&gt;Curves&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elasticOut&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nl"&gt;parent:&lt;/span&gt; &lt;span class="n"&gt;_controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="cm"&gt;/*...*/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里Filip自己实现了一个显示文字的widget(&lt;code&gt;TrackedOutText&lt;/code&gt;), cf. &lt;a href="https://github.com/filiph/little_things/blob/main/lib/src/congrats.dart"&gt;https://github.com/filiph/little_things/blob/main/lib/src/congrats.dart&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-xiao-guo-dui-bi"&gt;最终效果对比&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/flutter-improve-UI-details/ui-before-and-after.gif"/&gt;&lt;/p&gt;
&lt;p&gt;App质感的提升还是挺明显的!&lt;/p&gt;
&lt;p&gt;另外原视频的简介里也提供了一些UI设计的视频可以参考入门.&lt;/p&gt;</summary><category term="Flutter"></category></entry><entry><title>用analyzer提高Flutter项目的代码质量</title><link href="https://x-wei.github.io/tech/flutter-use-analyzer.html" rel="alternate"></link><published>2020-10-18T00:00:00+02:00</published><updated>2020-10-18T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2020-10-18:tech/flutter-use-analyzer.html</id><summary type="html">&lt;p&gt;Dart默认的linter配置有点弱, 有很多有问题代码也不报错或警告.
添加一个analyzer可以应用dart的最佳代码实践, 对一些不好的代码风格提出警告或者直接报错, 从而提高代码质量.&lt;/p&gt;
&lt;p&gt;Cf. resocoder的介绍&lt;a href="https://resocoder.com/2020/01/17/dart-linting-tutorial-healthy-flutter-codebase-with-analysis_options-yaml/"&gt;文章&lt;/a&gt; (和视频)&lt;/p&gt;
&lt;h2 id="use-an-analyzer"&gt;Use an analyzer&lt;/h2&gt;
&lt;p&gt;Resocoder推荐&lt;a href="https://pub.dev/packages/lint"&gt;lint&lt;/a&gt;, 里面提供了一些最佳的dart和flutter代码风格. 类似的选择还有pandentic和effective_dart.&lt;/p&gt;
&lt;p&gt;使用方式就是, 先在pubsepc.yaml里添加依赖:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pubspec.yaml&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;dependency_overrides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nt"&gt;lint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;^1.3.0&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在根目录新建一个analysis_options.yaml文件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# analysis_options.yaml&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;package:lint/analysis_options.yaml&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="exclude-folders-disable-rules"&gt;Exclude folders / disable rules&lt;/h3&gt;
&lt;p&gt;analyzer默认会扫描文件夹下所有的dart代码, 有时候一些自动生成的代码或者在&lt;code&gt;build/&lt;/code&gt;文件夹下的代码并不需要被分析, 可以用&lt;code&gt;exclude&lt;/code&gt;把它们排除在外.&lt;/p&gt;
&lt;p&gt;另外有些默认的规则可能不适用于自己的代码, 比如我就比较喜欢加&lt;code&gt;this&lt;/code&gt;, 认为这样更容易区分成员变量和普通变量, 而这个是&lt;a href="https://dart-lang.github.io/linter/lints/unnecessary_this.html"&gt;不被推荐&lt;/a&gt;的(毕竟dart的IDE整合的非常棒). 如果要关闭这一项检查, 只需要在linter rule里把它设为false.&lt;/p&gt;
&lt;p&gt;综上, 我的analysis_options.yaml长这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;package:lint/analysis_options.yaml&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;analyzer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nt"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;build/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;linter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nt"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# Rationale: in our app, the codes are for reading on mobile phones. Adding&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# `this` makes it easier for readers to understand which variables class&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# members and which ones are not.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;unnecessary_this&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="auto-fix-suggestions_1"&gt;Auto-fix suggestions&lt;/h2&gt;
&lt;p&gt;不过在加了analyzer以后我发现VSCode出现了几百个warning, 大部分warning都有简单的fix方法(比如给&lt;code&gt;Text("foo")&lt;/code&gt;加个&lt;code&gt;const&lt;/code&gt;之类的). 虽然只要点一下就能fix, 点几百下也实在是太麻烦了...&lt;/p&gt;
&lt;p&gt;搜索一下以后发现了解决办法: &lt;a href="https://stackoverflow.com/a/62664168"&gt;https://stackoverflow.com/a/62664168&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;首先用&lt;code&gt;dartfmt&lt;/code&gt;可以解决一些简单的格式问题:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;# simple style/format fixes&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;$ dartfmt --fix --overwrite --follow-links .&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要应用analyzer的fix, 需要使用&lt;a href="https://pub.dev/packages/dartfix"&gt;dartfix&lt;/a&gt;. 不过它目前只支持pedantic, 不能直接用analysis_options.yaml的配置:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;# install dartfix:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;$ pub global activate dartfix&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;# Use dartfix to auto-apply pedantic suggestions:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;$ dartfix --pedantic --excludeFix unnecessary_this lib/ --fix prefer_const_declarations --overwrite&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但我发现pedantic的检查确实不如lint严格(cf. &lt;a href="https://github.com/passsy/dart-lint#comparison-to-packagepedantic"&gt;二者的比较&lt;/a&gt;), 所以我并没有直接用&lt;code&gt;--pedantic&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;但是, 我们依然可以用dartfix来fix某一类问题(需要先确认某个fix是否被dartfix支持). 比如我看到很多&lt;code&gt;sort_child_properties_last&lt;/code&gt;的建议, 于是可以:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;# Check if the "sort_child_properties_last" lint is supported by dartfix:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;$ dartfix -h | grep sort_&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;• sort_child_properties_last&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;# This fix is available ==&amp;gt; Apply it with dartfix:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;$ dartfix --fix sort_child_properties_last  lib/ --overwrite&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用类似的方式, 就可以快速应用linter的建议:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ dartfix --fix prefer_const_constructors  lib/ --overwrite&lt;/span&gt;
&lt;span class="code-line"&gt;$ dartfix --fix prefer_const_declarations  lib/ --overwrite&lt;/span&gt;
&lt;span class="code-line"&gt;$ dartfix --fix prefer_final_locals  lib/ --overwrite&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# Or apply multiple fixes at once:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;$ dartfix --fix prefer_const_declarations,avoid_redundant_argument_values,prefer_collection_literals,curly_braces_in_flow_control_structures,prefer_if_elements_to_conditional_expressions,annotate_overrides,prefer_const_constructors_in_immutables,unnecessary_const,prefer_is_empty,prefer_final_fields &lt;span class="se"&gt;\&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    lib/ --overwrite&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Flutter"></category></entry><entry><title>用fvm管理多个Flutter SDK</title><link href="https://x-wei.github.io/tech/flutter-use-fvm.html" rel="alternate"></link><published>2020-10-16T00:00:00+02:00</published><updated>2020-10-16T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:x-wei.github.io,2020-10-16:tech/flutter-use-fvm.html</id><summary type="html">&lt;h2 id="background"&gt;background&lt;/h2&gt;
&lt;p&gt;flutter有很多channel: stable/beta/dev/master, 而目前有些功能只在某个channel上可用, 比如Linux support目前只在dev channel支持.&lt;/p&gt;
&lt;p&gt;我日常用的是beta channel, 但是想写Linux程序时每次&lt;code&gt;flutter channel dev&lt;/code&gt;的话 需要花费很多时间--因为要下载新channel的内容, switch回去的时候又要等半天(因为要从新下载).&lt;/p&gt;
&lt;p&gt;今天看到Flutter Explained的视频: &lt;a href="https://youtu.be/R6vKde1vIGQ"&gt;https://youtu.be/R6vKde1vIGQ&lt;/a&gt; 这正是解决这个问题的! 它可以cache不同版本的flutterSDK 然后每个repo可以设置不同的版本号, 而且VSCode也只需要简单配置.&lt;/p&gt;
&lt;h2 id="enable-fvm"&gt;enable fvm&lt;/h2&gt;
&lt;p&gt;一行命令即可开启fvm:
&lt;code&gt;$ pub global activate fvm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;常用法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fvm flutter&lt;/code&gt;: Proxies flutter commands 用于选择合适的flutter版本&lt;ul&gt;
&lt;li&gt;也就是说用&lt;code&gt;fvm flutter&lt;/code&gt;来代替flutter命令 — 会自动pick当前repo所用的SDK&lt;/li&gt;
&lt;li&gt;比如: &lt;code&gt;fvm flutter doctor&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fvm list&lt;/code&gt;: 查看目前安装的flutter 版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fvm use&lt;/code&gt;: 选择使用一个SDK版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fvm install dev/beta/stable/...&lt;/code&gt;: 安装SDK &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="use-fvm"&gt;use fvm&lt;/h2&gt;
&lt;p&gt;在flutter文件夹里运行&lt;code&gt;fvm use xxx&lt;/code&gt;即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; my_flutter_proj&lt;/span&gt;
&lt;span class="code-line"&gt;$ fvm use dev&lt;/span&gt;
&lt;span class="code-line"&gt;$ fvm list&lt;/span&gt;
&lt;span class="code-line"&gt;Versions path:  /home/xwei/fvm/versions&lt;/span&gt;
&lt;span class="code-line"&gt;beta&lt;/span&gt;
&lt;span class="code-line"&gt;dev ✔&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个会在当前目录下添加一个&lt;code&gt;.fvm&lt;/code&gt;的文件夹, 里面包含了到指定SDK的软链接 以及一个json config:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ ls .fvm&lt;/span&gt;
&lt;span class="code-line"&gt;flutter_sdk@  fvm_config.json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来就可以愉快的用flutter dev开发linux app了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ fvm flutter config --enable-linux-desktop&lt;/span&gt;
&lt;span class="code-line"&gt;$ fvm flutter devices&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2&lt;/span&gt; connected devices:&lt;/span&gt;
&lt;span class="code-line"&gt;Android SDK built &lt;span class="k"&gt;for&lt;/span&gt; x86 &lt;span class="o"&gt;(&lt;/span&gt;mobile&lt;span class="o"&gt;)&lt;/span&gt; • emulator-5554 • android-x86 • Android &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;API &lt;span class="m"&gt;29&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;emulator&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Linux &lt;span class="o"&gt;(&lt;/span&gt;desktop&lt;span class="o"&gt;)&lt;/span&gt;                    • linux         • linux-x64   • Linux&lt;/span&gt;
&lt;span class="code-line"&gt;$ fvm flutter create .&lt;/span&gt;
&lt;span class="code-line"&gt;$ fvm flutter run -d linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="vscode-config"&gt;VScode config&lt;/h2&gt;
&lt;p&gt;cf. &lt;a href="https://github.com/leoafarias/fvm#vscode"&gt;https://github.com/leoafarias/fvm#vscode&lt;/a&gt;
让vscode使用fvm flutter (而不是默认flutter), 只要修改settings.json把那个flutter_sdk的软链接即可:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ cat .vscode/settings.json &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="s2"&gt;"dart.flutterSdkPaths"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;".fvm/flutter_sdk"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在VSCode的command palette里输入&lt;code&gt;Flutter: Change SDK&lt;/code&gt;, 就可以选择flutter SDK了&lt;/p&gt;
&lt;h2 id="other-config"&gt;other config&lt;/h2&gt;
&lt;h3 id="change-cache-path"&gt;change cache path&lt;/h3&gt;
&lt;p&gt;fvm默认cache在&lt;code&gt;~/fvm&lt;/code&gt;文件夹下, 可以修改&lt;code&gt;FVM_HOME&lt;/code&gt;环境变量改到别的位置.
cf. &lt;a href="https://github.com/leoafarias/fvm#change-fvm-cache-directory"&gt;https://github.com/leoafarias/fvm#change-fvm-cache-directory&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="bashfish-alias"&gt;bash/fish alias&lt;/h3&gt;
&lt;p&gt;每次都写&lt;code&gt;fvm flutter&lt;/code&gt;有点麻烦 可以在bashrc/config.fish里加上一行 &lt;code&gt;alias ff=fvm flutter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;综上, 只需要在.bashrc里加上:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;alias ff='fvm flutter'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;export FVM_HOME="$HOME/.local/fvm"&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我一般用fish, 是在&lt;code&gt;config.fish&lt;/code&gt;里加上:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;alias ff='fvm flutter'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;set FVM_HOME "$HOME/.local/fvm"&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Flutter"></category></entry></feed>