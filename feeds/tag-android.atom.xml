<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mx's blog</title><link href="http://x-wei.github.io/" rel="alternate"></link><link href="http://x-wei.github.io/feeds/tag-android.atom.xml" rel="self"></link><id>http://x-wei.github.io/</id><updated>2017-02-12T00:00:00+01:00</updated><entry><title>[Android Dev] 2.2 Preference</title><link href="http://x-wei.github.io/andev_p2e2_pref.html" rel="alternate"></link><published>2017-02-12T00:00:00+01:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2017-02-12:andev_p2e2_pref.html</id><summary type="html">
&lt;p&gt;Save settings and configurations. &lt;/p&gt;
&lt;h2 id="data-persistance"&gt;Data Persistance&lt;/h2&gt;
&lt;p&gt;5 different ways of data persistance: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onSavedInstanceState()&lt;/code&gt;: store state of views in k-v pairs (Bundles), used when screen rotates / app killed by system, &lt;strong&gt;temperary.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SharedPreferences&lt;/code&gt;: save k-v pairs to a file, can save &lt;strong&gt;primitive types&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;SQLite database: complicated data types&lt;/li&gt;
&lt;li&gt;Internal / External Storage: save large files to local phone, ex. podcast app / camera app.&lt;/li&gt;
&lt;li&gt;Server: ex. leaderboard for a game (Firebase)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p2e2_pref/pasted_image.png"/&gt;&lt;/p&gt;
&lt;h2 id="preferencefragments"&gt;PreferenceFragments&lt;/h2&gt;
&lt;p&gt;PreferenceFragment is a class to handle the storing of user preferences. &lt;/p&gt;
&lt;h3 id="fragment"&gt;Fragment&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Fragment&lt;/code&gt; is a class that represents a modular and reusable piece of an &lt;code&gt;Activity&lt;/code&gt;. 
ex. a booklist-bookdetail app, for tablets want both screens (list/detail) on the same screen ⇒ put the 2 screens into &lt;code&gt;Fragment&lt;/code&gt;s, and re-use them. &lt;/p&gt;
&lt;h3 id="preferencefragment"&gt;PreferenceFragment&lt;/h3&gt;
&lt;p&gt;populated with preferences defined in an XML, 
and (automatically) update k-v pairs in a sharedpref file. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p2e2_pref/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;p&gt;in the pref XML file: define what are in the preferences, keys(names) and default values, and summary of a pref item. &lt;/p&gt;
&lt;h2 id="adding-a-settings-screen-from-a-pref-xml-file-recipe"&gt;Adding a settings screen from a pref-xml file Recipe&lt;/h2&gt;
&lt;h3 id="1-create-a-settings-activity"&gt;1. create a settings activity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;add a menu xml, in the xml, add a menu item&lt;/li&gt;
&lt;li&gt;show menu in mian activity&lt;/li&gt;
&lt;li&gt;when "settings" item is clicked: open settings activity&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-create-a-preferences-xml"&gt;2. create a preferences xml&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;setup gradle dependency (build.gradle):&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;compile 'com.android.support:preference-v7:25.1.0&lt;/code&gt;'&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;create a xml file in &lt;code&gt;res/xml&lt;/code&gt; folder, add CheckBoxPreference. &lt;/p&gt;
&lt;p&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
&lt;preferencescreen xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto"&gt;
&lt;checkboxpreference android:defaultvalue="true" android:key="show_base" android:summaryoff="not shown" android:summaryon="shown" app:title="@string/show_base"&gt;&lt;/checkboxpreference&gt;
&lt;/preferencescreen&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3-create-a-class-that-extends-preferencefragment"&gt;3. create a class that extends PreferenceFragment&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (2) Create a class called SettingsFragment that extends PreferenceFragmentCompat&lt;/span&gt;
&lt;span class="code-line"&gt;public class SettingsFragment extends PreferenceFragmentCompat{&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (5) In SettingsFragment's onCreatePreferences method add the preference file using the&lt;/span&gt;
&lt;span class="code-line"&gt;// addPreferencesFromResource method&lt;/span&gt;
&lt;span class="code-line"&gt;    @Override&lt;/span&gt;
&lt;span class="code-line"&gt;    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {&lt;/span&gt;
&lt;span class="code-line"&gt;        addPreferencesFromResource(R.xml.pref_visualizer);&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4-change-root-element-of-settings-activity-to-a-fragment"&gt;4. change root element of settings activity to a fragment&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;fragment&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;xmlns:tools=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/tools"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/activity_settings"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.example.com.visualizerpreferences.SettingsFragment"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/fragment&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="5-add-a-preferencetheme"&gt;5. add a preferenceTheme&lt;/h3&gt;
&lt;p&gt;in &lt;code&gt;res/values/styles.xml&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;item name="preferenceTheme"&amp;gt;@style/PreferenceThemeOverlay&amp;lt;/item&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="6-read-from-sharedpreferences-and-update"&gt;6. read from SharedPreferences and update&lt;/h3&gt;
&lt;p&gt;in &lt;code&gt;onStart&lt;/code&gt; or &lt;code&gt;onResume&lt;/code&gt; of main activity: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (2) Get a reference to the default shared preferences from the PreferenceManager class&lt;/span&gt;
&lt;span class="code-line"&gt;SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(this);&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (3) Get the value of the show_bass checkbox preference and use it to call setShowBass&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;mVisualizerView.setShowBass(pref.getBoolean("show_bass", true));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="best-practice-using-resources-instead-of-using-constant-iterals-everywhere"&gt;best practice: using resources instead of using constant iterals everywhere.&lt;/h3&gt;
&lt;p&gt;i.e. extract strings/bools into strings.xml or bools.xml: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_show_bass_title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Show Bass&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_show_bass_key"&lt;/span&gt; &lt;span class="na"&gt;translatable=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;show_bass&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_show_bass_summaryon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Shown&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_show_bass_summaryoff"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hidden&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;bool&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_show_bass_default"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/bool&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in other xml files: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;CheckBoxPreference&lt;/span&gt;
&lt;span class="code-line"&gt;        android:defaultValue="@bool/pref_show_bass_default"&lt;/span&gt;
&lt;span class="code-line"&gt;        android:key="@string/pref_show_bass_key"&lt;/span&gt;
&lt;span class="code-line"&gt;        android:summaryOff="@string/pref_show_bass_summaryoff"&lt;/span&gt;
&lt;span class="code-line"&gt;        android:summaryOn="@string/pref_show_bass_summaryon"&lt;/span&gt;
&lt;span class="code-line"&gt;        android:title="@string/perf_show_bass_title" /&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in java files: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;mVisualizerView.setShowBass(perf.getBoolean(getString(R.string.pref_show_bass_key),&lt;/span&gt;
&lt;span class="code-line"&gt;                    getResources().getBoolean(R.bool.pref_show_bass_default)));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="preferencechangelistener"&gt;PreferenceChangeListener&lt;/h2&gt;
&lt;p&gt;instead of updating preferences in onStart/onResume of main activity, use &lt;code&gt;onPreferenceChangeListener&lt;/code&gt;, this is called whenever a sharedpref is changed.&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/andev_p2e2_pref/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;h3 id="reciept"&gt;Reciept&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;step 1&lt;/strong&gt;: determine the activity who's UI needs to be changed when pref changes 
— in our case, is the main activity&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;step 2&lt;/strong&gt;: let this activity implement this Listener (&lt;code&gt;onSharedPreferenceChange&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {&lt;/span&gt;
&lt;span class="code-line"&gt;    if(key.equals(getString(R.string.pref_show_bass_key))){&lt;/span&gt;
&lt;span class="code-line"&gt;        mVisualizerView.setShowBass(sharedPreferences.getBoolean(key, true));&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;step 3&lt;/strong&gt;: link this Listener to the SharedPreference object that it listens to, using &lt;code&gt;registerOnSharedPreferenceChangeListener&lt;/code&gt;
in onCreate(): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);&lt;/span&gt;
&lt;span class="code-line"&gt;sharedPreferences.registerOnSharedPreferenceChangeListener(this);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;step 4&lt;/strong&gt;: unregister the Listener when activity is shut down
in onDestroy(): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;protected void onDestroy() {&lt;/span&gt;
&lt;span class="code-line"&gt;    super.onDestroy();&lt;/span&gt;
&lt;span class="code-line"&gt;    PreferenceManager.getDefaultSharedPreferences(this)&lt;/span&gt;
&lt;span class="code-line"&gt;            .unregisterOnSharedPreferenceChangeListener(this);&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="list-preference"&gt;List Preference&lt;/h2&gt;
&lt;p&gt;Compared to &lt;code&gt;CheckBoxPreference&lt;/code&gt;, &lt;code&gt;ListPreference&lt;/code&gt; offers an array of possible choices. &lt;/p&gt;
&lt;h3 id="listpreference-recipe"&gt;ListPreference Recipe&lt;/h3&gt;
&lt;p&gt;define options labels/values in &lt;code&gt;res/values/strings.xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_key"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;pref_color&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Pick a color&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_red_label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Red&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_blue_label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blue&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_green_label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Green&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_red_value"&lt;/span&gt; &lt;span class="na"&gt;translatable=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;color_red&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_blue_value"&lt;/span&gt; &lt;span class="na"&gt;translatable=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;color_blue&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_green_value"&lt;/span&gt; &lt;span class="na"&gt;translatable=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;color_green&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(note: &lt;code&gt;xx_value&lt;/code&gt; is for internal usage, &lt;code&gt;xx_lablel&lt;/code&gt; is what is shown on screen to users)&lt;/p&gt;
&lt;p&gt;create &lt;code&gt;res/values/arrays.xml&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;&amp;lt;!-- TODO (3) Add a res-&amp;gt;values-&amp;gt;arrays.xml file which contains two arrays, one for&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;        labels and one for values. The arrays should contain strings found in this file--&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;array&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_option_labels"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;@string/pref_color_red_label&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;@string/pref_color_blue_label&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;@string/pref_color_green_label&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;array&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pref_color_option_values"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;@string/pref_color_red_value&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;@string/pref_color_blue_value&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;@string/pref_color_green_value&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in preference xml: add a ListPreference element&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;ListPreference&lt;/span&gt;
&lt;span class="code-line"&gt;        android:defaultValue="@string/pref_color_red_value"&lt;/span&gt;
&lt;span class="code-line"&gt;        android:entries="@array/pref_color_option_labels"&lt;/span&gt;
&lt;span class="code-line"&gt;        android:entryValues="@array/pref_color_option_values"&lt;/span&gt;
&lt;span class="code-line"&gt;        android:key="@string/pref_color_key"&lt;/span&gt;
&lt;span class="code-line"&gt;        android:title="@string/pref_color_title"/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;finally in main activity: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;String default_color_value = getString(R.string.pref_color_red_value);&lt;/span&gt;
&lt;span class="code-line"&gt;mVisualizerView.setColor(sharedPreferences.getString(getString(R.string.pref_color_key),&lt;/span&gt;
&lt;span class="code-line"&gt;                default_color_value) );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="add-summary-for-list-preference"&gt;add summary for list preference&lt;/h3&gt;
&lt;p&gt;we have to this programatically in the java code. &lt;/p&gt;
&lt;p&gt;Here is the recipe: &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;step 1&lt;/strong&gt;: let the SettingsFragment class implement OnSharedPreferenceChangeListener:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (1) Implement OnSharedPreferenceChangeListener&lt;/span&gt;
&lt;span class="code-line"&gt;public class SettingsFragment extends PreferenceFragmentCompat implements OnSharedPreferenceChangeListener&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;step 2&lt;/strong&gt;:set preference's summary by &lt;code&gt;setSummary()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (2) Create a setPreferenceSummary which takes a Preference and String value as parameters.&lt;/span&gt;
&lt;span class="code-line"&gt;// This method should check if the preference is a ListPreference and, if so, find the label&lt;/span&gt;
&lt;span class="code-line"&gt;// associated with the value. You can do this by using the findIndexOfValue and getEntries methods&lt;/span&gt;
&lt;span class="code-line"&gt;// of Preference.&lt;/span&gt;
&lt;span class="code-line"&gt;private void setPreferenceSummary(Preference sharedPref, String value) {&lt;/span&gt;
&lt;span class="code-line"&gt;    if (sharedPref instanceof ListPreference) {&lt;/span&gt;
&lt;span class="code-line"&gt;        ListPreference listPref = (ListPreference) sharedPref;&lt;/span&gt;
&lt;span class="code-line"&gt;        int idx = listPref.findIndexOfValue(value);&lt;/span&gt;
&lt;span class="code-line"&gt;        listPref.setSummary(listPref.getEntries()[idx]);&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;step 3&lt;/strong&gt;: set pref summary in onCreatePreferences: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;public void onCreatePreferences(Bundle bundle, String s) {&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    // Add visualizer preferences, defined in the XML file in res-&amp;gt;xml-&amp;gt;pref_visualizer&lt;/span&gt;
&lt;span class="code-line"&gt;    addPreferencesFromResource(R.xml.pref_visualizer);&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (3) Get the preference screen, get the number of preferences and iterate through&lt;/span&gt;
&lt;span class="code-line"&gt;    // all of the preferences if it is not a checkbox preference, call the setSummary method&lt;/span&gt;
&lt;span class="code-line"&gt;    // passing in a preference and the value of the preference&lt;/span&gt;
&lt;span class="code-line"&gt;    PreferenceScreen prefScreen = getPreferenceScreen();&lt;/span&gt;
&lt;span class="code-line"&gt;    int nPrefs = prefScreen.getPreferenceCount();&lt;/span&gt;
&lt;span class="code-line"&gt;    for(int i=0; i&amp;lt;nPrefs; i++){&lt;/span&gt;
&lt;span class="code-line"&gt;        Preference p = prefScreen.getPreference(i);&lt;/span&gt;
&lt;span class="code-line"&gt;        if(p instanceof CheckBoxPreference) continue;&lt;/span&gt;
&lt;span class="code-line"&gt;        else {&lt;/span&gt;
&lt;span class="code-line"&gt;            String value = prefScreen.getSharedPreferences().getString(p.getKey(), "");&lt;/span&gt;
&lt;span class="code-line"&gt;            setPreferenceSummary(p, value);&lt;/span&gt;
&lt;span class="code-line"&gt;        }&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;step 4&lt;/strong&gt;: implement onSharedPreferenceChanged listener: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (4) Override onSharedPreferenceChanged and, if it is not a checkbox preference,&lt;/span&gt;
&lt;span class="code-line"&gt;// call setPreferenceSummary on the changed preference&lt;/span&gt;
&lt;span class="code-line"&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {&lt;/span&gt;
&lt;span class="code-line"&gt;    if (sharedPreferences instanceof CheckBoxPreference) return;&lt;/span&gt;
&lt;span class="code-line"&gt;    else{&lt;/span&gt;
&lt;span class="code-line"&gt;        Preference pref = findPreference(key);&lt;/span&gt;
&lt;span class="code-line"&gt;        String value = sharedPreferences.getString(key, "");&lt;/span&gt;
&lt;span class="code-line"&gt;        setPreferenceSummary(pref, value);&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;step 5&lt;/strong&gt;: finally register/unregister the listener in oncreate/ondestroy: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (5) Register and unregister the OnSharedPreferenceChange listener (this class) in&lt;/span&gt;
&lt;span class="code-line"&gt;// onCreate and onDestroy respectively.&lt;/span&gt;
&lt;span class="code-line"&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;public void onCreate(Bundle savedInstanceState) {&lt;/span&gt;
&lt;span class="code-line"&gt;    super.onCreate(savedInstanceState);&lt;/span&gt;
&lt;span class="code-line"&gt;    getPreferenceScreen().getSharedPreferences()&lt;/span&gt;
&lt;span class="code-line"&gt;            .registerOnSharedPreferenceChangeListener(this);&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;public void onDestroy() {&lt;/span&gt;
&lt;span class="code-line"&gt;    super.onDestroy();&lt;/span&gt;
&lt;span class="code-line"&gt;    getPreferenceScreen().getSharedPreferences()&lt;/span&gt;
&lt;span class="code-line"&gt;            .unregisterOnSharedPreferenceChangeListener(this);&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="android"></category></entry><entry><title>[Android Dev] 2.1 Lifecycles</title><link href="http://x-wei.github.io/andev_p2e1_lifecycle.html" rel="alternate"></link><published>2017-02-11T00:00:00+01:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2017-02-11:andev_p2e1_lifecycle.html</id><summary type="html">
&lt;p&gt;Android kills background apps !! &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p2e1_lifecycle/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;p&gt;→ &lt;code&gt;onCreate()&lt;/code&gt; → &lt;strong&gt;Created&lt;/strong&gt; →&lt;code&gt;onStart()&lt;/code&gt; →  &lt;strong&gt;Visible(&lt;/strong&gt;can be seen on screen) → &lt;code&gt;onResume()&lt;/code&gt; → &lt;strong&gt;Active&lt;/strong&gt;(get focus, can interact with)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Active&lt;/strong&gt; → &lt;code&gt;onPause()&lt;/code&gt; → &lt;strong&gt;Paused&lt;/strong&gt;(lose focus — same thing as Visible?) → &lt;code&gt;onStop()&lt;/code&gt; → &lt;strong&gt;Stopped&lt;/strong&gt;(disappeared) → &lt;code&gt;onDestroy()&lt;/code&gt; → &lt;strong&gt;Destroyed&lt;/strong&gt;(lifecycle ends)&lt;/p&gt;
&lt;p&gt;when rotate screen, the function calling is: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;onPause --&amp;gt; onStop --&amp;gt; onDestroy --&amp;gt; onCreate --&amp;gt; onStart --&amp;gt; onResume&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;note: activity will be &lt;strong&gt;destroyed&lt;/strong&gt; when device configuration is changed ! &lt;/p&gt;
&lt;h2 id="onsavedinstancestate"&gt;onSavedInstanceState()&lt;/h2&gt;
&lt;p&gt;so that the app states can be saved when device configuration changes (ex. rotate). &lt;/p&gt;
&lt;p&gt;parameter: a &lt;code&gt;Bundle&lt;/code&gt; to keep state into key-value pairs. 
to pass objects via Bundle: implement the &lt;code&gt;Parcelble&lt;/code&gt; interface. &lt;/p&gt;
&lt;p&gt;Override this &lt;code&gt;onSavedInstanceState()&lt;/code&gt; function → put useful objects into the bundle parameter. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (3) Override onSaveInstanceState to persist data across Activity recreation&lt;/span&gt;
&lt;span class="code-line"&gt;// Do the following steps within onSaveInstanceState&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (4) Make sure super.onSaveInstanceState is called before doing anything else&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (5) Put the contents of the TextView that contains our URL into a variable&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (6) Using the key for the query URL, put the string in the outState Bundle&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (7) Put the contents of the TextView that contains our raw JSON search results into a variable&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (8) Using the key for the raw JSON search results, put the search results into the outState Bundle&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;public void onSaveInstanceState(Bundle outState) {&lt;/span&gt;
&lt;span class="code-line"&gt;    super.onSaveInstanceState(outState);&lt;/span&gt;
&lt;span class="code-line"&gt;    outState.putString(QUERYURL_KEY, mUrlDisplayTextView.getText().toString());&lt;/span&gt;
&lt;span class="code-line"&gt;    outState.putString(RAW_JSON_KEY, mSearchResultsTextView.getText().toString());&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in &lt;code&gt;onCreate&lt;/code&gt;: try to extract objects form bundle &lt;code&gt;savedInstanceState&lt;/code&gt; (if it's not null). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;protected void onCreate(Bundle savedInstanceState) {&lt;/span&gt;
&lt;span class="code-line"&gt;    super.onCreate(savedInstanceState);&lt;/span&gt;
&lt;span class="code-line"&gt;    setContentView(R.layout.activity_main);&lt;/span&gt;
&lt;span class="code-line"&gt;    mSearchBoxEditText = (EditText) findViewById(R.id.et_search_box);&lt;/span&gt;
&lt;span class="code-line"&gt;    mUrlDisplayTextView = (TextView) findViewById(R.id.tv_url_display);&lt;/span&gt;
&lt;span class="code-line"&gt;    mSearchResultsTextView = (TextView) findViewById(R.id.tv_github_search_results_json);&lt;/span&gt;
&lt;span class="code-line"&gt;    mErrorMessageDisplay = (TextView) findViewById(R.id.tv_error_message_display);&lt;/span&gt;
&lt;span class="code-line"&gt;    mLoadingIndicator = (ProgressBar) findViewById(R.id.pb_loading_indicator);&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (9) If the savedInstanceState bundle is not null, set the text of the URL and search results TextView respectively&lt;/span&gt;
&lt;span class="code-line"&gt;    if(savedInstanceState!=null &amp;amp;&amp;amp; savedInstanceState.containsKey(QUERYURL_KEY))&lt;/span&gt;
&lt;span class="code-line"&gt;        mUrlDisplayTextView.setText(savedInstanceState.getString(QUERYURL_KEY));&lt;/span&gt;
&lt;span class="code-line"&gt;    if(savedInstanceState!=null &amp;amp;&amp;amp; savedInstanceState.containsKey(RAW_JSON_KEY))&lt;/span&gt;
&lt;span class="code-line"&gt;        mSearchResultsTextView.setText(savedInstanceState.getString(RAW_JSON_KEY));&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="asynctasks-and-loader"&gt;AsyncTasks and Loader&lt;/h2&gt;
&lt;p&gt;edgecase: rotate when async task is performing → asynctask runs on separate thread → the zombie activities will not be killed !!
⇒ &lt;code&gt;Loader&lt;/code&gt;
Loader is identified by a loader ID, thus preventing several loaders running in the same time. 
&lt;img alt="" class="img-responsive" src="../images/andev_p2e1_lifecycle/pasted_image002.png"/&gt;
&lt;code&gt;AsyncTaskLoader&lt;/code&gt; lifecycle: 
it is bounded to an Activity instead of an async task ⇒ when device rotates, the loader will feed the results of tasks to the right activity. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p2e1_lifecycle/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;h2 id="using-loaders"&gt;Using Loaders&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;create loader id: &lt;code&gt;private static final GITHUB_SEARCH_LOADER = 22;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;implement &lt;code&gt;LoaderCallbacks&lt;/code&gt; interface functions in &lt;code&gt;MainActivity&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;init loader with a &lt;code&gt;LoaderManager&lt;/code&gt;, and start the loader&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;let &lt;code&gt;MainActivty&lt;/code&gt; implement &lt;code&gt;LoaderManager.LoaderCallbacks&amp;lt;String&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="implement-oncreateloader-onpreexecute-and-ondoinbackground-for-asynctask"&gt;implement onCreateLoader — onPreExecute and onDoInBackground for AsyncTask&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (3) Override onCreateLoader&lt;/span&gt;
&lt;span class="code-line"&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;public Loader&amp;lt;String&amp;gt; onCreateLoader(int id, final Bundle bundle) {// !make bundle final so that can access it below&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (4) Return a new AsyncTaskLoader&amp;lt;String&amp;gt; as an anonymous inner class with this as the constructor's parameter&lt;/span&gt;
&lt;span class="code-line"&gt;    return new AsyncTaskLoader&amp;lt;String&amp;gt;(this) {&lt;/span&gt;
&lt;span class="code-line"&gt;        @Override&lt;/span&gt;
&lt;span class="code-line"&gt;        public String loadInBackground() {&lt;/span&gt;
&lt;span class="code-line"&gt;            return null;&lt;/span&gt;
&lt;span class="code-line"&gt;        }&lt;/span&gt;
&lt;span class="code-line"&gt;        // TODO (5) Override onStartLoading&lt;/span&gt;
&lt;span class="code-line"&gt;        @Override&lt;/span&gt;
&lt;span class="code-line"&gt;        protected void onStartLoading() {&lt;/span&gt;
&lt;span class="code-line"&gt;            super.onStartLoading();&lt;/span&gt;
&lt;span class="code-line"&gt;            // TODO (6) If bundle is null, return.&lt;/span&gt;
&lt;span class="code-line"&gt;            if (bundle==null) return;&lt;/span&gt;
&lt;span class="code-line"&gt;            // TODO (7) move the content of onPrecuter in the AsyncTask class&lt;/span&gt;
&lt;span class="code-line"&gt;            mLoadingIndicator.setVisibility(View.VISIBLE);&lt;/span&gt;
&lt;span class="code-line"&gt;            // TODO (8) Force a load&lt;/span&gt;
&lt;span class="code-line"&gt;            forceLoad();&lt;/span&gt;
&lt;span class="code-line"&gt;        }&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        // TODO (9) Override loadInBackground&lt;/span&gt;
&lt;span class="code-line"&gt;        @Override&lt;/span&gt;
&lt;span class="code-line"&gt;        protected String onLoadInBackground() {&lt;/span&gt;
&lt;span class="code-line"&gt;            // TODO (10) Get the String for our URL from the bundle passed to onCreateLoader&lt;/span&gt;
&lt;span class="code-line"&gt;            String searchUrlstr= bundle.getString(SEARCH_QUERY_URL_EXTRA);&lt;/span&gt;
&lt;span class="code-line"&gt;            // TODO (11) If the URL is null or empty, return null&lt;/span&gt;
&lt;span class="code-line"&gt;            if(searchUrlstr==null || TextUtils.isEmpty(searchUrlstr)) return null;&lt;/span&gt;
&lt;span class="code-line"&gt;            // TODO (12) Copy the try / catch block from the AsyncTask's doInBackground method&lt;/span&gt;
&lt;span class="code-line"&gt;            String githubSearchResults = null;&lt;/span&gt;
&lt;span class="code-line"&gt;            try {&lt;/span&gt;
&lt;span class="code-line"&gt;                githubSearchResults = NetworkUtils.getResponseFromHttpUrl(new URL(searchUrlstr));&lt;/span&gt;
&lt;span class="code-line"&gt;            } catch (IOException e) {&lt;/span&gt;
&lt;span class="code-line"&gt;                e.printStackTrace();&lt;/span&gt;
&lt;span class="code-line"&gt;            }&lt;/span&gt;
&lt;span class="code-line"&gt;            return githubSearchResults;&lt;/span&gt;
&lt;span class="code-line"&gt;        }&lt;/span&gt;
&lt;span class="code-line"&gt;    };&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="implement-onloadfinished-onpostexecute-for-asynctask"&gt;implement onLoadFinished — onPostExecute for AsyncTask&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (13) Override onLoadFinished&lt;/span&gt;
&lt;span class="code-line"&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;public void onLoadFinished(Loader&amp;lt;String&amp;gt; loader, String githubSearchResults) {&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (15) Use the same logic used in onPostExecute to show the data or the error message&lt;/span&gt;
&lt;span class="code-line"&gt;    mLoadingIndicator.setVisibility(View.INVISIBLE);&lt;/span&gt;
&lt;span class="code-line"&gt;    if (githubSearchResults != null &amp;amp;&amp;amp; !githubSearchResults.equals("")) {&lt;/span&gt;
&lt;span class="code-line"&gt;        showJsonDataView();&lt;/span&gt;
&lt;span class="code-line"&gt;        mSearchResultsTextView.setText(githubSearchResults);&lt;/span&gt;
&lt;span class="code-line"&gt;    } else {&lt;/span&gt;
&lt;span class="code-line"&gt;        showErrorMessage();&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (16) Override onLoaderReset as it is part of the interface we implement, but don't do anything in this method&lt;/span&gt;
&lt;span class="code-line"&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;public void onLoaderReset(Loader&amp;lt;String&amp;gt; loader) {&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="in-makegithubsearchquery-create-bundle-create-a-loder-start-it"&gt;in makeGithubSearchQuery(): create bundle, create a loder, start it&lt;/h3&gt;
&lt;p&gt;instead of staring an &lt;code&gt;AsyncTask&lt;/code&gt;, we get a Loader and re-run it via a loader manager. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (19) Create a bundle called queryBundle&lt;/span&gt;
&lt;span class="code-line"&gt;Bundle queryBundle = new Bundle();&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (20) Use putString with SEARCH_QUERY_URL_EXTRA as the key and the String value of the URL as the value&lt;/span&gt;
&lt;span class="code-line"&gt;queryBundle.putString(SEARCH_QUERY_URL_EXTRA, githubSearchUrl.toString());&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (21) Call getSupportLoaderManager and store it in a LoaderManager variable&lt;/span&gt;
&lt;span class="code-line"&gt;LoaderManager loaderManager = getSupportLoaderManager();&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (22) Get our Loader by calling getLoader and passing the ID we specified&lt;/span&gt;
&lt;span class="code-line"&gt;Loader loader = loaderManager.getLoader(GITHUB_SEARCH_LOADER);&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (23) If the Loader was null, initialize it. Else, restart it.&lt;/span&gt;
&lt;span class="code-line"&gt;if(loader==null) loader = loaderManager.initLoader(GITHUB_SEARCH_LOADER, queryBundle, this);&lt;/span&gt;
&lt;span class="code-line"&gt;else loaderManager.restartLoader(GITHUB_SEARCH_LOADER, queryBundle, this);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="caching-with-loaders"&gt;Caching with loaders&lt;/h2&gt;
&lt;p&gt;Loaders will reload if activity is destroyed and re-created. This overhead can be avoided by caching the results in the &lt;code&gt;AsyncTaskLoader&lt;/code&gt; (created in &lt;code&gt;onCreateLoader()&lt;/code&gt;). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (1) Create a String member variable called mGithubJson that will store the raw JSON&lt;/span&gt;
&lt;span class="code-line"&gt;String mGithubJson; // cached results&lt;/span&gt;
&lt;span class="code-line"&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;protected void onStartLoading() {&lt;/span&gt;
&lt;span class="code-line"&gt;    /* If no arguments were passed, we don't have a query to perform. Simply return. */&lt;/span&gt;
&lt;span class="code-line"&gt;    if (args == null) {&lt;/span&gt;
&lt;span class="code-line"&gt;        return;&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    /*&lt;/span&gt;
&lt;span class="code-line"&gt;        * When we initially begin loading in the background, we want to display the&lt;/span&gt;
&lt;span class="code-line"&gt;        * loading indicator to the user&lt;/span&gt;
&lt;span class="code-line"&gt;        */&lt;/span&gt;
&lt;span class="code-line"&gt;    mLoadingIndicator.setVisibility(View.VISIBLE);&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (2) If mGithubJson is not null, deliver that result. Otherwise, force a load&lt;/span&gt;
&lt;span class="code-line"&gt;    if(mGithubJson!=null) deliverResult(mGithubJson);&lt;/span&gt;
&lt;span class="code-line"&gt;    else forceLoad();&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (3) Override deliverResult and store the data in mGithubJson&lt;/span&gt;
&lt;span class="code-line"&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;public void deliverResult(String data) {&lt;/span&gt;
&lt;span class="code-line"&gt;    mGithubJson = data;&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (4) Call super.deliverResult after storing the data&lt;/span&gt;
&lt;span class="code-line"&gt;    super.deliverResult(data);&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="android"></category></entry><entry><title>[Android Dev] 1.2 Connect to the Internet</title><link href="http://x-wei.github.io/andev_p1e2_internet.html" rel="alternate"></link><published>2017-02-07T00:00:00+01:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2017-02-07:andev_p1e2_internet.html</id><summary type="html">
&lt;h2 id="logging"&gt;logging&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://developer.android.com/reference/android/util/Log.html"&gt;https://developer.android.com/reference/android/util/Log.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 log levels: &lt;code&gt;error/warning/info/debug/verbose&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;error/warning/info are preserved in the release of app&lt;/li&gt;
&lt;li&gt;use class name as tag: &lt;code&gt;MyClass.class.getSimpleName()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e2_internet//pasted_image.png"/&gt;&lt;/p&gt;
&lt;h2 id="the-resources-folder"&gt;the Resources folder&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://developer.android.com/guide/topics/resources/providing-resources.html"&gt;https://developer.android.com/guide/topics/resources/providing-resources.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e2_internet//pasted_image001.png"/&gt;&lt;/p&gt;
&lt;h3 id="working-with-resvaluesstringsxml"&gt;working with res/values/strings.xml&lt;/h3&gt;
&lt;p&gt;the strings defined in this xml file can be got from java activity using &lt;code&gt;getString(R.string._the_id)&lt;/code&gt; method. &lt;/p&gt;
&lt;p&gt;example:&lt;/p&gt;
&lt;p&gt;in string.xml: &lt;code&gt;&amp;lt;string name="today"&amp;gt;Today&amp;lt;/string&amp;gt;&lt;/code&gt;&lt;br/&gt;
in java: &lt;code&gt;String myString = getString(R.string.today)&lt;/code&gt;&lt;br/&gt;
in other xmls files: use &lt;code&gt;@string/today&lt;/code&gt; to access it.  &lt;/p&gt;
&lt;p&gt;ref: &lt;a href="https://developer.android.com/guide/topics/resources/string-resource.html"&gt;https://developer.android.com/guide/topics/resources/string-resource.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="menu-and-actionbar"&gt;Menu and ActionBar&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e2_internet//pasted_image003.png"/&gt;&lt;/p&gt;
&lt;p&gt;a menu item in the xml file (res folder→ create new android resource directory → menu): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (2) Create a menu in res/menu called main.xml&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (3) Add one menu item to your menu&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (4) Give the menu item an id of @+id/action_search&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (5) Set the orderInCategory to 1&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (6) Show this item if there is room (use app:showAsAction, NOT android:showAsAction)&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (7) Set the title to the search string ("Search") from strings.xml&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;menu&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;xmlns:app=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/action_search"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:orderInCategory=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:title=&lt;/span&gt;&lt;span class="s"&gt;"@string/search"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;app:showAsAction=&lt;/span&gt;&lt;span class="s"&gt;"ifRoom"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/menu&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;shoule also set MainActivity as singleTop mode: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;activity android:name=".MainActivity"&lt;/span&gt;
&lt;span class="code-line"&gt;          android:launchMode="singleTop"&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create menu: override &lt;code&gt;onCreateMenu&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// &lt;span class="n"&gt;TODO&lt;/span&gt; (&lt;span class="mi"&gt;8&lt;/span&gt;) &lt;span class="n"&gt;Override&lt;/span&gt; &lt;span class="n"&gt;onCreateOptionsMenu&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// &lt;span class="n"&gt;TODO&lt;/span&gt; (&lt;span class="mi"&gt;9&lt;/span&gt;) &lt;span class="n"&gt;Within&lt;/span&gt; &lt;span class="n"&gt;onCreateOptionsMenu&lt;/span&gt;, &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="n"&gt;getMenuInflater&lt;/span&gt;().&lt;span class="n"&gt;inflate&lt;/span&gt; &lt;span class="nb"&gt;to&lt;/span&gt; &lt;span class="n"&gt;inflate&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;menu&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// &lt;span class="n"&gt;TODO&lt;/span&gt; (&lt;span class="mi"&gt;10&lt;/span&gt;) &lt;span class="n"&gt;Return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nb"&gt;to&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;menu&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;onCreateOptionsMenu&lt;/span&gt;(&lt;span class="n"&gt;Menu&lt;/span&gt; &lt;span class="n"&gt;menu&lt;/span&gt;) {&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;getMenuInflater&lt;/span&gt;().&lt;span class="n"&gt;inflate&lt;/span&gt;(&lt;span class="n"&gt;R&lt;/span&gt;.&lt;span class="n"&gt;menu&lt;/span&gt;.&lt;span class="n"&gt;main&lt;/span&gt;, &lt;span class="n"&gt;menu&lt;/span&gt;);&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To handle menu item clicks: &lt;code&gt;onOptionsItemSelected&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (11) Override onOptionsItemSelected&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (12) Within onOptionsItemSelected, get the ID of the item that was selected&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (13) If the item's ID is R.id.action_search, show a Toast and return true to tell droid that you've handled this menu click&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (14) Don't forgot to call .show() on your Toast&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (15) If you do NOT handle the menu click, return super.onOptionsItemSelected to let droid handle the menu click&lt;/span&gt;
&lt;span class="code-line"&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;public boolean onOptionsItemSelected(MenuItem item) {&lt;/span&gt;
&lt;span class="code-line"&gt;    int itemid = item.getItemId();&lt;/span&gt;
&lt;span class="code-line"&gt;    if(itemid==R.id.action_search) {&lt;/span&gt;
&lt;span class="code-line"&gt;// use MainActivity.this as context, instead of using just this&lt;/span&gt;
&lt;span class="code-line"&gt;        Toast.makeText(MainActivity.this, "search action selected!", Toast.LENGTH_SHORT).show(); &lt;/span&gt;
&lt;span class="code-line"&gt;        return true;&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;    return super.onOptionsItemSelected(item);&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another way to set menuitem action: &lt;code&gt;menuitem.setIntent&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;public boolean onCreateOptionsMenu(Menu menu) {&lt;/span&gt;
&lt;span class="code-line"&gt;    getMenuInflater().inflate(R.menu.detail, menu);&lt;/span&gt;
&lt;span class="code-line"&gt;    MenuItem menuitem = menu.findItem(R.id.action_share);&lt;/span&gt;
&lt;span class="code-line"&gt;    Intent intent = ShareCompat.IntentBuilder.from(this)&lt;/span&gt;
&lt;span class="code-line"&gt;            .setType("text/plain")&lt;/span&gt;
&lt;span class="code-line"&gt;            .setChooserTitle("choose which app to share")&lt;/span&gt;
&lt;span class="code-line"&gt;            .setText(mForecast)&lt;/span&gt;
&lt;span class="code-line"&gt;            .getIntent();&lt;/span&gt;
&lt;span class="code-line"&gt;    menuitem.setIntent(intent);&lt;/span&gt;
&lt;span class="code-line"&gt;    return true;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="build-the-query-url"&gt;Build the query URL&lt;/h2&gt;
&lt;p&gt;the request url for github repo search: &lt;code&gt;https://api.github.com/search/repositories?q=android&amp;amp;sort=stars&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;use Uri Builder:&lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/andev_p1e2_internet//pasted_image007.png"/&gt;&lt;/p&gt;
&lt;p&gt;convert Uri to java URL: &lt;br/&gt;
&lt;img alt="" class="img-responsive" src="../images/andev_p1e2_internet//pasted_image008.png"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;public static URL buildUrl(String githubSearchQuery) {&lt;/span&gt;
&lt;span class="code-line"&gt;    Uri.Builder uribuilder = Uri.parse(GITHUB_BASE_URL).buildUpon();&lt;/span&gt;
&lt;span class="code-line"&gt;    uribuilder = uribuilder.appendQueryParameter(PARAM_QUERY, githubSearchQuery);&lt;/span&gt;
&lt;span class="code-line"&gt;    uribuilder = uribuilder.appendQueryParameter(PARAM_SORT, sortBy);&lt;/span&gt;
&lt;span class="code-line"&gt;    Uri uri = uribuilder.build();&lt;/span&gt;
&lt;span class="code-line"&gt;    URL url = null;&lt;/span&gt;
&lt;span class="code-line"&gt;    try{&lt;/span&gt;
&lt;span class="code-line"&gt;        url = new URL(uri.toString());&lt;/span&gt;
&lt;span class="code-line"&gt;    } catch (MalformedURLException e) {&lt;/span&gt;
&lt;span class="code-line"&gt;        e.printStackTrace();&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;    return url;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="fetching-http-request"&gt;Fetching http request&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/309424/read-convert-an-inputstream-to-a-string"&gt;http://stackoverflow.com/questions/309424/read-convert-an-inputstream-to-a-string&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;public static String getResponseFromHttpUrl(URL url) throws IOException {&lt;/span&gt;
&lt;span class="code-line"&gt;    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();&lt;/span&gt;
&lt;span class="code-line"&gt;    try {&lt;/span&gt;
&lt;span class="code-line"&gt;        InputStream in = urlConnection.getInputStream();&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        Scanner scanner = new Scanner(in);&lt;/span&gt;
&lt;span class="code-line"&gt;        scanner.useDelimiter("\\A");&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        boolean hasInput = scanner.hasNext();&lt;/span&gt;
&lt;span class="code-line"&gt;        if (hasInput) {&lt;/span&gt;
&lt;span class="code-line"&gt;            return scanner.next();&lt;/span&gt;
&lt;span class="code-line"&gt;        } else {&lt;/span&gt;
&lt;span class="code-line"&gt;            return null;&lt;/span&gt;
&lt;span class="code-line"&gt;        }&lt;/span&gt;
&lt;span class="code-line"&gt;    } finally {&lt;/span&gt;
&lt;span class="code-line"&gt;        urlConnection.disconnect();&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or use external library: &lt;a href="http://square.github.io/okhttp/"&gt;http://square.github.io/okhttp/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="permission"&gt;Permission&lt;/h2&gt;
&lt;p&gt;declear permissions required in android manifest.xml&lt;br/&gt;
&lt;a href="https://developer.android.com/guide/topics/permissions/index.html"&gt;https://developer.android.com/guide/topics/permissions/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in AndroidManifest.xml, under the manifest root: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;uses-permission android:name="android.permission.INTERNET"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="networkonmainthread-exception"&gt;NetworkOnMainThread exception&lt;/h2&gt;
&lt;p&gt;android has a &lt;strong&gt;single&lt;/strong&gt; user interface thread responsible for user interaction: 60FPS — want to &lt;em&gt;do as little as possible on this main thread&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;⇒ run the network on a secondary execusion thread, when finished, modify the user interface on UI thread. &lt;/p&gt;
&lt;p&gt;⇒ &lt;strong&gt;AsyncTask&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="asynctask"&gt;AsyncTask&lt;/h2&gt;
&lt;p&gt;allows running a task on background thread while publishing results to the UI thread. 
The UI thread has a &lt;strong&gt;message queue&lt;/strong&gt; and a &lt;strong&gt;handler&lt;/strong&gt;: to process messages from other threads. — AsyncTask wraps this into a simpler interface. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;AsyncTask&lt;/code&gt; is generic, the &lt;strong&gt;type parameters&lt;/strong&gt; include: &lt;code&gt;AsyncTask&amp;lt;Params, Progress, Result&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e2_internet//pasted_image010.png"/&gt;&lt;/p&gt;
&lt;p&gt;These 3 type parameters correspond to 4 function to override: &lt;code&gt;doInBackgroud, onProgressUpdate, onPostExecute, onPreEcecute&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e2_internet//pasted_image013.png"/&gt;&lt;/p&gt;
&lt;p&gt;Once this (sub)class is defined, on UI thread, just create an &lt;code&gt;AysncTask task&lt;/code&gt;, and use &lt;code&gt;task.execute(params..)&lt;/code&gt; to make it run on background thread. &lt;/p&gt;
&lt;p&gt;ref: &lt;a href="https://developer.android.com/reference/android/os/AsyncTask.html"&gt;https://developer.android.com/reference/android/os/AsyncTask.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="asynctask-example-code"&gt;AsyncTask Example code&lt;/h2&gt;
&lt;p&gt;First create an inner class that extends AyncTask&amp;lt;&amp;gt; class, and add the job to do here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (1) Create a class called GithubQueryTask that extends AsyncTask&amp;lt;URL, Void, String&amp;gt;&lt;/span&gt;
&lt;span class="code-line"&gt;class GithubQueryTask extends AsyncTask&amp;lt;URL, Void, String&amp;gt; {&lt;/span&gt;
&lt;span class="code-line"&gt;    @Override&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (2) Override the doInBackground method to perform the query. Return the results.&lt;/span&gt;
&lt;span class="code-line"&gt;    protected String doInBackground(URL... params) {&lt;/span&gt;
&lt;span class="code-line"&gt;        URL url = params[0];&lt;/span&gt;
&lt;span class="code-line"&gt;        try {&lt;/span&gt;
&lt;span class="code-line"&gt;            String res = NetworkUtils.getResponseFromHttpUrl(url);&lt;/span&gt;
&lt;span class="code-line"&gt;            return res;&lt;/span&gt;
&lt;span class="code-line"&gt;        } catch (IOException e) {&lt;/span&gt;
&lt;span class="code-line"&gt;            e.printStackTrace();&lt;/span&gt;
&lt;span class="code-line"&gt;        }&lt;/span&gt;
&lt;span class="code-line"&gt;        return null;&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    @Override // TODO (3) Override onPostExecute to display the results in the TextView&lt;/span&gt;
&lt;span class="code-line"&gt;    protected void onPostExecute(String s) {&lt;/span&gt;
&lt;span class="code-line"&gt;        if (s != null &amp;amp;&amp;amp; !s.equals(""))&lt;/span&gt;
&lt;span class="code-line"&gt;            mSearchResultsTextView.setText(s);&lt;/span&gt;
&lt;span class="code-line"&gt;        else&lt;/span&gt;
&lt;span class="code-line"&gt;            super.onPostExecute(s);&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in UI thread, create a such class object, call execute method on it: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;private void makeGithubSearchQuery() {&lt;/span&gt;
&lt;span class="code-line"&gt;    String githubQuery = mSearchBoxEditText.getText().toString();&lt;/span&gt;
&lt;span class="code-line"&gt;    URL githubSearchUrl = NetworkUtils.buildUrl(githubQuery);&lt;/span&gt;
&lt;span class="code-line"&gt;    mUrlDisplayTextView.setText(githubSearchUrl.toString());&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (4) Create a new GithubQueryTask and call its execute method, passing in the url to query&lt;/span&gt;
&lt;span class="code-line"&gt;    GithubQueryTask task = new GithubQueryTask();&lt;/span&gt;
&lt;span class="code-line"&gt;    task.execute(githubSearchUrl);&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To show a progress bar when running in background ? 
⇒ put textview and progressbar into the same &lt;code&gt;FrameLayout&lt;/code&gt;, when running, make the progressbar visible, when finished, make it invisible. &lt;/p&gt;
&lt;h2 id="parsing-json"&gt;Parsing JSON&lt;/h2&gt;
&lt;p&gt;json file content: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;{&lt;/span&gt;
&lt;span class="code-line"&gt;    "temp": {&lt;/span&gt;
&lt;span class="code-line"&gt;        "min":"11.34",&lt;/span&gt;
&lt;span class="code-line"&gt;        "max":"19.01"&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;    "weather": {&lt;/span&gt;
&lt;span class="code-line"&gt;        "id":"801",&lt;/span&gt;
&lt;span class="code-line"&gt;        "condition":"Clouds",&lt;/span&gt;
&lt;span class="code-line"&gt;        "description":"few clouds"&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;    "pressure":"1023.51",&lt;/span&gt;
&lt;span class="code-line"&gt;    "humidity":"87"&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the funtion to get the condition from the above json:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;String getCondition(String JSONString) {&lt;/span&gt;
&lt;span class="code-line"&gt;    JSONObject forecast = new JSONObject(JSONString);&lt;/span&gt;
&lt;span class="code-line"&gt;    JSONObject weather = forecast.getJSONObject("weather");&lt;/span&gt;
&lt;span class="code-line"&gt;    return weather.getString("condition");&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="android"></category></entry><entry><title>[Android Dev] 1.3 RecyclerView</title><link href="http://x-wei.github.io/andev_p1e3_recyclerview.html" rel="alternate"></link><published>2017-02-07T00:00:00+01:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2017-02-07:andev_p1e3_recyclerview.html</id><summary type="html">
&lt;h2 id="recycler-view-adaper-viewholder"&gt;Recycler View, Adaper, ViewHolder&lt;/h2&gt;
&lt;p&gt;rather than creating list items as we scroll, keep them in a queue (recycling bin)
→ when scrolling, the list items are &lt;em&gt;recycled and re-bind&lt;/em&gt; to new content. RecyclerView is better version of ListView. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adaper&lt;/strong&gt;: bind data from data source, and provide the RecyclerView with new views when needed. 
Adapter uses a &lt;strong&gt;ViewHolder&lt;/strong&gt; to send views to RecyclerView. — each &lt;code&gt;findViewById&lt;/code&gt; wil be only called once, and &lt;em&gt;cached&lt;/em&gt; in the ViewHolder. 
And the RecyclerView uses a &lt;strong&gt;LayoutManager&lt;/strong&gt; to manage the appearance of the items. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e3_recyclerview/pasted_image.png"/&gt;&lt;/p&gt;
&lt;h2 id="recyclerview-code-example-a-list-of-numbers"&gt;RecyclerView code example: a list of numbers&lt;/h2&gt;
&lt;h3 id="1-add-gradle-dependency"&gt;1. add gradle dependency&lt;/h3&gt;
&lt;p&gt;in build.gradle file, add in dependencies: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;compile 'com.android.support:recyclerview-v7:25.1.0&lt;/code&gt;'&lt;/p&gt;
&lt;p&gt;and re-sync project, now we can use &lt;code&gt;android.support.v7.widget.RecyclerView&lt;/code&gt; in the layout files. &lt;/p&gt;
&lt;h3 id="2-create-item-layout"&gt;2. create item layout&lt;/h3&gt;
&lt;p&gt;This is what each of the items in RecyclerView should like. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;FrameLayout&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:padding=&lt;/span&gt;&lt;span class="s"&gt;"16dp"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:orientation=&lt;/span&gt;&lt;span class="s"&gt;"vertical"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c"&gt;&amp;lt;!--// TODO (8) Align the TextView to the start of the parent--&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c"&gt;&amp;lt;!--// TODO (9) Center the TextView vertically in the layout--&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/tv_item"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"@style/TextAppearance.AppCompat.Caption"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:fontFamily=&lt;/span&gt;&lt;span class="s"&gt;"monospace"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;"42sp"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:layout_gravity=&lt;/span&gt;&lt;span class="s"&gt;"center_vertical|start"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/FrameLayout&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3-subclass-recyclerviewviewholder"&gt;3. subclass RecyclerView.ViewHolder&lt;/h3&gt;
&lt;p&gt;Create an inner class (&lt;strong&gt;inside the Adapter class&lt;/strong&gt;), define class variables, override the &lt;strong&gt;constructor&lt;/strong&gt;(takes a &lt;code&gt;View&lt;/code&gt; as parameter), and add functions.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (12) Create a class called NumberViewHolder that extends RecyclerView.ViewHolder&lt;/span&gt;
&lt;span class="code-line"&gt;class NumberViewHolder extends RecyclerView.ViewHolder {&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (13) Within NumberViewHolder, create a TextView variable called listItemNumberView&lt;/span&gt;
&lt;span class="code-line"&gt;    TextView listItemNumverView;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (14) Create a constructor for NumberViewHolder that accepts a View called itemView as a parameter&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (15) Within the constructor, call super(itemView) and then find listItemNumberView by ID&lt;/span&gt;
&lt;span class="code-line"&gt;    public NumberViewHolder(View itemView) {&lt;/span&gt;
&lt;span class="code-line"&gt;        super(itemView);&lt;/span&gt;
&lt;span class="code-line"&gt;        listItemNumverView = (TextView) itemView.findViewById(R.id.tv_item); // this view is cached in ViewHolder&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (16) Within the NumberViewHolder class, create a void method called bind that accepts an int parameter called listIndex&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (17) Within bind, set the text of listItemNumberView to the listIndex&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (18) Be careful to get the String representation of listIndex, as using setText with an int does something different&lt;/span&gt;
&lt;span class="code-line"&gt;    // calling setText() with an integer, android will use the int as a string resource id&lt;/span&gt;
&lt;span class="code-line"&gt;    void bind(int listIndex) {&lt;/span&gt;
&lt;span class="code-line"&gt;        listItemNumverView.setText(String.valueOf(listIndex));&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4-subclass-recyclerviewadapter"&gt;4. subclass RecyclerView.Adapter&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Adapter&lt;/code&gt; will&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a viewholder for each recycler view item (&lt;code&gt;onCreateViewHolder&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;inflat each item that will be displayed (&lt;code&gt;onCreateViewHolder&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;bind data from data source to each item (&lt;code&gt;getItemCount&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;return the number of items in data source (&lt;code&gt;onBindViewHolder)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ create a class that extends &lt;code&gt;RecyclerView.Adapter&amp;lt;MyViewHolder&amp;gt;&lt;/code&gt;, and implement methods.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;public class GreenAdapter extends RecyclerView.Adapter&amp;lt;GreenAdapter.NumberViewHolder&amp;gt; {&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    int mNumberItems;&lt;/span&gt;
&lt;span class="code-line"&gt;    public GreenAdapter(int nitems){&lt;/span&gt;
&lt;span class="code-line"&gt;        this.mNumberItems = nitems;&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (5) Override the onCreateViewHolder method&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (6) Create and return a new NumberViewHolder within this method&lt;/span&gt;
&lt;span class="code-line"&gt;    @Override&lt;/span&gt;
&lt;span class="code-line"&gt;    public NumberViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {&lt;/span&gt;
&lt;span class="code-line"&gt;        Context context = parent.getContext();&lt;/span&gt;
&lt;span class="code-line"&gt;        LayoutInflater inflater = LayoutInflater.from(context);&lt;/span&gt;
&lt;span class="code-line"&gt;        boolean shouldAttachToParentImmediatelly = false;&lt;/span&gt;
&lt;span class="code-line"&gt;        View view = inflater.inflate(R.layout.number_list_item, parent, shouldAttachToParentImmediatelly);&lt;/span&gt;
&lt;span class="code-line"&gt;        return new NumberViewHolder(view);&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (7) Override onBindViewHolder&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (8) Within onBindViewHolder, call holder.bind and pass in the position&lt;/span&gt;
&lt;span class="code-line"&gt;    @Override&lt;/span&gt;
&lt;span class="code-line"&gt;    public void onBindViewHolder(NumberViewHolder holder, int position) {&lt;/span&gt;
&lt;span class="code-line"&gt;        holder.bind(position);&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (9) Override getItemCount and return the number of items to display&lt;/span&gt;
&lt;span class="code-line"&gt;    @Override&lt;/span&gt;
&lt;span class="code-line"&gt;    public int getItemCount() {&lt;/span&gt;
&lt;span class="code-line"&gt;        return mNumberItems;&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    /**&lt;/span&gt;
&lt;span class="code-line"&gt;        * Cache of the children views for a list item.&lt;/span&gt;
&lt;span class="code-line"&gt;        */&lt;/span&gt;
&lt;span class="code-line"&gt;    class NumberViewHolder extends RecyclerView.ViewHolder {&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        // Will display the position in the list, ie 0 through getItemCount() - 1&lt;/span&gt;
&lt;span class="code-line"&gt;        TextView listItemNumberView;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        /**&lt;/span&gt;
&lt;span class="code-line"&gt;            * Constructor for our ViewHolder. Within this constructor, we get a reference to our&lt;/span&gt;
&lt;span class="code-line"&gt;            * TextViews and set an onClickListener to listen for clicks. Those will be handled in the&lt;/span&gt;
&lt;span class="code-line"&gt;            * onClick method below.&lt;/span&gt;
&lt;span class="code-line"&gt;            * @param itemView The View that you inflated in&lt;/span&gt;
&lt;span class="code-line"&gt;            *                 {@link GreenAdapter#onCreateViewHolder(ViewGroup, int)}&lt;/span&gt;
&lt;span class="code-line"&gt;            */&lt;/span&gt;
&lt;span class="code-line"&gt;        public NumberViewHolder(View itemView) {&lt;/span&gt;
&lt;span class="code-line"&gt;            super(itemView);&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            listItemNumberView = (TextView) itemView.findViewById(R.id.tv_item_number);&lt;/span&gt;
&lt;span class="code-line"&gt;        }&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        /**&lt;/span&gt;
&lt;span class="code-line"&gt;            * A method we wrote for convenience. This method will take an integer as input and&lt;/span&gt;
&lt;span class="code-line"&gt;            * use that integer to display the appropriate text within a list item.&lt;/span&gt;
&lt;span class="code-line"&gt;            * @param listIndex Position of the item in the list&lt;/span&gt;
&lt;span class="code-line"&gt;            */&lt;/span&gt;
&lt;span class="code-line"&gt;        void bind(int listIndex) {&lt;/span&gt;
&lt;span class="code-line"&gt;            listItemNumberView.setText(String.valueOf(listIndex));&lt;/span&gt;
&lt;span class="code-line"&gt;        }&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ns3WC8HFx90"&gt;https://www.youtube.com/watch?v=ns3WC8HFx90&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/udacity/ud851-Exercises/blob/student/Lesson03-Green-Recycler-View/T03.03-Solution-RecyclerViewAdapter/app/src/main/java/com/example/android/recyclerview/GreenAdapter.java"&gt;https://github.com/udacity/ud851-Exercises/blob/student/Lesson03-Green-Recycler-View/T03.03-Solution-RecyclerViewAdapter/app/src/main/java/com/example/android/recyclerview/GreenAdapter.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e3_recyclerview/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;h3 id="5-use-layoutmanager-putting-things-together"&gt;5. use LayoutManager, putting things together&lt;/h3&gt;
&lt;p&gt;layoutmanager determines when an item is recycled. &lt;/p&gt;
&lt;p&gt;3 implementation of LayoutManager: &lt;code&gt;LinearLayoutManager, GridLayoutManager, StaggeredGridLayoutManager&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;In the MainActivity, create a LinearLayoutManager, and set the recycler view's manager to it. Then create an Adapter, and set recycler's adapter to it. &lt;/p&gt;
&lt;p&gt;In the onCreate method: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;mNumbersList = (RecyclerView) findViewById(R.id.rv_numbers);&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (5) Create a LinearLayoutManager variable called layoutManager&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (6) Use setLayoutManager on mNumbersList with the LinearLayoutManager we created above&lt;/span&gt;
&lt;span class="code-line"&gt;LinearLayoutManager layoutManager = new LinearLayoutManager(this);&lt;/span&gt;
&lt;span class="code-line"&gt;mNumbersList.setLayoutManager(layoutManager);&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (7) Use setHasFixedSize(true) to designate that the contents of the RecyclerView won't change an item's size&lt;/span&gt;
&lt;span class="code-line"&gt;mNumbersList.setHasFixedSize(true);&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (8) Store a new GreenAdapter in mAdapter and pass it NUM_LIST_ITEMS&lt;/span&gt;
&lt;span class="code-line"&gt;mAdapter = new GreenAdapter(NUM_LIST_ITEMS);&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (9) Set the GreenAdapter you created on mNumbersList&lt;/span&gt;
&lt;span class="code-line"&gt;mNumbersList.setAdapter(mAdapter);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="6-handle-item-click-reciept"&gt;6. handle item click reciept&lt;/h3&gt;
&lt;p&gt;To handle the click on items: &lt;/p&gt;
&lt;p&gt;a. define a Listener interface&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (1) Add an interface called ListItemClickListener&lt;/span&gt;
&lt;span class="code-line"&gt;// TODO (2) Within that interface, define a void method called onListItemClick that takes an int as a parameter&lt;/span&gt;
&lt;span class="code-line"&gt;interface ListItemClickListener{&lt;/span&gt;
&lt;span class="code-line"&gt;    void onListItemClick(int index);&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;b. make this Listener a private meber of the &lt;code&gt;Adapter&lt;/code&gt; class, passed as constructor parameter. 
c. make the &lt;code&gt;Adapter&lt;/code&gt;'s inner &lt;code&gt;ViewHolder&lt;/code&gt; to implement &lt;code&gt;View.OnClickListener&lt;/code&gt; interface, and override the onClick method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// TODO (6) Override onClick, passing the clicked item's position (getAdapterPosition()) to mOnClickListener via its onListItemClick method&lt;/span&gt;
&lt;span class="code-line"&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;public void onClick(View v) {&lt;/span&gt;
&lt;span class="code-line"&gt;    int pos = this.getAdapterPosition();&lt;/span&gt;
&lt;span class="code-line"&gt;    mOnClickListener.onListItemClick(pos);&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;d. in the inner &lt;code&gt;ViewHolder&lt;/code&gt; class' constructor, set onclicklistner of the passed item to the viewholder itself: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;public NumberViewHolder(View itemView) {&lt;/span&gt;
&lt;span class="code-line"&gt;    super(itemView);&lt;/span&gt;
&lt;span class="code-line"&gt;    listItemNumberView = (TextView) itemView.findViewById(R.id.tv_item_number);&lt;/span&gt;
&lt;span class="code-line"&gt;    viewHolderIndex = (TextView) itemView.findViewById(R.id.tv_view_holder_instance);&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (7) Call setOnClickListener on the View passed into the constructor (use 'this' as the OnClickListener)&lt;/span&gt;
&lt;span class="code-line"&gt;    itemView.setOnClickListener(this);&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e. make &lt;code&gt;MainActivity&lt;/code&gt; implments the Adapter.ItemClickListener, and provide the onclick method: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;public class MainActivity extends AppCompatActivity implements GreenAdapter.ListItemClickListener {&lt;/span&gt;
&lt;span class="code-line"&gt;    //...&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (10) Override ListItemClickListener's onListItemClick method&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (11) In the beginning of the method, cancel the Toast if it isn't null&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (12) Show a Toast when an item is clicked, displaying that item number that was clicked&lt;/span&gt;
&lt;span class="code-line"&gt;    @Override&lt;/span&gt;
&lt;span class="code-line"&gt;    public void onListItemClick(int index) {&lt;/span&gt;
&lt;span class="code-line"&gt;        if(mToast!=null) mToast.cancel();&lt;/span&gt;
&lt;span class="code-line"&gt;        mToast.setText(String.format("item %d is clicked!", index));&lt;/span&gt;
&lt;span class="code-line"&gt;        mToast.show();&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;f. when creating Adapter in MainActivity, pass this as second constructor parameter&lt;/p&gt;</summary><category term="android"></category></entry><entry><title>[Android Dev] 1.4 Intents</title><link href="http://x-wei.github.io/andev_p1e4_intents.html" rel="alternate"></link><published>2017-02-07T00:00:00+01:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2017-02-07:andev_p1e4_intents.html</id><summary type="html">
&lt;p&gt;So far: single screen with a single activity. &lt;/p&gt;
&lt;p&gt;start activity from another activity: use &lt;code&gt;Intent&lt;/code&gt;s. &lt;/p&gt;
&lt;h2 id="explicit-intent-start-a-new-activity"&gt;Explicit intent: start a new activity&lt;/h2&gt;
&lt;p&gt;toy app: type some text, press button, and a new activity will appear with the typed words.&lt;/p&gt;
&lt;p&gt;create activity in android studio: new → activity&lt;/p&gt;
&lt;p&gt;call &lt;code&gt;startActivity&lt;/code&gt; with an intent as parameter. &lt;/p&gt;
&lt;p&gt;Explicit intent constructor: a context (every &lt;code&gt;Acitivity&lt;/code&gt; is a &lt;code&gt;Context&lt;/code&gt;), and a destination activity class. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Intent ineten = new Intent(MainActivity.this, ChildActivity.class);&lt;/span&gt;
&lt;span class="code-line"&gt;startActivity(intent);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is called &lt;strong&gt;explicit&lt;/strong&gt; intent as we know exactly which activity to start. &lt;/p&gt;
&lt;p&gt;in AndroidManifest.xml file, configure child activity having a back buttom to return to parent activity: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;".MainActivity"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:label=&lt;/span&gt;&lt;span class="s"&gt;"@string/app_name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;&amp;lt;action&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.intent.action.MAIN"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;&amp;lt;category&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.intent.category.LAUNCHER"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;&amp;lt;!-- TODO (4) Configure DetailActivity's up button functionality --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;".DetailActivity"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:parentActivityName=&lt;/span&gt;&lt;span class="s"&gt;".MainActivity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;meta-data&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.suport.PARENT_ACTIVITY"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:value=&lt;/span&gt;&lt;span class="s"&gt;".MainActivity"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="passing-data-between-activities"&gt;Passing data between activities&lt;/h2&gt;
&lt;p&gt;in main activity: 
&lt;code&gt;Intent.putExtra(String name, String value)&lt;/code&gt;
put data (&lt;em&gt;k-v pairs&lt;/em&gt;) into the intent (some constant string names exists in Intent class, like &lt;code&gt;Intent.EXTRA_TEXT&lt;/code&gt;)
then start new activity with this intent. &lt;/p&gt;
&lt;p&gt;in child activity: 
use &lt;code&gt;getIntent()&lt;/code&gt; to get the comming intent, then use &lt;code&gt;intent.getStringExtra(String name)&lt;/code&gt;, 
before getting extra data: use &lt;code&gt;intent.hasExtra(name)&lt;/code&gt; to check if the extra stuff exists. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Intent commingIntent = getIntent();&lt;/span&gt;
&lt;span class="code-line"&gt;if(commingIntent.hasExtra(Intent.EXTRA_TEXT)){&lt;/span&gt;
&lt;span class="code-line"&gt;    String txt = commingIntent.getStringExtra(Intent.EXTRA_TEXT);&lt;/span&gt;
&lt;span class="code-line"&gt;    mDisplayText.setText(txt);&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="implicit-intent-opening-a-link"&gt;Implicit Intent: opening a link&lt;/h2&gt;
&lt;p&gt;when don't know/care which activity to start. 
example: want to visit a link or dial a number. &lt;/p&gt;
&lt;p&gt;ref of common intents: &lt;a href="https://developer.android.com/guide/components/intents-common.html"&gt;https://developer.android.com/guide/components/intents-common.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;most implicit intent contains 2 parameters: an action and the associated data (&lt;code&gt;Uri&lt;/code&gt;). Or use &lt;code&gt;intent.setData&lt;/code&gt; to add uri to intent. 
To test if there is any application that can handle the intent: use &lt;code&gt;intent.resolveActivity(getPackageManager())&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;private void openWebPage(String url) {&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (2) Use Uri.parse to parse the String into a Uri&lt;/span&gt;
&lt;span class="code-line"&gt;    Uri uri = Uri.parse(url);&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (3) Create an Intent with Intent.ACTION_VIEW and the webpage Uri as parameters&lt;/span&gt;
&lt;span class="code-line"&gt;    Intent intent = new Intent(Intent.ACTION_VIEW, uri);&lt;/span&gt;
&lt;span class="code-line"&gt;    // TODO (4) Verify that this Intent can be launched and then call startActivity&lt;/span&gt;
&lt;span class="code-line"&gt;    if(intent.resolveActivity(getPackageManager()) != null){&lt;/span&gt;
&lt;span class="code-line"&gt;        startActivity(intent);&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="uris"&gt;URIs&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;URI&lt;/strong&gt;: uniform resource identifier, a string that identifies resources. &lt;/p&gt;
&lt;p&gt;full format of an URI: 
&lt;img alt="" class="img-responsive" src="../images/andev_p1e4_intents/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;components: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scheme: ex. &lt;code&gt;geo, http&lt;/code&gt;...&lt;/li&gt;
&lt;li&gt;host&lt;/li&gt;
&lt;li&gt;path&lt;/li&gt;
&lt;li&gt;query&lt;/li&gt;
&lt;li&gt;fragment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example of URI: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;uri1 = https://archive.org/web&lt;/span&gt;
&lt;span class="code-line"&gt;uri2 = geo:0,0?q=Montreal,Canada&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="construct-a-geo-uri"&gt;construct a geo URI&lt;/h2&gt;
&lt;p&gt;now: want to open a location on maps. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/maps/documentation/android-api/intents"&gt;https://developers.google.com/maps/documentation/android-api/intents&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;Uri.Builder&lt;/code&gt; to create complex URIs. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;public void onClickOpenAddressButton(View v) {&lt;/span&gt;
&lt;span class="code-line"&gt;        String address = "Boulvard des Marechaux";&lt;/span&gt;
&lt;span class="code-line"&gt;        // TODO (6) Use Uri.Builder with the appropriate scheme and query to form the Uri for the address&lt;/span&gt;
&lt;span class="code-line"&gt;        Uri.Builder builder = new Uri.Builder();&lt;/span&gt;
&lt;span class="code-line"&gt;        builder.scheme("geo").path("0,0").query(address);&lt;/span&gt;
&lt;span class="code-line"&gt;        Uri uri = builder.build();&lt;/span&gt;
&lt;span class="code-line"&gt;        showMap(uri); // constructs an intent and starts activity&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="share-intent"&gt;Share Intent&lt;/h2&gt;
&lt;p&gt;When mutilple apps that can handle this intent ⇒ a chooser will pop up. 
Example: open an image / share a piece of text / share link ... 
 → &lt;code&gt;ShareCompat.IntentBuilder&lt;/code&gt;  gives helper functionality for sharing data between activities.
Media type (MIME):
format: &lt;code&gt;toplevel_type_name/subtype_name[; parameters]&lt;/code&gt;
example: &lt;code&gt;text/html;charset=UTF-8, image/png&lt;/code&gt;, &lt;code&gt;text/plain&lt;/code&gt;, &lt;code&gt;text/rtf, video/mp4&lt;/code&gt;,...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;private void shareText(String txt) {&lt;/span&gt;
&lt;span class="code-line"&gt;        String mimeType = "text/plain";&lt;/span&gt;
&lt;span class="code-line"&gt;        String title = "title of chooser window";&lt;/span&gt;
&lt;span class="code-line"&gt;        ShareCompat.IntentBuilder.from(this)&lt;/span&gt;
&lt;span class="code-line"&gt;                .setType(mimeType)&lt;/span&gt;
&lt;span class="code-line"&gt;                .setChooserTitle(title)&lt;/span&gt;
&lt;span class="code-line"&gt;                .setText(txt).startChooser();&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="android"></category></entry><entry><title>[Android Dev] 1.1 Create Project Sunshine</title><link href="http://x-wei.github.io/andev_p1e1_basics.html" rel="alternate"></link><published>2017-02-06T00:00:00+01:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2017-02-06:andev_p1e1_basics.html</id><summary type="html">
&lt;h1 id="1-create-project-sunshine"&gt;1 create project sunshine&lt;/h1&gt;
&lt;p&gt;Created 星期一 06 二月 2017&lt;/p&gt;
&lt;h2 id="minsdk-vs-targetsdk"&gt;minSDK vs targetSDK&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;minSDK&lt;/code&gt; is the lowest SDK level that your app can run on. You can choose what level of devices to support. &lt;/p&gt;
&lt;p&gt;By comparison, the &lt;code&gt;targetSDK&lt;/code&gt; is NOT a high pass filter -- it’s used only to declare which platform version you've tested your app on. &lt;/p&gt;
&lt;h2 id="enable-vt-x-and-installing-kvm"&gt;Enable VT-x and installing kvm&lt;/h2&gt;
&lt;p&gt;this is necessary for running AVD devices. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/37087365/how-to-enable-vt-x-in-bios-and-kvm-modules-on-linux"&gt;http://stackoverflow.com/questions/37087365/how-to-enable-vt-x-in-bios-and-kvm-modules-on-linux&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="components-of-an-android-app"&gt;Components of an android app&lt;/h2&gt;
&lt;p&gt;4 main components of an app: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Activity&lt;/code&gt;: responsible for most user interaction&lt;/li&gt;
&lt;li&gt;Service&lt;/li&gt;
&lt;li&gt;ContentProvider&lt;/li&gt;
&lt;li&gt;BroadcaseReceiver&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="activity"&gt;Activity&lt;/h2&gt;
&lt;p&gt;Android keeps the activities in a stack, when press back button → stack pops. 
Define the launcher of the activity in &lt;code&gt;manifests/AndroidManifest.xml&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;application → activity → intent-filter&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e1_basics//pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;res&lt;/code&gt; folder contains layouts/images/values
in &lt;code&gt;res/layout/activity_main.xml&lt;/code&gt;: xml file that defines the layout view&lt;/p&gt;
&lt;h2 id="activities-and-layouts"&gt;Activities and Layouts&lt;/h2&gt;
&lt;p&gt;An &lt;strong&gt;activity&lt;/strong&gt; is a single focused thing that the user can do. Activities are responsible for creating the window that your application uses to draw and receive events from the system. Activities are written in Java, extending from the &lt;code&gt;Activity&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;An activity creates &lt;strong&gt;views&lt;/strong&gt; to show the user information, and to let the user interact with the activity. &lt;code&gt;View&lt;/code&gt;s are a class in the Android UI framework. &lt;em&gt;They occupy a rectangular area on the screen and are responsible for drawing and handling events.&lt;/em&gt; An activity determines what views to create (and where to put them), by reading an XML layout file. These XML files, are stored in the res folder inside the folder labeled &lt;code&gt;layouts&lt;/code&gt;. &lt;/p&gt;
&lt;h2 id="2-types-of-views"&gt;2 types of views&lt;/h2&gt;
&lt;h3 id="type1-ui-components-widgets"&gt;type1: UI components (widgets)&lt;/h3&gt;
&lt;p&gt;UI components that are often interactive elements. &lt;/p&gt;
&lt;p&gt;example: &lt;code&gt;TextView, EditView, Buttom, ImageView,&lt;/code&gt;... 
most of UI view classes: in android.widgets package &lt;a href="https://developer.android.com/reference/android/widget/package-summary.html"&gt;https://developer.android.com/reference/android/widget/package-summary.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="type2-container-view"&gt;type2: container view&lt;/h3&gt;
&lt;p&gt;The second are views called "Layout" or "Container" views. They extend from a class called &lt;a href="https://developer.android.com/reference/android/view/ViewGroup.html"&gt;ViewGroup&lt;/a&gt;. They are primarily responsible for containing a group of views and determining where they are on screen. Layout views can be nested in one another. &lt;/p&gt;
&lt;p&gt;example: &lt;code&gt;LinearLayout, RelativeLayout, ConstraintLayout,&lt;/code&gt; ...&lt;/p&gt;
&lt;h2 id="relate-xml-layout-to-java-activities"&gt;relate XML layout to java activities&lt;/h2&gt;
&lt;h3 id="use-xml-layout-in-java-activity"&gt;use xml layout in java activity&lt;/h3&gt;
&lt;p&gt;in &lt;code&gt;onCreate&lt;/code&gt; method of an activity, using the &lt;code&gt;setContentView(R.layout.name_of_layout)&lt;/code&gt;
the setContentView method: Android reads your XML file and generates Java objects for each of the tags in your layout file. You can then edit these objects in the Java code by calling methods on the Java objects.&lt;/p&gt;
&lt;h3 id="refer-to-widgets-defined-in-xml-in-java"&gt;refer to widgets defined in xml in java&lt;/h3&gt;
&lt;p&gt;in the xml file, give an id to the view:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/andev_p1e1_basics//pasted_image001.png"/&gt;&lt;/p&gt;</summary><category term="android"></category></entry><entry><title>java线程小结</title><link href="http://x-wei.github.io/java%E7%BA%BF%E7%A8%8B%E5%B0%8F%E7%BB%93.html" rel="alternate"></link><published>2013-11-29T00:00:00+01:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2013-11-29:java线程小结.html</id><summary type="html">
&lt;p&gt;INF422的TD2, 这节TD是要做一个多线程筛选质数的程序, 关于java的多线程, 以前用过但是不知道啥意思, 在这里总结下. &lt;/p&gt;
&lt;h2 id="_1"&gt;创建进程&lt;/h2&gt;
&lt;p&gt;为了实现多线程, 需要定义一个新的class, 有两种方法: 
&lt;strong&gt;或者继承自&lt;/strong&gt;&lt;code&gt;Thread&lt;/code&gt;&lt;strong&gt;类, 或者实现&lt;/strong&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;strong&gt;接口&lt;/strong&gt;(关键是重载run()方法). &lt;/p&gt;
&lt;h3 id="thread"&gt;继承自Thread类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;写法1: 定义一个继承自Thread的内部类--&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; [&lt;span class="n"&gt;类名&lt;/span&gt;] &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;{&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;方法1&lt;/span&gt;;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;方法2&lt;/span&gt;；&lt;/span&gt;
&lt;span class="code-line"&gt;…&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="nb"&gt;void&lt;/span&gt; &lt;span class="nb"&gt;run&lt;/span&gt;(){&lt;/span&gt;
&lt;span class="code-line"&gt;// …&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;属性1&lt;/span&gt;；&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;属性2&lt;/span&gt;；&lt;/span&gt;
&lt;span class="code-line"&gt;…&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;或者用下面种&lt;strong&gt;内联(inline)&lt;/strong&gt;的写法, 不用给这个类起名字了(不过还要给这个实例取名字): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;private Thread [实例名] = new Thread () {&lt;/span&gt;
&lt;span class="code-line"&gt;    public void run() {&lt;/span&gt;
&lt;span class="code-line"&gt;    // ...&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;} ;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后让进程开始, 就是: 
&lt;code&gt;t.start();&lt;/code&gt;
如果用&lt;code&gt;t.run()&lt;/code&gt;的话, 则依然是并行执行的, 可能达不到多线程效果...&lt;/p&gt;
&lt;h3 id="runnable"&gt;实现Runnable接口&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方法1, 代码: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; [&lt;span class="n"&gt;类名&lt;/span&gt;] &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;{&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;方法1&lt;/span&gt;;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;方法2&lt;/span&gt;；&lt;/span&gt;
&lt;span class="code-line"&gt;…&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="nb"&gt;void&lt;/span&gt; &lt;span class="nb"&gt;run&lt;/span&gt;(){&lt;/span&gt;
&lt;span class="code-line"&gt;    // &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;…&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;属性1&lt;/span&gt;；&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;属性2&lt;/span&gt;；&lt;/span&gt;
&lt;span class="code-line"&gt;…&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法2, 内联写法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;private Runnable [实例名] = new Runnable() {&lt;/span&gt;
&lt;span class="code-line"&gt;public void run() {&lt;/span&gt;
&lt;span class="code-line"&gt;    //...&lt;/span&gt;
&lt;span class="code-line"&gt; }&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="android"&gt;android上需要注意的一点&lt;/h2&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;"Android modifies the user interface and handles input events from &lt;strong&gt;one single&lt;/strong&gt; user interface thread. This thread is also called &lt;strong&gt;the main thread&lt;/strong&gt;."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Android collects all events in a queue and processed an instance of the Looper class.
&lt;img alt="" class="img-responsive" src="../images/./java线程小结/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;所以注意要修改用户交互的组件(View, Toast, ect.)的时候, 需要在main Thread里面操作, 否则运行时会出错!!&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;那么, 当其他线程进行计算完成以后, 要刷新屏幕的显示时, 需要告知main Thread 进行更新显示:&lt;/p&gt;
&lt;p&gt;"Ajouter un nouvel objet comportant une méthode run() mettant à jour le nombre d'entier premiers (nouvel objet implémentant l'interface Runnable). À la fin du crible, le thread de calcul devra alors envoyer un message (ce nouvel objet) au thread principal pour mettre à jour l'affichage graphique. Cette mise à jour doit être faite via un appel à la méthode post() d'une instance de la classe Handler (l'objet Handler doit être instancié dans le thread principal)."&lt;/p&gt;
&lt;p&gt;Bref, 要做到多线程计算, 计算结果显示在屏幕上, 需要:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加一个Runnable实例("一个实现了Runnable接口的类的实例"), 重载run()方法实现calcul&lt;/li&gt;
&lt;li&gt;&lt;em&gt;一个&lt;/em&gt;&lt;a href="http://developer.android.com/reference/android/os/Handler.html"&gt;Handler&lt;/a&gt;&lt;em&gt;实例, 然后调用这个Handler的post()方法.&lt;/em&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看看文档里是咋说的: &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;public final boolean post (Runnable r)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Added in API level 1
Causes the Runnable r to be added to the message queue. The runnable will be run on the thread to which this handler is attached.&lt;/p&gt;
&lt;p&gt;Parameters
r   The Runnable that will be executed.
Returns
Returns true if the Runnable was successfully placed in to the message queue. Returns false on failure, usually because the looper processing the message queue is exiting.&lt;/p&gt;
&lt;p&gt;意思是&lt;code&gt;handler.post(r)&lt;/code&gt;会把r(一个Runnable实例)加入message queue中去, &lt;em&gt;这个Runnable会在这个handler关联的Thread中执行&lt;/em&gt;. 所以只要handler关联的是main Thread, 就可以在这个Runnalbe里面写graphic的代码也不会出错了. &lt;/p&gt;
&lt;p&gt;如果在Activity类的声明里声明handler为一个属性: 
&lt;code&gt;private Handler handler = new Handler();&lt;/code&gt;
这个构造函数没有参数, 根据文档, "Default constructor associates this handler with the Looper for the current thread." 所以这个handler关联到了current thread, 也就是main Thread.....&lt;/p&gt;
&lt;h2 id="_2"&gt;例子&lt;/h2&gt;
&lt;p&gt;所以, 多线程计算, 计算结束后修改屏幕显示的话, 需要以下__三个步骤__(比上面的俩步骤多了一个, 不知道是否还可以简化): &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在主线程里声明handler, (声明成Activity的一个属性): &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;private Handler handler = new Handler();&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;写一个用于修改屏幕显示的Runnable r(也声明成一个属性了):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;private Runnable r = new Runnable() {&lt;/span&gt;
&lt;span class="code-line"&gt;public void run() {&lt;/span&gt;
&lt;span class="code-line"&gt;//code to update graphic display...&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再写一个进行计算的Thread t, 在计算结束后, 用handler.post(r)实现刷新显示的效果: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;private final Thread t = new Thread() {&lt;/span&gt;
&lt;span class="code-line"&gt;    public void run() {&lt;/span&gt;
&lt;span class="code-line"&gt;//...code for calculating...&lt;/span&gt;
&lt;span class="code-line"&gt;//结束计算以后, 刷新屏幕:&lt;/span&gt;
&lt;span class="code-line"&gt;handler.post(r);&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后在onCreate()函数里, 让Thread t 启动起来: &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;t.start();&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要让t一直循环(监视某个flag), 当flag变为true的时候, 进行计算.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了达到这个效果, Thread t里面的run()方法需要这样写:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    public void run() {&lt;/span&gt;
&lt;span class="code-line"&gt;        while(true) {&lt;/span&gt;
&lt;span class="code-line"&gt;            if(flag){&lt;/span&gt;
&lt;span class="code-line"&gt;            //...do the calculation...&lt;/span&gt;
&lt;span class="code-line"&gt;            handler.post(r);&lt;/span&gt;
&lt;span class="code-line"&gt;            flag=false;&lt;/span&gt;
&lt;span class="code-line"&gt;            }&lt;/span&gt;
&lt;span class="code-line"&gt;        }   &lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="process-threadrunnable"&gt;Process, Thread和Runnable的区别?&lt;/h2&gt;
&lt;p&gt;线程(Thread)是指进程(Process)中的一个执行流程，一个进程中可以运行多个线程。比如java.exe进程中可以运行很多线程。线程总是属于某个进程，进程中的多个线程共享进程的内存。&lt;/p&gt;
&lt;p&gt;参考链接: 
&lt;a href="http://www.vogella.com/articles/AndroidBackgroundProcessing/article.html"&gt;http://www.vogella.com/articles/AndroidBackgroundProcessing/article.html&lt;/a&gt;
&lt;a href="http://www.cnblogs.com/rollenholt/archive/2011/08/28/2156357.html"&gt;http://www.cnblogs.com/rollenholt/archive/2011/08/28/2156357.html&lt;/a&gt;
&lt;a href="http://developer.android.com/reference/android/os/Handler.html"&gt;http://developer.android.com/reference/android/os/Handler.html&lt;/a&gt;
&lt;a href="http://lavasoft.blog.51cto.com/62575/99150"&gt;http://lavasoft.blog.51cto.com/62575/99150&lt;/a&gt;&lt;/p&gt;</summary><category term="android"></category><category term="java"></category></entry><entry><title>ADT环境搭建</title><link href="http://x-wei.github.io/ADT%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html" rel="alternate"></link><published>2013-11-08T00:00:00+01:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2013-11-08:ADT环境搭建.html</id><summary type="html">
&lt;p&gt;这学期INF422, 第一节课就是android安装调试环境的搭建(居然要一节课?), 这里总结一下.&lt;/p&gt;
&lt;h3 id="bundle"&gt;第一步: 下载bundle&lt;/h3&gt;
&lt;p&gt;下载&lt;a href="http://developer.android.com/sdk/index.html"&gt;ADT-Bundle&lt;/a&gt;
解压缩以后啥都有了, 包含一个eclipse...&lt;/p&gt;
&lt;h3 id="_1"&gt;第二步: 修改环境变量&lt;/h3&gt;
&lt;p&gt;linux下的环境变量放在&lt;code&gt;.bashrc文件&lt;/code&gt;, 加入下面一行: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;PATH=$PATH:&amp;lt;dir&amp;gt;/sdk/tools/:&amp;lt;dir&amp;gt;/sdk/platform-tools/:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt;是放置SDK的目录地址.&lt;/p&gt;
&lt;p&gt;测试一下好不好使, 在终端中输入&lt;code&gt;android&lt;/code&gt;, 看是否会弹出SDK manager&lt;/p&gt;
&lt;h3 id="virtual-machine"&gt;第三步: 新建一个virtual machine&lt;/h3&gt;
&lt;p&gt;可以用eclipse的AVDmanager做, 也可以用命令行做. &lt;/p&gt;
&lt;p&gt;输入:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;android list targets&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;找到想要的target(我们要4.1.2)的那个id(一个数字), 然后, 运行命令: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;android create avd -t &amp;lt;target_id&amp;gt; -n inf422 --abi armeabi-v7a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样就生成了一个名叫"inf422"的虚拟机&lt;/p&gt;
&lt;h3 id="_2"&gt;第四步: 关联到自定义的镜像&lt;/h3&gt;
&lt;p&gt;inf422这门课提供了一个修改过的android镜像, 在&lt;a href="http://www.enseignement.polytechnique.fr/informatique/INF422/ramdisk.img"&gt;这里&lt;/a&gt;和&lt;a href="http://www.enseignement.polytechnique.fr/informatique/INF422/kernel-qemu"&gt;这里&lt;/a&gt;下载, 下载到本地的目录上了以后, 运行: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;emulator @inf422 -ramdisk &amp;lt;IMAGES&amp;gt;/ramdisk.img -kernel &amp;lt;IMAGES&amp;gt;/kernel-qemu&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;images&gt;是刚刚存放那俩镜像文件的目录. &lt;/images&gt;&lt;/p&gt;
&lt;h3 id="telnet"&gt;第五步: telnet连接虚拟机&lt;/h3&gt;
&lt;p&gt;课程里用的emulator使用telnet服务器, 且是在虚拟机的23端口接收信息. 先重定向一下端口, 定向到localhost的4444端口:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;adb forward tcp:4444 tcp:23&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样, 以后要登录模拟器emulator的时候, 只需要输入: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;telnet localhost 4444&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(用户名是root, 不要密码)&lt;/p&gt;
&lt;h2 id="_3"&gt;第六步: 用两种方法进入虚拟机&lt;/h2&gt;
&lt;p&gt;刚才的4444端口是进入emulator用的, 而打开虚拟机的时候, 窗口标题是一个数字再加虚拟机的名字(我的显示的是"5554:inf422"), 这个5554是另外一个端口, 用于用shell方式登陆, 登陆后可以使用shell命令查看文件或者进行一些操作. &lt;/p&gt;
&lt;p&gt;而与之对应, 从4444端口登陆, 则是进入emulator的控制console&lt;/p&gt;
&lt;p&gt;&lt;em&gt;两种方法和AVD交流:&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;console: linux命令, 命令行&lt;/li&gt;
&lt;li&gt;emulator: 发送命令产生一些事件(电话, 短信, GPS等)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第二种方式可以模拟一些手机事件, 很有用... 使用help命令查看emulator怎么使用&lt;/p&gt;</summary><category term="android"></category><category term="inf422"></category></entry><entry><title>android开发视频教程(重制版) 第一季 课程笔记</title><link href="http://x-wei.github.io/android%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E7%AC%AC%E4%B8%80%E5%AD%A3%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><published>2013-07-31T00:00:00+02:00</published><author><name>mx</name></author><id>tag:x-wei.github.io,2013-07-31:android开发教程第一季笔记.html</id><summary type="html">
&lt;h1 id="s01e02"&gt;S01E02: 开发环境搭建&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;直接去 developer.android.com/sdk/ 下载bundle解压即可, 里面包含eclipse&lt;/li&gt;
&lt;li&gt;新建一个模拟器: 内部存储一般64MB足矣:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image002.png"/&gt;&lt;/p&gt;
&lt;h1 id="s01e03-android"&gt;S01E03: android项目目录结构&lt;/h1&gt;
&lt;h4 id="android"&gt;第一个android程序&lt;/h4&gt;
&lt;p&gt;new--&amp;gt;android application&lt;/p&gt;
&lt;h4 id="_1"&gt;目录结构&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image003.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;com.example.helloworld这个包名一般为网址倒着写, android是按照包名来区分不同APP的&lt;/li&gt;
&lt;li&gt;src/目录下存放java程序&lt;/li&gt;
&lt;li&gt;gen/目录下存放系统自动生成的文件, R.java里给每一个控件或变量赋予一个id, 千万__不要手动修改R,.java内容__!!&lt;/li&gt;
&lt;li&gt;assets/目录下和res/目录下都可以放各种外部文件(ex. 图片), 但是assets下的文件不会在R.java中生成id&lt;/li&gt;
&lt;li&gt;res/layout/ 存放布局文件(xml格式)&lt;/li&gt;
&lt;li&gt;AndroidManifest.xml用于统筹&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e04"&gt;S01E04: 技术结构&lt;/h1&gt;
&lt;h4 id="_2"&gt;四层结构图&lt;/h4&gt;
&lt;p&gt;开发位于最上层application
&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image004.png"/&gt;&lt;/p&gt;
&lt;h4 id="_3"&gt;基于组件的应用程序开发&lt;/h4&gt;
&lt;p&gt;搭积木&lt;/p&gt;
&lt;h4 id="_4"&gt;常见组件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;activity(负责用户交互); &lt;/li&gt;
&lt;li&gt;service(后台处理数据); &lt;/li&gt;
&lt;li&gt;Content Provider(对外提供数据); &lt;/li&gt;
&lt;li&gt;BroadcastReceiver(接收broadcast)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e05-activity"&gt;S01E05: activity初步&lt;/h1&gt;
&lt;h4 id="activity"&gt;Activity启动基本流程&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image006.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AndroidManifest.xml里面指定, 程序运行后执行MainActivity.java&lt;/li&gt;
&lt;li&gt;MainActivity.java的onCreate()函数里setContentView(R.layout.activity_main); 读取activity_main.xml文件并显示&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="activity_1"&gt;Activity与布局文件&lt;/h4&gt;
&lt;p&gt;一一对应 (eclipse编辑器里有图形化预览界面)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image007.png"/&gt;&lt;/p&gt;
&lt;h4 id="activity_2"&gt;在Activity当中获取代表控件对象&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先在activity_main.xml里定义控件时, 为其指定一个id: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"@+id/textView1"&lt;/span&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"+id"&lt;/span&gt;&lt;span class="err"&gt;表示新建一个&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;→ 自动在R.java里生成一个id:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;public static final class id {&lt;/span&gt;
&lt;span class="code-line"&gt;        public static final int textView1=0x7f080003;&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;→ 之后在MainActivity.java里, 先声明成员变量:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;private TextView tv&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;→ 在onCreate()中, 通过id获得这个控件对象:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;tv = (TextView) findViewById(R.id.textView1);//有向下转型: TextView是View的子类&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;→ 之后就可以调用tv的各种方法了,具体见SDK里的文档i(android.widget.TextView), 从而实现再java程序里动态修改控件属性.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e06-view"&gt;S01E06: View&lt;/h1&gt;
&lt;h4 id="view"&gt;View的基本概念&lt;/h4&gt;
&lt;p&gt;View是一个控件?...&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image008.png"/&gt;&lt;/p&gt;
&lt;h4 id="view_1"&gt;为一个View绑定监听器&lt;/h4&gt;
&lt;p&gt;(我就认为View是一个控件了)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;java程序里获取控件代表的对象: findViewById()方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;bt = (Button) findViewById(R.id.button1);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义一个&lt;strong&gt;内部类&lt;/strong&gt; 实现监听器接口:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;// **使用一个内部类定义监听器**&lt;/span&gt;
&lt;span class="code-line"&gt;// Button的监听器 实现OnClickListener接口, OnClickListener接口是处理点击事件的&lt;/span&gt;
&lt;span class="code-line"&gt;class ButtonListener implements OnClickListener {&lt;/span&gt;
&lt;span class="code-line"&gt;@Override&lt;/span&gt;
&lt;span class="code-line"&gt;// 实现该接口的抽象方法onClick&lt;/span&gt;
&lt;span class="code-line"&gt;public void onClick(View v) {&lt;/span&gt;
&lt;span class="code-line"&gt;//do something......&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;}// end 内部类ButtonListener&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;onCreate()里生成一个监听器对象, 并为控件绑定该监听器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;ButtonListener bl = new ButtonListener();// 生成一个监听器对象&lt;/span&gt;
&lt;span class="code-line"&gt;bt.setOnClickListener(bl);// **这句话把监听器和事件联系在一起了** 点击这个按钮 就会执行它的onclick方法&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个监听器可以绑定给多个控件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;另法&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以直接写在setOnClickListener参数里, 不用给内部类起名字: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    bt.setOnClickListener(new OnClickListener() {&lt;/span&gt;
&lt;span class="code-line"&gt;    @Override&lt;/span&gt;
&lt;span class="code-line"&gt;    public void onClick(View v) {&lt;/span&gt;
&lt;span class="code-line"&gt;    //do something......&lt;/span&gt;
&lt;span class="code-line"&gt;    }&lt;/span&gt;
&lt;span class="code-line"&gt;    });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="s01e07"&gt;S01E07: 布局&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;所谓的控件布局方法,就是指控制控件在Activity当中的位置、大小、颜色以及其他控件样式属性的方法。&lt;/li&gt;
&lt;li&gt;布局可以用xml布局文件(ex. /res/layout/activity_main.xml) 也可以在java文件里完成控件布局&lt;/li&gt;
&lt;li&gt;最常用: 线性布局LinearLayout, 相对布局RelativeLayout&lt;/li&gt;
&lt;li&gt;先暂时用线性布局LinearLayout, 最简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e08"&gt;S01E08: 距离单位; 边距&lt;/h1&gt;
&lt;h4 id="px-dp-sp"&gt;距离单位: px, dp, sp&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;px&lt;/strong&gt;=像素点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用px指定控件大小, 则不同分辨率手机显示结果不同, 非常麻烦.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dpi计算公式:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image009.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dp&lt;/strong&gt;=dip(Device Independent pixels) 是设备无关的像素单位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;换算公式&lt;code&gt;px = dp * (dpi / 160)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;在320*480的屏幕上, dp与px相等 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总之一般指定控件大小就用dp&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sp&lt;/strong&gt;=scaled pixels 可改变大小的像素单位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当用户修改手机显示字体时,sp会随之改变&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sp单位通常用于指定字体的大小&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id="margin-padding"&gt;内外边距: margin, padding&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;margin: 控件离其他控件的距离&lt;/li&gt;
&lt;li&gt;padding: 控件内容离控件边框的距离&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image010.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置内边距与外边距:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;layout_margin, layout_marginTop, ...
padding, paddingTop, ...&lt;/p&gt;
&lt;h2 id="s01e09-checkbox"&gt;S01E09: CheckBox多选框&lt;/h2&gt;
&lt;p&gt;效果: 
&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image011.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;布局文件里使用&lt;checkbox&gt;&lt;/checkbox&gt;标签&lt;/li&gt;
&lt;li&gt;OnClickListener与OnCheckedChangeListener监听器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; 这俩监听器是有一定区别的, OnClickListener必须是用户点击才能触发, OnCheckedChangeListener则是只要状态改变了(即使是由程序里改变的)就会触发&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以几个CheckBox绑定上同一个监听器&lt;/li&gt;
&lt;li&gt;OnClickListener接口的方法: public void onClick(View v) 有一个&lt;strong&gt;参数View v&lt;/strong&gt;, 指的是是哪个控件被点击了, &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在onClick()中要处理这个控件时, 使用:&lt;code&gt;CheckBox cb = (CheckBox) v;&lt;/code&gt;
得到这个控件对象, 或者通过其&lt;code&gt;id: v.getId()&lt;/code&gt;也可以&lt;/p&gt;
&lt;h2 id="s01e10-radiobutton"&gt;S01E10: 单选框RadioButton&lt;/h2&gt;
&lt;p&gt;效果: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image013.png"/&gt;&lt;/p&gt;
&lt;h4 id="radiogroup"&gt;RadioGroup&lt;/h4&gt;
&lt;p&gt;单选按钮RadioButton需要放在一个RadioGroup中&lt;/p&gt;
&lt;p&gt;xml代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;RadioGroup&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/radioGroupId"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"0dp"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:layout_gravity=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:orientation=&lt;/span&gt;&lt;span class="s"&gt;"vertical"&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="na"&gt;android:layout_weight=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;RadioButton&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/radioButton_h"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"homme"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nt"&gt;&amp;lt;RadioButton&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/radioButton_f"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"femmee"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;&amp;lt;/RadioGroup&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;&amp;lt;!-- 像RadioGroup这样写的xml标签可以拥有子标签, 而像RadioButton这种则不能 →&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="radiogrouponcheckedchangelistener"&gt;RadioGroup的OnCheckedChangeListener&lt;/h4&gt;
&lt;p&gt;有俩参数... (RadioGroup group, int checkedId)&lt;/p&gt;
&lt;p&gt;直接上代码吧: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;RadioGroupListener&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;android&lt;/span&gt;.&lt;span class="n"&gt;widget&lt;/span&gt;.&lt;span class="n"&gt;RadioGroup&lt;/span&gt;.&lt;span class="n"&gt;OnCheckedChangeListener&lt;/span&gt; {&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// &lt;span class="n"&gt;注意看这俩参数&lt;/span&gt;!&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="nb"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onCheckedChanged&lt;/span&gt;(&lt;span class="n"&gt;RadioGroup&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;, &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;checkedId&lt;/span&gt;) {// &lt;span class="n"&gt;checkedId是被选择的哪个RadioButton的Id&lt;/span&gt; (&lt;span class="n"&gt;而不是什么序号&lt;/span&gt;)&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="n"&gt;checkedId&lt;/span&gt; == &lt;span class="n"&gt;R&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;.&lt;span class="n"&gt;radioButton_h&lt;/span&gt;)// &lt;span class="n"&gt;用两种方法得到想要的id:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;. &lt;span class="n"&gt;使用R中定义的&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;{&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;tv3&lt;/span&gt;.&lt;span class="n"&gt;setText&lt;/span&gt;(&lt;span class="s"&gt;"Homme!"&lt;/span&gt;);&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;rb_h2&lt;/span&gt;.&lt;span class="n"&gt;setChecked&lt;/span&gt;(&lt;span class="nb"&gt;true&lt;/span&gt;);&lt;/span&gt;
&lt;span class="code-line"&gt;} &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="n"&gt;checkedId&lt;/span&gt; == &lt;span class="n"&gt;rb_f&lt;/span&gt;.&lt;span class="n"&gt;getId&lt;/span&gt;())// &lt;span class="mi"&gt;2&lt;/span&gt;. &lt;span class="n"&gt;使用getid&lt;/span&gt;()&lt;span class="n"&gt;方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;{&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;tv3&lt;/span&gt;.&lt;span class="n"&gt;setText&lt;/span&gt;(&lt;span class="s"&gt;"Femme!"&lt;/span&gt;);&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;rb_f2&lt;/span&gt;.&lt;span class="n"&gt;setChecked&lt;/span&gt;(&lt;span class="nb"&gt;true&lt;/span&gt;);&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="s01e11-imageview"&gt;S01E11: 显示图片ImageView&lt;/h1&gt;
&lt;h4 id="_5"&gt;插图的方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;把图片放在./res/drawable 里面(有好几个分辨率的drawable, 随便一个...), ex. 放在了./res/drawable-hdpi/pic.jpg&lt;/li&gt;
&lt;li&gt;→ 会在R.java里生成其&lt;code&gt;id: pic&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在xml中使用&lt;imageview&gt;&lt;/imageview&gt;标签&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;引用放好的图: 
&lt;code&gt;android:src="@drawable/pic"&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="scaletype"&gt;ScaleType&lt;/h4&gt;
&lt;p&gt;ScaleType属性控制图片缩放的尺寸, 有几个可选: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fitcenter等比例缩放并居中显示; &lt;/li&gt;
&lt;li&gt;fitstart靠上显示; &lt;/li&gt;
&lt;li&gt;center 若图片较大则把中央部分截取出来显示,不缩放若图片小则直接居中显示, 也不缩放 &lt;/li&gt;
&lt;li&gt;centerCrop 缩放并进行裁剪以适应ImiageView&lt;/li&gt;
&lt;li&gt;centerInside 要是图片大就缩放放进去, 图片小就不缩放直接放进去&lt;/li&gt;
&lt;li&gt;Fit_XY缩放成和ImageView一样大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;代码片段: &lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;ImageView&lt;/span&gt;
&lt;span class="code-line"&gt;    android:id="@+id/imageView1Id"&lt;/span&gt;
&lt;span class="code-line"&gt;    android:layout_width="60dp"&lt;/span&gt;
&lt;span class="code-line"&gt;    android:layout_height="70dp"&lt;/span&gt;
&lt;span class="code-line"&gt;    android:background="#FF0000"&lt;/span&gt;
&lt;span class="code-line"&gt;    android:scaleType="fitCenter"&lt;/span&gt;
&lt;span class="code-line"&gt;    android:layout_weight="1"&lt;/span&gt;
&lt;span class="code-line"&gt;    android:src="@drawable/pic" /&amp;gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&amp;lt;!-- "@drawable/pic"是对应于R.drawable.pic, 实际上图片也可以放在assets文件夹 或者网络上 或者SD卡上 都可以, 不过以后再用 --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="s01e12"&gt;S01E12: 线性布局深入&lt;/h1&gt;
&lt;h4 id="_6"&gt;线性布局嵌套&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在LinearLayout里面再加入LinearLayout&lt;/li&gt;
&lt;li&gt;"直接父/子控件"&lt;/li&gt;
&lt;li&gt;嵌套层数没有限制&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="layout_weight"&gt;layout_weight&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;子控件并未占满父控件的所有空间时才有用&lt;/li&gt;
&lt;li&gt;layout_weight的值用于指定&lt;strong&gt;空闲空间的&lt;/strong&gt;分配__比例__: weight都是1的话--是按比例平分父控件的__剩余(!!!)__空间, 而不是整个父控件被按比例分配!&lt;/li&gt;
&lt;li&gt;如果想让父控件按比例分配: 很简单, __把宽度改为0dp__即可(那么父控件剩余空间=父控件总空间!)&lt;/li&gt;
&lt;li&gt;使用了线性布局嵌套以及weight属性, 已经可以制作一些相对较复杂的布局了&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e13-i"&gt;S01E13: 相对布局-I&lt;/h1&gt;
&lt;h4 id="def"&gt;相对布局def&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;相对布局是通过指定当前控件__与兄弟控件或者是父控件之间的相对位置__,从而达到控制控件位置的目的  &lt;/li&gt;
&lt;li&gt;实现同样界面, 用相对布局比用线性布局简单--&lt;strong&gt;UI性能&lt;/strong&gt;更好些&lt;/li&gt;
&lt;li&gt;UI性能: 布局嵌套越多, 性能越差!!...&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_7"&gt;基本思路&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;未指定位置时: 默认往左上角放(可能会重叠!)&lt;/li&gt;
&lt;li&gt;可以先放一个控件, 然后第二个控件指定其相对位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_8"&gt;实现方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;android:layout_below/layout_above等等等等... 放置在其左(右)边; 属性的值都是其他控件的id&lt;/li&gt;
&lt;li&gt;android:id="@+id/tvv1"是创建一个新id; android:layout_toRightOf="@id/tvv1"则是引用已有的id(没有加号)&lt;/li&gt;
&lt;li&gt;android:layout_alignLeft/Right等等等等..... 左(右)对齐; 属性的值都是其他控件的id  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e14-ii"&gt;S01E14: 相对布局II&lt;/h1&gt;
&lt;h4 id="_9"&gt;对齐到基准线&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;基准线:为了保证印刷字母的整齐而划定的线 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image.png"/&gt;&lt;/p&gt;
&lt;p&gt;第三条线就是所谓的基准线(baseline)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex. 两个TextView__的基准线__相互对齐&lt;/li&gt;
&lt;li&gt;作用: 当俩TextView的字体大小不相同时...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image001.png"/&gt;&lt;/p&gt;
&lt;h4 id="_10"&gt;和父控件对齐&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;android:layout_alignParentLeft/Right等等... 属性的值为true/false(因为只有一个直接父控件)&lt;/li&gt;
&lt;li&gt;android:layout_centerInParent/layout_centerHorizontal等等...&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e15-iii"&gt;S01E15: 相对布局III&lt;/h1&gt;
&lt;h4 id="relativelayoutandroid-42"&gt;RelativeLayout布局的新属性(Android 4.2)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;android:layout_alignStart/End等 值是其他控件的id, 头部和尾部对齐&lt;/li&gt;
&lt;li&gt;android:layout_alignParentStart/End, 值是true/false&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_11"&gt;相对布局小练习&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image014.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码片段:&lt;/strong&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;RelativeLayout&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/RL0"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"fill_parent"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"fill_parent"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/tv1"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_centerHorizontal=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:gravity=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"login..."&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;"16sp"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nt"&gt;&amp;lt;EditText&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/editText1"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_below=&lt;/span&gt;&lt;span class="s"&gt;"@id/tv1"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_centerHorizontal=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:ems=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:hint=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="nt"&gt;&amp;lt;requestFocus&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nt"&gt;&amp;lt;/EditText&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nt"&gt;&amp;lt;EditText&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/editText2"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_below=&lt;/span&gt;&lt;span class="s"&gt;"@id/editText1"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_centerHorizontal=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:ems=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:hint=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:inputType=&lt;/span&gt;&lt;span class="s"&gt;"textPassword"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/button1"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_alignParentRight=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_below=&lt;/span&gt;&lt;span class="s"&gt;"@+id/editText2"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"login"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/button2"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_below=&lt;/span&gt;&lt;span class="s"&gt;"@+id/editText2"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:layout_toLeftOf=&lt;/span&gt;&lt;span class="s"&gt;"@+id/button1"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"cancel"&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;](file:///%3E)&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="nt"&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="s01e16-timepickerdatepicker"&gt;S01E16: 时间和日期 TimePicker/DatePicker&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;timepicker&gt;&lt;/timepicker&gt; &lt;datepicker&gt;&lt;/datepicker&gt;标签&lt;/li&gt;
&lt;li&gt;文档: android.widget.TimePicker/android.widget.DatePicker&lt;/li&gt;
&lt;li&gt;OnTimeChangedListener的onTimeChanged函数: public void onTimeChanged(TimePicker view, int hourOfDay, int minute) 仨参数&lt;/li&gt;
&lt;li&gt;getCurrentHour(); getCurrentMinute(); getMonth(); getDayOfMonth()等函数, 同理有set函数......&lt;/li&gt;
&lt;li&gt;注意月份是从零算起!!&lt;/li&gt;
&lt;li&gt;setIs24HourView() 切换24小时显示&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e17-progressbar"&gt;S01E17: 进度条ProgressBar&lt;/h1&gt;
&lt;h4 id="_12"&gt;各种进度条&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image015.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image016.png"/&gt;&lt;/p&gt;
&lt;h4 id="_13"&gt;进度条的属性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;风格Style: 转圈圈: 垂直风格(默认); 一条线的进度条: Horizontal&lt;/li&gt;
&lt;li&gt;最大值: max&lt;/li&gt;
&lt;li&gt;当前进度:progress&lt;/li&gt;
&lt;li&gt;次要进度的值:SecondaryProgress (ex.次要进度: 解压缩文件时, 在线看视频时...)&lt;/li&gt;
&lt;li&gt;isIndeterminate()断进度条时不时不明确的(打酱油的, 比如转圈圈), 同理有set方法, 不过只能对水平风格适用.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="s01e18-seekbarratingbar"&gt;S01E18: SeekBar和RatingBar&lt;/h1&gt;
&lt;h4 id="seekbar"&gt;SeekBar&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image017.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性: max/progress/&lt;/li&gt;
&lt;li&gt;监听器接口OnSeekBarChangeListener有三个函数要重写: &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;class&lt;/span&gt; &lt;span class="nt"&gt;SeekBarListener&lt;/span&gt; &lt;span class="nt"&gt;implements&lt;/span&gt; &lt;span class="nt"&gt;OnSeekBarChangeListener&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;* seekBar 该对象指的是触发了监听器的SeekBar对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;* progress 指的是当前SeekBar的进度&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;* fromUser 指是不是用户手动改变的进度&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt; */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onProgressChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SeekBar&lt;/span&gt; &lt;span class="n"&gt;SeekBar&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;fromUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"progress:"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;progress&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;",fromUser:"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fromUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;public&lt;/span&gt; &lt;span class="nt"&gt;void&lt;/span&gt; &lt;span class="nt"&gt;onStartTrackingTouch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;SeekBar&lt;/span&gt; &lt;span class="nt"&gt;seekBar&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;System&lt;/span&gt;&lt;span class="nc"&gt;.out.println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"onStart"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;public&lt;/span&gt; &lt;span class="nt"&gt;void&lt;/span&gt; &lt;span class="nt"&gt;onStopTrackingTouch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;SeekBar&lt;/span&gt; &lt;span class="nt"&gt;seekBar&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;System&lt;/span&gt;&lt;span class="nc"&gt;.out.println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"onStop"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="ratingbar"&gt;RatingBar&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="../images/./android开发教程第一季笔记/pasted_image018.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性: numStars(星星个数), progress, stepSize(步进)&lt;/li&gt;
&lt;li&gt;监听器代码:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;class&lt;/span&gt; &lt;span class="nt"&gt;RatingBarListener&lt;/span&gt; &lt;span class="nt"&gt;implements&lt;/span&gt; &lt;span class="nt"&gt;OnRatingBarChangeListener&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onRatingChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RatingBar&lt;/span&gt; &lt;span class="n"&gt;ratingBar&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;rating&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;fromUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"rating:"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rating&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;",fromUser:"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fromUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="android"></category></entry></feed>